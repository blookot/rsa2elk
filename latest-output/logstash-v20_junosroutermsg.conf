# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "junosrouter"
			"[observer][name]" => "Juniper JUNOS"
			"[observer][type]" => "Router"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <month> <day> <time> <messageid>: restart <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+restart[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <month> <day> <time> <messageid> message repeated <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+message[\s]+repeated[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <month> <day> <time> ssb <messageid>(<hfld1>): <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+ssb[\s]+(?<message>(?<messageid>[^\(]*)\((?<hfld1>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <month> <day> <time> { fpc0 | fpc1 | fpc2 | fpc3 | fpc4 | fpc5 | fpc6 | fpc7 | fpc8 | fpc9 | cfeb | ssb } <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+([\s]*fpc0[\s]+|[\s]*fpc1[\s]+|[\s]*fpc2[\s]+|[\s]*fpc3[\s]+|[\s]*fpc4[\s]+|[\s]*fpc5[\s]+|[\s]*fpc6[\s]+|[\s]*fpc7[\s]+|[\s]*fpc8[\s]+|[\s]*fpc9[\s]+|[\s]*cfeb[\s]+|[\s]*ssb[\s]+)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <month> <day> <time> { fpc0 | fpc1 | fpc2 | fpc3 | fpc4 | fpc5 | ssb } <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+([\s]*fpc0[\s]+|[\s]*fpc1[\s]+|[\s]*fpc2[\s]+|[\s]*fpc3[\s]+|[\s]*fpc4[\s]+|[\s]*fpc5[\s]+|[\s]*ssb[\s]+)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <month> <day> <time> <hfld1> <hhost>: <hfld2>[<hpid>]: <messageid>: <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<hfld2>[^\[]*)\[(?<hpid>[^\]]*)\]:[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <month> <day> <time> <hfld1> <hhost>: <messageid>[<hpid>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hpid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <month> <day> <time> <hfld1> <hhost>: <hfld2> IFP trace> <messageid>: <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+IFP[\s]+trace>[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <month> <day> <time> <hfld1> <hhost>: <hfld2> <messageid>: <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0029
	# line in RSA: <month> <day> <time> <hostip> <hfld1>[<pid>]: <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hostip>[^\s]*)[\s]+(?<message>(?<hfld1>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0029"
			add_field => {
				"[rsa][header][id]" => "0029"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0015
	# line in RSA: <month> <day> <time> <hfld1>[<pid>]: <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0015"
			add_field => {
				"[rsa][header][id]" => "0015"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <month> <day> <time> <hfld2> <messageid>: <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0027
	# line in RSA: <month> <day> <time> <hhostname> RT_FLOW: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+RT_FLOW:[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0027"
			add_field => {
				"[rsa][header][id]" => "0027"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: <month> <day> <time> <hfld1> <hhost>: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0013
	# line in RSA: <month> <day> <time> <hfld1> <hfld32> <hhostname> RT_FLOW - <messageid> [  <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hfld32>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+RT_FLOW[\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+\[[\s]+(?<payload>.*))$" }
			id => "header-0013"
			add_field => {
				"[rsa][header][id]" => "0013"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0026
	# line in RSA: <hfld1> <hfld32> <hhostname> {RT_FLOW | junos-ssl-proxy | RT_APPQOS | <hfld33>} - <messageid> [  <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld32>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(RT_FLOW[\s]+|[\s]*junos\-ssl\-proxy[\s]+|[\s]*RT_APPQOS[\s]+|[\s]*(?<hfld33>[^\s]*))[\s]+\-[\s]+(?<message>(?<messageid>[^\s]*)[\s]+\[[\s]+(?<payload>.*))$" }
			id => "header-0026"
			add_field => {
				"[rsa][header][id]" => "0026"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0014
	# line in RSA: <month> <day> <time> <hfld1>[<pid>]: <messageid>[<hpid>]: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<messageid>[^\[]*)\[(?<hpid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0016
	# line in RSA: <month> <day> <time> <hfld1>: <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^:]*):[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0016"
			add_field => {
				"[rsa][header][id]" => "0016"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0017
	# line in RSA: <month> <day> <time> <hfld1>[<pid>]: <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0017"
			add_field => {
				"[rsa][header][id]" => "0017"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0018
	# line in RSA: <month> <day> <time> <hhost>: <messageid>[<pid>]:  <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0018"
			add_field => {
				"[rsa][header][id]" => "0018"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0028
	# line in RSA: <month> <day> <time> <hhost> <messageid>[<pid>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0028"
			add_field => {
				"[rsa][header][id]" => "0028"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0019
	# line in RSA: <month> <day> <time> <hhost>: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0019"
			add_field => {
				"[rsa][header][id]" => "0019"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0020
	# line in RSA: <month> <day> <time> <messageid>[<pid>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0020"
			add_field => {
				"[rsa][header][id]" => "0020"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0021
	# line in RSA: <month> <day> <time> /<messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+/(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0021"
			add_field => {
				"[rsa][header][id]" => "0021"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0022
	# line in RSA: <month> <day> <time> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0022"
			add_field => {
				"[rsa][header][id]" => "0022"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0023
	# line in RSA: <month> <day> <time> <hfld1> <hhostname>: <messageid>[<pid>]:  <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^:]*):[\s]+(?<message>(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0023"
			add_field => {
				"[rsa][header][id]" => "0023"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0024
	# line in RSA: <month> <day> <time> <hfld1> <hhostname>: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^:]*):[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0024"
			add_field => {
				"[rsa][header][id]" => "0024"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0025
	# line in RSA: <month> <day> <time> <hfld1> <hhostname>: <hfld2> <messageid> <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^:]*):[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0025"
			add_field => {
				"[rsa][header][id]" => "0025"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0031
	# line in RSA: <month> <day> <time> <hfld1> <hhostname>: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^:]*):[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0031"
			add_field => {
				"[rsa][header][id]" => "0031"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0032
	# line in RSA: <month> <day> <time> <hostip> (<hfld1>) <hfld2> <messageid>[<pid>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hostip>[^\s]*)[\s]+\((?<hfld1>[^\)]*)\)[\s]+(?<hfld2>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<pid>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0032"
			add_field => {
				"[rsa][header][id]" => "0032"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0033
	# line in RSA: <month> <day> <time> <hfld1> <hhostname> <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0033"
			add_field => {
				"[rsa][header][id]" => "0033"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3336
	# line in RSA: <month> <day> <time> <hhost> <process>[<process_id>]: <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hhost} %{process}[%{process_id}]: %{messageid}: %{message}" }
			id => "header-3336"
			add_field => {
				"[rsa][header][id]" => "3336"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3339
	# line in RSA: <month> <day> <time> <hhost> <process>[<process_id>]: <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hhost} %{process}[%{process_id}]: %{messageid} %{message}" }
			id => "header-3339"
			add_field => {
				"[rsa][header][id]" => "3339"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3337
	# line in RSA: <month> <day> <time> <hhost> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hhost} %{messageid}: %{message}" }
			id => "header-3337"
			add_field => {
				"[rsa][header][id]" => "3337"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3341
	# line in RSA: <hfld1> <hfld6> <hhostname> <hfld2> <hfld3> <messageid> <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+(?<hfld6>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-3341"
			add_field => {
				"[rsa][header][id]" => "3341"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3338
	# line in RSA: <month> <day> <time> <hhost> <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{hhost} %{messageid} %{message}" }
			id => "header-3338"
			add_field => {
				"[rsa][header][id]" => "3338"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3340
	# line in RSA: <month> <day> <time> <hhost> { node<hfld1>.fpc<hfld2>.pic<hfld3> | node<hfld1>.fpc<hfld2> } <!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hhost>[^\s]*)[\s]+([\s]*node(?<hfld1>[^\.]*)\.fpc(?<hfld2>[^\.]*)\.pic(?<hfld3>[^\s]*)[\s]+|[\s]*node(?<hfld1>[^\.]*)\.fpc(?<hfld2>[^\s]*)[\s]+)[\s]+(?<payload>.*))$" }
			id => "header-3340"
			add_field => {
				"[rsa][header][id]" => "3340"
				"[rsa][message][id2]" => "node"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9997
	# line in RSA: {mgd[|rpd[|dcd[}<process_id>]:<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(mgd\[|rpd\[|dcd\[)(?<process_id>[^\]]*)\]:(?<message>.*)$" }
			id => "header-9997"
			add_field => {
				"[rsa][header][id]" => "9997"
				"[rsa][message][id2]" => "JUNOSROUTER_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9995
	# line in RSA: <month> <day> <time> <hhost> <hfld1> <hfld2> <messageid>[<hfld3>]:<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hfld3>[^\]]*)\]:(?<payload>.*))$" }
			id => "header-9995"
			add_field => {
				"[rsa][header][id]" => "9995"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9994
	# line in RSA: <month> <day> <time> <hfld2> <hfld1> qsfp <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+qsfp[\s]+(?<payload>.*))$" }
			id => "header-9994"
			add_field => {
				"[rsa][header][id]" => "9994"
				"[rsa][message][id2]" => "qsfp"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: <month> <day> <time> <hhost> <process>[<process_id>]: <hevent_type>: <!payload:hevent_type>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hhost>[^\s]*)[\s]+(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<message>(?<hevent_type>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "JUNOSROUTER_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9998
	# line in RSA: <month> <day> <time> <hfld2> <process>: <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+(?<process>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-9998"
			add_field => {
				"[rsa][header][id]" => "9998"
				"[rsa][message][id2]" => "JUNOSROUTER_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_junosroutermsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  <process>[<process_id>]: <agent>[<id>]: exit status <result>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{agent}[%{id}]: exit status %{result}" }
			id => "msgParserId0"
			add_field => {
				"event_description" => "sshd exit status"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:  <process>[<process_id>]: <agent>[<id>]: exit status <result>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{agent}[%{id}]: exit status %{result}" }
			id => "msgParserId1"
			add_field => {
				"event_description" => "telnetd exit status"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:  <process>[<process_id>]: <event_type>: License color=<severity>, class=<device>, reason=<result>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: License color=%{severity}, class=%{device}, reason=%{result}" }
			id => "msgParserId2"
			add_field => {
				"event_description" => "Alarm Set or Cleared"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "bigd" {
		# MESSAGE bigd
		# line in RSA:   <process>: Node detected UP for <node>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: Node detected UP for %{node}" }
				id => "message-bigd"
				add_field => {
				"event_description" => "Node detected UP"
					"[event][id]" => "bigd"
					"[rsa][message][id1]" => "bigd"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE bigd:01
		# line in RSA:  <process>: Monitor template id is <id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: Monitor template id is %{id}" }
				id => "message-bigd:01"
				add_field => {
				"event_description" => "Monitor template id"
					"[event][id]" => "bigd:01"
					"[rsa][message][id1]" => "bigd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "bigpipe" {
		# MESSAGE bigpipe
		# line in RSA:   <process>: Loading the configuration file <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: Loading the configuration file %{filename}" }
				id => "message-bigpipe"
				add_field => {
				"event_description" => "Loading configuration file"
					"[event][id]" => "bigpipe"
					"[rsa][message][id1]" => "bigpipe"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE bigpipe:01
		# line in RSA:  <process>: Begin config install operation <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: Begin config install operation %{action}" }
				id => "message-bigpipe:01"
				add_field => {
				"event_description" => "Begin config install operation"
					"[event][id]" => "bigpipe:01"
					"[rsa][message][id1]" => "bigpipe:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE bigpipe:02
		# line in RSA:  <process>: AUDIT -- Action <action> User: <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: AUDIT -- Action %{action} User: %{username}" }
				id => "message-bigpipe:02"
				add_field => {
				"event_description" => "Audit"
					"[event][id]" => "bigpipe:02"
					"[rsa][message][id1]" => "bigpipe:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:  <process>: shutdown <service>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{process}: shutdown %{service}" }
			id => "msgParserId8"
			add_field => {
				"event_description" => "portal shutdown"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA:  <process>: <event_type>: generated address is <result>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{process}: %{event_type}: generated address is %{result}" }
			id => "msgParserId9"
			add_field => {
				"event_description" => "cga address genration"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <process>[<process_id>]:<fld12>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]:%{fld12}" }
			id => "msgParserId10"
			add_field => {
				"hostname" => "%{hhost}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "checkd" {
		# MESSAGE checkd
		# line in RSA:  <process>: AUDIT -- Action <action> User: <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: AUDIT -- Action %{action} User: %{username}" }
				id => "message-checkd"
				add_field => {
				"event_description" => "AUDIT"
					"[event][id]" => "checkd"
					"[rsa][message][id1]" => "checkd"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE checkd:01
		# line in RSA:  <process>: exiting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: exiting" }
				id => "message-checkd:01"
				add_field => {
				"event_description" => "checkd exiting"
					"[event][id]" => "checkd:01"
					"[rsa][message][id1]" => "checkd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA:  <process>[<process_id>]: link protection <dclass_counter1> for intf <interface>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: link protection %{dclass_counter1} for intf %{interface}" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "link protection for interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA:  <process>[<process_id>]: <event_type>, <result>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}, %{result}" }
			id => "msgParserId14"
			add_field => {
				"event_description" => "License expiration warning"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA:   <process>[<process_id>]: (<username>) { CMD (<result>) | cmd='<result>' }
	else if [logstash][msgparser][id] == "msgParserId15" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\((?<username>[^\)]*)\)[\s]+([\s]*CMD[\s]+\((?<result>[^\)]*)\)[\s]+|[\s]*cmd='(?<result>[^']*)'[\s]+)$" }
			id => "msgParserId15"
			add_field => {
				"event_description" => "CRON command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: {<hostname><node>Cmerror: Level<level>count increment <dclass_counter1><fld1>|<fld2>}
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# PARSER msgParserId17
	# line in RSA:   <process>[<process_id>]: (<username>) <action> (<filename>)
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: (%{username}) %{action} (%{filename})" }
			id => "msgParserId17"
			add_field => {
				"event_description" => "cron RELOAD"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "CROND" {
		# MESSAGE CROND
		# line in RSA: <process>[<process_id>]: (<username>) CMD (<action>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: (%{username}) CMD (%{action})" }
				id => "message-CROND"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "CROND"
					"[rsa][message][id1]" => "CROND"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE CROND:02
		# line in RSA: <process>[<process_id>]: pam_unix(crond:session): session closed for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: pam_unix(crond:session): session closed for user %{username}" }
				id => "message-CROND:02"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "CROND:02"
					"[rsa][message][id1]" => "CROND:02"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA: <process>[<process_id>]: pam_unix(crond:session): session opened for user <username> by (uid=<uid>)
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: pam_unix(crond:session): session opened for user %{username} by (uid=%{uid})" }
			id => "msgParserId19"
			add_field => {
				"hostname" => "%{hhost}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA:  <process>[<process_id>]: <result> Setting ignored,  <info>
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{result} Setting ignored,  %{info}" }
			id => "msgParserId21"
			add_field => {
				"event_description" => "Setting ignored"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA:  <process>[<process_id>]: EVENT <event_type> <interface> index <resultcode> { <saddr> -> <daddr> <<<result>> | <<<result>> }
	else if [logstash][msgparser][id] == "msgParserId22" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+EVENT[\s]+(?<event_type>[^\s]*)[\s]+(?<interface>[^\s]*)[\s]+index[\s]+(?<resultcode>[^\s]*)[\s]+([\s]*(?<saddr>[^\s]*)[\s]+\->[\s]+(?<daddr>[^\s]*)[\s]+<(?<result>[^>]*)>[\s]+|[\s]*<(?<result>[^>]*)>[\s]+)$" }
			id => "msgParserId22"
			add_field => {
				"event_description" => "EVENT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA:  <process>[<process_id>]: connection from <saddr> (<shost>)
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: connection from %{saddr} (%{shost})" }
			id => "msgParserId23"
			add_field => {
				"event_description" => "ftpd connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <hostname><node>ha_rto_stats_handler:<fld12>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{hostname}%{node}ha_rto_stats_handler:%{fld12}" }
			id => "msgParserId24"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA:  <process>: <obj_name> -- LDAP Connection not bound correctly. <info>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "%{process}: %{obj_name} -- LDAP Connection not bound correctly. %{info}" }
			id => "msgParserId25"
			add_field => {
				"event_description" => "LDAP Connection not bound correctly"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "ifinfo" {
		# MESSAGE ifinfo
		# line in RSA:  <process>: <service>: PIC_INFO debug> Added entry - <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{service}: PIC_INFO debug> Added entry - %{info}" }
				id => "message-ifinfo"
				add_field => {
				"event_description" => "PIC_INFO debug - Added entry"
					"[event][id]" => "ifinfo"
					"[rsa][message][id1]" => "ifinfo"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE ifinfo:01
		# line in RSA:  <process>: <service>: PIC_INFO debug> Initializing spu listtype <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{service}: PIC_INFO debug> Initializing spu listtype %{resultcode}" }
				id => "message-ifinfo:01"
				add_field => {
				"event_description" => "PIC_INFO debug Initializing spu"
					"[event][id]" => "ifinfo:01"
					"[rsa][message][id1]" => "ifinfo:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE ifinfo:02
		# line in RSA:  <process>: <service>: PIC_INFO debug> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{service}: PIC_INFO debug> %{info}" }
				id => "message-ifinfo:02"
				add_field => {
				"event_description" => "PIC_INFO debug delete from list"
					"[event][id]" => "ifinfo:02"
					"[rsa][message][id1]" => "ifinfo:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId29
	# line in RSA:  <node> <action>> <process>: IFL anydown change event: "<event_type>"
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "%{node} %{action}> %{process}: IFL anydown change event: \"%{event_type}\"" }
			id => "msgParserId29"
			add_field => {
				"event_description" => "IFL anydown change event"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA:  <node> <action>> <process>: IFL config: "<filename>"
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "%{node} %{action}> %{process}: IFL config: \"%{filename}\"" }
			id => "msgParserId30"
			add_field => {
				"event_description" => "ifp ifl config_event"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA:  <node> <process>: ifp ext piid <parent_pid> zone_id <zone>
	else if [logstash][msgparser][id] == "msgParserId31" {
		dissect {
			mapping => { "message" => "%{node} %{process}: ifp ext piid %{parent_pid} zone_id %{zone}" }
			id => "msgParserId31"
			add_field => {
				"event_description" => "ifp_ifl_ext_chg"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "inetd" {
		# MESSAGE inetd
		# line in RSA:  <process>[<process_id>]: <protocol> from <saddr> exceeded counts/min (<result>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{protocol} from %{saddr} exceeded counts/min (%{result})" }
				id => "message-inetd"
				add_field => {
				"event_description" => "connection exceeded count limit"
					"[event][id]" => "inetd"
					"[rsa][message][id1]" => "inetd"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE inetd:01
		# line in RSA:  <process>[<process_id>]: <agent>[<id>]: exited, status <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{agent}[%{id}]: exited, status %{result}" }
				id => "message-inetd:01"
				add_field => {
				"event_description" => "exited"
					"[event][id]" => "inetd:01"
					"[rsa][message][id1]" => "inetd:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "init" {
		# MESSAGE init:04
		# line in RSA:  <process>: <event_type> current_mode=<protocol>, requested_mode=<result>, cmd=<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{event_type} current_mode=%{protocol}, requested_mode=%{result}, cmd=%{action}" }
				id => "message-init:04"
				add_field => {
				"event_description" => "Process mode"
					"[event][id]" => "init:04"
					"[rsa][message][id1]" => "init:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE init
		# line in RSA:   <process>: <event_type> mode=<protocol> cmd=<action> master_mode=<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{event_type} mode=%{protocol} cmd=%{action} master_mode=%{result}" }
				id => "message-init"
				add_field => {
				"event_description" => "Process mode"
					"[event][id]" => "init"
					"[rsa][message][id1]" => "init"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE init:01
		# line in RSA:  <process>: failure target for routing set to <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: failure target for routing set to %{result}" }
				id => "message-init:01"
				add_field => {
				"event_description" => "failure target for routing set"
					"[event][id]" => "init:01"
					"[rsa][message][id1]" => "init:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE init:02
		# line in RSA:  <process>: ntp (PID <child_pid>) started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: ntp (PID %{child_pid}) started" }
				id => "message-init:02"
				add_field => {
				"event_description" => "ntp started"
					"[event][id]" => "init:02"
					"[rsa][message][id1]" => "init:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE init:03
		# line in RSA:  <process>: product mask <info> model <dclass_counter1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: product mask %{info} model %{dclass_counter1}" }
				id => "message-init:03"
				add_field => {
				"event_description" => "product mask and model info"
					"[event][id]" => "init:03"
					"[rsa][message][id1]" => "init:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA:  <node> <process>: IPC message type: <event_type>, subtype: <resultcode> exceeds MTU, mtu <dclass_counter1>, length <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "%{node} %{process}: IPC message type: %{event_type}, subtype: %{resultcode} exceeds MTU, mtu %{dclass_counter1}, length %{dclass_counter2}" }
			id => "msgParserId39"
			add_field => {
				"event_description" => "IPC message exceeds MTU"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "kernel" {
		# MESSAGE connection_established
		# line in RSA:  <process>:  <service>: conn established: listener idx=<dclass_counter1> tnpaddr=<dclass_counter2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}:  %{service}: conn established: listener idx=%{dclass_counter1} tnpaddr=%{dclass_counter2}" }
				id => "message-connection_established"
				add_field => {
				"event_description" => "listener connection established"
					"[event][id]" => "connection_established"
					"[rsa][message][id1]" => "connection_established"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE connection_dropped
		# line in RSA:   <process>: { <result>, connection dropped - src <saddr>:<sport> dest <daddr>:<dport> | <result>: conn dropped: listener idx=<dclass_counter1> tnpaddr=<dclass_counter2> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+([\s]*(?<result>[^,]*),[\s]+connection[\s]+dropped[\s]+\-[\s]+src[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+dest[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+|[\s]*(?<result>[^:]*):[\s]+conn[\s]+dropped:[\s]+listener[\s]+idx=(?<dclass_counter1>[^\s]*)[\s]+tnpaddr=(?<dclass_counter2>[^\s]*)[\s]+)$" }
				id => "message-connection_dropped"
				add_field => {
				"event_description" => "connection dropped"
					"[event][id]" => "connection_dropped"
					"[rsa][message][id1]" => "connection_dropped"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE kernel
		# line in RSA:  <process>: <interface>: Asserting SONET alarm(s) <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{interface}: Asserting SONET alarm(s) %{info}" }
				id => "message-kernel"
				add_field => {
				"event_description" => "Asserting SONET alarm(s)"
					"[event][id]" => "kernel"
					"[rsa][message][id1]" => "kernel"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE kernel:01
		# line in RSA:   <process>: <interface> down: <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{interface} down: %{result}." }
				id => "message-kernel:01"
				add_field => {
				"event_description" => "interface down"
					"[event][id]" => "kernel:01"
					"[rsa][message][id1]" => "kernel:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE kernel:02
		# line in RSA:  <process>: <interface>: loopback suspected; <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{interface}: loopback suspected; %{result}" }
				id => "message-kernel:02"
				add_field => {
				"event_description" => "loopback suspected om interface"
					"[event][id]" => "kernel:02"
					"[rsa][message][id1]" => "kernel:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE kernel:03
		# line in RSA:  <process>: <service>: soreceive() error <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{service}: soreceive() error %{resultcode}" }
				id => "message-kernel:03"
				add_field => {
				"event_description" => "soreceive error"
					"[event][id]" => "kernel:03"
					"[rsa][message][id1]" => "kernel:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE kernel:04
		# line in RSA:  <process>: <service> !VALID(state 4)-><result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{service} !VALID(state 4)->%{result}" }
				id => "message-kernel:04"
				add_field => {
				"event_description" => "pfe_peer_alloc state 4"
					"[event][id]" => "kernel:04"
					"[rsa][message][id1]" => "kernel:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE kernel:05
		# line in RSA: <fld1> <hostip> (<fld2>) <fld3> <process>[<process_id>]: NTP Server <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{hostip} (%{fld2}) %{fld3} %{process}[%{process_id}]: NTP Server %{result}" }
				id => "message-kernel:05"
				add_field => {
				"event_description" => "NTP Server Unreachable"
					"[event][id]" => "kernel:05"
					"[rsa][message][id1]" => "kernel:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE kernel:06
		# line in RSA: <fld1> <hostip> <process>[<process_id>]: NTP Server <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{hostip} %{process}[%{process_id}]: NTP Server %{result}" }
				id => "message-kernel:06"
				add_field => {
				"event_description" => "NTP Server Unreachable"
					"[event][id]" => "kernel:06"
					"[rsa][message][id1]" => "kernel:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "login" {
		# MESSAGE successful_login
		# line in RSA:   <process>: login from <saddr> on <interface> as <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: login from %{saddr} on %{interface} as %{username}" }
				id => "message-successful_login"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "successful user login"
					"[event][id]" => "successful_login"
					"[rsa][message][id1]" => "successful_login"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE login_attempt
		# line in RSA:   <process>: Login attempt for user <username> from host <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: Login attempt for user %{username} from host %{hostip}" }
				id => "message-login_attempt"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"event_description" => "user login attempt"
					"[event][id]" => "login_attempt"
					"[rsa][message][id1]" => "login_attempt"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE login
		# line in RSA:   <process>: PAM module <dclass_counter1> returned: <space>[<resultcode>]<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: PAM module %{dclass_counter1} returned: %{space}[%{resultcode}]%{result}" }
				id => "message-login"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "PAM module return from login"
					"[event][id]" => "login"
					"[rsa][message][id1]" => "login"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA:  <node> <process>: processing lsys root-logical-system <info>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "%{node} %{process}: processing lsys root-logical-system %{info}" }
			id => "msgParserId52"
			add_field => {
				"event_description" => "processing lsys root-logical-system"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId53
	# line in RSA:   <process>[<process_id>]: Removing mif  from group [<group>] <space> <result>
	else if [logstash][msgparser][id] == "msgParserId53" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: Removing mif  from group [%{group}] %{space} %{result}" }
			id => "msgParserId53"
			add_field => {
				"event_description" => "Removing mif  from group"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId54
	# line in RSA:  <process>: Firewall rows could not be redirected on device <device>.
	else if [logstash][msgparser][id] == "msgParserId54" {
		dissect {
			mapping => { "message" => "%{process}: Firewall rows could not be redirected on device %{device}." }
			id => "msgParserId54"
			add_field => {
				"event_description" => "Firewall rows could not be redirected on device"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId55
	# line in RSA:  <process>:<action>(),<process_id>:MFilter (<filter>) already exists
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "%{process}:%{action}(),%{process_id}:MFilter (%{filter}) already exists" }
			id => "msgParserId55"
			add_field => {
				"event_description" => "mfilter already exists for add"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId56
	# line in RSA:  <node> <process>: processing profile SP-root <info>
	else if [logstash][msgparser][id] == "msgParserId56" {
		dissect {
			mapping => { "message" => "%{node} %{process}: processing profile SP-root %{info}" }
			id => "msgParserId56"
			add_field => {
				"event_description" => "processing profile SP-root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId57
	# line in RSA:  <node> <process>: <event_source>: can't get resource bucket <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId57" {
		dissect {
			mapping => { "message" => "%{node} %{process}: %{event_source}: can't get resource bucket %{dclass_counter1}" }
			id => "msgParserId57"
			add_field => {
				"event_description" => "can't get resource bucket"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId58
	# line in RSA:  <process>[<process_id>]: task_reconfigure <action>
	else if [logstash][msgparser][id] == "msgParserId58" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: task_reconfigure %{action}" }
			id => "msgParserId58"
			add_field => {
				"event_description" => "reinitializing done"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId59
	# line in RSA: {<process>[<process_id>]:<service>[<fld1>]: exit status<resultcode> |<fld3>}
	else if [logstash][msgparser][id] == "msgParserId59" {
		grok {
			match => { "message" => "^((?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:(?<service>[^\[]*)\[(?<fld1>[^\]]*)\]:[\s]+exit[\s]+status(?<resultcode>[^\s]*)[\s]+|(?<fld3>.*))$" }
			id => "msgParserId59"
			add_field => {
				"hostname" => "%{hhost}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId60
	# line in RSA:  <process>: Session manager active
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "%{process}: Session manager active" }
			id => "msgParserId60"
			add_field => {
				"event_description" => "Session manager active"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId61
	# line in RSA:  <process>[<process_id>]: Could not send message to <service>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: Could not send message to %{service}" }
			id => "msgParserId61"
			add_field => {
				"event_description" => "Could not send message to service"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId62
	# line in RSA:  Resolve request came for an address matching on Wrong nh nh:<result>, <info>
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "Resolve request came for an address matching on Wrong nh nh:%{result}, %{info}" }
			id => "msgParserId62"
			add_field => {
				"event_description" => "Resolve request came for an address matching on Wrong nh"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId63
	# line in RSA:  <process>: <service> exited with status = <resultcode>
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "%{process}: %{service} exited with status = %{resultcode}" }
			id => "msgParserId63"
			add_field => {
				"event_description" => "service exited with status"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId64
	# line in RSA:  <process>: <node>: This system does not have 3-DNS or Link Controller enabled
	else if [logstash][msgparser][id] == "msgParserId64" {
		dissect {
			mapping => { "message" => "%{process}: %{node}: This system does not have 3-DNS or Link Controller enabled" }
			id => "msgParserId64"
			add_field => {
				"event_description" => "system does not have 3-DNS or Link Controller enabled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "rpd" {
		# MESSAGE rpd
		# line in RSA:  <process>[<process_id>]: Received <result> for intf device <interface>; mc_ae_id <dclass_counter1>, status <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Received %{result} for intf device %{interface}; mc_ae_id %{dclass_counter1}, status %{resultcode}" }
				id => "message-rpd"
				add_field => {
				"event_description" => "Received data for interface"
					"[event][id]" => "rpd"
					"[rsa][message][id1]" => "rpd"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE rpd:01
		# line in RSA:  <process>[<process_id>]: RSVP neighbor <daddr> up on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: RSVP neighbor %{daddr} up on interface %{interface}" }
				id => "message-rpd:01"
				add_field => {
				"event_description" => "RSVP neighbor up on interface "
					"[event][id]" => "rpd:01"
					"[rsa][message][id1]" => "rpd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE rpd:02
		# line in RSA:  <process>[<process_id>]: <saddr> (<shost>): reseting pending active connection
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{saddr} (%{shost}): reseting pending active connection" }
				id => "message-rpd:02"
				add_field => {
				"event_description" => "reseting pending active connection"
					"[event][id]" => "rpd:02"
					"[rsa][message][id1]" => "rpd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE rpd_proceeding
		# line in RSA:  <process>: proceeding. <param>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: proceeding. %{param}" }
				id => "message-rpd_proceeding"
				add_field => {
				"event_description" => "rpd proceeding"
					"[event][id]" => "rpd_proceeding"
					"[rsa][message][id1]" => "rpd_proceeding"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId69
	# line in RSA:  <process>[<process_id>]: <username> as root: cmd='<action>' 
	else if [logstash][msgparser][id] == "msgParserId69" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{username} as root: cmd='%{action}'" }
			id => "msgParserId69"
			add_field => {
				"event_description" => "user issuing command as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId70
	# line in RSA:  <process>: Waiting on accept
	else if [logstash][msgparser][id] == "msgParserId70" {
		dissect {
			mapping => { "message" => "%{process}: Waiting on accept" }
			id => "msgParserId70"
			add_field => {
				"event_description" => "sfd waiting on accept"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "sshd" {
		# MESSAGE sshd
		# line in RSA:  <process>[<process_id>]: Accepted password for <username> from <saddr> port <sport> <protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Accepted password for %{username} from %{saddr} port %{sport} %{protocol}" }
				id => "message-sshd"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Accepted password"
					"[event][id]" => "sshd"
					"[rsa][message][id1]" => "sshd"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:02
		# line in RSA:  <process>[<process_id>]: Received disconnect from <shost>: <fld1>: <result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Received disconnect from %{shost}: %{fld1}: %{result}" }
				id => "message-sshd:02"
				add_field => {
				"event_description" => "Received disconnect"
					"[event][id]" => "sshd:02"
					"[rsa][message][id1]" => "sshd:02"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:03
		# line in RSA:  <process>[<process_id>]: Did not receive identification string from <saddr> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Did not receive identification string from %{saddr}" }
				id => "message-sshd:03"
				add_field => {
				"result" => "no identification string"
				"event_description" => "Did not receive identification string from peer"
					"[event][id]" => "sshd:03"
					"[rsa][message][id1]" => "sshd:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:04
		# line in RSA:  <process>[<process_id>]: Could not write ident string to <dhost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Could not write ident string to %{dhost}" }
				id => "message-sshd:04"
				add_field => {
				"event_description" => "Could not write ident string"
					"[event][id]" => "sshd:04"
					"[rsa][message][id1]" => "sshd:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:05
		# line in RSA:  <process>[<process_id>]: subsystem request for netconf
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: subsystem request for netconf" }
				id => "message-sshd:05"
				add_field => {
				"event_description" => "subsystem request for netconf"
					"[event][id]" => "sshd:05"
					"[rsa][message][id1]" => "sshd:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:06
		# line in RSA:  { <process>[<process_id>]: | <process>: } sendmsg to <saddr>(<shost>).<sport>: <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<process>[^:]*):[\s]+)[\s]+sendmsg[\s]+to[\s]+(?<saddr>[^\(]*)\((?<shost>[^\)]*)\)\.(?<sport>[^:]*):[\s]+(?<info>.*)$" }
				id => "message-sshd:06"
				add_field => {
				"event_description" => "send message stats"
					"[event][id]" => "sshd:06"
					"[rsa][message][id1]" => "sshd:06"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:07
		# line in RSA:  { <process>[<process_id>]: | <process>: } Added radius server <saddr>(<shost>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<process>[^:]*):[\s]+)[\s]+Added[\s]+radius[\s]+server[\s]+(?<saddr>[^\(]*)\((?<shost>[^\)]*)\)$" }
				id => "message-sshd:07"
				add_field => {
				"ec_theme" => "Configuration"
				"ec_activity" => "Modify"
				"ec_outcome" => "Success"
				"event_description" => "Added radius server"
					"[event][id]" => "sshd:07"
					"[rsa][message][id1]" => "sshd:07"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:08
		# line in RSA:  <process>[<process_id>]: <result>: <space> [<resultcode>]authentication error
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{result}: %{space} [%{resultcode}]authentication error" }
				id => "message-sshd:08"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "authentication error"
					"[event][id]" => "sshd:08"
					"[rsa][message][id1]" => "sshd:08"
					"[event][categoryid]" => "1301020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:09
		# line in RSA:  <process>[<process_id>]: unrecognized attribute in <policyname>: <change_attribute> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: unrecognized attribute in %{policyname}: %{change_attribute}" }
				id => "message-sshd:09"
				add_field => {
				"event_description" => "unrecognized attribute in policy"
					"[event][id]" => "sshd:09"
					"[rsa][message][id1]" => "sshd:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:10
		# line in RSA:   <process>: PAM module <dclass_counter1> returned: <space>[<resultcode>]<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: PAM module %{dclass_counter1} returned: %{space}[%{resultcode}]%{result}" }
				id => "message-sshd:10"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "PAM module return from sshd"
					"[event][id]" => "sshd:10"
					"[rsa][message][id1]" => "sshd:10"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:11
		# line in RSA:   <process>: PAM authentication chain returned: <space>[<resultcode>]<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: PAM authentication chain returned: %{space}[%{resultcode}]%{result}" }
				id => "message-sshd:11"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "PAM authentication chain return"
					"[event][id]" => "sshd:11"
					"[rsa][message][id1]" => "sshd:11"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:12
		# line in RSA:  <process>: <severity>: can't get client address: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{severity}: can't get client address: %{result}" }
				id => "message-sshd:12"
				add_field => {
				"event_description" => "can't get client address"
					"[event][id]" => "sshd:12"
					"[rsa][message][id1]" => "sshd:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:13
		# line in RSA:  <process>: auth server unresponsive
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: auth server unresponsive" }
				id => "message-sshd:13"
				add_field => {
				"event_description" => "auth server unresponsive"
					"[event][id]" => "sshd:13"
					"[rsa][message][id1]" => "sshd:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:14
		# line in RSA:  <process>: <service>: No valid RADIUS responses received
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{service}: No valid RADIUS responses received" }
				id => "message-sshd:14"
				add_field => {
				"event_description" => "No valid RADIUS responses received"
					"[event][id]" => "sshd:14"
					"[rsa][message][id1]" => "sshd:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:15
		# line in RSA:  <process>: Moving to next server: <saddr>(<shost>).<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: Moving to next server: %{saddr}(%{shost}).%{sport}" }
				id => "message-sshd:15"
				add_field => {
				"event_description" => "Moving to next server"
					"[event][id]" => "sshd:15"
					"[rsa][message][id1]" => "sshd:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sshd:16
		# line in RSA: <fld1> sshd: SSHD_LOGIN_FAILED: Login failed for user '<username>' from host '<hostip>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} sshd: SSHD_LOGIN_FAILED: Login failed for user '%{username}' from host '%{hostip}'." }
				id => "message-sshd:16"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login failed for user"
					"[event][id]" => "sshd:16"
					"[rsa][message][id1]" => "sshd:16"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Failed" {
		# MESSAGE Failed:05
		# line in RSA:  <process>[<process_id>]: Failed password { for illegal user | for invalid user | for } <username> from <saddr> port <sport> <protocol>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Failed[\s]+password[\s]+([\s]*for[\s]+illegal[\s]+user[\s]+|[\s]*for[\s]+invalid[\s]+user[\s]+|[\s]*for[\s]+)[\s]+(?<username>[^\s]*)[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+port[\s]+(?<sport>[^\s]*)[\s]+(?<protocol>.*)$" }
				id => "message-Failed:05"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "authentication failure"
					"[event][id]" => "Failed:05"
					"[rsa][message][id1]" => "Failed:05"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE Failed
		# line in RSA: <hostname> <process>[<process_id>]: Failed to resolve {ipv4|ipv6} addresses for domain name <sdomain>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+Failed[\s]+to[\s]+resolve[\s]+(ipv4|ipv6)[\s]+addresses[\s]+for[\s]+domain[\s]+name[\s]+(?<sdomain>.*)$" }
				id => "message-Failed"
				add_field => {
				"event_type" => "VPN"
					"[event][id]" => "Failed"
					"[rsa][message][id1]" => "Failed"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE Failed:01
		# line in RSA: <hostname> <process>[<process_id>]: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{process}[%{process_id}]: %{fld1}" }
				id => "message-Failed:01"
				add_field => {
					"[event][id]" => "Failed:01"
					"[rsa][message][id1]" => "Failed:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE Failed:02
		# line in RSA: {<fld1> to create a route if table for Multiservice |<fld10>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^((?<fld1>[^\s]*)[\s]+to[\s]+create[\s]+a[\s]+route[\s]+if[\s]+table[\s]+for[\s]+Multiservice[\s]+|(?<fld10>.*))$" }
				id => "message-Failed:02"
				add_field => {
				"hostname" => "%{hfld1}"
					"[event][id]" => "Failed:02"
					"[rsa][message][id1]" => "Failed:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId88
	# line in RSA:  <process>: restart
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "%{process}: restart" }
			id => "msgParserId88"
			add_field => {
				"event_description" => "syslog daemon restart"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "ucd-snmp" {
		# MESSAGE ucd-snmp
		# line in RSA:  <process>[<process_id>]: AUDIT -- Action <action> User: <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: AUDIT -- Action %{action} User: %{username}" }
				id => "message-ucd-snmp"
				add_field => {
				"event_description" => "AUDIT"
					"[event][id]" => "ucd-snmp"
					"[rsa][message][id1]" => "ucd-snmp"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE ucd-snmp:01
		# line in RSA:  <process>[<process_id>]: Received TERM or STOP signal <space> <result>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Received TERM or STOP signal %{space} %{result}." }
				id => "message-ucd-snmp:01"
				add_field => {
				"event_description" => "Received TERM or STOP signal"
					"[event][id]" => "ucd-snmp:01"
					"[rsa][message][id1]" => "ucd-snmp:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId91
	# line in RSA:  <node> <process>: failed to connect to the server: <result> (<resultcode>)
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "%{node} %{process}: failed to connect to the server: %{result} (%{resultcode})" }
			id => "msgParserId91"
			add_field => {
				"event_description" => "failed to connect to the server"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId92
	# line in RSA:  <node> <process>:Trace client disconnected. <result>
	else if [logstash][msgparser][id] == "msgParserId92" {
		dissect {
			mapping => { "message" => "%{node} %{process}:Trace client disconnected. %{result}" }
			id => "msgParserId92"
			add_field => {
				"event_description" => "Trace client disconnected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId93
	# line in RSA:  <node> <process>:USP trace client cannot reconnect to server
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "%{node} %{process}:USP trace client cannot reconnect to server" }
			id => "msgParserId93"
			add_field => {
				"event_description" => "USP trace client cannot reconnect to server"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId94
	# line in RSA:  <process>: flow_print_session_summary_output received <info>
	else if [logstash][msgparser][id] == "msgParserId94" {
		dissect {
			mapping => { "message" => "%{process}: flow_print_session_summary_output received %{info}" }
			id => "msgParserId94"
			add_field => {
				"event_description" => "flow_print_session_summary_output received"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId95
	# line in RSA:  Version <version> by builder on <event_time_string>
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "Version %{version} by builder on %{event_time_string}" }
			id => "msgParserId95"
			add_field => {
				"event_description" => "Version build date"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "xntpd" {
		# MESSAGE xntpd
		# line in RSA:  <process>[<process_id>]: frequency initialized <result> from <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: frequency initialized %{result} from %{filename}" }
				id => "message-xntpd"
				add_field => {
				"event_description" => "frequency initialized from file"
					"[event][id]" => "xntpd"
					"[rsa][message][id1]" => "xntpd"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xntpd:01
		# line in RSA:  <process>[<process_id>]: ntpd <version> <event_time_string> (<resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: ntpd %{version} %{event_time_string} (%{resultcode})" }
				id => "message-xntpd:01"
				add_field => {
				"event_description" => "nptd version build"
					"[event][id]" => "xntpd:01"
					"[rsa][message][id1]" => "xntpd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xntpd:02
		# line in RSA:  <process>: kernel time sync enabled <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: kernel time sync enabled %{result}" }
				id => "message-xntpd:02"
				add_field => {
				"event_description" => "kernel time sync enabled"
					"[event][id]" => "xntpd:02"
					"[rsa][message][id1]" => "xntpd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xntpd:03
		# line in RSA:  <process>[<process_id>]: NTP Server <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: NTP Server %{result}" }
				id => "message-xntpd:03"
				add_field => {
				"event_description" => "NTP Server Unreachable"
					"[event][id]" => "xntpd:03"
					"[rsa][message][id1]" => "xntpd:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "last" {
		# MESSAGE last
		# line in RSA:  last message repeated <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "last message repeated %{dclass_counter1} times" }
				id => "message-last"
				add_field => {
				"event_description" => "last message repeated"
					"[event][id]" => "last"
					"[rsa][message][id1]" => "last"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE last:01
		# line in RSA: message repeated <dclass_counter1> times
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "message repeated %{dclass_counter1} times" }
				id => "message-last:01"
				add_field => {
				"event_type" => "VPN"
				"hostname" => "%{hhost}"
					"[event][id]" => "last:01"
					"[rsa][message][id1]" => "last:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId101
	# line in RSA:  <process> <device>: cannot write ucode mask reg
	else if [logstash][msgparser][id] == "msgParserId101" {
		dissect {
			mapping => { "message" => "%{process} %{device}: cannot write ucode mask reg" }
			id => "msgParserId101"
			add_field => {
				"event_description" => "cannot write ucode mask reg"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId102
	# line in RSA:  <process>(<fld1>): Slot <device>: On-line
	else if [logstash][msgparser][id] == "msgParserId102" {
		dissect {
			mapping => { "message" => "%{process}(%{fld1}): Slot %{device}: On-line" }
			id => "msgParserId102"
			add_field => {
				"event_description" => "Slot on-line"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId103
	# line in RSA:  <process>: Received FC->Q map, <info>
	else if [logstash][msgparser][id] == "msgParserId103" {
		dissect {
			mapping => { "message" => "%{process}: Received FC->Q map, %{info}" }
			id => "msgParserId103"
			add_field => {
				"event_description" => "Received FC Q map"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId104
	# line in RSA:  <process>: ifd <resultcode>: <result>
	else if [logstash][msgparser][id] == "msgParserId104" {
		dissect {
			mapping => { "message" => "%{process}: ifd %{resultcode}: %{result}" }
			id => "msgParserId104"
			add_field => {
				"event_description" => "ifd error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId105
	# line in RSA:  <process>: <service>: delete class_to_ifl table <dclass_counter1>, ifl <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId105" {
		dissect {
			mapping => { "message" => "%{process}: %{service}: delete class_to_ifl table %{dclass_counter1}, ifl %{dclass_counter2}" }
			id => "msgParserId105"
			add_field => {
				"event_description" => "delete class to ifl link"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId106
	# line in RSA:  <process>: Keepalive timeout for rdp.(<interface>).(<device>) (<result>)
	else if [logstash][msgparser][id] == "msgParserId106" {
		dissect {
			mapping => { "message" => "%{process}: Keepalive timeout for rdp.(%{interface}).(%{device}) (%{result})" }
			id => "msgParserId106"
			add_field => {
				"event_description" => "Keepalive timeout"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId107
	# line in RSA:  <process>: Initial time of day set
	else if [logstash][msgparser][id] == "msgParserId107" {
		dissect {
			mapping => { "message" => "%{process}: Initial time of day set" }
			id => "msgParserId107"
			add_field => {
				"event_description" => "Initial time of day set"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId108
	# line in RSA:  <process>(<fld1>): Slot <device>, serial number S/N <serial_number>.
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "%{process}(%{fld1}): Slot %{device}, serial number S/N %{serial_number}." }
			id => "msgParserId108"
			add_field => {
				"event_description" => "Slot serial number"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId109
	# line in RSA:   <process>[<process_id>]: <event_type>: Unexpected error <result> from file <filename>
	else if [logstash][msgparser][id] == "msgParserId109" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unexpected error %{result} from file %{filename}" }
			id => "msgParserId109"
			add_field => {
				"event_description" => "Unexpected error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId110
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to open file <filename>: <result>
	else if [logstash][msgparser][id] == "msgParserId110" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to open file %{filename}: %{result}" }
			id => "msgParserId110"
			add_field => {
				"event_description" => "Failed to open file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId111
	# line in RSA:  <process>[<process_id>]: <event_type>: File <filename> size (<dclass_counter1>) is smaller than record size (<dclass_counter2>)
	else if [logstash][msgparser][id] == "msgParserId111" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: File %{filename} size (%{dclass_counter1}) is smaller than record size (%{dclass_counter2})" }
			id => "msgParserId111"
			add_field => {
				"event_description" => "File size mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId112
	# line in RSA:  <process>[<process_id>]: <event_type>: Invalid statistics record: <result>
	else if [logstash][msgparser][id] == "msgParserId112" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Invalid statistics record: %{result}" }
			id => "msgParserId112"
			add_field => {
				"event_description" => "Invalid statistics record"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId113
	# line in RSA:   <process>[<process_id>]: <event_type>: <filename> getting class usage statistics for interface <interface>: <result>
	else if [logstash][msgparser][id] == "msgParserId113" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{filename} getting class usage statistics for interface %{interface}: %{result}" }
			id => "msgParserId113"
			add_field => {
				"event_description" => "Class usage statistics error for interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId114
	# line in RSA:  <process>[<process_id>]: <event_type>: { Error <resultcode> trying | trying } to get hostname
	else if [logstash][msgparser][id] == "msgParserId114" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+([\s]*Error[\s]+(?<resultcode>[^\s]*)[\s]+trying[\s]+|[\s]*trying[\s]+)[\s]+to[\s]+get[\s]+hostname$" }
			id => "msgParserId114"
			add_field => {
				"event_description" => "error trying to get hostname"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId115
	# line in RSA:  <process>[<process_id>]: <event_type>: Memory allocation failed while reallocating <obj_name>
	else if [logstash][msgparser][id] == "msgParserId115" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Memory allocation failed while reallocating %{obj_name}" }
			id => "msgParserId115"
			add_field => {
				"event_description" => "Memory allocation failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId116
	# line in RSA:  <process>[<process_id>]: <event_type>: <filename> in accounting profile <dclass_counter1> is not defined in a firewall using this filter profile
	else if [logstash][msgparser][id] == "msgParserId116" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{filename} in accounting profile %{dclass_counter1} is not defined in a firewall using this filter profile" }
			id => "msgParserId116"
			add_field => {
				"event_description" => "Accounting profile counter not defined in firewall"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId117
	# line in RSA:  <process>[<process_id>]: <event_type> <result>: <disposition>
	else if [logstash][msgparser][id] == "msgParserId117" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type} %{result}: %{disposition}" }
			id => "msgParserId117"
			add_field => {
				"event_description" => "ACCT_XFER_FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId118
	# line in RSA:  <process>[<process_id>]: <event_type> <result>: in invoking command command to transfer file <filename>
	else if [logstash][msgparser][id] == "msgParserId118" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type} %{result}: in invoking command command to transfer file %{filename}" }
			id => "msgParserId118"
			add_field => {
				"event_description" => "POPEN FAIL invoking command command to transfer file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId119
	# line in RSA:  <event_type> [junos@<obj_name> timestamp="<result>" message-type="<info>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" protocol-name="<protocol>" application-name="<application>" rule-set-name="<rule_group>" rule-name="<rulename>" action="<action>" argument="<fld2>" argument1="<fld3>"]
	else if [logstash][msgparser][id] == "msgParserId119" {
		dissect {
			mapping => { "message" => "%{event_type} [junos@%{obj_name} timestamp=\"%{result}\" message-type=\"%{info}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" protocol-name=\"%{protocol}\" application-name=\"%{application}\" rule-set-name=\"%{rule_group}\" rule-name=\"%{rulename}\" action=\"%{action}\" argument=\"%{fld2}\" argument1=\"%{fld3}\"]" }
			id => "msgParserId119"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId120
	# line in RSA: <event_type>: AppTrack session created <saddr>/<sport>-><daddr>/<dport> <service> <protocol> <fld11> <hostip>/<network_port>-><dtransaddr>/<dtransport> <rulename> <rule_template> <fld12> <policyname> <src_zone> <dst_zone> <sessionid> <username> <fld10>
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "%{event_type}: AppTrack session created %{saddr}/%{sport}->%{daddr}/%{dport} %{service} %{protocol} %{fld11} %{hostip}/%{network_port}->%{dtransaddr}/%{dtransport} %{rulename} %{rule_template} %{fld12} %{policyname} %{src_zone} %{dst_zone} %{sessionid} %{username} %{fld10}" }
			id => "msgParserId120"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Create"
				"result" => "AppTrack session created"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "APPTRACK_SESSION_CLOSE" {
		# MESSAGE APPTRACK_SESSION_CLOSE
		# line in RSA:  <event_type> [junos@<obj_name> reason="<result>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" service-name="<service>" nat-source-address="<hostip>" nat-source-port="<network_port>" nat-destination-address="<dtransaddr>" nat-destination-port="<dtransport>" src-nat-rule-name="<rulename>" dst-nat-rule-name="<rule_template>" protocol-id="<protocol>" policy-name="<policyname>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" session-id-32="<sessionid>" packets-from-client="<packets>" bytes-from-client="<rbytes>" packets-from-server="<dclass_counter1>" bytes-from-server="<sbytes>" elapsed-time="<duration>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{obj_name} reason=\"%{result}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" service-name=\"%{service}\" nat-source-address=\"%{hostip}\" nat-source-port=\"%{network_port}\" nat-destination-address=\"%{dtransaddr}\" nat-destination-port=\"%{dtransport}\" src-nat-rule-name=\"%{rulename}\" dst-nat-rule-name=\"%{rule_template}\" protocol-id=\"%{protocol}\" policy-name=\"%{policyname}\" source-zone-name=\"%{src_zone}\" destination-zone-name=\"%{dst_zone}\" session-id-32=\"%{sessionid}\" packets-from-client=\"%{packets}\" bytes-from-client=\"%{rbytes}\" packets-from-server=\"%{dclass_counter1}\" bytes-from-server=\"%{sbytes}\" elapsed-time=\"%{duration}\"]" }
				id => "message-APPTRACK_SESSION_CLOSE"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
					"[event][id]" => "APPTRACK_SESSION_CLOSE"
					"[rsa][message][id1]" => "APPTRACK_SESSION_CLOSE"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE APPTRACK_SESSION_CLOSE:01
		# line in RSA: <event_type>: <result>: <saddr>/<sport>-><daddr>/<dport> <service> <protocol> <fld11> <hostip>/<network_port>-><dtransaddr>/<dtransport> <rulename> <rule_template> <fld12> <policyname> <src_zone> <dst_zone> <sessionid> <packets>(<rbytes>) <dclass_counter1>(<sbytes>) <duration> <username> <fld10>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: %{result}: %{saddr}/%{sport}->%{daddr}/%{dport} %{service} %{protocol} %{fld11} %{hostip}/%{network_port}->%{dtransaddr}/%{dtransport} %{rulename} %{rule_template} %{fld12} %{policyname} %{src_zone} %{dst_zone} %{sessionid} %{packets}(%{rbytes}) %{dclass_counter1}(%{sbytes}) %{duration} %{username} %{fld10}" }
				id => "message-APPTRACK_SESSION_CLOSE:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
					"[event][id]" => "APPTRACK_SESSION_CLOSE:01"
					"[rsa][message][id1]" => "APPTRACK_SESSION_CLOSE:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "APPTRACK_SESSION_VOL_UPDATE" {
		# MESSAGE APPTRACK_SESSION_VOL_UPDATE
		# line in RSA:  <event_type> [junos@<obj_name> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" service-name="<service>" nat-source-address="<hostip>" nat-source-port="<network_port>" nat-destination-address="<dtransaddr>" nat-destination-port="<dtransport>" src-nat-rule-name="<rulename>" dst-nat-rule-name="<rule_template>" protocol-id="<protocol>" policy-name="<policyname>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" session-id-32="<sessionid>" packets-from-client="<packets>" bytes-from-client="<rbytes>" packets-from-server="<dclass_counter1>" bytes-from-server="<sbytes>" elapsed-time="<duration>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{obj_name} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" service-name=\"%{service}\" nat-source-address=\"%{hostip}\" nat-source-port=\"%{network_port}\" nat-destination-address=\"%{dtransaddr}\" nat-destination-port=\"%{dtransport}\" src-nat-rule-name=\"%{rulename}\" dst-nat-rule-name=\"%{rule_template}\" protocol-id=\"%{protocol}\" policy-name=\"%{policyname}\" source-zone-name=\"%{src_zone}\" destination-zone-name=\"%{dst_zone}\" session-id-32=\"%{sessionid}\" packets-from-client=\"%{packets}\" bytes-from-client=\"%{rbytes}\" packets-from-server=\"%{dclass_counter1}\" bytes-from-server=\"%{sbytes}\" elapsed-time=\"%{duration}\"]" }
				id => "message-APPTRACK_SESSION_VOL_UPDATE"
				add_field => {
				"ec_subject" => "NetworkComm"
					"[event][id]" => "APPTRACK_SESSION_VOL_UPDATE"
					"[rsa][message][id1]" => "APPTRACK_SESSION_VOL_UPDATE"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE APPTRACK_SESSION_VOL_UPDATE:01
		# line in RSA: <event_type>: <result>: <saddr>/<sport>-><daddr>/<dport> <service> <protocol> <fld11> <hostip>/<network_port>-><dtransaddr>/<dtransport> <rulename> <rule_template> <fld12> <policyname> <src_zone> <dst_zone> <sessionid> <packets>(<rbytes>) <dclass_counter1>(<sbytes>) <duration> <username> <fld10>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: %{result}: %{saddr}/%{sport}->%{daddr}/%{dport} %{service} %{protocol} %{fld11} %{hostip}/%{network_port}->%{dtransaddr}/%{dtransport} %{rulename} %{rule_template} %{fld12} %{policyname} %{src_zone} %{dst_zone} %{sessionid} %{packets}(%{rbytes}) %{dclass_counter1}(%{sbytes}) %{duration} %{username} %{fld10}" }
				id => "message-APPTRACK_SESSION_VOL_UPDATE:01"
				add_field => {
				"ec_subject" => "NetworkComm"
					"[event][id]" => "APPTRACK_SESSION_VOL_UPDATE:01"
					"[rsa][message][id1]" => "APPTRACK_SESSION_VOL_UPDATE:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId125
	# line in RSA:  <process>[<process_id>]: <event_type>: local discriminator: <resultcode>, new state: <result>
	else if [logstash][msgparser][id] == "msgParserId125" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: local discriminator: %{resultcode}, new state: %{result}" }
			id => "msgParserId125"
			add_field => {
				"event_description" => "Trap state change"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId126
	# line in RSA:  <process>[<process_id>]: <event_type>: connect <saddr> (<shost>): <result> 
	else if [logstash][msgparser][id] == "msgParserId126" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: connect %{saddr} (%{shost}): %{result}" }
			id => "msgParserId126"
			add_field => {
				"event_description" => "bgp connect error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId127
	# line in RSA:  <process>[<process_id>]: <event_type>: peer <daddr> (<dhost>) old state <change_old> event <action> new state <change_new> 
	else if [logstash][msgparser][id] == "msgParserId127" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: peer %{daddr} (%{dhost}) old state %{change_old} event %{action} new state %{change_new}" }
			id => "msgParserId127"
			add_field => {
				"event_description" => "bgp peer state change"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId128
	# line in RSA:  <process>[<process_id>]: <event_type>: Connection attempt from unconfigured neighbor: <result> 
	else if [logstash][msgparser][id] == "msgParserId128" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Connection attempt from unconfigured neighbor: %{result}" }
			id => "msgParserId128"
			add_field => {
				"event_description" => "Connection attempt from unconfigured neighbor"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId129
	# line in RSA:  <process>[<process_id>]: <event_type>:  <action>
	else if [logstash][msgparser][id] == "msgParserId129" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}:  %{action}" }
			id => "msgParserId129"
			add_field => {
				"event_description" => "bgp reset"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId130
	# line in RSA:   <process>[<process_id>]: <event_type>: peer <daddr> (<dhost>) next hop <saddr> local, <result>
	else if [logstash][msgparser][id] == "msgParserId130" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: peer %{daddr} (%{dhost}) next hop %{saddr} local, %{result}" }
			id => "msgParserId130"
			add_field => {
				"event_description" => "peer next hop local"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "bgp_process_caps" {
		# MESSAGE bgp_process_caps
		# line in RSA:  <process>[<process_id>]: <event_type>: NOTIFICATION sent to <daddr> (<dhost>): code <severity> (<action>) subcode <version> (<result>) value <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: NOTIFICATION sent to %{daddr} (%{dhost}): code %{severity} (%{action}) subcode %{version} (%{result}) value %{disposition}" }
				id => "message-bgp_process_caps"
				add_field => {
				"event_description" => "code RED error NOTIFICATION sent"
					"[event][id]" => "bgp_process_caps"
					"[rsa][message][id1]" => "bgp_process_caps"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE bgp_process_caps:01
		# line in RSA:  <process>[<process_id>]: <event_type>: mismatch NLRI with <hostip> (<hostname>): peer: <daddr> us: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: mismatch NLRI with %{hostip} (%{hostname}): peer: %{daddr} us: %{saddr}" }
				id => "message-bgp_process_caps:01"
				add_field => {
				"event_description" => "peer NLRI mismatch"
					"[event][id]" => "bgp_process_caps:01"
					"[rsa][message][id1]" => "bgp_process_caps:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "bgp_pp_recv" {
		# MESSAGE bgp_pp_recv
		# line in RSA:  <process>[<process_id>]: <event_type>: dropping <daddr> (<dhost>), <info> (<protocol>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: dropping %{daddr} (%{dhost}), %{info} (%{protocol})" }
				id => "message-bgp_pp_recv"
				add_field => {
				"event_description" => "connection collision"
				"result" => "dropping connection to peer"
					"[event][id]" => "bgp_pp_recv"
					"[rsa][message][id1]" => "bgp_pp_recv"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE bgp_pp_recv:01
		# line in RSA:  <process>[<process_id>]: <event_type>: peer <daddr> (<dhost>): received unexpected EOF
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: peer %{daddr} (%{dhost}): received unexpected EOF" }
				id => "message-bgp_pp_recv:01"
				add_field => {
				"event_description" => "peer received unexpected EOF"
					"[event][id]" => "bgp_pp_recv:01"
					"[rsa][message][id1]" => "bgp_pp_recv:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId135
	# line in RSA:   <process>[<process_id>]: <event_type>: sending <sbytes> bytes to <daddr> (<dhost>) blocked (<disposition>): <result> 
	else if [logstash][msgparser][id] == "msgParserId135" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: sending %{sbytes} bytes to %{daddr} (%{dhost}) blocked (%{disposition}): %{result}" }
			id => "msgParserId135"
			add_field => {
				"event_description" => "bgp send blocked error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId136
	# line in RSA:  <process>[<process_id>]: <event_type>: NOTIFICATION sent to <daddr> (<dhost>): code <resultcode> (<action>), Reason: <result> 
	else if [logstash][msgparser][id] == "msgParserId136" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: NOTIFICATION sent to %{daddr} (%{dhost}): code %{resultcode} (%{action}), Reason: %{result}" }
			id => "msgParserId136"
			add_field => {
				"event_description" => "bgp timeout NOTIFICATION sent"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId137
	# line in RSA:  <process>[<process_id>]: <event_type>: Ignoring unknown option <resultcode>
	else if [logstash][msgparser][id] == "msgParserId137" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Ignoring unknown option %{resultcode}" }
			id => "msgParserId137"
			add_field => {
				"event_description" => "boot argument error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId138
	# line in RSA:  <process>[<process_id>]: <event_type>: Unexpected ID <resultcode>
	else if [logstash][msgparser][id] == "msgParserId138" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unexpected ID %{resultcode}" }
			id => "msgParserId138"
			add_field => {
				"event_description" => "boot unexpected Id value"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId139
	# line in RSA:  <process>[<process_id>]: <event_type>: Boot string: <filename>
	else if [logstash][msgparser][id] == "msgParserId139" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Boot string: %{filename}" }
			id => "msgParserId139"
			add_field => {
				"event_description" => "Invalid boot string"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId140
	# line in RSA:  <process>[<process_id>]: <event_type>: Problems with configuration file '<filename>', <result>
	else if [logstash][msgparser][id] == "msgParserId140" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Problems with configuration file '%{filename}', %{result}" }
			id => "msgParserId140"
			add_field => {
				"event_description" => "configuration file error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId141
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to open configuration file '<filename>'
	else if [logstash][msgparser][id] == "msgParserId141" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to open configuration file '%{filename}'" }
			id => "msgParserId141"
			add_field => {
				"event_description" => "Unable to open configuration file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId142
	# line in RSA:  <process>[<process_id>]: <event_type>: Duplicate revision: <version>
	else if [logstash][msgparser][id] == "msgParserId142" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Duplicate revision: %{version}" }
			id => "msgParserId142"
			add_field => {
				"event_description" => "boot - Duplicate revision"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId143
	# line in RSA:  <process>[<process_id>]: <event_type>: Duplicate slot default: <ssid>
	else if [logstash][msgparser][id] == "msgParserId143" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Duplicate slot default: %{ssid}" }
			id => "msgParserId143"
			add_field => {
				"event_description" => "boot - duplicate slot"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId144
	# line in RSA:  <process>[<process_id>]: <event_type>: Unexpected ID <id> for model <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId144" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unexpected ID %{id} for model %{dclass_counter1}" }
			id => "msgParserId144"
			add_field => {
				"event_description" => "Unexpected ID for model"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId145
	# line in RSA:  <process>[<process_id>]: <event_type>: Unsupported model <dclass_counter1>, <result>
	else if [logstash][msgparser][id] == "msgParserId145" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unsupported model %{dclass_counter1}, %{result}" }
			id => "msgParserId145"
			add_field => {
				"event_description" => "Unsupported model"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId146
	# line in RSA:  <process>[<process_id>]: <event_type>: New configuration installed 
	else if [logstash][msgparser][id] == "msgParserId146" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: New configuration installed" }
			id => "msgParserId146"
			add_field => {
				"event_description" => "New configuration installed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId147
	# line in RSA:  <process>[<process_id>]: <event_type>: No boot string found for type <filename>
	else if [logstash][msgparser][id] == "msgParserId147" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No boot string found for type %{filename}" }
			id => "msgParserId147"
			add_field => {
				"event_description" => "No boot string found"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId148
	# line in RSA:  <process>[<process_id>]: <event_type>: No configuration file '<filename>', <result>
	else if [logstash][msgparser][id] == "msgParserId148" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No configuration file '%{filename}', %{result}" }
			id => "msgParserId148"
			add_field => {
				"event_description" => "No configuration file found"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId149
	# line in RSA:  <process>[<process_id>]: <event_type>: <filename>: number parse errors on SIGHUP
	else if [logstash][msgparser][id] == "msgParserId149" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{filename}: number parse errors on SIGHUP" }
			id => "msgParserId149"
			add_field => {
				"event_description" => "parse errors on SIGHUP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId150
	# line in RSA:  <process>[<process_id>]: <event_type>: Reparsing configuration file '<filename>'
	else if [logstash][msgparser][id] == "msgParserId150" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Reparsing configuration file '%{filename}'" }
			id => "msgParserId150"
			add_field => {
				"event_description" => "Reparsing configuration file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId151
	# line in RSA:  <process>[<process_id>]: <event_type>: select: <result>
	else if [logstash][msgparser][id] == "msgParserId151" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: select: %{result}" }
			id => "msgParserId151"
			add_field => {
				"event_description" => "select error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId152
	# line in RSA:  <process>[<process_id>]: <event_type>: Timeout <result> unreasonable
	else if [logstash][msgparser][id] == "msgParserId152" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Timeout %{result} unreasonable" }
			id => "msgParserId152"
			add_field => {
				"event_description" => "timeout unreasonable"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId153
	# line in RSA:  <process>[<process_id>]: <event_type>: Version: <version> built by builder on <event_time_string> 
	else if [logstash][msgparser][id] == "msgParserId153" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Version: %{version} built by builder on %{event_time_string}" }
			id => "msgParserId153"
			add_field => {
				"event_description" => "boot version built"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId154
	# line in RSA:  <process>[<process_id>]: <event_type> <version> built by builder on <event_time_string>
	else if [logstash][msgparser][id] == "msgParserId154" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type} %{version} built by builder on %{event_time_string}" }
			id => "msgParserId154"
			add_field => {
				"event_description" => "CHASSISD release built"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId155
	# line in RSA:   <process>[<process_id>]: <event_type>: Unknown option <result> 
	else if [logstash][msgparser][id] == "msgParserId155" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unknown option %{result}" }
			id => "msgParserId155"
			add_field => {
				"event_description" => "CHASSISD Unknown option"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId156
	# line in RSA:  <process>[<process_id>]: <event_type>: Fans and impellers are now running at normal speed
	else if [logstash][msgparser][id] == "msgParserId156" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Fans and impellers are now running at normal speed" }
			id => "msgParserId156"
			add_field => {
				"event_description" => "Fans and impellers are now running at normal speed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId157
	# line in RSA:  <process>[<process_id>]: <event_type>: Fans and impellers being set to full speed [<result>]
	else if [logstash][msgparser][id] == "msgParserId157" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Fans and impellers being set to full speed [%{result}]" }
			id => "msgParserId157"
			add_field => {
				"event_description" => "Fans and impellers being set to full speed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId158
	# line in RSA:  <process>[<process_id>]: <event_type>: <result> reading midplane ID EEPROM, <dclass_counter1> <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId158" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result} reading midplane ID EEPROM, %{dclass_counter1} %{dclass_counter2}" }
			id => "msgParserId158"
			add_field => {
				"event_description" => "reading midplane ID EEPROM"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId159
	# line in RSA:  <process>[<process_id>]: <event_type>: <device> online ack code <dclass_counter1> - - <result>, <interface>
	else if [logstash][msgparser][id] == "msgParserId159" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{device} online ack code %{dclass_counter1} - - %{result}, %{interface}" }
			id => "msgParserId159"
			add_field => {
				"event_description" => "CHASSISD COMMAND ACK ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId160
	# line in RSA:  <process>[<process_id>]: <event_type>: <disposition> - <result>, code <resultcode>, SFM <dclass_counter1>, FPC <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId160" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{disposition} - %{result}, code %{resultcode}, SFM %{dclass_counter1}, FPC %{dclass_counter2}" }
			id => "msgParserId160"
			add_field => {
				"event_description" => "CHASSISD COMMAND ACK SF ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId161
	# line in RSA:  <process>[<process_id>]: <event_type>: Cannot set no-concatenated mode for FPC <dclass_counter2> PIC <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId161" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Cannot set no-concatenated mode for FPC %{dclass_counter2} PIC %{dclass_counter1}" }
			id => "msgParserId161"
			add_field => {
				"event_description" => "Cannot set no-concatenated mode for FPC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId162
	# line in RSA:  <process>[<process_id>]: <event_type>: Problems with configuration file <filename>; <result>
	else if [logstash][msgparser][id] == "msgParserId162" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Problems with configuration file %{filename}; %{result}" }
			id => "msgParserId162"
			add_field => {
				"event_description" => "CONFIG File Problem"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId163
	# line in RSA:  <process>[<process_id>]: <event_type>: <filename>: <result>, FPC <dclass_counter2> <resultcode>
	else if [logstash][msgparser][id] == "msgParserId163" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{filename}: %{result}, FPC %{dclass_counter2} %{resultcode}" }
			id => "msgParserId163"
			add_field => {
				"event_description" => "CHASSISD CONFIG WARNING"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId164
	# line in RSA:  <process>[<process_id>]: <event_type>: chassisd already running; <result>
	else if [logstash][msgparser][id] == "msgParserId164" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: chassisd already running; %{result}" }
			id => "msgParserId164"
			add_field => {
				"event_description" => "chassisd already running"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId165
	# line in RSA:  <process>[<process_id>]: <event_type>: Killing existing chassisd and exiting
	else if [logstash][msgparser][id] == "msgParserId165" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Killing existing chassisd and exiting" }
			id => "msgParserId165"
			add_field => {
				"event_description" => "Killing existing chassisd and exiting"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId166
	# line in RSA:  <process>[<process_id>]: <event_type>: File open: <filename>, error: <resultcode> - - <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId166" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: File open: %{filename}, error: %{resultcode} - - %{dclass_counter1}" }
			id => "msgParserId166"
			add_field => {
				"event_description" => "file open error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId167
	# line in RSA:  <process>[<process_id>]: <event_type>: File stat: <filename>, error: <resultcode> - - <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId167" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: File stat: %{filename}, error: %{resultcode} - - %{dclass_counter1}" }
			id => "msgParserId167"
			add_field => {
				"event_description" => "CHASSISD file statistics error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId168
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <result>
	else if [logstash][msgparser][id] == "msgParserId168" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{result}" }
			id => "msgParserId168"
			add_field => {
				"event_description" => "CHASSISD received restart EVENT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId169
	# line in RSA:  <process>[<process_id>]: <event_type>: <action> FRU <filename>#<resultcode>, <result> <dclass_counter1>, <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId169" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action} FRU %{filename}#%{resultcode}, %{result} %{dclass_counter1}, %{dclass_counter2}" }
			id => "msgParserId169"
			add_field => {
				"event_description" => "CHASSISD restart WRITE_ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId170
	# line in RSA:  <process>[<process_id>]: <event_type>: <filename> <resultcode> at step <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId170" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{filename} %{resultcode} at step %{dclass_counter1}" }
			id => "msgParserId170"
			add_field => {
				"event_description" => "CHASSISD FRU STEP ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId171
	# line in RSA:  <process>[<process_id>]: <event_type>: Unexpected error from gettimeofday: <resultcode> - <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId171" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unexpected error from gettimeofday: %{resultcode} - %{dclass_counter1}" }
			id => "msgParserId171"
			add_field => {
				"event_description" => "Unexpected error from gettimeofday"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId172
	# line in RSA:  <process>[<process_id>]: <event_type>: <result> reading host temperature sensor
	else if [logstash][msgparser][id] == "msgParserId172" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result} reading host temperature sensor" }
			id => "msgParserId172"
			add_field => {
				"event_description" => "reading host temperature sensor"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId173
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>(<disposition>)
	else if [logstash][msgparser][id] == "msgParserId173" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}(%{disposition})" }
			id => "msgParserId173"
			add_field => {
				"event_description" => "detaching all pseudo devices"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId174
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>(<resultcode>)
	else if [logstash][msgparser][id] == "msgParserId174" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}(%{resultcode})" }
			id => "msgParserId174"
			add_field => {
				"event_description" => "CHASSISD IFDEV DETACH FPC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId175
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>(<resultcode>)
	else if [logstash][msgparser][id] == "msgParserId175" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}(%{resultcode})" }
			id => "msgParserId175"
			add_field => {
				"event_description" => "CHASSISD IFDEV DETACH PIC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId176
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>(<disposition>)
	else if [logstash][msgparser][id] == "msgParserId176" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}(%{disposition})" }
			id => "msgParserId176"
			add_field => {
				"event_description" => "CHASSISD IFDEV DETACH PSEUDO"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId177
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <result>
	else if [logstash][msgparser][id] == "msgParserId177" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{result}" }
			id => "msgParserId177"
			add_field => {
				"event_description" => "CHASSISD IFDEV DETACH TLV ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId178
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: rtslib_ifdm_get_by_index failed: <resultcode> - <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId178" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: rtslib_ifdm_get_by_index failed: %{resultcode} - %{dclass_counter1}" }
			id => "msgParserId178"
			add_field => {
				"event_description" => "rtslib_ifdm_get_by_index failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId179
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>: type = <dclass_counter1>, subtype = <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId179" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}: type = %{dclass_counter1}, subtype = %{dclass_counter2}" }
			id => "msgParserId179"
			add_field => {
				"event_description" => "Message Queue full"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId180
	# line in RSA:  <process>[<process_id>]: <event_type>: Received unexpected message from <service>: type = <dclass_counter1>, subtype = <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId180" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Received unexpected message from %{service}: type = %{dclass_counter1}, subtype = %{dclass_counter2}" }
			id => "msgParserId180"
			add_field => {
				"event_description" => "Received unexpected message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId181
	# line in RSA:  <process>[<process_id>]: <event_type>: FRU has no connection pipe <result>
	else if [logstash][msgparser][id] == "msgParserId181" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: FRU has no connection pipe %{result}" }
			id => "msgParserId181"
			add_field => {
				"event_description" => "FRU has no connection pipe"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId182
	# line in RSA:  <process>[<process_id>]: <event_type>: FRU has no connection arguments <result>
	else if [logstash][msgparser][id] == "msgParserId182" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: FRU has no connection arguments %{result}" }
			id => "msgParserId182"
			add_field => {
				"event_description" => "FRU has no connection arguments"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId183
	# line in RSA:  <process>[<process_id>]: <event_type>: chassisd MAC address allocation error
	else if [logstash][msgparser][id] == "msgParserId183" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: chassisd MAC address allocation error" }
			id => "msgParserId183"
			add_field => {
				"event_description" => "chassisd MAC address allocation error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId184
	# line in RSA:  <process>[<process_id>]: <event_type>: Using default MAC address base
	else if [logstash][msgparser][id] == "msgParserId184" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Using default MAC address base" }
			id => "msgParserId184"
			add_field => {
				"event_description" => "Using default MAC address base"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId185
	# line in RSA:  <process>[<process_id>]: <event_type>: <service> <resultcode>: management bus failed sanity test
	else if [logstash][msgparser][id] == "msgParserId185" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service} %{resultcode}: management bus failed sanity test" }
			id => "msgParserId185"
			add_field => {
				"event_description" => "management bus failed sanity test"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId186
	# line in RSA:  <process>[<process_id>]: <event_type>: Using new configuration
	else if [logstash][msgparser][id] == "msgParserId186" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Using new configuration" }
			id => "msgParserId186"
			add_field => {
				"event_description" => "Using new configuration"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId187
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <resultcode> <result>
	else if [logstash][msgparser][id] == "msgParserId187" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{resultcode} %{result}" }
			id => "msgParserId187"
			add_field => {
				"event_description" => "CHASSISD PARSE ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId188
	# line in RSA:  <process>[<process_id>]: <event_type>: Parsing configuration file '<filename>'
	else if [logstash][msgparser][id] == "msgParserId188" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Parsing configuration file '%{filename}'" }
			id => "msgParserId188"
			add_field => {
				"event_description" => "Parsing configuration file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId189
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to open PID file '<filename>': <result> <resultcode>
	else if [logstash][msgparser][id] == "msgParserId189" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to open PID file '%{filename}': %{result} %{resultcode}" }
			id => "msgParserId189"
			add_field => {
				"event_description" => "Unable to open PID file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId190
	# line in RSA:  <process>[<process_id>]: <event_type>: Pipe error: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId190" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Pipe error: %{resultcode}" }
			id => "msgParserId190"
			add_field => {
				"event_description" => "Pipe error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId191
	# line in RSA:  <process>[<process_id>]: <event_type>: <device> <dclass_counter1> not powering up
	else if [logstash][msgparser][id] == "msgParserId191" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{device} %{dclass_counter1} not powering up" }
			id => "msgParserId191"
			add_field => {
				"event_description" => "device not powering up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId192
	# line in RSA:  <process>[<process_id>]: <event_type>: Successfully reconnected on soft restart
	else if [logstash][msgparser][id] == "msgParserId192" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Successfully reconnected on soft restart" }
			id => "msgParserId192"
			add_field => {
				"event_description" => "Successful reconnect on soft restart"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId193
	# line in RSA:  <process>[<process_id>]: <event_type>: Release mastership notification
	else if [logstash][msgparser][id] == "msgParserId193" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Release mastership notification" }
			id => "msgParserId193"
			add_field => {
				"event_description" => "Release mastership notification"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId194
	# line in RSA:  <process>[<process_id>]: <event_type>: re_init: re <resultcode>, <result>
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: re_init: re %{resultcode}, %{result}" }
			id => "msgParserId194"
			add_field => {
				"event_description" => "re_init Invalid RE slot"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId195
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to determine the mount point for root directory: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId195" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to determine the mount point for root directory: %{resultcode}" }
			id => "msgParserId195"
			add_field => {
				"event_description" => "Unable to determine mount point for root directory"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId196
	# line in RSA:  <process>[<process_id>]: <event_type>: ifmsg sequence gap <resultcode> - - <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId196" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifmsg sequence gap %{resultcode} - - %{dclass_counter1}" }
			id => "msgParserId196"
			add_field => {
				"event_description" => "ifmsg sequence gap"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId197
	# line in RSA:  <process>[<process_id>]: <event_type>: Version mismatch: <info>
	else if [logstash][msgparser][id] == "msgParserId197" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Version mismatch: %{info}" }
			id => "msgParserId197"
			add_field => {
				"event_description" => "Version mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId198
	# line in RSA:  <process>[<process_id>]: <event_type>: Serial ID read error: <resultcode> - - <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Serial ID read error: %{resultcode} - - %{dclass_counter1}" }
			id => "msgParserId198"
			add_field => {
				"event_description" => "Serial ID read error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId199
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: fpga download not complete: val <resultcode>, <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId199" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: fpga download not complete: val %{resultcode}, %{dclass_counter1}" }
			id => "msgParserId199"
			add_field => {
				"event_description" => "fpga download not complete"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId200
	# line in RSA:  <process>[<process_id>]: <event_type>: SNMP trap generated: <result> (<info>)
	else if [logstash][msgparser][id] == "msgParserId200" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: SNMP trap generated: %{result} (%{info})" }
			id => "msgParserId200"
			add_field => {
				"event_description" => "SNMP Trap6 generated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId201
	# line in RSA:  <process>[<process_id>]: <event_type>: SNMP trap: <result>: <info>
	else if [logstash][msgparser][id] == "msgParserId201" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: SNMP trap: %{result}: %{info}" }
			id => "msgParserId201"
			add_field => {
				"event_description" => "SNMP Trap7 generated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId202
	# line in RSA:  <process>[<process_id>]: <event_type>: SNMP trap: <result>: <info>
	else if [logstash][msgparser][id] == "msgParserId202" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: SNMP trap: %{result}: %{info}" }
			id => "msgParserId202"
			add_field => {
				"event_description" => "SNMP trap - FRU power on"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId203
	# line in RSA:  <process>[<process_id>]: <event_type>: Received SIGTERM request, <result>
	else if [logstash][msgparser][id] == "msgParserId203" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Received SIGTERM request, %{result}" }
			id => "msgParserId203"
			add_field => {
				"event_description" => "Received SIGTERM request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId204
	# line in RSA:  <process>[<process_id>]: <event_type>: Taking PIC offline - - FPC slot <dclass_counter1>, PIC slot <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId204" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Taking PIC offline - - FPC slot %{dclass_counter1}, PIC slot %{dclass_counter2}" }
			id => "msgParserId204"
			add_field => {
				"event_description" => "Taking PIC offline"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId205
	# line in RSA:  <process>[<process_id>]: <event_type>: <service> returned <resultcode>: <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId205" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service} returned %{resultcode}: %{dclass_counter1}" }
			id => "msgParserId205"
			add_field => {
				"event_description" => "UNEXPECTED EXIT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId206
	# line in RSA:  <process>[<process_id>]: <event_type>: Model <dclass_counter1> unsupported with this version of chassisd
	else if [logstash][msgparser][id] == "msgParserId206" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Model %{dclass_counter1} unsupported with this version of chassisd" }
			id => "msgParserId206"
			add_field => {
				"event_description" => "Model number unsupported with this version of chassisd"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId207
	# line in RSA:  <process>[<process_id>]: <event_type>: Version mismatch: <info>
	else if [logstash][msgparser][id] == "msgParserId207" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Version mismatch: %{info}" }
			id => "msgParserId207"
			add_field => {
				"event_description" => "Chassisd Version mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId208
	# line in RSA: <process> <process_id> <event_type> [junos@<obj_name> temperature="<fld2>" message="<info>"]
	else if [logstash][msgparser][id] == "msgParserId208" {
		dissect {
			mapping => { "message" => "%{process} %{process_id} %{event_type} [junos@%{obj_name} temperature=\"%{fld2}\" message=\"%{info}\"]" }
			id => "msgParserId208"
			add_field => {
				"event_description" => "CHASSISD HIGH TEMP CONDITION"
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld6}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId209
	# line in RSA:  <process>[<process_id>]: <event_type>: process <agent> RESTART mode <event_state> new master=<obj_name> old failover=<change_old> new failover = <change_new>
	else if [logstash][msgparser][id] == "msgParserId209" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: process %{agent} RESTART mode %{event_state} new master=%{obj_name} old failover=%{change_old} new failover = %{change_new}" }
			id => "msgParserId209"
			add_field => {
				"event_description" => "process RESTART mode"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId210
	# line in RSA:  <process>[<process_id>]: <event_type>: Chassis <group> Linklocal MAC:<macaddr>
	else if [logstash][msgparser][id] == "msgParserId210" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Chassis %{group} Linklocal MAC:%{macaddr}" }
			id => "msgParserId210"
			add_field => {
				"event_description" => "Chassis Linklocal to MAC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId211
	# line in RSA:  <process>[<process_id>]: <event_type>: Must be run as root
	else if [logstash][msgparser][id] == "msgParserId211" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Must be run as root" }
			id => "msgParserId211"
			add_field => {
				"event_description" => "DCD must be run as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId212
	# line in RSA:  <process>[<process_id>]: <event_type>: Filter library initialization failed
	else if [logstash][msgparser][id] == "msgParserId212" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Filter library initialization failed" }
			id => "msgParserId212"
			add_field => {
				"event_description" => "Filter library initialization failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId213
	# line in RSA:  <process>[<process_id>]: <event_type>: Memory allocation failed during initialization for configuration load
	else if [logstash][msgparser][id] == "msgParserId213" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Memory allocation failed during initialization for configuration load" }
			id => "msgParserId213"
			add_field => {
				"event_description" => "Memory allocation failed during initialization for configuration load"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId214
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: errors while parsing configuration file
	else if [logstash][msgparser][id] == "msgParserId214" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: errors while parsing configuration file" }
			id => "msgParserId214"
			add_field => {
				"event_description" => "errors while parsing configuration file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId215
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: errors while parsing filter index file
	else if [logstash][msgparser][id] == "msgParserId215" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: errors while parsing filter index file" }
			id => "msgParserId215"
			add_field => {
				"event_description" => "errors while parsing filter index file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId216
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: errors while parsing configuration overlay
	else if [logstash][msgparser][id] == "msgParserId216" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: errors while parsing configuration overlay" }
			id => "msgParserId216"
			add_field => {
				"event_description" => "errors while parsing configuration overlay"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId217
	# line in RSA:  <process>[<process_id>]: <event_type>: An unhandled state was encountered during interface parsing
	else if [logstash][msgparser][id] == "msgParserId217" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: An unhandled state was encountered during interface parsing" }
			id => "msgParserId217"
			add_field => {
				"event_description" => "unhandled state was encountered during interface parsing"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId218
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: errors while parsing policer indexfile
	else if [logstash][msgparser][id] == "msgParserId218" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: errors while parsing policer indexfile" }
			id => "msgParserId218"
			add_field => {
				"event_description" => "errors while parsing policer indexfile"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId219
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to pull file <filename> after <dclass_counter1> retries last error=<resultcode>
	else if [logstash][msgparser][id] == "msgParserId219" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to pull file %{filename} after %{dclass_counter1} retries last error=%{resultcode}" }
			id => "msgParserId219"
			add_field => {
				"event_description" => "Failed to pull file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId220
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>
	else if [logstash][msgparser][id] == "msgParserId220" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}" }
			id => "msgParserId220"
			add_field => {
				"event_description" => "DFWD ARGUMENT ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId221
	# line in RSA:  <process>[<process_id>]: <event_type>: <service> encountered errors while parsing filter index file
	else if [logstash][msgparser][id] == "msgParserId221" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service} encountered errors while parsing filter index file" }
			id => "msgParserId221"
			add_field => {
				"event_description" => "errors encountered while parsing filter index file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId222
	# line in RSA:  <process>[<process_id>]: <event_type>: <service> encountered unhandled state while parsing interface
	else if [logstash][msgparser][id] == "msgParserId222" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service} encountered unhandled state while parsing interface" }
			id => "msgParserId222"
			add_field => {
				"event_description" => "encountered unhandled state while parsing interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId223
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>, unable to run in the background as a daemon: <result>
	else if [logstash][msgparser][id] == "msgParserId223" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}, unable to run in the background as a daemon: %{result}" }
			id => "msgParserId223"
			add_field => {
				"event_description" => "unable to run in the background as a daemon"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId224
	# line in RSA:  <process>[<process_id>]: <event_type>: Another copy of this program is running
	else if [logstash][msgparser][id] == "msgParserId224" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Another copy of this program is running" }
			id => "msgParserId224"
			add_field => {
				"event_description" => "Another copy of this program is running"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId225
	# line in RSA:   <process>[<process_id>]: <event_type>: MainLoop return value: <disposition>, error: <result>
	else if [logstash][msgparser][id] == "msgParserId225" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: MainLoop return value: %{disposition}, error: %{result}" }
			id => "msgParserId225"
			add_field => {
				"event_description" => "ECCD LOOP EXIT FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId226
	# line in RSA:  <process>[<process_id>]: <event_type>: Must be run as root 
	else if [logstash][msgparser][id] == "msgParserId226" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Must be run as root" }
			id => "msgParserId226"
			add_field => {
				"event_description" => "ECCD Must be run as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId227
	# line in RSA:  <process>[<process_id>]: <event_type>: open() failed: <result>
	else if [logstash][msgparser][id] == "msgParserId227" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: open() failed: %{result}" }
			id => "msgParserId227"
			add_field => {
				"event_description" => "ECCD PCI FILE OPEN FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId228
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId228" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId228"
			add_field => {
				"event_description" => "PCI read failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId229
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId229" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId229"
			add_field => {
				"event_description" => "PCI write failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId230
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to lock PID file: <result>
	else if [logstash][msgparser][id] == "msgParserId230" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to lock PID file: %{result}" }
			id => "msgParserId230"
			add_field => {
				"event_description" => "Unable to lock PID file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId231
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to update process PID file: <result>
	else if [logstash][msgparser][id] == "msgParserId231" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to update process PID file: %{result}" }
			id => "msgParserId231"
			add_field => {
				"event_description" => "Unable to update process PID file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId232
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId232" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId232"
			add_field => {
				"event_description" => "ECCD TRACE FILE OPEN FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId233
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>: <info>
	else if [logstash][msgparser][id] == "msgParserId233" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}: %{info}" }
			id => "msgParserId233"
			add_field => {
				"event_description" => "ECCD Usage"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId234
	# line in RSA:   <process>[<process_id>]: <event_type>: User <username> viewed security audit log with arguments: <param>
	else if [logstash][msgparser][id] == "msgParserId234" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User %{username} viewed security audit log with arguments: %{param}" }
			id => "msgParserId234"
			add_field => {
				"event_description" => "User viewed security audit log with arguments"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId235
	# line in RSA: <event_type>: Packet merged source <saddr> destination <daddr> ipid <fld11> succeed
	else if [logstash][msgparser][id] == "msgParserId235" {
		dissect {
			mapping => { "message" => "%{event_type}: Packet merged source %{saddr} destination %{daddr} ipid %{fld11} succeed" }
			id => "msgParserId235"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId236
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to change owner of file `<filename>' to user <username>: <result>
	else if [logstash][msgparser][id] == "msgParserId236" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to change owner of file `%{filename}' to user %{username}: %{result}" }
			id => "msgParserId236"
			add_field => {
				"event_description" => "Unable to change owner of file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId237
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>
	else if [logstash][msgparser][id] == "msgParserId237" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}" }
			id => "msgParserId237"
			add_field => {
				"event_description" => "FSAD CONFIG ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId238
	# line in RSA:  <process>[<process_id>]: <event_type>: Connection timed out to the client (<shost>, <saddr>) having request type <obj_type>
	else if [logstash][msgparser][id] == "msgParserId238" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Connection timed out to the client (%{shost}, %{saddr}) having request type %{obj_type}" }
			id => "msgParserId238"
			add_field => {
				"event_description" => "Connection timed out to client"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId239
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId239" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{action}: %{result}" }
			id => "msgParserId239"
			add_field => {
				"event_description" => "FSAD_FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId240
	# line in RSA:  <process>[<process_id>]: <event_type>: Fetch to server <hostname> for file `<filename>' timed out
	else if [logstash][msgparser][id] == "msgParserId240" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Fetch to server %{hostname} for file `%{filename}' timed out" }
			id => "msgParserId240"
			add_field => {
				"event_description" => "Fetch to server to get file timed out"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId241
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: fn failed for file `<filename>' with error message <result>
	else if [logstash][msgparser][id] == "msgParserId241" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: fn failed for file `%{filename}' with error message %{result}" }
			id => "msgParserId241"
			add_field => {
				"event_description" => "fn failed for file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId242
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to remove file `<filename>': <result>
	else if [logstash][msgparser][id] == "msgParserId242" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to remove file `%{filename}': %{result}" }
			id => "msgParserId242"
			add_field => {
				"event_description" => "Unable to remove file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId243
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to rename file `<filename>' to `<resultcode>': <result>
	else if [logstash][msgparser][id] == "msgParserId243" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to rename file `%{filename}' to `%{resultcode}': %{result}" }
			id => "msgParserId243"
			add_field => {
				"event_description" => "Unable to rename file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId244
	# line in RSA:  <process>[<process_id>]: <event_type>: <service> failed for file pathname <filename>: <result>
	else if [logstash][msgparser][id] == "msgParserId244" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service} failed for file pathname %{filename}: %{result}" }
			id => "msgParserId244"
			add_field => {
				"event_description" => "stat failed for file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId245
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to sync file <filename>': <result>
	else if [logstash][msgparser][id] == "msgParserId245" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to sync file %{filename}': %{result}" }
			id => "msgParserId245"
			add_field => {
				"event_description" => "Unable to sync file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId246
	# line in RSA:  <process>[<process_id>]: <event_type>: Upper limit reached in fsad for handling connections
	else if [logstash][msgparser][id] == "msgParserId246" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Upper limit reached in fsad for handling connections" }
			id => "msgParserId246"
			add_field => {
				"event_description" => "Upper limit reached in fsad"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId247
	# line in RSA:  <process>[<process_id>]: <event_type>: <service> failed in the function <action> (<resultcode>)
	else if [logstash][msgparser][id] == "msgParserId247" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service} failed in the function %{action} (%{resultcode})" }
			id => "msgParserId247"
			add_field => {
				"event_description" => "FSAD MEMORYALLOC FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId248
	# line in RSA:  <process>[<process_id>]: <event_type>: Must be run as root 
	else if [logstash][msgparser][id] == "msgParserId248" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Must be run as root" }
			id => "msgParserId248"
			add_field => {
				"event_description" => "FSAD must be run as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId249
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: invalid directory: <result>
	else if [logstash][msgparser][id] == "msgParserId249" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: invalid directory: %{result}" }
			id => "msgParserId249"
			add_field => {
				"event_description" => "invalid directory"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId250
	# line in RSA:  <process>[<process_id>]: <event_type>: File path cannot be a directory (<filename>)
	else if [logstash][msgparser][id] == "msgParserId250" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: File path cannot be a directory (%{filename})" }
			id => "msgParserId250"
			add_field => {
				"event_description" => "File path cannot be a directory"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId251
	# line in RSA:  <process>[<process_id>]: <event_type>: Not a regular file (<filename>)
	else if [logstash][msgparser][id] == "msgParserId251" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Not a regular file (%{filename})" }
			id => "msgParserId251"
			add_field => {
				"event_description" => "Not a regular file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId252
	# line in RSA:  <process>[<process_id>]: <event_type>: fsad received error message from client having request type <obj_type> at (<saddr>, <sport>)
	else if [logstash][msgparser][id] == "msgParserId252" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: fsad received error message from client having request type %{obj_type} at (%{saddr}, %{sport})" }
			id => "msgParserId252"
			add_field => {
				"event_description" => "fsad received error message from client"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId253
	# line in RSA:  <process>[<process_id>]: <event_type>: Open file <filename>` closed due to <result>
	else if [logstash][msgparser][id] == "msgParserId253" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Open file %{filename}` closed due to %{result}" }
			id => "msgParserId253"
			add_field => {
				"event_description" => "FSAD TERMINATED CONNECTION"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId254
	# line in RSA:  <process>[<process_id>]: <event_type>: Received terminating <resultcode>; <result>
	else if [logstash][msgparser][id] == "msgParserId254" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Received terminating %{resultcode}; %{result}" }
			id => "msgParserId254"
			add_field => {
				"event_description" => "Received terminating signal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId255
	# line in RSA:  <process>[<process_id>]: <event_type>: Open operation on trace file `<filename>' returned error <result>
	else if [logstash][msgparser][id] == "msgParserId255" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Open operation on trace file `%{filename}' returned error %{result}" }
			id => "msgParserId255"
			add_field => {
				"event_description" => "Open operation on trace file failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId256
	# line in RSA:  <process>[<process_id>]: <event_type>: Incorrect usage, <info>
	else if [logstash][msgparser][id] == "msgParserId256" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Incorrect usage, %{info}" }
			id => "msgParserId256"
			add_field => {
				"event_description" => "Incorrect FSAD usage"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId257
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId257" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{action}: %{result}" }
			id => "msgParserId257"
			add_field => {
				"event_description" => "GGSN ALARM TRAP FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId258
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId258" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{action}: %{result}" }
			id => "msgParserId258"
			add_field => {
				"event_description" => "GGSN ALARM TRAP SEND FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId259
	# line in RSA:  <process>[<process_id>]: <event_type>: Unknown trap request type <obj_type>
	else if [logstash][msgparser][id] == "msgParserId259" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unknown trap request type %{obj_type}" }
			id => "msgParserId259"
			add_field => {
				"event_description" => "Unknown trap request type"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId260
	# line in RSA:  <process>[<process_id>]: <event_type>: Authorization failed: <result>
	else if [logstash][msgparser][id] == "msgParserId260" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Authorization failed: %{result}" }
			id => "msgParserId260"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "Service"
				"ec_outcome" => "Failure"
				"event_description" => "Authorization failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId261
	# line in RSA:  <process>[<process_id>]: <event_type>: CLI <resultcode> <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId261" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: CLI %{resultcode} %{action}: %{result}" }
			id => "msgParserId261"
			add_field => {
				"event_description" => "JADE EXEC ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId262
	# line in RSA:  <process>[<process_id>]: <event_type>: Local user <username> does not exist
	else if [logstash][msgparser][id] == "msgParserId262" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Local user %{username} does not exist" }
			id => "msgParserId262"
			add_field => {
				"event_description" => "Local user does not exist"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId263
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId263" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId263"
			add_field => {
				"event_description" => "JADE PAM error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId264
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to get local username from PAM: <result>
	else if [logstash][msgparser][id] == "msgParserId264" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to get local username from PAM: %{result}" }
			id => "msgParserId264"
			add_field => {
				"event_description" => "Unable to get local username from PAM"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId265
	# line in RSA:  <process>: <event_type>: arp info overwritten for <saddr> from <smacaddr> to <dmacaddr>
	else if [logstash][msgparser][id] == "msgParserId265" {
		dissect {
			mapping => { "message" => "%{process}: %{event_type}: arp info overwritten for %{saddr} from %{smacaddr} to %{dmacaddr}" }
			id => "msgParserId265"
			add_field => {
				"event_description" => "arp info overwritten"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId266
	# line in RSA:  <process>[<process_id>]: <event_type>: Local gateway: <gateway>, Remote gateway: <fld1>, Local ID:<fld2>, Remote ID:<fld3>, Direction:<fld4>, SPI:<fld5> 
	else if [logstash][msgparser][id] == "msgParserId266" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Local gateway: %{gateway}, Remote gateway: %{fld1}, Local ID:%{fld2}, Remote ID:%{fld3}, Direction:%{fld4}, SPI:%{fld5}" }
			id => "msgParserId266"
			add_field => {
				"event_description" => "security association has been established"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId267
	# line in RSA:  <process>[<process_id>]: <event_type>: Reinitialized
	else if [logstash][msgparser][id] == "msgParserId267" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Reinitialized" }
			id => "msgParserId267"
			add_field => {
				"event_description" => "Task Reinitialized"
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId268
	# line in RSA:  <process>[<process_id>]: <event_type>: Command stopped: PID <child_pid>, signal='<obj_type>' <result>, command '<action>'
	else if [logstash][msgparser][id] == "msgParserId268" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Command stopped: PID %{child_pid}, signal='%{obj_type}' %{result}, command '%{action}'" }
			id => "msgParserId268"
			add_field => {
				"event_description" => "Command stopped"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId269
	# line in RSA:  <process>[<process_id>]: <event_type>: Child exec failed for command '<action>': <result>
	else if [logstash][msgparser][id] == "msgParserId269" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Child exec failed for command '%{action}': %{result}" }
			id => "msgParserId269"
			add_field => {
				"event_description" => "Child exec failed for command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId270
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to create pipes for command '<action>': <result>
	else if [logstash][msgparser][id] == "msgParserId270" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to create pipes for command '%{action}': %{result}" }
			id => "msgParserId270"
			add_field => {
				"event_description" => "Unable to create pipes for command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId271
	# line in RSA:  <process>[<process_id>]: <event_type>: Command received signal: PID <child_pid>, signal <result>, command '<action>'
	else if [logstash][msgparser][id] == "msgParserId271" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Command received signal: PID %{child_pid}, signal %{result}, command '%{action}'" }
			id => "msgParserId271"
			add_field => {
				"event_description" => "Command received signal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId272
	# line in RSA:  <process>[<process_id>]: <event_type>: Command exited: PID <child_pid>, status <result>, command '<action>'
	else if [logstash][msgparser][id] == "msgParserId272" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Command exited: PID %{child_pid}, status %{result}, command '%{action}'" }
			id => "msgParserId272"
			add_field => {
				"event_description" => "Command exited"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId273
	# line in RSA:  <process>[<process_id>]: <event_type>: copy_file_to_transfer_dir failed to copy from source to destination
	else if [logstash][msgparser][id] == "msgParserId273" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: copy_file_to_transfer_dir failed to copy from source to destination" }
			id => "msgParserId273"
			add_field => {
				"event_description" => "copy_file_to_transfer_dir failed to copy"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId274
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to lower privilege level: <result>
	else if [logstash][msgparser][id] == "msgParserId274" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to lower privilege level: %{result}" }
			id => "msgParserId274"
			add_field => {
				"event_description" => "Unable to lower privilege level"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId275
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to raise privilege level: <result>
	else if [logstash][msgparser][id] == "msgParserId275" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to raise privilege level: %{result}" }
			id => "msgParserId275"
			add_field => {
				"event_description" => "Unable to raise privilege level"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId276
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId276" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId276"
			add_field => {
				"event_description" => "rcp failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId277
	# line in RSA:  <process>[<process_id>]: <event_type>: <resultcode> <dclass_counter1> -f <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId277" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{resultcode} %{dclass_counter1} -f %{action}: %{result}" }
			id => "msgParserId277"
			add_field => {
				"event_description" => "ROTATE COMPRESS EXEC FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId278
	# line in RSA:  <process>[<process_id>]: <event_type>: Client connection error: <result>
	else if [logstash][msgparser][id] == "msgParserId278" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Client connection error: %{result}" }
			id => "msgParserId278"
			add_field => {
				"event_description" => "Client connection error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId279
	# line in RSA:  <process>[<process_id>]: <event_type>: Outbound request failed for command [<action>]: <result>
	else if [logstash][msgparser][id] == "msgParserId279" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Outbound request failed for command [%{action}]: %{result}" }
			id => "msgParserId279"
			add_field => {
				"event_description" => "Outbound request failed for command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId280
	# line in RSA:  <process>[<process_id>]: <event_type>: Connection closed while receiving from client <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId280" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Connection closed while receiving from client %{dclass_counter1}" }
			id => "msgParserId280"
			add_field => {
				"event_description" => "Connection closed while receiving from client"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId281
	# line in RSA:  <process>[<process_id>]: <event_type>: <resultcode>: unable to bind socket <ssid>: <result>
	else if [logstash][msgparser][id] == "msgParserId281" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{resultcode}: unable to bind socket %{ssid}: %{result}" }
			id => "msgParserId281"
			add_field => {
				"event_description" => "unable to bind socket"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId282
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to attach socket <ssid> to management routing instance: <result>
	else if [logstash][msgparser][id] == "msgParserId282" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to attach socket %{ssid} to management routing instance: %{result}" }
			id => "msgParserId282"
			add_field => {
				"event_description" => "Unable to attach socket to management routing instance"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId283
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>
	else if [logstash][msgparser][id] == "msgParserId283" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}" }
			id => "msgParserId283"
			add_field => {
				"event_description" => "LICENSE EXPIRED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId284
	# line in RSA:  <process>[<process_id>]: <event_type>: License key "<filename>" has expired.
	else if [logstash][msgparser][id] == "msgParserId284" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: License key \"%{filename}\" has expired." }
			id => "msgParserId284"
			add_field => {
				"event_description" => "License key has expired"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId285
	# line in RSA:  <process>[<process_id>]: <event_type>: License for feature <disposition> <result>
	else if [logstash][msgparser][id] == "msgParserId285" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: License for feature %{disposition} %{result}" }
			id => "msgParserId285"
			add_field => {
				"event_description" => "License key expiration soon"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId286
	# line in RSA:  <process>[<process_id>]: <event_type>: Client aborted login
	else if [logstash][msgparser][id] == "msgParserId286" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Client aborted login" }
			id => "msgParserId286"
			add_field => {
				"event_description" => "client aborted login"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId287
	# line in RSA:  <process>[<process_id>]: <event_type>: Login failed for user <username> from host <dhost>
	else if [logstash][msgparser][id] == "msgParserId287" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Login failed for user %{username} from host %{dhost}" }
			id => "msgParserId287"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId288
	# line in RSA:  <process>[<process_id>]: <event_type>: Incorrect password for user <username>
	else if [logstash][msgparser][id] == "msgParserId288" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Incorrect password for user %{username}" }
			id => "msgParserId288"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Incorrect password for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId289
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to set context for user <username>
	else if [logstash][msgparser][id] == "msgParserId289" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to set context for user %{username}" }
			id => "msgParserId289"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Failed to set context for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId290
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to set login ID for user <username>: <dhost>
	else if [logstash][msgparser][id] == "msgParserId290" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to set login ID for user %{username}: %{dhost}" }
			id => "msgParserId290"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Failed to set login ID for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId291
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to resolve hostname <dhost>: <info> 
	else if [logstash][msgparser][id] == "msgParserId291" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to resolve hostname %{dhost}: %{info}" }
			id => "msgParserId291"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Unable to resolve hostname"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId292
	# line in RSA:  { <process>[<process_id>]: | <process>: } <event_type>:  { User | user } <username> logged in from host <dhost> { on device | on } <terminal> 
	else if [logstash][msgparser][id] == "msgParserId292" {
		grok {
			match => { "message" => "^[\s]*([\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<process>[^:]*):[\s]+)[\s]+(?<event_type>[^:]*):[\s]+([\s]*User[\s]+|[\s]*user[\s]+)[\s]+(?<username>[^\s]*)[\s]+logged[\s]+in[\s]+from[\s]+host[\s]+(?<dhost>[^\s]*)[\s]+([\s]*on[\s]+device[\s]+|[\s]*on[\s]+)[\s]+(?<terminal>[^\s]*)[\s]+$" }
			id => "msgParserId292"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Successful Login"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId293
	# line in RSA:  <process>[<process_id>]: <event_type>: No entry in local password file for user <username> 
	else if [logstash][msgparser][id] == "msgParserId293" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No entry in local password file for user %{username}" }
			id => "msgParserId293"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "No entry in local password file for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId294
	# line in RSA:  <process>[<process_id>]: <event_type>: Invalid username: <username> 
	else if [logstash][msgparser][id] == "msgParserId294" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Invalid username: %{username}" }
			id => "msgParserId294"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Invalid username"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId295
	# line in RSA:  <process>[<process_id>]: <event_type>: { PAM authentication error for user | Failed password for user } <username> 
	else if [logstash][msgparser][id] == "msgParserId295" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+([\s]*PAM[\s]+authentication[\s]+error[\s]+for[\s]+user[\s]+|[\s]*Failed[\s]+password[\s]+for[\s]+user[\s]+)[\s]+(?<username>[^\s]*)[\s]+$" }
			id => "msgParserId295"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "PAM authentication error for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId296
	# line in RSA:  <process>[<process_id>]: <event_type>: Failure while authenticating user <username>: <dhost>
	else if [logstash][msgparser][id] == "msgParserId296" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failure while authenticating user %{username}: %{dhost}" }
			id => "msgParserId296"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "PAM authentication failure"
				"result" => "Failure while authenticating user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId297
	# line in RSA:  <process>[<process_id>]: <event_type>: Too many retries while authenticating user <username> 
	else if [logstash][msgparser][id] == "msgParserId297" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Too many retries while authenticating user %{username}" }
			id => "msgParserId297"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Too many retries while authenticating user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId298
	# line in RSA:  <process>[<process_id>]: <event_type>: User <username> authenticated but has no local login ID
	else if [logstash][msgparser][id] == "msgParserId298" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User %{username} authenticated but has no local login ID" }
			id => "msgParserId298"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "User authenticated but has no local login ID"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId299
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to end PAM session: <info>
	else if [logstash][msgparser][id] == "msgParserId299" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to end PAM session: %{info}" }
			id => "msgParserId299"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Failed to end PAM session"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId300
	# line in RSA:  <process>[<process_id>]: <event_type>: Attempt to authenticate unknown user <username>
	else if [logstash][msgparser][id] == "msgParserId300" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Attempt to authenticate unknown user %{username}" }
			id => "msgParserId300"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Attempt to authenticate unknown user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId301
	# line in RSA:  <process>[<process_id>]: <event_type>: Forcing change of expired password for user <username>>
	else if [logstash][msgparser][id] == "msgParserId301" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Forcing change of expired password for user %{username}>" }
			id => "msgParserId301"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Forcing change of expired password for user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId302
	# line in RSA:  <process>[<process_id>]: <event_type>: Login of user <username> from host <shost> on <terminal> was refused: <info>
	else if [logstash][msgparser][id] == "msgParserId302" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Login of user %{username} from host %{shost} on %{terminal} was refused: %{info}" }
			id => "msgParserId302"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Login of user refused"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId303
	# line in RSA:  <process>[<process_id>]: <event_type>: User <username> logged in as root from host <shost> on <terminal>
	else if [logstash][msgparser][id] == "msgParserId303" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User %{username} logged in as root from host %{shost} on %{terminal}" }
			id => "msgParserId303"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "successful login as root"
				"result" => "User logged in as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId304
	# line in RSA:  <process>[<process_id>]: <event_type>: Login attempt timed out after <dclass_counter1> seconds
	else if [logstash][msgparser][id] == "msgParserId304" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Login attempt timed out after %{dclass_counter1} seconds" }
			id => "msgParserId304"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login failure"
				"result" => "Login attempt timed out"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId305
	# line in RSA:  <process>[<process_id>]: <event_type>:  <service>: <result>
	else if [logstash][msgparser][id] == "msgParserId305" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}:  %{service}: %{result}" }
			id => "msgParserId305"
			add_field => {
				"event_description" => "MIB2D ATM ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId306
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <result>
	else if [logstash][msgparser][id] == "msgParserId306" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{result}" }
			id => "msgParserId306"
			add_field => {
				"event_description" => "CONFIG CHECK FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId307
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to open file '<filename>': <result>
	else if [logstash][msgparser][id] == "msgParserId307" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to open file '%{filename}': %{result}" }
			id => "msgParserId307"
			add_field => {
				"event_description" => "Unable to open file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId308
	# line in RSA:  <process>[<process_id>]: <event_type>: SNMP index assigned to <uid> changed from <dclass_counter1> to <result>
	else if [logstash][msgparser][id] == "msgParserId308" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: SNMP index assigned to %{uid} changed from %{dclass_counter1} to %{result}" }
			id => "msgParserId308"
			add_field => {
				"event_description" => "SNMP index assigned changed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId309
	# line in RSA:  <process>[<process_id>]: <event_type>: mib2d initialization failure: <result>
	else if [logstash][msgparser][id] == "msgParserId309" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: mib2d initialization failure: %{result}" }
			id => "msgParserId309"
			add_field => {
				"event_description" => "mib2d initialization failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId310
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <result>
	else if [logstash][msgparser][id] == "msgParserId310" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{result}" }
			id => "msgParserId310"
			add_field => {
				"event_description" => "MIB2D KVM FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId311
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: failed in <dclass_counter1> <dclass_counter2> index (<result>)
	else if [logstash][msgparser][id] == "msgParserId311" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: failed in %{dclass_counter1} %{dclass_counter2} index (%{result})" }
			id => "msgParserId311"
			add_field => {
				"event_description" => "MIB2D RTSLIB READ FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId312
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: sequence mismatch (<result>), <action>
	else if [logstash][msgparser][id] == "msgParserId312" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: sequence mismatch (%{result}), %{action}" }
			id => "msgParserId312"
			add_field => {
				"event_description" => "RTSLIB sequence mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId313
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId313" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{action}: %{result}" }
			id => "msgParserId313"
			add_field => {
				"event_description" => "MIB2D SYSCTL FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId314
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: trap_request_header failed
	else if [logstash][msgparser][id] == "msgParserId314" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: trap_request_header failed" }
			id => "msgParserId314"
			add_field => {
				"event_description" => "trap_request_header failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId315
	# line in RSA:  <process>[<process_id>]: <event_type>: <service>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId315" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{service}: %{action}: %{result}" }
			id => "msgParserId315"
			add_field => {
				"event_description" => "MIB2D TRAP SEND FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId316
	# line in RSA:  <process>[<process_id>]: <event_type>: old requested_transition==<change_new> sighupped=<result>
	else if [logstash][msgparser][id] == "msgParserId316" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: old requested_transition==%{change_new} sighupped=%{result}" }
			id => "msgParserId316"
			add_field => {
				"event_description" => "user sighupped"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId317
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to allocate authentication handle: <result>
	else if [logstash][msgparser][id] == "msgParserId317" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to allocate authentication handle: %{result}" }
			id => "msgParserId317"
			add_field => {
				"event_description" => "Unable to allocate authentication handle"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId318
	# line in RSA:  <process>[<process_id>]: <event_type>: <interface>: received <filename>, authentication already in progress
	else if [logstash][msgparser][id] == "msgParserId318" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{interface}: received %{filename}, authentication already in progress" }
			id => "msgParserId318"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "authentication already in progress"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId319
	# line in RSA:  <process>[<process_id>]: <event_type>: <interface>: unable to obtain hostname for outgoing CHAP message: <result>
	else if [logstash][msgparser][id] == "msgParserId319" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{interface}: unable to obtain hostname for outgoing CHAP message: %{result}" }
			id => "msgParserId319"
			add_field => {
				"event_description" => "unable to obtain hostname for outgoing CHAP message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId320
	# line in RSA:  <process>[<process_id>]: <event_type>: <interface>: received <filename> expected CHAP ID: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId320" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{interface}: received %{filename} expected CHAP ID: %{resultcode}" }
			id => "msgParserId320"
			add_field => {
				"event_description" => "CHAP INVALID_CHAP IDENTIFIER"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId321
	# line in RSA:  <process>[<process_id>]: <event_type>: <interface>.<dclass_counter1>: invalid operation code received <filename>, CHAP ID: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId321" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{interface}.%{dclass_counter1}: invalid operation code received %{filename}, CHAP ID: %{resultcode}" }
			id => "msgParserId321"
			add_field => {
				"event_description" => "CHAP INVALID OPCODE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId322
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to determine value for '<username>' in outgoing CHAP packet
	else if [logstash][msgparser][id] == "msgParserId322" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to determine value for '%{username}' in outgoing CHAP packet" }
			id => "msgParserId322"
			add_field => {
				"event_description" => "Unable to determine value for username in outgoing CHAP packet"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId323
	# line in RSA:  <process>[<process_id>]: <event_type>: <interface>: received <filename>
	else if [logstash][msgparser][id] == "msgParserId323" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{interface}: received %{filename}" }
			id => "msgParserId323"
			add_field => {
				"event_description" => "CHAP MESSAGE UNEXPECTED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId324
	# line in RSA:  <process>[<ssid>]: <event_type>: <interface>.<dclass_counter1>: received <filename> <result>.<info>
	else if [logstash][msgparser][id] == "msgParserId324" {
		dissect {
			mapping => { "message" => "%{process}[%{ssid}]: %{event_type}: %{interface}.%{dclass_counter1}: received %{filename} %{result}.%{info}" }
			id => "msgParserId324"
			add_field => {
				"event_description" => "CHAP REPLAY ATTACK DETECTED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId325
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to determine last modified time of JUNOS configuration database: <result>
	else if [logstash][msgparser][id] == "msgParserId325" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to determine last modified time of JUNOS configuration database: %{result}" }
			id => "msgParserId325"
			add_field => {
				"event_description" => "Unable to determine last modified time of JUNOS configuration database"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId326
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to allocate database object: <filename>, <result>
	else if [logstash][msgparser][id] == "msgParserId326" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to allocate database object: %{filename}, %{result}" }
			id => "msgParserId326"
			add_field => {
				"event_description" => "Unable to allocate database object"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId327
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <filename>, <result>
	else if [logstash][msgparser][id] == "msgParserId327" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{filename}, %{result}" }
			id => "msgParserId327"
			add_field => {
				"event_description" => "DB TABLE CREATE FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId328
	# line in RSA:  <process>[<process_id>]: <event_type>: <action> with: <result>
	else if [logstash][msgparser][id] == "msgParserId328" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action} with: %{result}" }
			id => "msgParserId328"
			add_field => {
				"event_description" => "EVLIB CREATE FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId329
	# line in RSA:  <process>[<process_id>]: <event_type>: <action> value: <result>, error: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId329" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action} value: %{result}, error: %{resultcode}" }
			id => "msgParserId329"
			add_field => {
				"event_description" => "EVLIB EXIT FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId330
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to allocate LOCAL module handle: <result>
	else if [logstash][msgparser][id] == "msgParserId330" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to allocate LOCAL module handle: %{result}" }
			id => "msgParserId330"
			add_field => {
				"event_description" => "Unable to allocate LOCAL module handle"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId331
	# line in RSA:  <process>[<process_id>]: <event_type>: Must be run as root 
	else if [logstash][msgparser][id] == "msgParserId331" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Must be run as root" }
			id => "msgParserId331"
			add_field => {
				"event_description" => "NASD must be run as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId332
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId332" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId332"
			add_field => {
				"event_description" => "POST CONFIGURE EVENT FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId333
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId333" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId333"
			add_field => {
				"event_description" => "PPP READ FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId334
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to send message: <result>
	else if [logstash][msgparser][id] == "msgParserId334" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to send message: %{result}" }
			id => "msgParserId334"
			add_field => {
				"event_description" => "Unable to send message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId335
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to send all of message: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId335" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to send all of message: %{resultcode}" }
			id => "msgParserId335"
			add_field => {
				"event_description" => "Unable to send all of message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId336
	# line in RSA:  <process>[<process_id>]: <event_type>: Unrecognized authentication protocol: <protocol>
	else if [logstash][msgparser][id] == "msgParserId336" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unrecognized authentication protocol: %{protocol}" }
			id => "msgParserId336"
			add_field => {
				"event_description" => "Unrecognized authentication protocol"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId337
	# line in RSA:  <process>[<process_id>]: <event_type>: <action> when allocating password for RADIUS: <result>
	else if [logstash][msgparser][id] == "msgParserId337" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action} when allocating password for RADIUS: %{result}" }
			id => "msgParserId337"
			add_field => {
				"event_description" => "RADIUS password allocation failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId338
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId338" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId338"
			add_field => {
				"event_description" => "RADIUS CONFIG FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId339
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to allocate RADIUS module handle: <result>
	else if [logstash][msgparser][id] == "msgParserId339" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to allocate RADIUS module handle: %{result}" }
			id => "msgParserId339"
			add_field => {
				"event_description" => "Unable to allocate RADIUS module handle"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId340
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId340" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId340"
			add_field => {
				"event_description" => "RADIUS CREATE REQUEST FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId341
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to obtain hostname for outgoing RADIUS message: <result>
	else if [logstash][msgparser][id] == "msgParserId341" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to obtain hostname for outgoing RADIUS message: %{result}" }
			id => "msgParserId341"
			add_field => {
				"event_description" => "Unable to obtain hostname for outgoing RADIUS message"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId342
	# line in RSA:  <process>[<process_id>]: <event_type>: Unknown response from RADIUS server: <result>
	else if [logstash][msgparser][id] == "msgParserId342" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unknown response from RADIUS server: %{result}" }
			id => "msgParserId342"
			add_field => {
				"event_description" => "Unknown response from RADIUS server"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId343
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId343" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId343"
			add_field => {
				"event_description" => "RADIUS OPEN FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId344
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId344" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId344"
			add_field => {
				"event_description" => "RADIUS SELECT FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId345
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId345" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId345"
			add_field => {
				"event_description" => "RADIUS SET TIMER FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId346
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId346" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId346"
			add_field => {
				"event_description" => "TRACE FILE OPEN FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId347
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>: <info>
	else if [logstash][msgparser][id] == "msgParserId347" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}: %{info}" }
			id => "msgParserId347"
			add_field => {
				"event_description" => "NASD Usage"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId348
	# line in RSA:  <agent>: <event_type>:<action>: <event_description>: The <result>
	else if [logstash][msgparser][id] == "msgParserId348" {
		dissect {
			mapping => { "message" => "%{agent}: %{event_type}:%{action}: %{event_description}: The %{result}" }
			id => "msgParserId348"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "PFE_FW_SYSLOG_IP" {
		# MESSAGE PFE_FW_SYSLOG_IP
		# line in RSA:  <process>[<process_id>]: <event_type>: FW: <smacaddr>   <fld10>  <protocol> <saddr> <daddr> <sport>    <dport> (<packets> packets) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: FW: %{smacaddr}   %{fld10}  %{protocol} %{saddr} %{daddr} %{sport}    %{dport} (%{packets} packets)" }
				id => "message-PFE_FW_SYSLOG_IP"
				add_field => {
				"event_description" => "PFE FW SYSLOG_IP"
					"[event][id]" => "PFE_FW_SYSLOG_IP"
					"[rsa][message][id1]" => "PFE_FW_SYSLOG_IP"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE PFE_FW_SYSLOG_IP:01
		# line in RSA:  <hostip> <hostname><event_type>: FW: <smacaddr>   <fld10>  <protocol> <saddr> <daddr> <sport>    <dport> (<packets> packets) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip} %{hostname}%{event_type}: FW: %{smacaddr}   %{fld10}  %{protocol} %{saddr} %{daddr} %{sport}    %{dport} (%{packets} packets)" }
				id => "message-PFE_FW_SYSLOG_IP:01"
				add_field => {
				"event_description" => "PFE FW SYSLOG_IP"
					"[event][id]" => "PFE_FW_SYSLOG_IP:01"
					"[rsa][message][id1]" => "PFE_FW_SYSLOG_IP:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId351
	# line in RSA:  <process>[<process_id>]: <event_type>: Next-hop resolution requests from interface <interface> throttled
	else if [logstash][msgparser][id] == "msgParserId351" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Next-hop resolution requests from interface %{interface} throttled" }
			id => "msgParserId351"
			add_field => {
				"event_description" => "Next-hop resolution requests throttled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId352
	# line in RSA:  <process>[<process_id>]: <event_type>: pingCtlOwnerIndex = <dclass_counter1>, pingCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId352" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pingCtlOwnerIndex = %{dclass_counter1}, pingCtlTestName = %{obj_name}" }
			id => "msgParserId352"
			add_field => {
				"event_description" => "PING TEST COMPLETED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId353
	# line in RSA:  <process>[<process_id>]: <event_type>: pingCtlOwnerIndex = <dclass_counter1>, pingCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId353" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pingCtlOwnerIndex = %{dclass_counter1}, pingCtlTestName = %{obj_name}" }
			id => "msgParserId353"
			add_field => {
				"event_description" => "PING TEST FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "process_mode" {
		# MESSAGE process_mode
		# line in RSA:  { <process>[<process_id>]: | <process>: } { <event_type>: | <event_type> }  mode=<protocol> cmd=<action> master_mode=<result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+|[\s]*(?<process>[^:]*):[\s]+)[\s]+([\s]*(?<event_type>[^:]*):[\s]+|[\s]*(?<event_type>[^\s]*)[\s]+)[\s]+mode=(?<protocol>[^\s]*)[\s]+cmd=(?<action>[^\s]*)[\s]+master_mode=(?<result>.*)$" }
				id => "message-process_mode"
				add_field => {
				"event_description" => "process_mode"
					"[event][id]" => "process_mode"
					"[rsa][message][id1]" => "process_mode"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE process_mode:01
		# line in RSA:  <process>[<process_id>]: <event_type>: current_mode=<protocol>, requested_mode=<result>, cmd=<action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: current_mode=%{protocol}, requested_mode=%{result}, cmd=%{action}" }
				id => "message-process_mode:01"
				add_field => {
				"event_description" => "process_mode"
					"[event][id]" => "process_mode:01"
					"[rsa][message][id1]" => "process_mode:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId356
	# line in RSA:  <process>[<process_id>]: <event_type>: Process <agent> exiting with status <result>
	else if [logstash][msgparser][id] == "msgParserId356" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Process %{agent} exiting with status %{result}" }
			id => "msgParserId356"
			add_field => {
				"event_description" => "process exit with status"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId357
	# line in RSA:  <process>[<process_id>]: <event_type>: Process <agent> released child <child_pid> from <dclass_counter1> state
	else if [logstash][msgparser][id] == "msgParserId357" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Process %{agent} released child %{child_pid} from %{dclass_counter1} state" }
			id => "msgParserId357"
			add_field => {
				"event_description" => "Process released child from state"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId358
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result>, not <resultcode>
	else if [logstash][msgparser][id] == "msgParserId358" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result}, not %{resultcode}" }
			id => "msgParserId358"
			add_field => {
				"event_description" => "invalid runs argument"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId359
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId359" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result}" }
			id => "msgParserId359"
			add_field => {
				"event_description" => "INVALID TIMEOUT ARGUMENT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId360
	# line in RSA:  <process>[<process_id>]: <event_type>: pwc process <agent> received terminating signal
	else if [logstash][msgparser][id] == "msgParserId360" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pwc process %{agent} received terminating signal" }
			id => "msgParserId360"
			add_field => {
				"event_description" => "pwc process received terminating signal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId361
	# line in RSA:  <process>[<process_id>]: <event_type>: pwc is sending <resultcode> to child <child_pid>
	else if [logstash][msgparser][id] == "msgParserId361" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pwc is sending %{resultcode} to child %{child_pid}" }
			id => "msgParserId361"
			add_field => {
				"event_description" => "pwc is sending kill event to child"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId362
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to kill process <child_pid>: <result>
	else if [logstash][msgparser][id] == "msgParserId362" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to kill process %{child_pid}: %{result}" }
			id => "msgParserId362"
			add_field => {
				"event_description" => "Unable to kill process"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId363
	# line in RSA:  <process>[<process_id>]: <event_type>: kevent failed: <result>
	else if [logstash][msgparser][id] == "msgParserId363" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: kevent failed: %{result}" }
			id => "msgParserId363"
			add_field => {
				"event_description" => "kevent failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId364
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to create kqueue: <result>
	else if [logstash][msgparser][id] == "msgParserId364" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to create kqueue: %{result}" }
			id => "msgParserId364"
			add_field => {
				"event_description" => "Unable to create kqueue"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId365
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to register kqueue filter: <agent> for purpose: <result>
	else if [logstash][msgparser][id] == "msgParserId365" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to register kqueue filter: %{agent} for purpose: %{result}" }
			id => "msgParserId365"
			add_field => {
				"event_description" => "Failed to register kqueue filter"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId366
	# line in RSA:  <process>[<process_id>]: <event_type>: PID lock file has bad format: <agent>
	else if [logstash][msgparser][id] == "msgParserId366" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: PID lock file has bad format: %{agent}" }
			id => "msgParserId366"
			add_field => {
				"event_description" => "PID lock file has bad format"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId367
	# line in RSA:  <process>[<process_id>]: <event_type>: PID lock file had error: <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId367" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: PID lock file had error: %{agent}: %{result}" }
			id => "msgParserId367"
			add_field => {
				"event_description" => "PID lock file error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId368
	# line in RSA:  <process>[<process_id>]: <event_type>: PID lock file not found: <agent>
	else if [logstash][msgparser][id] == "msgParserId368" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: PID lock file not found: %{agent}" }
			id => "msgParserId368"
			add_field => {
				"event_description" => "PID lock file not found"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId369
	# line in RSA:  <process>[<process_id>]: <event_type>: PID lock file not locked: <agent>
	else if [logstash][msgparser][id] == "msgParserId369" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: PID lock file not locked: %{agent}" }
			id => "msgParserId369"
			add_field => {
				"event_description" => "PID lock file not locked"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId370
	# line in RSA:  <process>[<process_id>]: <event_type>: No process specified
	else if [logstash][msgparser][id] == "msgParserId370" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No process specified" }
			id => "msgParserId370"
			add_field => {
				"event_description" => "No process specified for PWC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId371
	# line in RSA:  <process>[<process_id>]: <event_type>: pwc process <agent> child <child_pid> exited with status <result>
	else if [logstash][msgparser][id] == "msgParserId371" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pwc process %{agent} child %{child_pid} exited with status %{result}" }
			id => "msgParserId371"
			add_field => {
				"event_description" => "pwc process exited with status"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId372
	# line in RSA:  <process>[<process_id>]: <event_type>: Process <agent> forcing hold down of child <child_pid> until signal
	else if [logstash][msgparser][id] == "msgParserId372" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Process %{agent} forcing hold down of child %{child_pid} until signal" }
			id => "msgParserId372"
			add_field => {
				"event_description" => "Process forcing hold down of child until signalled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId373
	# line in RSA:  <process>[<process_id>]: <event_type>: Process <agent> holding down child <child_pid> until signal
	else if [logstash][msgparser][id] == "msgParserId373" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Process %{agent} holding down child %{child_pid} until signal" }
			id => "msgParserId373"
			add_field => {
				"event_description" => "Process holding down child until signalled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId374
	# line in RSA:  <process>[<process_id>]: <event_type>: Process <agent> will not down child <child_pid> because of <result>
	else if [logstash][msgparser][id] == "msgParserId374" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Process %{agent} will not down child %{child_pid} because of %{result}" }
			id => "msgParserId374"
			add_field => {
				"event_description" => "Process not holding down child"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId375
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to create child process with pidpopen: <result>
	else if [logstash][msgparser][id] == "msgParserId375" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to create child process with pidpopen: %{result}" }
			id => "msgParserId375"
			add_field => {
				"event_description" => "Failed to create child process with pidpopen"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId376
	# line in RSA:  <process>[<process_id>]: <event_type>: Process <agent> holding down child <child_pid> <result>
	else if [logstash][msgparser][id] == "msgParserId376" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Process %{agent} holding down child %{child_pid} %{result}" }
			id => "msgParserId376"
			add_field => {
				"event_description" => "Process holding down child"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId377
	# line in RSA:  <process>[<process_id>]: <event_type>: Child timed out <result>
	else if [logstash][msgparser][id] == "msgParserId377" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Child timed out %{result}" }
			id => "msgParserId377"
			add_field => {
				"event_description" => "Child process timed out"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId378
	# line in RSA:  <process>[<process_id>]: <event_type>: signal(<agent>) failed: <result>
	else if [logstash][msgparser][id] == "msgParserId378" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: signal(%{agent}) failed: %{result}" }
			id => "msgParserId378"
			add_field => {
				"event_description" => "signal failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId379
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to connect socket to <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId379" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to connect socket to %{agent}: %{result}" }
			id => "msgParserId379"
			add_field => {
				"event_description" => "Unable to connect socket to service"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId380
	# line in RSA:  <process>[<process_id>]: <event_type>: Failed to create socket: <result>
	else if [logstash][msgparser][id] == "msgParserId380" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Failed to create socket: %{result}" }
			id => "msgParserId380"
			add_field => {
				"event_description" => "Failed to create socket"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId381
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to set socket option <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId381" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to set socket option %{agent}: %{result}" }
			id => "msgParserId381"
			add_field => {
				"event_description" => "Unable to set socket option"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId382
	# line in RSA:  <process>[<process_id>]: <event_type>: Write to stdout failed: <result>
	else if [logstash][msgparser][id] == "msgParserId382" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Write to stdout failed: %{result}" }
			id => "msgParserId382"
			add_field => {
				"event_description" => "Write to stdout failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId383
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId383" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result}" }
			id => "msgParserId383"
			add_field => {
				"event_description" => "PWC SYSTEM CALL"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId384
	# line in RSA:  <process>[<process_id>]: <event_type>: Unknown kill option [<agent>]
	else if [logstash][msgparser][id] == "msgParserId384" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unknown kill option [%{agent}]" }
			id => "msgParserId384"
			add_field => {
				"event_description" => "Unknown kill option"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId385
	# line in RSA:  <process>[<process_id>]: <event_type>: Multicast address is not allowed 
	else if [logstash][msgparser][id] == "msgParserId385" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Multicast address is not allowed" }
			id => "msgParserId385"
			add_field => {
				"event_description" => "Multicast address not allowed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId386
	# line in RSA:  <process>[<process_id>]: <event_type>: Source address invalid: <result>
	else if [logstash][msgparser][id] == "msgParserId386" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Source address invalid: %{result}" }
			id => "msgParserId386"
			add_field => {
				"event_description" => "RMOPD ADDRESS SOURCE INVALID"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId387
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to convert numeric address to string: <result>
	else if [logstash][msgparser][id] == "msgParserId387" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to convert numeric address to string: %{result}" }
			id => "msgParserId387"
			add_field => {
				"event_description" => "Unable to convert numeric address to string"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId388
	# line in RSA:  <process>[<process_id>]: <event_type>: rmop_util_set_address status message: <result>
	else if [logstash][msgparser][id] == "msgParserId388" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: rmop_util_set_address status message: %{result}" }
			id => "msgParserId388"
			add_field => {
				"event_description" => "rmop_util_set_address status message invalid"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId389
	# line in RSA:  <process>[<process_id>]: <event_type>: Only IPv4 source address is supported
	else if [logstash][msgparser][id] == "msgParserId389" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Only IPv4 source address is supported" }
			id => "msgParserId389"
			add_field => {
				"event_description" => "Only IPv4 source address is supported"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId390
	# line in RSA:  <process>[<process_id>]: <fld1>: No route to host
	else if [logstash][msgparser][id] == "msgParserId390" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{fld1}: No route to host" }
			id => "msgParserId390"
			add_field => {
				"event_description" => "No route to host"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId391
	# line in RSA:  <process>[<process_id>]: <event_type>: ifindex: <interface>
	else if [logstash][msgparser][id] == "msgParserId391" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifindex: %{interface}" }
			id => "msgParserId391"
			add_field => {
				"event_description" => "IFINDEX NOT ACTIVE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId392
	# line in RSA:  <process>[<process_id>]: <event_type>: No information for <interface>, message: <result>
	else if [logstash][msgparser][id] == "msgParserId392" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No information for %{interface}, message: %{result}" }
			id => "msgParserId392"
			add_field => {
				"event_description" => "IFINDEX NO INFO"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId393
	# line in RSA:  <process>[<process_id>]: <event_type>: ifname: <interface>
	else if [logstash][msgparser][id] == "msgParserId393" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifname: %{interface}" }
			id => "msgParserId393"
			add_field => {
				"event_description" => "RMOPD IFNAME NOT ACTIVE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId394
	# line in RSA:  <process>[<process_id>]: <event_type>: No information for <interface>, message: <result>
	else if [logstash][msgparser][id] == "msgParserId394" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No information for %{interface}, message: %{result}" }
			id => "msgParserId394"
			add_field => {
				"event_description" => "IFNAME NO INFO"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId395
	# line in RSA:  <process>[<process_id>]: <event_type>: Must be run as root 
	else if [logstash][msgparser][id] == "msgParserId395" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Must be run as root" }
			id => "msgParserId395"
			add_field => {
				"event_description" => "RMOPD Must be run as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId396
	# line in RSA:  <process>[<process_id>]: <event_type>: No information for routing instance <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId396" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No information for routing instance %{agent}: %{result}" }
			id => "msgParserId396"
			add_field => {
				"event_description" => "No information for routing instance"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId397
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>
	else if [logstash][msgparser][id] == "msgParserId397" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}" }
			id => "msgParserId397"
			add_field => {
				"event_description" => "TRACEROUTE ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId398
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>: <info>
	else if [logstash][msgparser][id] == "msgParserId398" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}: %{info}" }
			id => "msgParserId398"
			add_field => {
				"event_description" => "RMOPD usage"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId399
	# line in RSA:  <process>[<process_id>]: <event_type>: <action> version built by builder on <dclass_counter1>: <result>
	else if [logstash][msgparser][id] == "msgParserId399" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action} version built by builder on %{dclass_counter1}: %{result}" }
			id => "msgParserId399"
			add_field => {
				"event_description" => "RPD ABORT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId400
	# line in RSA:  <process>[<process_id>]: <event_type>: Exiting with active tasks: <agent>
	else if [logstash][msgparser][id] == "msgParserId400" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Exiting with active tasks: %{agent}" }
			id => "msgParserId400"
			add_field => {
				"event_description" => "RPD exiting with active tasks"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId401
	# line in RSA:  <process>[<process_id>]: <event_type>: Assertion failed <resultcode>: file "<filename>", line <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId401" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Assertion failed %{resultcode}: file \"%{filename}\", line %{dclass_counter1}" }
			id => "msgParserId401"
			add_field => {
				"event_description" => "RPD Assertion failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId402
	# line in RSA:  <process>[<process_id>]: <event_type>: Soft assertion failed <resultcode>: file "<filename>", line <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId402" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Soft assertion failed %{resultcode}: file \"%{filename}\", line %{dclass_counter1}" }
			id => "msgParserId402"
			add_field => {
				"event_description" => "RPD Soft assertion failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId403
	# line in RSA:  <process>[<process_id>]: <event_type>: <action> version built by builder on <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId403" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action} version built by builder on %{dclass_counter1}" }
			id => "msgParserId403"
			add_field => {
				"event_description" => "RPD EXIT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId404
	# line in RSA:  <process>[<process_id>]: <event_type>: Logical interface collision -- <result>, <info>
	else if [logstash][msgparser][id] == "msgParserId404" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Logical interface collision -- %{result}, %{info}" }
			id => "msgParserId404"
			add_field => {
				"event_description" => "Logical interface collision"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId405
	# line in RSA:  <process>[<process_id>]: <event_type>: IS-IS lost <dclass_counter1> adjacency to <dclass_counter2> on <interface>, <result>
	else if [logstash][msgparser][id] == "msgParserId405" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: IS-IS lost %{dclass_counter1} adjacency to %{dclass_counter2} on %{interface}, %{result}" }
			id => "msgParserId405"
			add_field => {
				"event_description" => "IS-IS lost adjacency"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId406
	# line in RSA:  <process>[<process_id>]: <event_type>: IS-IS new <dclass_counter1> adjacency to <dclass_counter2> <interface>
	else if [logstash][msgparser][id] == "msgParserId406" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: IS-IS new %{dclass_counter1} adjacency to %{dclass_counter2} %{interface}" }
			id => "msgParserId406"
			add_field => {
				"event_description" => "IS-IS new adjacency"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId407
	# line in RSA:  <process>[<process_id>]: <event_type>: IS-IS new <dclass_counter1> adjacency to <dclass_counter2> <interface> without an address
	else if [logstash][msgparser][id] == "msgParserId407" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: IS-IS new %{dclass_counter1} adjacency to %{dclass_counter2} %{interface} without an address" }
			id => "msgParserId407"
			add_field => {
				"event_description" => "IS-IS new adjacency without an address"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId408
	# line in RSA:  <process>[<process_id>]: <event_type>: IS-IS <dclass_counter1> LSP checksum error, interface <interface>, LSP id <id>, sequence <dclass_counter2>, checksum <resultcode>, lifetime <fld2>
	else if [logstash][msgparser][id] == "msgParserId408" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: IS-IS %{dclass_counter1} LSP checksum error, interface %{interface}, LSP id %{id}, sequence %{dclass_counter2}, checksum %{resultcode}, lifetime %{fld2}" }
			id => "msgParserId408"
			add_field => {
				"event_description" => "IS-IS LSP checksum error on iterface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId409
	# line in RSA:  <process>[<process_id>]: <event_type>: IS-IS database overload
	else if [logstash][msgparser][id] == "msgParserId409" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: IS-IS database overload" }
			id => "msgParserId409"
			add_field => {
				"event_description" => "IS-IS database overload"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId410
	# line in RSA:  <process>[<process_id>]: <event_type>: <resultcode>: received <agent> message with unsupported address family <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId410" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{resultcode}: received %{agent} message with unsupported address family %{dclass_counter1}" }
			id => "msgParserId410"
			add_field => {
				"event_description" => "message with unsupported address family received"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId411
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>, error
	else if [logstash][msgparser][id] == "msgParserId411" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}, error" }
			id => "msgParserId411"
			add_field => {
				"event_description" => "RPD KRT CCC IFL MODIFY"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId412
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: received deleted routing table from the kernel for family <dclass_counter1> table ID <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId412" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: received deleted routing table from the kernel for family %{dclass_counter1} table ID %{dclass_counter2}" }
			id => "msgParserId412"
			add_field => {
				"event_description" => "received deleted routing table from kernel"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId413
	# line in RSA:  <process>[<process_id>]: <event_type>: ifa generation mismatch -- <result>
	else if [logstash][msgparser][id] == "msgParserId413" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifa generation mismatch -- %{result}" }
			id => "msgParserId413"
			add_field => {
				"event_description" => "ifa generation mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId414
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> CHANGE for ifd <interface> failed, error "<result>"
	else if [logstash][msgparser][id] == "msgParserId414" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} CHANGE for ifd %{interface} failed, error \"%{result}\"" }
			id => "msgParserId414"
			add_field => {
				"event_description" => "CHANGE for ifd failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId415
	# line in RSA:  <process>[<process_id>]: <event_type> SERVICE: <service> for ifd <interface> failed, error "<result>"
	else if [logstash][msgparser][id] == "msgParserId415" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type} SERVICE: %{service} for ifd %{interface} failed, error \"%{result}\"" }
			id => "msgParserId415"
			add_field => {
				"event_description" => "GET SERVICE failure on interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId416
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> GET index for ifd interface failed, error "<result>"
	else if [logstash][msgparser][id] == "msgParserId416" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} GET index for ifd interface failed, error \"%{result}\"" }
			id => "msgParserId416"
			add_field => {
				"event_description" => "GET index for ifd interface failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId417
	# line in RSA:  <process>[<process_id>]: <event_type>: ifd <dclass_counter1> generation mismatch -- <result>
	else if [logstash][msgparser][id] == "msgParserId417" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifd %{dclass_counter1} generation mismatch -- %{result}" }
			id => "msgParserId417"
			add_field => {
				"event_description" => "ifd generation mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId418
	# line in RSA:  <process>[<process_id>]: <event_type>: ifl : <agent>, <result>
	else if [logstash][msgparser][id] == "msgParserId418" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifl : %{agent}, %{result}" }
			id => "msgParserId418"
			add_field => {
				"event_description" => "KRT IFL CELL RELAY MODE INVALID"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId419
	# line in RSA:  <process>[<process_id>]: <event_type>: ifl : <agent>, <result>
	else if [logstash][msgparser][id] == "msgParserId419" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifl : %{agent}, %{result}" }
			id => "msgParserId419"
			add_field => {
				"event_description" => "KRT IFL CELL RELAY MODE UNSPECIFIED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId420
	# line in RSA:  <process>[<process_id>]: <event_type>: ifl <interface> generation mismatch -- <result>
	else if [logstash][msgparser][id] == "msgParserId420" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifl %{interface} generation mismatch -- %{result}" }
			id => "msgParserId420"
			add_field => {
				"event_description" => "ifl generation mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId421
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: lost <interface> <dclass_counter1> for route <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId421" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: lost %{interface} %{dclass_counter1} for route %{dclass_counter2}" }
			id => "msgParserId421"
			add_field => {
				"event_description" => "lost interface for route"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId422
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: number of next hops (<dclass_counter1>) exceeded the maximum allowed (<dclass_counter2>) -- <result>
	else if [logstash][msgparser][id] == "msgParserId422" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: number of next hops (%{dclass_counter1}) exceeded the maximum allowed (%{dclass_counter2}) -- %{result}" }
			id => "msgParserId422"
			add_field => {
				"event_description" => "number of next hops exceeded the maximum"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId423
	# line in RSA:  <process>[<process_id>]: <event_type>: No device <dclass_counter1> for interface <interface>
	else if [logstash][msgparser][id] == "msgParserId423" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No device %{dclass_counter1} for interface %{interface}" }
			id => "msgParserId423"
			add_field => {
				"event_description" => "No device for interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId424
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: received routing table message for unknown table with kernel ID <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId424" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: received routing table message for unknown table with kernel ID %{dclass_counter1}" }
			id => "msgParserId424"
			add_field => {
				"event_description" => "received routing table message for unknown table"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId425
	# line in RSA:  <process>[<process_id>]: <event_type>: Routing socket version mismatch (<info>) -- <result>
	else if [logstash][msgparser][id] == "msgParserId425" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Routing socket version mismatch (%{info}) -- %{result}" }
			id => "msgParserId425"
			add_field => {
				"event_description" => "Routing socket version mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId426
	# line in RSA:  <process>[<process_id>]: <event_type>: Routing socket message type <agent>'s version is not supported by kernel, <info> -- <result>
	else if [logstash][msgparser][id] == "msgParserId426" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Routing socket message type %{agent}'s version is not supported by kernel, %{info} -- %{result}" }
			id => "msgParserId426"
			add_field => {
				"event_description" => "Routing socket message type not supported by kernel"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId427
	# line in RSA:  <process>[<process_id>]: <event_type>: Routing socket message type <agent>'s version is older than expected (<info>) -- <result>
	else if [logstash][msgparser][id] == "msgParserId427" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Routing socket message type %{agent}'s version is older than expected (%{info}) -- %{result}" }
			id => "msgParserId427"
			add_field => {
				"event_description" => "Routing socket message type version is older than expected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId428
	# line in RSA:  <process>[<process_id>]: <event_type>: Duplicate session ID detected from <daddr>, interface <interface>, <result>
	else if [logstash][msgparser][id] == "msgParserId428" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Duplicate session ID detected from %{daddr}, interface %{interface}, %{result}" }
			id => "msgParserId428"
			add_field => {
				"event_description" => "Duplicate session ID detected"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId429
	# line in RSA:  <process>[<process_id>]: <event_type>: LDP interface <interface> is now <result>
	else if [logstash][msgparser][id] == "msgParserId429" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: LDP interface %{interface} is now %{result}" }
			id => "msgParserId429"
			add_field => {
				"event_description" => "LDP interface now unblocked"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId430
	# line in RSA:  <process>[<process_id>]: <event_type>: LDP neighbor <daddr> (<interface>) is <result>
	else if [logstash][msgparser][id] == "msgParserId430" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: LDP neighbor %{daddr} (%{interface}) is %{result}" }
			id => "msgParserId430"
			add_field => {
				"event_description" => "LDP neighbor down"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId431
	# line in RSA:  <process>[<process_id>]: <event_type>: LDP neighbor <daddr> (<interface>) is <result>
	else if [logstash][msgparser][id] == "msgParserId431" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: LDP neighbor %{daddr} (%{interface}) is %{result}" }
			id => "msgParserId431"
			add_field => {
				"event_description" => "LDP neighbor up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId432
	# line in RSA:  <process>[<process_id>]: <event_type>: LDP session <daddr> is down, <result>
	else if [logstash][msgparser][id] == "msgParserId432" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: LDP session %{daddr} is down, %{result}" }
			id => "msgParserId432"
			add_field => {
				"event_description" => "LDP session down"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId433
	# line in RSA:  <process>[<process_id>]: <event_type>: LDP session <daddr> is up
	else if [logstash][msgparser][id] == "msgParserId433" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: LDP session %{daddr} is up" }
			id => "msgParserId433"
			add_field => {
				"event_description" => "LDP session up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId434
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to obtain a lock on <agent>, <result>
	else if [logstash][msgparser][id] == "msgParserId434" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to obtain a lock on %{agent}, %{result}" }
			id => "msgParserId434"
			add_field => {
				"event_description" => "Unable to obtain a lock"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId435
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to obtain a lock on <agent>, <result>
	else if [logstash][msgparser][id] == "msgParserId435" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to obtain a lock on %{agent}, %{result}" }
			id => "msgParserId435"
			add_field => {
				"event_description" => "Unable to obtain service lock"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId436
	# line in RSA:  <process>[<process_id>]: <event_type>: MPLS LSP <interface> <result> Route <info>
	else if [logstash][msgparser][id] == "msgParserId436" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: MPLS LSP %{interface} %{result} Route %{info}" }
			id => "msgParserId436"
			add_field => {
				"event_description" => "MPLS LSP CHANGE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId437
	# line in RSA:  <process>[<process_id>]: <event_type>: MPLS LSP <interface> <result> 
	else if [logstash][msgparser][id] == "msgParserId437" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: MPLS LSP %{interface} %{result}" }
			id => "msgParserId437"
			add_field => {
				"event_description" => "MPLS LSP DOWN"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId438
	# line in RSA:  <process>[<process_id>]: <event_type>: MPLS LSP <interface> <result>, Route <info> 
	else if [logstash][msgparser][id] == "msgParserId438" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: MPLS LSP %{interface} %{result}, Route %{info}" }
			id => "msgParserId438"
			add_field => {
				"event_description" => "MPLS LSP SWITCH"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId439
	# line in RSA:  <process>[<process_id>]: <event_type>: MPLS LSP <interface> <result> Route <info> 
	else if [logstash][msgparser][id] == "msgParserId439" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: MPLS LSP %{interface} %{result} Route %{info}" }
			id => "msgParserId439"
			add_field => {
				"event_description" => "MPLS LSP UP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId440
	# line in RSA:  <process>[<process_id>]: <event_type>: MSDP peer <group> <result>
	else if [logstash][msgparser][id] == "msgParserId440" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: MSDP peer %{group} %{result}" }
			id => "msgParserId440"
			add_field => {
				"event_description" => "MSDP PEER DOWN"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId441
	# line in RSA:  <process>[<process_id>]: <event_type>: MSDP peer <group> <result>
	else if [logstash][msgparser][id] == "msgParserId441" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: MSDP peer %{group} %{result}" }
			id => "msgParserId441"
			add_field => {
				"event_description" => "MSDP PEER UP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId442
	# line in RSA:  <process>[<process_id>]: <event_type>: OSPF neighbor <daddr> (<interface>) <disposition> due to <result>
	else if [logstash][msgparser][id] == "msgParserId442" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: OSPF neighbor %{daddr} (%{interface}) %{disposition} due to %{result}" }
			id => "msgParserId442"
			add_field => {
				"event_description" => "OSPF neighbor down"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId443
	# line in RSA:  <process>[<process_id>]: <event_type>: OSPF neighbor <daddr> (<interface>) <disposition> due to <result>
	else if [logstash][msgparser][id] == "msgParserId443" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: OSPF neighbor %{daddr} (%{interface}) %{disposition} due to %{result}" }
			id => "msgParserId443"
			add_field => {
				"event_description" => "OSPF neighbor up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId444
	# line in RSA:  <process>[<process_id>]: <event_type>: Using <dclass_counter1> KB of memory, <info>
	else if [logstash][msgparser][id] == "msgParserId444" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Using %{dclass_counter1} KB of memory, %{info}" }
			id => "msgParserId444"
			add_field => {
				"event_description" => "OS MEMHIGH"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId445
	# line in RSA:  <process>[<process_id>]: <event_type>: PIM neighbor <daddr> timeout interface <interface>
	else if [logstash][msgparser][id] == "msgParserId445" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: PIM neighbor %{daddr} timeout interface %{interface}" }
			id => "msgParserId445"
			add_field => {
				"event_description" => "PIM neighbor down"
				"result" => "timeout"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId446
	# line in RSA:  <process>[<process_id>]: <event_type>: PIM new neighbor <daddr> interface <interface>
	else if [logstash][msgparser][id] == "msgParserId446" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: PIM new neighbor %{daddr} interface %{interface}" }
			id => "msgParserId446"
			add_field => {
				"event_description" => "PIM neighbor up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId447
	# line in RSA:  <process>[<process_id>]: <event_type>: Bad checksum for router solicitation from <saddr> to <daddr>
	else if [logstash][msgparser][id] == "msgParserId447" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Bad checksum for router solicitation from %{saddr} to %{daddr}" }
			id => "msgParserId447"
			add_field => {
				"event_description" => "Bad checksum for router solicitation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId448
	# line in RSA:  <process>[<process_id>]: <event_type>: Ignoring interface <dclass_counter1> on <interface> -- <result>
	else if [logstash][msgparser][id] == "msgParserId448" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Ignoring interface %{dclass_counter1} on %{interface} -- %{result}" }
			id => "msgParserId448"
			add_field => {
				"event_description" => "Ignoring interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId449
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to locate interface for router solicitation from <saddr> to <daddr>
	else if [logstash][msgparser][id] == "msgParserId449" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to locate interface for router solicitation from %{saddr} to %{daddr}" }
			id => "msgParserId449"
			add_field => {
				"event_description" => "Unable to locate interface for router"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId450
	# line in RSA:  <process>[<process_id>]: <event_type>: Expected multicast (<dclass_counter1>) for router solicitation from <saddr> to <daddr>
	else if [logstash][msgparser][id] == "msgParserId450" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Expected multicast (%{dclass_counter1}) for router solicitation from %{saddr} to %{daddr}" }
			id => "msgParserId450"
			add_field => {
				"event_description" => "Expected multicast for router solicitation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId451
	# line in RSA:  <process>[<process_id>]: <event_type>: Nonzero ICMP code (<resultcode>) for router solicitation from <saddr> to <daddr>
	else if [logstash][msgparser][id] == "msgParserId451" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Nonzero ICMP code (%{resultcode}) for router solicitation from %{saddr} to %{daddr}" }
			id => "msgParserId451"
			add_field => {
				"event_description" => "Nonzero ICMP code for router solicitation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId452
	# line in RSA:  <process>[<process_id>]: <event_type>: Insufficient length (<dclass_counter1>) for router solicitation from <saddr> to <daddr>
	else if [logstash][msgparser][id] == "msgParserId452" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Insufficient length (%{dclass_counter1}) for router solicitation from %{saddr} to %{daddr}" }
			id => "msgParserId452"
			add_field => {
				"event_description" => "Insufficient length for router solicitation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId453
	# line in RSA:  <process>[<process_id>]: <event_type>: Update with invalid authentication from <saddr> (<interface>)
	else if [logstash][msgparser][id] == "msgParserId453" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Update with invalid authentication from %{saddr} (%{interface})" }
			id => "msgParserId453"
			add_field => {
				"event_description" => "RIP update with invalid authentication"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId454
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to get broadcast address <interface>; <result>
	else if [logstash][msgparser][id] == "msgParserId454" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to get broadcast address %{interface}; %{result}" }
			id => "msgParserId454"
			add_field => {
				"event_description" => "RIP - unable to get broadcast address"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId455
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to join multicast group <interface>: <result>
	else if [logstash][msgparser][id] == "msgParserId455" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to join multicast group %{interface}: %{result}" }
			id => "msgParserId455"
			add_field => {
				"event_description" => "RIP - Unable to join multicast group"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId456
	# line in RSA:  <process>[<process_id>]: <event_type>: UP route for interface <interface> index <dclass_counter1> <saddr>/<dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId456" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: UP route for interface %{interface} index %{dclass_counter1} %{saddr}/%{dclass_counter2}" }
			id => "msgParserId456"
			add_field => {
				"event_description" => "RIP interface up"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId457
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: excessive runtime time during action of module
	else if [logstash][msgparser][id] == "msgParserId457" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: excessive runtime time during action of module" }
			id => "msgParserId457"
			add_field => {
				"event_description" => "excessive runtime time during action of module"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId458
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: excessive runtime (<result>) after action of module
	else if [logstash][msgparser][id] == "msgParserId458" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: excessive runtime (%{result}) after action of module" }
			id => "msgParserId458"
			add_field => {
				"event_description" => "excessive runtime after action of module"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId459
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> ran for <dclass_counter1>(<dclass_counter2>)
	else if [logstash][msgparser][id] == "msgParserId459" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} ran for %{dclass_counter1}(%{dclass_counter2})" }
			id => "msgParserId459"
			add_field => {
				"event_description" => "task extended runtime"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId460
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> termination signal received
	else if [logstash][msgparser][id] == "msgParserId460" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} termination signal received" }
			id => "msgParserId460"
			add_field => {
				"event_description" => "termination signal received for service"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId461
	# line in RSA:  <process>[<process_id>]: <event_type>: Start <dclass_counter1> version version built <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId461" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Start %{dclass_counter1} version version built %{dclass_counter2}" }
			id => "msgParserId461"
			add_field => {
				"event_description" => "version built"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId462
	# line in RSA:  <process>[<process_id>]: <event_type>: detail: <action>
	else if [logstash][msgparser][id] == "msgParserId462" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: detail: %{action}" }
			id => "msgParserId462"
			add_field => {
				"event_description" => "system command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId463
	# line in RSA:  <process>[<process_id>]: <event_type>: Commencing routing updates, version <dclass_counter1>, built <dclass_counter2> by builder
	else if [logstash][msgparser][id] == "msgParserId463" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Commencing routing updates, version %{dclass_counter1}, built %{dclass_counter2} by builder" }
			id => "msgParserId463"
			add_field => {
				"event_description" => "Commencing routing updates"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId464
	# line in RSA:  <process>[<process_id>]: <event_type>: <dclass_counter2> <result>
	else if [logstash][msgparser][id] == "msgParserId464" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{dclass_counter2} %{result}" }
			id => "msgParserId464"
			add_field => {
				"event_description" => "task killed by signal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId465
	# line in RSA:  <process>[<process_id>]: <event_type>: <dclass_counter2> <result>
	else if [logstash][msgparser][id] == "msgParserId465" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{dclass_counter2} %{result}" }
			id => "msgParserId465"
			add_field => {
				"event_description" => "task stopped by signal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId466
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to fork task: <result>
	else if [logstash][msgparser][id] == "msgParserId466" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to fork task: %{result}" }
			id => "msgParserId466"
			add_field => {
				"event_description" => "Unable to fork task"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId467
	# line in RSA:  <process>[<process_id>]: <event_type>: getwd: <action>
	else if [logstash][msgparser][id] == "msgParserId467" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: getwd: %{action}" }
			id => "msgParserId467"
			add_field => {
				"event_description" => "RPD TASK GETWD"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId468
	# line in RSA:  <process>[<process_id>]: <event_type>: Reinitialization not possible
	else if [logstash][msgparser][id] == "msgParserId468" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Reinitialization not possible" }
			id => "msgParserId468"
			add_field => {
				"event_description" => "Reinitialization not possible"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId469
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to close and remove <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId469" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to close and remove %{agent}: %{result}" }
			id => "msgParserId469"
			add_field => {
				"event_description" => "Unable to close and remove task"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId470
	# line in RSA:  <process>[<process_id>]: <event_type>: flock(<agent>, <action>): <result>
	else if [logstash][msgparser][id] == "msgParserId470" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: flock(%{agent}, %{action}): %{result}" }
			id => "msgParserId470"
			add_field => {
				"event_description" => "RPD TASK PIDFLOCK"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId471
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to write <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId471" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to write %{agent}: %{result}" }
			id => "msgParserId471"
			add_field => {
				"event_description" => "Unable to write"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId472
	# line in RSA:  <process>[<process_id>]: <event_type>: Reinitializing
	else if [logstash][msgparser][id] == "msgParserId472" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Reinitializing" }
			id => "msgParserId472"
			add_field => {
				"event_description" => "Reinitializing"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId473
	# line in RSA:  <process>[<process_id>]: <event_type>: sigaction(<result>): <resultcode>
	else if [logstash][msgparser][id] == "msgParserId473" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: sigaction(%{result}): %{resultcode}" }
			id => "msgParserId473"
			add_field => {
				"event_description" => "ignoring task signal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId474
	# line in RSA:  <process>: <event_type>: COS IPC op <dclass_counter1> (<agent>) failed, err <resultcode> (<result>)
	else if [logstash][msgparser][id] == "msgParserId474" {
		dissect {
			mapping => { "message" => "%{process}: %{event_type}: COS IPC op %{dclass_counter1} (%{agent}) failed, err %{resultcode} (%{result})" }
			id => "msgParserId474"
			add_field => {
				"event_description" => "COS IPC op failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "RT_FLOW_SESSION_CREATE" {
		# MESSAGE RT_FLOW_SESSION_CREATE:02
		# line in RSA:  <event_type> [junos@<obj_name> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" {destination-port="<dport>" connection-tag=<fld20>|destination-port="<dport>"} service-name="<fld5>" nat-source-address="<stransaddr>" nat-source-port="<stransport>" nat-destination-address="<dtransaddr>" {nat-destination-port="<dtransport>" nat-connection-tag=<fld6> src-nat-rule-type=<fld20> |nat-destination-port="<dtransport>"} src-nat-rule-name="<fld10>" {dst-nat-rule-type=<fld21> dst-nat-rule-name="<fld11>"|dst-nat-rule-name="<fld11>"} protocol-id="<protocol>" policy-name="<policyname>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" session-id-32="<fld13>" username="<username>" roles="<fld15>" {packet-incoming-interface="<dinterface>" application="<fld6>" nested-application="<fld7>" encrypted=<fld8> |packet-incoming-interface="<dinterface>"}]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_type>[^\s]*)[\s]+\[junos@(?<obj_name>[^\s]*)[\s]+source\-address=\"(?<saddr>[^\"]*)\"[\s]+source\-port=\"(?<sport>[^\"]*)\"[\s]+destination\-address=\"(?<daddr>[^\"]*)\"[\s]+(destination\-port=\"(?<dport>[^\"]*)\"[\s]+connection\-tag=(?<fld20>[^\s]*)|destination\-port=\"(?<dport>[^\"]*)\")[\s]+service\-name=\"(?<fld5>[^\"]*)\"[\s]+nat\-source\-address=\"(?<stransaddr>[^\"]*)\"[\s]+nat\-source\-port=\"(?<stransport>[^\"]*)\"[\s]+nat\-destination\-address=\"(?<dtransaddr>[^\"]*)\"[\s]+(nat\-destination\-port=\"(?<dtransport>[^\"]*)\"[\s]+nat\-connection\-tag=(?<fld6>[^\s]*)[\s]+src\-nat\-rule\-type=(?<fld20>[^\s]*)[\s]+|nat\-destination\-port=\"(?<dtransport>[^\"]*)\")[\s]+src\-nat\-rule\-name=\"(?<fld10>[^\"]*)\"[\s]+(dst\-nat\-rule\-type=(?<fld21>[^\s]*)[\s]+dst\-nat\-rule\-name=\"(?<fld11>[^\"]*)\"|dst\-nat\-rule\-name=\"(?<fld11>[^\"]*)\")[\s]+protocol\-id=\"(?<protocol>[^\"]*)\"[\s]+policy\-name=\"(?<policyname>[^\"]*)\"[\s]+source\-zone\-name=\"(?<src_zone>[^\"]*)\"[\s]+destination\-zone\-name=\"(?<dst_zone>[^\"]*)\"[\s]+session\-id\-32=\"(?<fld13>[^\"]*)\"[\s]+username=\"(?<username>[^\"]*)\"[\s]+roles=\"(?<fld15>[^\"]*)\"[\s]+(packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\"[\s]+application=\"(?<fld6>[^\"]*)\"[\s]+nested\-application=\"(?<fld7>[^\"]*)\"[\s]+encrypted=(?<fld8>[^\s]*)[\s]+|packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\")\]$" }
				id => "message-RT_FLOW_SESSION_CREATE:02"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Create"
					"[event][id]" => "RT_FLOW_SESSION_CREATE:02"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_CREATE:02"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_CREATE
		# line in RSA:  <event_type> [junos@<obj_name> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" {destination-port="<dport>" service-name="<service>" nat-source-address="<stransaddr>" nat-source-port="<stransport>" nat-destination-address="<dtransaddr>" nat-destination-port="<dtransport>" src-nat-rule-type="<fld20>" src-nat-rule-name="<rulename>" dst-nat-rule-type="<fld10>" dst-nat-rule-name="<rule_template>" | destination-port="<dport>"} protocol-id="<protocol>" { policy-name="<policyname>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" session-id-32="<sessionid>" username="<username>" roles="<fld50>" packet-incoming-interface="<dinterface>" application="<application>" nested-application="<fld7>" encrypted="<fld8>"| policy-name="<policyname>"}]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_type>[^\s]*)[\s]+\[junos@(?<obj_name>[^\s]*)[\s]+source\-address=\"(?<saddr>[^\"]*)\"[\s]+source\-port=\"(?<sport>[^\"]*)\"[\s]+destination\-address=\"(?<daddr>[^\"]*)\"[\s]+(destination\-port=\"(?<dport>[^\"]*)\"[\s]+service\-name=\"(?<service>[^\"]*)\"[\s]+nat\-source\-address=\"(?<stransaddr>[^\"]*)\"[\s]+nat\-source\-port=\"(?<stransport>[^\"]*)\"[\s]+nat\-destination\-address=\"(?<dtransaddr>[^\"]*)\"[\s]+nat\-destination\-port=\"(?<dtransport>[^\"]*)\"[\s]+src\-nat\-rule\-type=\"(?<fld20>[^\"]*)\"[\s]+src\-nat\-rule\-name=\"(?<rulename>[^\"]*)\"[\s]+dst\-nat\-rule\-type=\"(?<fld10>[^\"]*)\"[\s]+dst\-nat\-rule\-name=\"(?<rule_template>[^\"]*)\"[\s]+|[\s]*destination\-port=\"(?<dport>[^\"]*)\")[\s]+protocol\-id=\"(?<protocol>[^\"]*)\"[\s]+([\s]*policy\-name=\"(?<policyname>[^\"]*)\"[\s]+source\-zone\-name=\"(?<src_zone>[^\"]*)\"[\s]+destination\-zone\-name=\"(?<dst_zone>[^\"]*)\"[\s]+session\-id\-32=\"(?<sessionid>[^\"]*)\"[\s]+username=\"(?<username>[^\"]*)\"[\s]+roles=\"(?<fld50>[^\"]*)\"[\s]+packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\"[\s]+application=\"(?<application>[^\"]*)\"[\s]+nested\-application=\"(?<fld7>[^\"]*)\"[\s]+encrypted=\"(?<fld8>[^\"]*)\"|[\s]*policy\-name=\"(?<policyname>[^\"]*)\")\]$" }
				id => "message-RT_FLOW_SESSION_CREATE"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Create"
					"[event][id]" => "RT_FLOW_SESSION_CREATE"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_CREATE"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_CREATE:01
		# line in RSA:  {<process>: <event_type>: session created | <event_type>: session created} <saddr>/<sport>-><daddr>/<dport> <fld20> <hostip>/<network_port>-><dtransaddr>/<dtransport> { <rulename> <rule_template> <fld12> <fld13> <fld14> <policyname> <src_zone> <dst_zone> <sessionid> <username>(<fld10>) <interface> <protocol> <fld15> UNKNOWN UNKNOWN | <rulename> <rule_template> <fld12> <fld13> <fld14> <policyname> <src_zone> <dst_zone> <sessionid> <username>(<fld10>) <interface> <fld15> | <info> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<process>[^:]*):[\s]+(?<event_type>[^:]*):[\s]+session[\s]+created[\s]+|[\s]*(?<event_type>[^:]*):[\s]+session[\s]+created)[\s]+(?<saddr>[^/]*)/(?<sport>[^\-]*)\->(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld20>[^\s]*)[\s]+(?<hostip>[^/]*)/(?<network_port>[^\-]*)\->(?<dtransaddr>[^/]*)/(?<dtransport>[^\s]*)[\s]+([\s]*(?<rulename>[^\s]*)[\s]+(?<rule_template>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<policyname>[^\s]*)[\s]+(?<src_zone>[^\s]*)[\s]+(?<dst_zone>[^\s]*)[\s]+(?<sessionid>[^\s]*)[\s]+(?<username>[^\(]*)\((?<fld10>[^\)]*)\)[\s]+(?<interface>[^\s]*)[\s]+(?<protocol>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+UNKNOWN[\s]+UNKNOWN[\s]+|[\s]*(?<rulename>[^\s]*)[\s]+(?<rule_template>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<policyname>[^\s]*)[\s]+(?<src_zone>[^\s]*)[\s]+(?<dst_zone>[^\s]*)[\s]+(?<sessionid>[^\s]*)[\s]+(?<username>[^\(]*)\((?<fld10>[^\)]*)\)[\s]+(?<interface>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+|[\s]*(?<info>[^\s]*)[\s]+)$" }
				id => "message-RT_FLOW_SESSION_CREATE:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Create"
				"event_description" => "session created"
					"[event][id]" => "RT_FLOW_SESSION_CREATE:01"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_CREATE:01"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "RT_FLOW_SESSION_DENY" {
		# MESSAGE RT_FLOW_SESSION_DENY:02
		# line in RSA:  <event_type> [junos@<obj_name> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" {destination-port="<dport>" connection-tag=<fld20>|destination-port="<dport>"} service-name="<fld5>" protocol-id="<protocol>" icmp-type="<obj_type>" policy-name="<policyname>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" application="<fld6>" nested-application="<fld7>" username="<username>" roles="<user_role>" {packet-incoming-interface="<dinterface>" encrypted="<fld16>" reason="<result>" src-vrf-grp="<fld99>" dst-vrf-grp="<fld98>"|packet-incoming-interface="<dinterface>" encrypted=<fld16> reason="<result>"|packet-incoming-interface="<dinterface>"}]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_type>[^\s]*)[\s]+\[junos@(?<obj_name>[^\s]*)[\s]+source\-address=\"(?<saddr>[^\"]*)\"[\s]+source\-port=\"(?<sport>[^\"]*)\"[\s]+destination\-address=\"(?<daddr>[^\"]*)\"[\s]+(destination\-port=\"(?<dport>[^\"]*)\"[\s]+connection\-tag=(?<fld20>[^\s]*)|destination\-port=\"(?<dport>[^\"]*)\")[\s]+service\-name=\"(?<fld5>[^\"]*)\"[\s]+protocol\-id=\"(?<protocol>[^\"]*)\"[\s]+icmp\-type=\"(?<obj_type>[^\"]*)\"[\s]+policy\-name=\"(?<policyname>[^\"]*)\"[\s]+source\-zone\-name=\"(?<src_zone>[^\"]*)\"[\s]+destination\-zone\-name=\"(?<dst_zone>[^\"]*)\"[\s]+application=\"(?<fld6>[^\"]*)\"[\s]+nested\-application=\"(?<fld7>[^\"]*)\"[\s]+username=\"(?<username>[^\"]*)\"[\s]+roles=\"(?<user_role>[^\"]*)\"[\s]+(packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\"[\s]+encrypted=\"(?<fld16>[^\"]*)\"[\s]+reason=\"(?<result>[^\"]*)\"[\s]+src\-vrf\-grp=\"(?<fld99>[^\"]*)\"[\s]+dst\-vrf\-grp=\"(?<fld98>[^\"]*)\"|packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\"[\s]+encrypted=(?<fld16>[^\s]*)[\s]+reason=\"(?<result>[^\"]*)\"|packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\")\]$" }
				id => "message-RT_FLOW_SESSION_DENY:02"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
					"[event][id]" => "RT_FLOW_SESSION_DENY:02"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_DENY:02"
					"[event][categoryid]" => "1803010000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_DENY
		# line in RSA:  <event_type> [junos@<obj_name> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" protocol-id="<protocol>" icmp-type="<obj_type>" policy-name="<policyname>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{obj_name} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" protocol-id=\"%{protocol}\" icmp-type=\"%{obj_type}\" policy-name=\"%{policyname}\"]" }
				id => "message-RT_FLOW_SESSION_DENY"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
					"[event][id]" => "RT_FLOW_SESSION_DENY"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_DENY"
					"[event][categoryid]" => "1803010000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_DENY:03
		# line in RSA:  {<process>: <event_type>: session denied | <event_type>: session denied} <saddr>/<sport>-><daddr>/<dport> <fld20> <fld1> <result> <src_zone> <dst_zone> HTTP <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<process>[^:]*):[\s]+(?<event_type>[^:]*):[\s]+session[\s]+denied[\s]+|[\s]*(?<event_type>[^:]*):[\s]+session[\s]+denied)[\s]+(?<saddr>[^/]*)/(?<sport>[^\-]*)\->(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld20>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<result>[^\s]*)[\s]+(?<src_zone>[^\s]*)[\s]+(?<dst_zone>[^\s]*)[\s]+HTTP[\s]+(?<info>.*)$" }
				id => "message-RT_FLOW_SESSION_DENY:03"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"event_description" => "session denied"
					"[event][id]" => "RT_FLOW_SESSION_DENY:03"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_DENY:03"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_DENY:01
		# line in RSA:  {<process>: <event_type>: session denied | <event_type>: session denied} <saddr>/<sport>-><daddr>/<dport> <fld20> <fld1> <result> <src_zone> <dst_zone>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<process>[^:]*):[\s]+(?<event_type>[^:]*):[\s]+session[\s]+denied[\s]+|[\s]*(?<event_type>[^:]*):[\s]+session[\s]+denied)[\s]+(?<saddr>[^/]*)/(?<sport>[^\-]*)\->(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld20>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<result>[^\s]*)[\s]+(?<src_zone>[^\s]*)[\s]+(?<dst_zone>.*)$" }
				id => "message-RT_FLOW_SESSION_DENY:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Deny"
				"event_description" => "session denied"
					"[event][id]" => "RT_FLOW_SESSION_DENY:01"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_DENY:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "RT_FLOW_SESSION_CLOSE" {
		# MESSAGE RT_FLOW_SESSION_CLOSE:01
		# line in RSA:  <event_type> [junos@<obj_name> reason="<result>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" {destination-port="<dport>" connection-tag=<fld20>|destination-port="<dport>"} service-name="<service>" nat-source-address="<hostip>" nat-source-port="<network_port>" nat-destination-address="<dtransaddr>" {nat-destination-port="<dtransport>" nat-connection-tag=<fld6> src-nat-rule-type=<fld20> |nat-destination-port="<dtransport>"} src-nat-rule-name="<rulename>" {dst-nat-rule-type=<fld7> dst-nat-rule-name="<rule_template>"|dst-nat-rule-name="<rule_template>"} protocol-id="<protocol>" policy-name="<policyname>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" session-id-32="<sessionid>" packets-from-client="<packets>" bytes-from-client="<rbytes>" packets-from-server="<dclass_counter1>" bytes-from-server="<sbytes>" {elapsed-time="<duration>" application="<fld6>" nested-application="<fld7>" username="<username>" roles="<fld15>" packet-incoming-interface="<dinterface>" encrypted=<fld16> |elapsed-time="<duration>"}]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_type>[^\s]*)[\s]+\[junos@(?<obj_name>[^\s]*)[\s]+reason=\"(?<result>[^\"]*)\"[\s]+source\-address=\"(?<saddr>[^\"]*)\"[\s]+source\-port=\"(?<sport>[^\"]*)\"[\s]+destination\-address=\"(?<daddr>[^\"]*)\"[\s]+(destination\-port=\"(?<dport>[^\"]*)\"[\s]+connection\-tag=(?<fld20>[^\s]*)|destination\-port=\"(?<dport>[^\"]*)\")[\s]+service\-name=\"(?<service>[^\"]*)\"[\s]+nat\-source\-address=\"(?<hostip>[^\"]*)\"[\s]+nat\-source\-port=\"(?<network_port>[^\"]*)\"[\s]+nat\-destination\-address=\"(?<dtransaddr>[^\"]*)\"[\s]+(nat\-destination\-port=\"(?<dtransport>[^\"]*)\"[\s]+nat\-connection\-tag=(?<fld6>[^\s]*)[\s]+src\-nat\-rule\-type=(?<fld20>[^\s]*)[\s]+|nat\-destination\-port=\"(?<dtransport>[^\"]*)\")[\s]+src\-nat\-rule\-name=\"(?<rulename>[^\"]*)\"[\s]+(dst\-nat\-rule\-type=(?<fld7>[^\s]*)[\s]+dst\-nat\-rule\-name=\"(?<rule_template>[^\"]*)\"|dst\-nat\-rule\-name=\"(?<rule_template>[^\"]*)\")[\s]+protocol\-id=\"(?<protocol>[^\"]*)\"[\s]+policy\-name=\"(?<policyname>[^\"]*)\"[\s]+source\-zone\-name=\"(?<src_zone>[^\"]*)\"[\s]+destination\-zone\-name=\"(?<dst_zone>[^\"]*)\"[\s]+session\-id\-32=\"(?<sessionid>[^\"]*)\"[\s]+packets\-from\-client=\"(?<packets>[^\"]*)\"[\s]+bytes\-from\-client=\"(?<rbytes>[^\"]*)\"[\s]+packets\-from\-server=\"(?<dclass_counter1>[^\"]*)\"[\s]+bytes\-from\-server=\"(?<sbytes>[^\"]*)\"[\s]+(elapsed\-time=\"(?<duration>[^\"]*)\"[\s]+application=\"(?<fld6>[^\"]*)\"[\s]+nested\-application=\"(?<fld7>[^\"]*)\"[\s]+username=\"(?<username>[^\"]*)\"[\s]+roles=\"(?<fld15>[^\"]*)\"[\s]+packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\"[\s]+encrypted=(?<fld16>[^\s]*)[\s]+|elapsed\-time=\"(?<duration>[^\"]*)\")\]$" }
				id => "message-RT_FLOW_SESSION_CLOSE:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
					"[event][id]" => "RT_FLOW_SESSION_CLOSE:01"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_CLOSE:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_CLOSE
		# line in RSA:  <event_type> [junos@<obj_name> reason="<result>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" protocol-id="<protocol>" policy-name="<policyname>" inbound-packets="<packets>" inbound-bytes="<rbytes>" outbound-packets="<dclass_counter1>" outbound-bytes="<sbytes>" elapsed-time="<duration>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{obj_name} reason=\"%{result}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" protocol-id=\"%{protocol}\" policy-name=\"%{policyname}\" inbound-packets=\"%{packets}\" inbound-bytes=\"%{rbytes}\" outbound-packets=\"%{dclass_counter1}\" outbound-bytes=\"%{sbytes}\" elapsed-time=\"%{duration}\"]" }
				id => "message-RT_FLOW_SESSION_CLOSE"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
					"[event][id]" => "RT_FLOW_SESSION_CLOSE"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_CLOSE"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_CLOSE:02
		# line in RSA:  {<process>: <event_type>: session closed | <event_type>: session closed} <result>: <saddr>/<sport>-><daddr>/<dport> <fld20> <hostip>/<network_port>-><dtransaddr>/<dtransport> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<process>[^:]*):[\s]+(?<event_type>[^:]*):[\s]+session[\s]+closed[\s]+|[\s]*(?<event_type>[^:]*):[\s]+session[\s]+closed)[\s]+(?<result>[^:]*):[\s]+(?<saddr>[^/]*)/(?<sport>[^\-]*)\->(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+(?<fld20>[^\s]*)[\s]+(?<hostip>[^/]*)/(?<network_port>[^\-]*)\->(?<dtransaddr>[^/]*)/(?<dtransport>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-RT_FLOW_SESSION_CLOSE:02"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"event_description" => "session closed"
					"[event][id]" => "RT_FLOW_SESSION_CLOSE:02"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_CLOSE:02"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE RT_FLOW_SESSION_CLOSE:03
		# line in RSA:  <event_type> [junos@<obj_name> reason="<result>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" {destination-port="<dport>" connection-tag=<fld20>|destination-port="<dport>"} service-name="<service>" nat-source-address="<hostip>" nat-source-port="<network_port>" nat-destination-address="<dtransaddr>" {nat-destination-port="<dtransport>" nat-connection-tag=<fld6> src-nat-rule-type=<fld20> |nat-destination-port="<dtransport>"} src-nat-rule-name="<rulename>" {dst-nat-rule-type=<fld7> dst-nat-rule-name="<rule_template>"|dst-nat-rule-name="<rule_template>"} protocol-id="<protocol>" policy-name="<policyname>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" session-id-32="<sessionid>" packets-from-client="<packets>" bytes-from-client="<rbytes>" packets-from-server="<dclass_counter1>" bytes-from-server="<sbytes>" { elapsed-time="<duration>" application="<fld6>" nested-application="<fld7>" username="<username>" roles="<fld15>" packet-incoming-interface="<dinterface>" encrypted=<fld16> | elapsed-time="<duration>" application="<fld6>" nested-application="<fld7>" username="<username>" roles="<user_role>" packet-incoming-interface="<dinterface>" |elapsed-time="<duration>"}] session closed <fld60>: <fld51>/<fld52>-><fld53>/<fld54> <fld55> <fld56>/<fld57>-><fld58>/<fld59> <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_type>[^\s]*)[\s]+\[junos@(?<obj_name>[^\s]*)[\s]+reason=\"(?<result>[^\"]*)\"[\s]+source\-address=\"(?<saddr>[^\"]*)\"[\s]+source\-port=\"(?<sport>[^\"]*)\"[\s]+destination\-address=\"(?<daddr>[^\"]*)\"[\s]+(destination\-port=\"(?<dport>[^\"]*)\"[\s]+connection\-tag=(?<fld20>[^\s]*)|destination\-port=\"(?<dport>[^\"]*)\")[\s]+service\-name=\"(?<service>[^\"]*)\"[\s]+nat\-source\-address=\"(?<hostip>[^\"]*)\"[\s]+nat\-source\-port=\"(?<network_port>[^\"]*)\"[\s]+nat\-destination\-address=\"(?<dtransaddr>[^\"]*)\"[\s]+(nat\-destination\-port=\"(?<dtransport>[^\"]*)\"[\s]+nat\-connection\-tag=(?<fld6>[^\s]*)[\s]+src\-nat\-rule\-type=(?<fld20>[^\s]*)[\s]+|nat\-destination\-port=\"(?<dtransport>[^\"]*)\")[\s]+src\-nat\-rule\-name=\"(?<rulename>[^\"]*)\"[\s]+(dst\-nat\-rule\-type=(?<fld7>[^\s]*)[\s]+dst\-nat\-rule\-name=\"(?<rule_template>[^\"]*)\"|dst\-nat\-rule\-name=\"(?<rule_template>[^\"]*)\")[\s]+protocol\-id=\"(?<protocol>[^\"]*)\"[\s]+policy\-name=\"(?<policyname>[^\"]*)\"[\s]+source\-zone\-name=\"(?<src_zone>[^\"]*)\"[\s]+destination\-zone\-name=\"(?<dst_zone>[^\"]*)\"[\s]+session\-id\-32=\"(?<sessionid>[^\"]*)\"[\s]+packets\-from\-client=\"(?<packets>[^\"]*)\"[\s]+bytes\-from\-client=\"(?<rbytes>[^\"]*)\"[\s]+packets\-from\-server=\"(?<dclass_counter1>[^\"]*)\"[\s]+bytes\-from\-server=\"(?<sbytes>[^\"]*)\"[\s]+([\s]*elapsed\-time=\"(?<duration>[^\"]*)\"[\s]+application=\"(?<fld6>[^\"]*)\"[\s]+nested\-application=\"(?<fld7>[^\"]*)\"[\s]+username=\"(?<username>[^\"]*)\"[\s]+roles=\"(?<fld15>[^\"]*)\"[\s]+packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\"[\s]+encrypted=(?<fld16>[^\s]*)[\s]+|[\s]*elapsed\-time=\"(?<duration>[^\"]*)\"[\s]+application=\"(?<fld6>[^\"]*)\"[\s]+nested\-application=\"(?<fld7>[^\"]*)\"[\s]+username=\"(?<username>[^\"]*)\"[\s]+roles=\"(?<user_role>[^\"]*)\"[\s]+packet\-incoming\-interface=\"(?<dinterface>[^\"]*)\"[\s]+|elapsed\-time=\"(?<duration>[^\"]*)\")\][\s]+session[\s]+closed[\s]+(?<fld60>[^:]*):[\s]+(?<fld51>[^/]*)/(?<fld52>[^\-]*)\->(?<fld53>[^/]*)/(?<fld54>[^\s]*)[\s]+(?<fld55>[^\s]*)[\s]+(?<fld56>[^/]*)/(?<fld57>[^\-]*)\->(?<fld58>[^/]*)/(?<fld59>[^\s]*)[\s]+(?<info>.*)$" }
				id => "message-RT_FLOW_SESSION_CLOSE:03"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Stop"
				"hostname" => "%{hhostname}"
					"[event][id]" => "RT_FLOW_SESSION_CLOSE:03"
					"[rsa][message][id1]" => "RT_FLOW_SESSION_CLOSE:03"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "RT_SCREEN_IP" {
		# MESSAGE RT_SCREEN_IP
		# line in RSA:  <process>: <event_type>: Fragmented traffic! source:<saddr>, destination: <daddr>, protocol-id: <protocol>, zone name: <zone>, interface name: <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{event_type}: Fragmented traffic! source:%{saddr}, destination: %{daddr}, protocol-id: %{protocol}, zone name: %{zone}, interface name: %{interface}" }
				id => "message-RT_SCREEN_IP"
				add_field => {
				"event_description" => "Fragmented traffic"
					"[event][id]" => "RT_SCREEN_IP"
					"[rsa][message][id1]" => "RT_SCREEN_IP"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE RT_SCREEN_IP:01
		# line in RSA:  <event_type> [junos@<obj_name> attack-name="<threat_name>" source-address="<saddr>" destination-address="<daddr>" protocol-id="<protocol>" source-zone-name="<src_zone>" interface-name="<interface>" action="<action>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{obj_name} attack-name=\"%{threat_name}\" source-address=\"%{saddr}\" destination-address=\"%{daddr}\" protocol-id=\"%{protocol}\" source-zone-name=\"%{src_zone}\" interface-name=\"%{interface}\" action=\"%{action}\"]" }
				id => "message-RT_SCREEN_IP:01"
				add_field => {
					"[event][id]" => "RT_SCREEN_IP:01"
					"[rsa][message][id1]" => "RT_SCREEN_IP:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId488
	# line in RSA:  <event_type> [junos@<obj_name> attack-name="<threat_name>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" source-zone-name="<src_zone>" interface-name="<interface>" action="<action>"]
	else if [logstash][msgparser][id] == "msgParserId488" {
		dissect {
			mapping => { "message" => "%{event_type} [junos@%{obj_name} attack-name=\"%{threat_name}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" source-zone-name=\"%{src_zone}\" interface-name=\"%{interface}\" action=\"%{action}\"]" }
			id => "msgParserId488"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId489
	# line in RSA:  <event_type> [junos@<obj_name> attack-name="<threat_name>" message="<info>" ip-address="<hostip>" source-zone-name="<src_zone>" interface-name="<interface>" action="<action>"]
	else if [logstash][msgparser][id] == "msgParserId489" {
		dissect {
			mapping => { "message" => "%{event_type} [junos@%{obj_name} attack-name=\"%{threat_name}\" message=\"%{info}\" ip-address=\"%{hostip}\" source-zone-name=\"%{src_zone}\" interface-name=\"%{interface}\" action=\"%{action}\"]" }
			id => "msgParserId489"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId490
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: attempt to connect to interface failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId490" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: attempt to connect to interface failed with error: %{result}" }
			id => "msgParserId490"
			add_field => {
				"event_description" => "attempt to connect to interface failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId491
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: unexpected termination of connection to interface
	else if [logstash][msgparser][id] == "msgParserId491" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: unexpected termination of connection to interface" }
			id => "msgParserId491"
			add_field => {
				"event_description" => "unexpected termination of connection"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId492
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: client interface connection failure: <result>
	else if [logstash][msgparser][id] == "msgParserId492" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: client interface connection failure: %{result}" }
			id => "msgParserId492"
			add_field => {
				"event_description" => "client interface connection failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId493
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: remote command execution failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId493" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: remote command execution failed with error: %{result}" }
			id => "msgParserId493"
			add_field => {
				"event_description" => "remote command execution failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId494
	# line in RSA:  <process>[<process_id>]: <event_type>: client failed to commit configuration with error: <result>
	else if [logstash][msgparser][id] == "msgParserId494" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: client failed to commit configuration with error: %{result}" }
			id => "msgParserId494"
			add_field => {
				"event_description" => "client commit configuration failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId495
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: configuration process failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId495" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: configuration process failed with error: %{result}" }
			id => "msgParserId495"
			add_field => {
				"event_description" => "configuration process failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId496
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>
	else if [logstash][msgparser][id] == "msgParserId496" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}" }
			id => "msgParserId496"
			add_field => {
				"event_description" => "SERVICED CONFIG ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId497
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <dclass_counter2> failed to read path with error: <result>
	else if [logstash][msgparser][id] == "msgParserId497" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{dclass_counter2} failed to read path with error: %{result}" }
			id => "msgParserId497"
			add_field => {
				"event_description" => "service failed to read path"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId498
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId498" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result}" }
			id => "msgParserId498"
			add_field => {
				"event_description" => "SERVICED CONNECTION ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId499
	# line in RSA:  <process>[<process_id>]: <event_type>: GGSN services disabled: object: <result>
	else if [logstash][msgparser][id] == "msgParserId499" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: GGSN services disabled: object: %{result}" }
			id => "msgParserId499"
			add_field => {
				"event_description" => "GGSN services disabled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId500
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: event function <dclass_counter2> failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId500" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: event function %{dclass_counter2} failed with error: %{result}" }
			id => "msgParserId500"
			add_field => {
				"event_description" => "event function failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId501
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: initialization failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId501" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: initialization failed with error: %{result}" }
			id => "msgParserId501"
			add_field => {
				"event_description" => "service initialization failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId502
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: failed to allocate [<dclass_counter2>] object [<dclass_counter1> bytes <bytes>]: <result>
	else if [logstash][msgparser][id] == "msgParserId502" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: failed to allocate [%{dclass_counter2}] object [%{dclass_counter1} bytes %{bytes}]: %{result}" }
			id => "msgParserId502"
			add_field => {
				"event_description" => "memory allocation failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId503
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <dclass_counter2> had error: <result>
	else if [logstash][msgparser][id] == "msgParserId503" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{dclass_counter2} had error: %{result}" }
			id => "msgParserId503"
			add_field => {
				"event_description" => "NETWORK FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId504
	# line in RSA:  <process>[<process_id>]: <event_type>: Must be run as root
	else if [logstash][msgparser][id] == "msgParserId504" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Must be run as root" }
			id => "msgParserId504"
			add_field => {
				"event_description" => "SERVICED must be run as root"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId505
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: routing socket sequence error, <result>
	else if [logstash][msgparser][id] == "msgParserId505" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: routing socket sequence error, %{result}" }
			id => "msgParserId505"
			add_field => {
				"event_description" => "routing socket sequence error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId506
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: set up of signal name handler failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId506" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: set up of signal name handler failed with error: %{result}" }
			id => "msgParserId506"
			add_field => {
				"event_description" => "set up of signal name handler failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId507
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: socket create failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId507" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: socket create failed with error: %{result}" }
			id => "msgParserId507"
			add_field => {
				"event_description" => "socket create failed with error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId508
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: socket function <dclass_counter2> failed with error: <result>
	else if [logstash][msgparser][id] == "msgParserId508" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: socket function %{dclass_counter2} failed with error: %{result}" }
			id => "msgParserId508"
			add_field => {
				"event_description" => "socket function failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId509
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: unable to set socket option <dclass_counter2>: <result>
	else if [logstash][msgparser][id] == "msgParserId509" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: unable to set socket option %{dclass_counter2}: %{result}" }
			id => "msgParserId509"
			add_field => {
				"event_description" => "unable to set socket option"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId510
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <dclass_counter2> had error: <result>
	else if [logstash][msgparser][id] == "msgParserId510" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{dclass_counter2} had error: %{result}" }
			id => "msgParserId510"
			add_field => {
				"event_description" => "STDLIB FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId511
	# line in RSA:  <process>[<process_id>]: <event_type>: Incorrect usage: <result>
	else if [logstash][msgparser][id] == "msgParserId511" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Incorrect usage: %{result}" }
			id => "msgParserId511"
			add_field => {
				"event_description" => "Incorrect service usage"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId512
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: object has unexpected value <result>
	else if [logstash][msgparser][id] == "msgParserId512" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: object has unexpected value %{result}" }
			id => "msgParserId512"
			add_field => {
				"event_description" => "object has unexpected value"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId513
	# line in RSA:  <event_type> [junos@<obj_name> logical-system-name="<hostname>" session-id="<sessionid>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" nat-source-address="<hostip>" nat-source-port="<network_port>" nat-destination-address="<dtransaddr>" nat-destination-port="<dtransport>" profile-name="<rulename>" source-zone-name="<src_zone>" source-interface-name="<sinterface>" destination-zone-name="<dst_zone>" destination-interface-name="<dinterface>" message="<info>"]
	else if [logstash][msgparser][id] == "msgParserId513" {
		dissect {
			mapping => { "message" => "%{event_type} [junos@%{obj_name} logical-system-name=\"%{hostname}\" session-id=\"%{sessionid}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" nat-source-address=\"%{hostip}\" nat-source-port=\"%{network_port}\" nat-destination-address=\"%{dtransaddr}\" nat-destination-port=\"%{dtransport}\" profile-name=\"%{rulename}\" source-zone-name=\"%{src_zone}\" source-interface-name=\"%{sinterface}\" destination-zone-name=\"%{dst_zone}\" destination-interface-name=\"%{dinterface}\" message=\"%{info}\"]" }
			id => "msgParserId513"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId514
	# line in RSA:  <process>[<process_id>]: <event_type>: NET-SNMP version <version> AgentX subagent connected
	else if [logstash][msgparser][id] == "msgParserId514" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: NET-SNMP version %{version} AgentX subagent connected" }
			id => "msgParserId514"
			add_field => {
				"event_description" => "AgentX subagent connected"
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId515
	# line in RSA:  <process>[<process_id>]: <event_type>: ns_subagent_register_mibs: registering <dclass_counter1> rows
	else if [logstash][msgparser][id] == "msgParserId515" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ns_subagent_register_mibs: registering %{dclass_counter1} rows" }
			id => "msgParserId515"
			add_field => {
				"event_description" => "ns_subagent registering rows"
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId516
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result> in <dclass_counter1> access group <group>
	else if [logstash][msgparser][id] == "msgParserId516" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result} in %{dclass_counter1} access group %{group}" }
			id => "msgParserId516"
			add_field => {
				"event_description" => "SNMPD ACCESS GROUP ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SNMPD_AUTH_FAILURE" {
		# MESSAGE SNMPD_AUTH_FAILURE
		# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: unauthorized SNMP community from <daddr> to unknown community name (<pool_name>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: unauthorized SNMP community from %{daddr} to unknown community name (%{pool_name})" }
				id => "message-SNMPD_AUTH_FAILURE"
				add_field => {
				"event_description" => "SNMPD AUTH FAILURE"
				"result" => "unauthorized SNMP community to unknown community name"
					"[event][id]" => "SNMPD_AUTH_FAILURE"
					"[rsa][message][id1]" => "SNMPD_AUTH_FAILURE"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE SNMPD_AUTH_FAILURE:01
		# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: failed input interface authorization from <daddr> to unknown (<pool_name>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: failed input interface authorization from %{daddr} to unknown (%{pool_name})" }
				id => "message-SNMPD_AUTH_FAILURE:01"
				add_field => {
				"event_description" => "SNMPD AUTH FAILURE"
				"result" => "failed input interface authorization to unknown"
					"[event][id]" => "SNMPD_AUTH_FAILURE:01"
					"[rsa][message][id1]" => "SNMPD_AUTH_FAILURE:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE SNMPD_AUTH_FAILURE:02
		# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: unauthorized SNMP community from <daddr> to <saddr> (<pool_name>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: unauthorized SNMP community from %{daddr} to %{saddr} (%{pool_name})" }
				id => "message-SNMPD_AUTH_FAILURE:02"
				add_field => {
				"event_description" => "SNMPD AUTH FAILURE"
				"result" => "unauthorized SNMP community "
					"[event][id]" => "SNMPD_AUTH_FAILURE:02"
					"[rsa][message][id1]" => "SNMPD_AUTH_FAILURE:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE SNMPD_AUTH_FAILURE:03
		# line in RSA: <process> <process_id> <event_type> [junos@<obj_name> function-name="<fld1>" message="<info>" source-address="<saddr>" destination-address="<daddr>" index1="<fld4>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process} %{process_id} %{event_type} [junos@%{obj_name} function-name=\"%{fld1}\" message=\"%{info}\" source-address=\"%{saddr}\" destination-address=\"%{daddr}\" index1=\"%{fld4}\"]" }
				id => "message-SNMPD_AUTH_FAILURE:03"
				add_field => {
				"event_description" => "SNMPD AUTH FAILURE"
				"hostname" => "%{hhostname}"
					"[event][id]" => "SNMPD_AUTH_FAILURE:03"
					"[rsa][message][id1]" => "SNMPD_AUTH_FAILURE:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId520
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <saddr>: request exceeded community privileges
	else if [logstash][msgparser][id] == "msgParserId520" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{saddr}: request exceeded community privileges" }
			id => "msgParserId520"
			add_field => {
				"event_description" => "SNMP request exceeded community privileges"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId521
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: request from address <daddr> not allowed
	else if [logstash][msgparser][id] == "msgParserId521" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: request from address %{daddr} not allowed" }
			id => "msgParserId521"
			add_field => {
				"event_description" => "SNMPD AUTH RESTRICTED ADDRESS"
				"result" => "request not allowed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId522
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <saddr>: unauthorized SNMP PDU type: <result>
	else if [logstash][msgparser][id] == "msgParserId522" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{saddr}: unauthorized SNMP PDU type: %{result}" }
			id => "msgParserId522"
			add_field => {
				"event_description" => "unauthorized SNMP PDU type"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId523
	# line in RSA:  <process>[<process_id>]: <event_type>: Configuration database has errors
	else if [logstash][msgparser][id] == "msgParserId523" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Configuration database has errors" }
			id => "msgParserId523"
			add_field => {
				"event_description" => "Configuration database has errors"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId524
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result> in <dclass_counter1> context <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId524" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result} in %{dclass_counter1} context %{dclass_counter2}" }
			id => "msgParserId524"
			add_field => {
				"event_description" => "SNMPD CONTEXT ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId525
	# line in RSA:  <process>[<process_id>]: <event_type>: <dclass_counter2>: operation: <dclass_counter1> <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId525" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{dclass_counter2}: operation: %{dclass_counter1} %{agent}: %{result}" }
			id => "msgParserId525"
			add_field => {
				"event_description" => "SNMPD ENGINE FILE FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId526
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: from-path: undecodable/unmatched subagent response
	else if [logstash][msgparser][id] == "msgParserId526" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: from-path: undecodable/unmatched subagent response" }
			id => "msgParserId526"
			add_field => {
				"event_description" => " from-path - SNMP undecodable/unmatched subagent response"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId527
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: fopen <dclass_counter2>: <result>
	else if [logstash][msgparser][id] == "msgParserId527" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: fopen %{dclass_counter2}: %{result}" }
			id => "msgParserId527"
			add_field => {
				"event_description" => "SNMPD FILE FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId528
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result> in <dclass_counter1> group: '<group>' user '<username>' model '<version>'
	else if [logstash][msgparser][id] == "msgParserId528" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result} in %{dclass_counter1} group: '%{group}' user '%{username}' model '%{version}'" }
			id => "msgParserId528"
			add_field => {
				"event_description" => "SNMPD GROUP ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId529
	# line in RSA:  <process>[<process_id>]: <event_type>: snmpd initialization failure: <result>
	else if [logstash][msgparser][id] == "msgParserId529" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: snmpd initialization failure: %{result}" }
			id => "msgParserId529"
			add_field => {
				"event_description" => "snmpd initialization failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId530
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: system_default_inaddr: <result>
	else if [logstash][msgparser][id] == "msgParserId530" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: system_default_inaddr: %{result}" }
			id => "msgParserId530"
			add_field => {
				"event_description" => "LIBJUNIPER FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId531
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result> 
	else if [logstash][msgparser][id] == "msgParserId531" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result}" }
			id => "msgParserId531"
			add_field => {
				"event_description" => "LOOPBACK ADDR ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId532
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: called for freed - already freed
	else if [logstash][msgparser][id] == "msgParserId532" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: called for freed - already freed" }
			id => "msgParserId532"
			add_field => {
				"event_description" => "duplicate memory free"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId533
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: radix_add failed: <result>
	else if [logstash][msgparser][id] == "msgParserId533" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: radix_add failed: %{result}" }
			id => "msgParserId533"
			add_field => {
				"event_description" => "radix_add failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId534
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: receive <dclass_counter1> failure: <result>
	else if [logstash][msgparser][id] == "msgParserId534" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: receive %{dclass_counter1} failure: %{result}" }
			id => "msgParserId534"
			add_field => {
				"event_description" => "SNMPD RECEIVE FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId535
	# line in RSA:  <process>[<process_id>]: <event_type>: <dclass_counter2>: operation: <dclass_counter1> <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId535" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{dclass_counter2}: operation: %{dclass_counter1} %{agent}: %{result}" }
			id => "msgParserId535"
			add_field => {
				"event_description" => "RMONFILE FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId536
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: Null cookie
	else if [logstash][msgparser][id] == "msgParserId536" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: Null cookie" }
			id => "msgParserId536"
			add_field => {
				"event_description" => "Null cookie"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId537
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result>
	else if [logstash][msgparser][id] == "msgParserId537" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result}" }
			id => "msgParserId537"
			add_field => {
				"event_description" => "RMON EVENTLOG"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId538
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: Received io error, <result>
	else if [logstash][msgparser][id] == "msgParserId538" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: Received io error, %{result}" }
			id => "msgParserId538"
			add_field => {
				"event_description" => "Received io error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId539
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: internal Get request error: description, <result>
	else if [logstash][msgparser][id] == "msgParserId539" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: internal Get request error: description, %{result}" }
			id => "msgParserId539"
			add_field => {
				"event_description" => "internal Get request error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId540
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: sequence mismatch <result>
	else if [logstash][msgparser][id] == "msgParserId540" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: sequence mismatch %{result}" }
			id => "msgParserId540"
			add_field => {
				"event_description" => "sequence mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SNMPD_SEND_FAILURE" {
		# MESSAGE SNMPD_SEND_FAILURE
		# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: send send-type (index1) failure: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: send send-type (index1) failure: %{result}" }
				id => "message-SNMPD_SEND_FAILURE"
				add_field => {
				"event_description" => "send send-type (index1) failure"
					"[event][id]" => "SNMPD_SEND_FAILURE"
					"[rsa][message][id1]" => "SNMPD_SEND_FAILURE"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE SNMPD_SEND_FAILURE:01
		# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: send to (<saddr>) failure: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: send to (%{saddr}) failure: %{result}" }
				id => "message-SNMPD_SEND_FAILURE:01"
				add_field => {
				"event_description" => "send send-type (index1) failure"
					"[event][id]" => "SNMPD_SEND_FAILURE:01"
					"[rsa][message][id1]" => "SNMPD_SEND_FAILURE:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId543
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: socket failure: <result>
	else if [logstash][msgparser][id] == "msgParserId543" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: socket failure: %{result}" }
			id => "msgParserId543"
			add_field => {
				"event_description" => "SNMPD SOCKET FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId544
	# line in RSA:  <process>[<process_id>]: <event_type>: No buffers available for subagent (<agent>)
	else if [logstash][msgparser][id] == "msgParserId544" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: No buffers available for subagent (%{agent})" }
			id => "msgParserId544"
			add_field => {
				"event_description" => "No buffers available for subagent"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId545
	# line in RSA:  <process>[<process_id>]: <event_type>: Send to subagent failed (<agent>): <result>
	else if [logstash][msgparser][id] == "msgParserId545" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Send to subagent failed (%{agent}): %{result}" }
			id => "msgParserId545"
			add_field => {
				"event_description" => "Send to subagent failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId546
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: system function '<dclass_counter1>' failed: <result>
	else if [logstash][msgparser][id] == "msgParserId546" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: system function '%{dclass_counter1}' failed: %{result}" }
			id => "msgParserId546"
			add_field => {
				"event_description" => "system function failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId547
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: cleared all throttled traps
	else if [logstash][msgparser][id] == "msgParserId547" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: cleared all throttled traps" }
			id => "msgParserId547"
			add_field => {
				"event_description" => "cleared all throttled traps"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId548
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap: cold start
	else if [logstash][msgparser][id] == "msgParserId548" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap: cold start" }
			id => "msgParserId548"
			add_field => {
				"event_description" => "SNMP trap: cold start"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId549
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap error: <resultcode> (<result>)
	else if [logstash][msgparser][id] == "msgParserId549" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap error: %{resultcode} (%{result})" }
			id => "msgParserId549"
			add_field => {
				"event_description" => "SNMP trap error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId550
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap error: <dclass_counter2> <result>
	else if [logstash][msgparser][id] == "msgParserId550" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap error: %{dclass_counter2} %{result}" }
			id => "msgParserId550"
			add_field => {
				"event_description" => "SNMP trap error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId551
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap error: <result> (<dclass_counter2>) received
	else if [logstash][msgparser][id] == "msgParserId551" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap error: %{result} (%{dclass_counter2}) received" }
			id => "msgParserId551"
			add_field => {
				"event_description" => "SNMPD TRAP INVALID DATA"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId552
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap error: <info> (<result>)
	else if [logstash][msgparser][id] == "msgParserId552" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap error: %{info} (%{result})" }
			id => "msgParserId552"
			add_field => {
				"event_description" => "SNMPD TRAP ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId553
	# line in RSA:  <process>[<process_id>]: <event_type>: Adding trap to <dclass_counter2> to <obj_name> queue, <dclass_counter1> traps in queue
	else if [logstash][msgparser][id] == "msgParserId553" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Adding trap to %{dclass_counter2} to %{obj_name} queue, %{dclass_counter1} traps in queue" }
			id => "msgParserId553"
			add_field => {
				"event_description" => "Adding trap to queue"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId554
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: traps queued to <obj_name> sent successfully
	else if [logstash][msgparser][id] == "msgParserId554" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: traps queued to %{obj_name} sent successfully" }
			id => "msgParserId554"
			add_field => {
				"event_description" => "traps queued - sent successfully"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId555
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: after <dclass_counter1> attempts, deleting <dclass_counter2> traps queued to <obj_name>
	else if [logstash][msgparser][id] == "msgParserId555" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: after %{dclass_counter1} attempts, deleting %{dclass_counter2} traps queued to %{obj_name}" }
			id => "msgParserId555"
			add_field => {
				"event_description" => "SNMPD TRAP QUEUE MAX_ATTEMPTS - deleting some traps"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId556
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: maximum queue size exceeded (<dclass_counter1>), discarding trap to <dclass_counter2> from <obj_name> queue
	else if [logstash][msgparser][id] == "msgParserId556" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: maximum queue size exceeded (%{dclass_counter1}), discarding trap to %{dclass_counter2} from %{obj_name} queue" }
			id => "msgParserId556"
			add_field => {
				"event_description" => "SNMP TRAP maximum queue size exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId557
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: traps throttled after <dclass_counter1> traps
	else if [logstash][msgparser][id] == "msgParserId557" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: traps throttled after %{dclass_counter1} traps" }
			id => "msgParserId557"
			add_field => {
				"event_description" => "SNMP traps throttled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId558
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: unknown trap type requested (<obj_type> )
	else if [logstash][msgparser][id] == "msgParserId558" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: unknown trap type requested (%{obj_type} )" }
			id => "msgParserId558"
			add_field => {
				"event_description" => "unknown SNMP trap type requested"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId559
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap error: expecting <dclass_counter1> varbind to be VT_NUMBER (<resultcode> )
	else if [logstash][msgparser][id] == "msgParserId559" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap error: expecting %{dclass_counter1} varbind to be VT_NUMBER (%{resultcode} )" }
			id => "msgParserId559"
			add_field => {
				"event_description" => "SNMPD TRAP VARBIND TYPE ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId560
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap error: invalid version signature (<result>)
	else if [logstash][msgparser][id] == "msgParserId560" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap error: invalid version signature (%{result})" }
			id => "msgParserId560"
			add_field => {
				"event_description" => "SNMPD TRAP ERROR - invalid version signature"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId561
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: SNMP trap: warm start
	else if [logstash][msgparser][id] == "msgParserId561" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: SNMP trap: warm start" }
			id => "msgParserId561"
			add_field => {
				"event_description" => "SNMPD TRAP WARM START"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId562
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result> in <dclass_counter1> user '<username>' <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId562" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result} in %{dclass_counter1} user '%{username}' %{dclass_counter2}" }
			id => "msgParserId562"
			add_field => {
				"event_description" => "SNMPD USER ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId563
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: deleting view <dclass_counter2> <result>
	else if [logstash][msgparser][id] == "msgParserId563" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: deleting view %{dclass_counter2} %{result}" }
			id => "msgParserId563"
			add_field => {
				"event_description" => "SNMP deleting view"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId564
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: <result> installing default <dclass_counter1> view <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId564" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: %{result} installing default %{dclass_counter1} view %{dclass_counter2}" }
			id => "msgParserId564"
			add_field => {
				"event_description" => "installing default SNMP view"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId565
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: oid parsing failed for view <dclass_counter2> oid <result>
	else if [logstash][msgparser][id] == "msgParserId565" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: oid parsing failed for view %{dclass_counter2} oid %{result}" }
			id => "msgParserId565"
			add_field => {
				"event_description" => "oid parsing failed for SNMP view"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId566
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> <dclass_counter1> failed for <dclass_counter2> : <result>
	else if [logstash][msgparser][id] == "msgParserId566" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} %{dclass_counter1} failed for %{dclass_counter2} : %{result}" }
			id => "msgParserId566"
			add_field => {
				"event_description" => "SNMP_GET_ERROR 1"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId567
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> <dclass_counter1> failed for <dclass_counter2> : <result>
	else if [logstash][msgparser][id] == "msgParserId567" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} %{dclass_counter1} failed for %{dclass_counter2} : %{result}" }
			id => "msgParserId567"
			add_field => {
				"event_description" => "SNMP GET ERROR 2"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId568
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> <dclass_counter1> failed for <dclass_counter2> : <result>
	else if [logstash][msgparser][id] == "msgParserId568" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} %{dclass_counter1} failed for %{dclass_counter2} : %{result}" }
			id => "msgParserId568"
			add_field => {
				"event_description" => "SNMP GET ERROR 3"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId569
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent> <dclass_counter1> failed for <dclass_counter2> : <result>
	else if [logstash][msgparser][id] == "msgParserId569" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent} %{dclass_counter1} failed for %{dclass_counter2} : %{result}" }
			id => "msgParserId569"
			add_field => {
				"event_description" => "SNMP GET ERROR 4"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId570
	# line in RSA:  <process>[<process_id>]: <event_type>: <agent>: rtslib-error: <result>
	else if [logstash][msgparser][id] == "msgParserId570" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{agent}: rtslib-error: %{result}" }
			id => "msgParserId570"
			add_field => {
				"event_description" => "SNMP RTSLIB FAILURE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SNMP_TRAP_LINK_DOWN" {
		# MESSAGE SNMP_TRAP_LINK_DOWN
		# line in RSA:  <process>[<process_id>]: <event_type>: ifIndex <dclass_counter1>, ifAdminStatus <resultcode>, ifOperStatus <result>, ifName <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifIndex %{dclass_counter1}, ifAdminStatus %{resultcode}, ifOperStatus %{result}, ifName %{interface}" }
				id => "message-SNMP_TRAP_LINK_DOWN"
				add_field => {
				"event_description" => "SNMP TRAP LINK DOWN"
					"[event][id]" => "SNMP_TRAP_LINK_DOWN"
					"[rsa][message][id1]" => "SNMP_TRAP_LINK_DOWN"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_LINK_DOWN:01
		# line in RSA: <process> <process_id> <event_type> [junos@<obj_name> snmp-interface-index="<fld1>" admin-status="<fld3>" operational-status="<fld2>" interface-name="<interface>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process} %{process_id} %{event_type} [junos@%{obj_name} snmp-interface-index=\"%{fld1}\" admin-status=\"%{fld3}\" operational-status=\"%{fld2}\" interface-name=\"%{interface}\"]" }
				id => "message-SNMP_TRAP_LINK_DOWN:01"
				add_field => {
				"event_description" => "SNMP TRAP LINK DOWN"
				"hostname" => "%{hhostname}"
					"[event][id]" => "SNMP_TRAP_LINK_DOWN:01"
					"[rsa][message][id1]" => "SNMP_TRAP_LINK_DOWN:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SNMP_TRAP_LINK_UP" {
		# MESSAGE SNMP_TRAP_LINK_UP
		# line in RSA:  <process>[<process_id>]: <event_type>: ifIndex <dclass_counter1>, ifAdminStatus <resultcode>, ifOperStatus <result>, ifName <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: ifIndex %{dclass_counter1}, ifAdminStatus %{resultcode}, ifOperStatus %{result}, ifName %{interface}" }
				id => "message-SNMP_TRAP_LINK_UP"
				add_field => {
				"event_description" => "SNMP TRAP LINK UP"
					"[event][id]" => "SNMP_TRAP_LINK_UP"
					"[rsa][message][id1]" => "SNMP_TRAP_LINK_UP"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE SNMP_TRAP_LINK_UP:01
		# line in RSA: <process> <process_id> <event_type> [junos@<obj_name> snmp-interface-index="<fld1>" admin-status="<fld3>" operational-status="<event_state>" interface-name="<interface>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process} %{process_id} %{event_type} [junos@%{obj_name} snmp-interface-index=\"%{fld1}\" admin-status=\"%{fld3}\" operational-status=\"%{event_state}\" interface-name=\"%{interface}\"]" }
				id => "message-SNMP_TRAP_LINK_UP:01"
				add_field => {
				"event_description" => "SNMP TRAP LINK UP"
				"hostname" => "%{hhostname}"
					"[event][id]" => "SNMP_TRAP_LINK_UP:01"
					"[rsa][message][id1]" => "SNMP_TRAP_LINK_UP:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hfld6}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId573
	# line in RSA:  <process>[<process_id>]: <event_type>: pingCtlOwnerIndex = <dclass_counter1>, pingCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId573" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pingCtlOwnerIndex = %{dclass_counter1}, pingCtlTestName = %{obj_name}" }
			id => "msgParserId573"
			add_field => {
				"event_description" => "SNMP TRAP PING PROBE FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId574
	# line in RSA:  <process>[<process_id>]: <event_type>: pingCtlOwnerIndex = <dclass_counter1>, pingCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId574" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pingCtlOwnerIndex = %{dclass_counter1}, pingCtlTestName = %{obj_name}" }
			id => "msgParserId574"
			add_field => {
				"event_description" => "SNMP TRAP PING TEST COMPLETED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId575
	# line in RSA:  <process>[<process_id>]: <event_type>: pingCtlOwnerIndex = <dclass_counter1>, pingCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId575" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: pingCtlOwnerIndex = %{dclass_counter1}, pingCtlTestName = %{obj_name}" }
			id => "msgParserId575"
			add_field => {
				"event_description" => "SNMP TRAP PING TEST FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId576
	# line in RSA:  <process>[<process_id>]: <event_type>: traceRouteCtlOwnerIndex = <dclass_counter1>, traceRouteCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId576" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: traceRouteCtlOwnerIndex = %{dclass_counter1}, traceRouteCtlTestName = %{obj_name}" }
			id => "msgParserId576"
			add_field => {
				"event_description" => "SNMP TRAP TRACE ROUTE PATH CHANGE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId577
	# line in RSA:  <process>[<process_id>]: <event_type>: traceRouteCtlOwnerIndex = <dclass_counter1>, traceRouteCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId577" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: traceRouteCtlOwnerIndex = %{dclass_counter1}, traceRouteCtlTestName = %{obj_name}" }
			id => "msgParserId577"
			add_field => {
				"event_description" => "SNMP TRAP TRACE ROUTE TEST COMPLETED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId578
	# line in RSA:  <process>[<process_id>]: <event_type>: traceRouteCtlOwnerIndex = <dclass_counter1>, traceRouteCtlTestName = <obj_name>
	else if [logstash][msgparser][id] == "msgParserId578" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: traceRouteCtlOwnerIndex = %{dclass_counter1}, traceRouteCtlTestName = %{obj_name}" }
			id => "msgParserId578"
			add_field => {
				"event_description" => "SNMP TRAP TRACE ROUTE TEST FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "SSHD_LOGIN_FAILED" {
		# MESSAGE SSHD_LOGIN_FAILED
		# line in RSA:  <process>: <event_type>: Login failed for user '<username>' from host '<saddr>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{event_type}: Login failed for user '%{username}' from host '%{saddr}'" }
				id => "message-SSHD_LOGIN_FAILED"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login Failure"
					"[event][id]" => "SSHD_LOGIN_FAILED"
					"[rsa][message][id1]" => "SSHD_LOGIN_FAILED"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE SSHD_LOGIN_FAILED:01
		# line in RSA: <event_type> [junos@<obj_name> username="<username>" source-address="<saddr>"]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{obj_name} username=\"%{username}\" source-address=\"%{saddr}\"]" }
				id => "message-SSHD_LOGIN_FAILED:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "Login Failure"
				"hostname" => "%{hhostname}"
				"process" => "%{hfld33}"
					"[event][id]" => "SSHD_LOGIN_FAILED:01"
					"[rsa][message][id1]" => "SSHD_LOGIN_FAILED:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId584
	# line in RSA:  <process>[<process_id>]: <event_type>: task <agent> addr <daddr>+<dport>: <result>
	else if [logstash][msgparser][id] == "msgParserId584" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: task %{agent} addr %{daddr}+%{dport}: %{result}" }
			id => "msgParserId584"
			add_field => {
				"event_description" => "task connect failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId585
	# line in RSA:  <process>[<process_id>]: <event_type>: Unexpected address family <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId585" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unexpected address family %{dclass_counter2}" }
			id => "msgParserId585"
			add_field => {
				"event_description" => "Unexpected address family"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId586
	# line in RSA:  <process>[<process_id>]: <event_type>: bind: <result>
	else if [logstash][msgparser][id] == "msgParserId586" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: bind: %{result}" }
			id => "msgParserId586"
			add_field => {
				"event_description" => "TFTPD BIND ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId587
	# line in RSA:  <process>[<process_id>]: <event_type>: connect: <result>
	else if [logstash][msgparser][id] == "msgParserId587" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: connect: %{result}" }
			id => "msgParserId587"
			add_field => {
				"event_description" => "TFTPD CONNECT ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId588
	# line in RSA:  <process>[<process_id>]: <event_type>: TFTP <protocol> from address <daddr> port <dport> file <filename>
	else if [logstash][msgparser][id] == "msgParserId588" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: TFTP %{protocol} from address %{daddr} port %{dport} file %{filename}" }
			id => "msgParserId588"
			add_field => {
				"event_description" => "TFTPD CONNECT INFO"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId589
	# line in RSA:  <process>[<process_id>]: <event_type>: check_space <result>
	else if [logstash][msgparser][id] == "msgParserId589" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: check_space %{result}" }
			id => "msgParserId589"
			add_field => {
				"event_description" => "TFTPD CREATE ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId590
	# line in RSA:  <process>[<process_id>]: <event_type>: <action>: <result>
	else if [logstash][msgparser][id] == "msgParserId590" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action}: %{result}" }
			id => "msgParserId590"
			add_field => {
				"event_description" => "TFTPD FIO ERR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId591
	# line in RSA:  <process>[<process_id>]: <event_type>: fork: <result>
	else if [logstash][msgparser][id] == "msgParserId591" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: fork: %{result}" }
			id => "msgParserId591"
			add_field => {
				"event_description" => "TFTPD FORK ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId592
	# line in RSA:  <process>[<process_id>]: <event_type>: nak error <resultcode>, <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId592" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: nak error %{resultcode}, %{dclass_counter1}" }
			id => "msgParserId592"
			add_field => {
				"event_description" => "TFTPD NAK ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId593
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to open file '<filename>', error: <result>
	else if [logstash][msgparser][id] == "msgParserId593" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to open file '%{filename}', error: %{result}" }
			id => "msgParserId593"
			add_field => {
				"event_description" => "Unable to open file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId594
	# line in RSA:  <process>[<process_id>]: <event_type>: Received <dclass_counter1> blocks of <dclass_counter2> size for file '<filename>'
	else if [logstash][msgparser][id] == "msgParserId594" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Received %{dclass_counter1} blocks of %{dclass_counter2} size for file '%{filename}'" }
			id => "msgParserId594"
			add_field => {
				"event_description" => "TFTPD RECVCOMPLETE INFO"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId595
	# line in RSA:  <process>[<process_id>]: <event_type>: recvfrom: <result>
	else if [logstash][msgparser][id] == "msgParserId595" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: recvfrom: %{result}" }
			id => "msgParserId595"
			add_field => {
				"event_description" => "TFTPD RECVFROM ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId596
	# line in RSA:  <process>[<process_id>]: <event_type>: recv: <result>
	else if [logstash][msgparser][id] == "msgParserId596" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: recv: %{result}" }
			id => "msgParserId596"
			add_field => {
				"event_description" => "TFTPD RECV ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId597
	# line in RSA:  <process>[<process_id>]: <event_type>: Sent <dclass_counter1> blocks of <dclass_counter2> and <info> for file '<filename>'
	else if [logstash][msgparser][id] == "msgParserId597" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Sent %{dclass_counter1} blocks of %{dclass_counter2} and %{info} for file '%{filename}'" }
			id => "msgParserId597"
			add_field => {
				"event_description" => "TFTPD SENDCOMPLETE INFO"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId598
	# line in RSA:  <process>[<process_id>]: <event_type>: send: <result>
	else if [logstash][msgparser][id] == "msgParserId598" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: send: %{result}" }
			id => "msgParserId598"
			add_field => {
				"event_description" => "TFTPD SEND ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId599
	# line in RSA:  <process>[<process_id>]: <event_type>: socket: <result>
	else if [logstash][msgparser][id] == "msgParserId599" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: socket: %{result}" }
			id => "msgParserId599"
			add_field => {
				"event_description" => "TFTPD SOCKET ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId600
	# line in RSA:  <process>[<process_id>]: <event_type>: statfs <agent>, error: <result>
	else if [logstash][msgparser][id] == "msgParserId600" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: statfs %{agent}, error: %{result}" }
			id => "msgParserId600"
			add_field => {
				"event_description" => "TFTPD STATFS ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId601
	# line in RSA:  <process>: <event_type>: adding neighbor <dclass_counter1> to interface <interface>
	else if [logstash][msgparser][id] == "msgParserId601" {
		dissect {
			mapping => { "message" => "%{process}: %{event_type}: adding neighbor %{dclass_counter1} to interface %{interface}" }
			id => "msgParserId601"
			add_field => {
				"event_description" => "adding neighbor to interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId602
	# line in RSA:  <process>[<process_id>]: <event_type>: tracing to <fld33> started
	else if [logstash][msgparser][id] == "msgParserId602" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: tracing to %{fld33} started" }
			id => "msgParserId602"
			add_field => {
				"event_description" => "tracing to file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId603
	# line in RSA:  <process>[<process_id>]: <event_type>: rotating <filename>
	else if [logstash][msgparser][id] == "msgParserId603" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: rotating %{filename}" }
			id => "msgParserId603"
			add_field => {
				"event_description" => "trace rotating file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId604
	# line in RSA:  <process>: <event_type>: Transferred <filename>
	else if [logstash][msgparser][id] == "msgParserId604" {
		dissect {
			mapping => { "message" => "%{process}: %{event_type}: Transferred %{filename}" }
			id => "msgParserId604"
			add_field => {
				"event_description" => "transfered file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId605
	# line in RSA:   <process>[<process_id>]: <event_type>:  peer died: <result>: <resultcode>
	else if [logstash][msgparser][id] == "msgParserId605" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}:  peer died: %{result}: %{resultcode}" }
			id => "msgParserId605"
			add_field => {
				"event_description" => "ttloop - peer died"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId606
	# line in RSA:  <process>[<process_id>]: <event_type>: Authenticated user '<username>' at permission level '<privilege>'
	else if [logstash][msgparser][id] == "msgParserId606" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Authenticated user '%{username}' at permission level '%{privilege}'" }
			id => "msgParserId606"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
				"event_description" => "Authenticated user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId607
	# line in RSA:  <process>[<process_id>]: <event_type>: Received invalid authentication challenge for user '<username>': response
	else if [logstash][msgparser][id] == "msgParserId607" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Received invalid authentication challenge for user '%{username}': response" }
			id => "msgParserId607"
			add_field => {
				"event_description" => "Received invalid authentication challenge for user response"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId608
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to fetch boot time: <result>
	else if [logstash][msgparser][id] == "msgParserId608" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to fetch boot time: %{result}" }
			id => "msgParserId608"
			add_field => {
				"event_description" => "Unable to fetch boot time"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "UI_CFG_AUDIT_NEW" {
		# MESSAGE UI_CFG_AUDIT_NEW
		# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' <dclass_counter2> path unknown
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' %{dclass_counter2} path unknown" }
				id => "message-UI_CFG_AUDIT_NEW"
				add_field => {
				"event_description" => "user path unknown"
					"[event][id]" => "UI_CFG_AUDIT_NEW"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_NEW"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_NEW:01
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' insert: [edit-config config <filename> security policies <policyname>] <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' insert: [edit-config config %{filename} security policies %{policyname}] %{info}" }
				id => "message-UI_CFG_AUDIT_NEW:01"
				add_field => {
				"event_description" => " user Inserted Security Policies in config"
					"[event][id]" => "UI_CFG_AUDIT_NEW:01"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_NEW:01"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "UI_CFG_AUDIT_OTHER" {
		# MESSAGE UI_CFG_AUDIT_OTHER
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' delete: [<filename>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' delete: [%{filename}]" }
				id => "message-UI_CFG_AUDIT_OTHER"
				add_field => {
				"event_description" => "User deleted file"
				"action" => "delete"
					"[event][id]" => "UI_CFG_AUDIT_OTHER"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_OTHER"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_OTHER:01
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' rollback: <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' rollback: %{filename}" }
				id => "message-UI_CFG_AUDIT_OTHER:01"
				add_field => {
				"event_description" => "User rollback file"
					"[event][id]" => "UI_CFG_AUDIT_OTHER:01"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_OTHER:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_OTHER:02
		# line in RSA:   <process>[<process_id>]: <event_type>: User '<username>' set: [<action>] { "<info>" | <space> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+User[\s]+'(?<username>[^']*)'[\s]+set:[\s]+\[(?<action>[^\]]*)\][\s]+([\s]*\"(?<info>[^\"]*)\"[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
				id => "message-UI_CFG_AUDIT_OTHER:02"
				add_field => {
				"event_description" => "User set"
					"[event][id]" => "UI_CFG_AUDIT_OTHER:02"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_OTHER:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_OTHER:03
		# line in RSA:   <process>[<process_id>]: <event_type>: User '<username>' replace: [edit-config config <filename> applications <info>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' replace: [edit-config config %{filename} applications %{info}]" }
				id => "message-UI_CFG_AUDIT_OTHER:03"
				add_field => {
				"event_description" => "User config replace"
				"action" => "replace"
					"[event][id]" => "UI_CFG_AUDIT_OTHER:03"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_OTHER:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_OTHER:04
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' deactivate: [groups <info>] 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' deactivate: [groups %{info}]" }
				id => "message-UI_CFG_AUDIT_OTHER:04"
				add_field => {
				"event_description" => "User deactivating group(s)"
				"action" => "deactivate"
					"[event][id]" => "UI_CFG_AUDIT_OTHER:04"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_OTHER:04"
					"[event][categoryid]" => "1701070000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_OTHER:05
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' update: <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' update: %{filename}" }
				id => "message-UI_CFG_AUDIT_OTHER:05"
				add_field => {
				"event_description" => "User updates config file"
				"action" => "update"
					"[event][id]" => "UI_CFG_AUDIT_OTHER:05"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_OTHER:05"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "UI_CFG_AUDIT_SET" {
		# MESSAGE UI_CFG_AUDIT_SET:01
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' set: [<action>] { "<change_old>" | <<<change_old>> } -> "<change_new>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+User[\s]+'(?<username>[^']*)'[\s]+set:[\s]+\[(?<action>[^\]]*)\][\s]+([\s]*\"(?<change_old>[^\"]*)\"[\s]+|[\s]*<(?<change_old>[^>]*)>[\s]+)[\s]+\->[\s]+\"(?<change_new>[^\"]*)\"$" }
				id => "message-UI_CFG_AUDIT_SET:01"
				add_field => {
				"event_description" => "User set command"
					"[event][id]" => "UI_CFG_AUDIT_SET:01"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_SET:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_SET:02
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' set: [<action>] { "<change_old> | <<<change_old>> } -> "<change_new>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+User[\s]+'(?<username>[^']*)'[\s]+set:[\s]+\[(?<action>[^\]]*)\][\s]+([\s]*\"(?<change_old>[^\s]*)[\s]+|[\s]*<(?<change_old>[^>]*)>[\s]+)[\s]+\->[\s]+\"(?<change_new>[^\"]*)\"$" }
				id => "message-UI_CFG_AUDIT_SET:02"
				add_field => {
				"event_description" => "User set command"
					"[event][id]" => "UI_CFG_AUDIT_SET:02"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_SET:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_SET
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' replace: [edit-config config <filename> applications <info>] <<<disposition>> -> "<agent>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' replace: [edit-config config %{filename} applications %{info}] <%{disposition}> -> \"%{agent}\"" }
				id => "message-UI_CFG_AUDIT_SET"
				add_field => {
				"event_description" => "User replace config application(s)"
					"[event][id]" => "UI_CFG_AUDIT_SET"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_SET"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "UI_CFG_AUDIT_SET_SECRET" {
		# MESSAGE UI_CFG_AUDIT_SET_SECRET:01
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' { set | replace }: [groups <info> secret]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+User[\s]+'(?<username>[^']*)'[\s]+([\s]*set[\s]+|[\s]*replace[\s]+):[\s]+\[groups[\s]+(?<info>[^\s]*)[\s]+secret\]$" }
				id => "message-UI_CFG_AUDIT_SET_SECRET:01"
				add_field => {
				"event_description" => "User set groups to secret"
					"[event][id]" => "UI_CFG_AUDIT_SET_SECRET:01"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_SET_SECRET:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_SET_SECRET:02
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' { set | replace }: [<info>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+User[\s]+'(?<username>[^']*)'[\s]+([\s]*set[\s]+|[\s]*replace[\s]+):[\s]+\[(?<info>[^\]]*)\]$" }
				id => "message-UI_CFG_AUDIT_SET_SECRET:02"
				add_field => {
				"event_description" => "User set groups to secret"
					"[event][id]" => "UI_CFG_AUDIT_SET_SECRET:02"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_SET_SECRET:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_CFG_AUDIT_SET_SECRET
		# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' <dclass_counter2> <directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' %{dclass_counter2} %{directory}" }
				id => "message-UI_CFG_AUDIT_SET_SECRET"
				add_field => {
				"event_description" => "UI CFG AUDIT SET SECRET"
					"[event][id]" => "UI_CFG_AUDIT_SET_SECRET"
					"[rsa][message][id1]" => "UI_CFG_AUDIT_SET_SECRET"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId623
	# line in RSA:  <process>[<process_id>]: <event_type>: Too many arguments for child process '<agent>'
	else if [logstash][msgparser][id] == "msgParserId623" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Too many arguments for child process '%{agent}'" }
			id => "msgParserId623"
			add_field => {
				"event_description" => "Too many arguments for child process"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId624
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to switch to local user: <username>
	else if [logstash][msgparser][id] == "msgParserId624" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to switch to local user: %{username}" }
			id => "msgParserId624"
			add_field => {
				"event_description" => "Unable to switch to local user"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId625
	# line in RSA:  <process>[<process_id>]: <event_type>: Child exec failed for command '<action>': <result>
	else if [logstash][msgparser][id] == "msgParserId625" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Child exec failed for command '%{action}': %{result}" }
			id => "msgParserId625"
			add_field => {
				"event_description" => "Child exec failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId626
	# line in RSA:  <process>[<process_id>]: <event_type>: Child exited: PID <child_pid>, status <result>, command '<action>'
	else if [logstash][msgparser][id] == "msgParserId626" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Child exited: PID %{child_pid}, status %{result}, command '%{action}'" }
			id => "msgParserId626"
			add_field => {
				"event_description" => "Child exited"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId627
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to append to log '<filename>': <result>
	else if [logstash][msgparser][id] == "msgParserId627" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to append to log '%{filename}': %{result}" }
			id => "msgParserId627"
			add_field => {
				"event_description" => "Unable to append to log"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId628
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to create pipe for command '<action>': <result>
	else if [logstash][msgparser][id] == "msgParserId628" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to create pipe for command '%{action}': %{result}" }
			id => "msgParserId628"
			add_field => {
				"event_description" => "Unable to create pipe for command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId629
	# line in RSA:  <process>[<process_id>]: <event_type>: Child received signal: PID <child_pid>, signal <result>: <resultcode>, command='<action>'
	else if [logstash][msgparser][id] == "msgParserId629" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Child received signal: PID %{child_pid}, signal %{result}: %{resultcode}, command='%{action}'" }
			id => "msgParserId629"
			add_field => {
				"hostname" => "%{hhostname}"
				"event_description" => "Child received signal"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId630
	# line in RSA:  <process>[<process_id>]: <event_type>: Child stopped: PID <child_pid>, signal=<resultcode> command='<action>')
	else if [logstash][msgparser][id] == "msgParserId630" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Child stopped: PID %{child_pid}, signal=%{resultcode} command='%{action}')" }
			id => "msgParserId630"
			add_field => {
				"event_description" => "Child stopped"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId631
	# line in RSA:  <process>[<process_id>]: <event_type>: Starting child '<agent>'
	else if [logstash][msgparser][id] == "msgParserId631" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Starting child '%{agent}'" }
			id => "msgParserId631"
			add_field => {
				"event_description" => "Starting child"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId632
	# line in RSA:  <process>[<process_id>]: <event_type>: Cleanup child '<agent>', PID <child_pid>, status <result>
	else if [logstash][msgparser][id] == "msgParserId632" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Cleanup child '%{agent}', PID %{child_pid}, status %{result}" }
			id => "msgParserId632"
			add_field => {
				"event_description" => "Cleanup child"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId633
	# line in RSA:  <process>[<process_id>]: <event_type>: waitpid failed: PID <child_pid>, rc <dclass_counter2>, status <resultcode>: <result>
	else if [logstash][msgparser][id] == "msgParserId633" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: waitpid failed: PID %{child_pid}, rc %{dclass_counter2}, status %{resultcode}: %{result}" }
			id => "msgParserId633"
			add_field => {
				"event_description" => "waitpid failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId634
	# line in RSA:  <event_type>: Idle timeout for user '<username>' exceeded and <result>
	else if [logstash][msgparser][id] == "msgParserId634" {
		dissect {
			mapping => { "message" => "%{event_type}: Idle timeout for user '%{username}' exceeded and %{result}" }
			id => "msgParserId634"
			add_field => {
				"event_description" => "Idle timeout for user exceeded"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId635
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>', command '<action>'
	else if [logstash][msgparser][id] == "msgParserId635" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}', command '%{action}'" }
			id => "msgParserId635"
			add_field => {
				"event_description" => "UI CMDLINE READ LINE"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId636
	# line in RSA:  <process>[<process_id>]: <event_type>: Command execution failed for '<agent>': <result>
	else if [logstash][msgparser][id] == "msgParserId636" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Command execution failed for '%{agent}': %{result}" }
			id => "msgParserId636"
			add_field => {
				"event_description" => "Command execution failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId637
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to fork command '<agent>': <result>
	else if [logstash][msgparser][id] == "msgParserId637" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to fork command '%{agent}': %{result}" }
			id => "msgParserId637"
			add_field => {
				"event_description" => "Unable to fork command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId638
	# line in RSA:  <process>[<process_id>]: <event_type>: Command stopped: PID <child_pid>, signal '<resultcode>, command '<action>'
	else if [logstash][msgparser][id] == "msgParserId638" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Command stopped: PID %{child_pid}, signal '%{resultcode}, command '%{action}'" }
			id => "msgParserId638"
			add_field => {
				"event_description" => "Command stopped"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId639
	# line in RSA:  <process>[<process_id>]: <event_type>: Command exited: PID <child_pid>, status <resultcode>, command '<action>'
	else if [logstash][msgparser][id] == "msgParserId639" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Command exited: PID %{child_pid}, status %{resultcode}, command '%{action}'" }
			id => "msgParserId639"
			add_field => {
				"event_description" => "Command exited"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId640
	# line in RSA:  <process>[<process_id>]: <event_type>: Invalid '<action>' command authorization regular expression '<agent>': <result>
	else if [logstash][msgparser][id] == "msgParserId640" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Invalid '%{action}' command authorization regular expression '%{agent}': %{result}" }
			id => "msgParserId640"
			add_field => {
				"event_description" => "Invalid regexp command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId641
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' { requested '<action>' operation (comment:<info>) | performed <action> }
	else if [logstash][msgparser][id] == "msgParserId641" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+User[\s]+'(?<username>[^']*)'[\s]+([\s]*requested[\s]+'(?<action>[^']*)'[\s]+operation[\s]+\(comment:(?<info>[^\)]*)\)[\s]+|[\s]*performed[\s]+(?<action>[^\s]*)[\s]+)$" }
			id => "msgParserId641"
			add_field => {
				"event_description" => "User commit"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId642
	# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' performed <result>
	else if [logstash][msgparser][id] == "msgParserId642" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' performed %{result}" }
			id => "msgParserId642"
			add_field => {
				"event_description" => "User commit"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId643
	# line in RSA:  <process>[<process_id>]: <event_type>: '<agent>' was successful
	else if [logstash][msgparser][id] == "msgParserId643" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: '%{agent}' was successful" }
			id => "msgParserId643"
			add_field => {
				"event_description" => "User commit successful"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId644
	# line in RSA:  <process>[<process_id>]: <event_type>: <result>, <info>
	else if [logstash][msgparser][id] == "msgParserId644" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{result}, %{info}" }
			id => "msgParserId644"
			add_field => {
				"event_description" => "User commit failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId645
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to compress file <filename>'
	else if [logstash][msgparser][id] == "msgParserId645" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to compress file %{filename}'" }
			id => "msgParserId645"
			add_field => {
				"event_description" => "Unable to compress file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId646
	# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' performed '<action>'
	else if [logstash][msgparser][id] == "msgParserId646" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' performed '%{action}'" }
			id => "msgParserId646"
			add_field => {
				"event_description" => "UI COMMIT CONFIRMED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId647
	# line in RSA:  <process>[<process_id>]: <event_type>: '<action>' must be confirmed { within minutes <dclass_counter1> | within <dclass_counter1> minutes }
	else if [logstash][msgparser][id] == "msgParserId647" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+'(?<action>[^']*)'[\s]+must[\s]+be[\s]+confirmed[\s]+([\s]*within[\s]+minutes[\s]+(?<dclass_counter1>[^\s]*)[\s]+|[\s]*within[\s]+(?<dclass_counter1>[^\s]*)[\s]+minutes[\s]+)$" }
			id => "msgParserId647"
			add_field => {
				"event_description" => "COMMIT must be confirmed within # minutes"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId648
	# line in RSA:  <process>[<process_id>]: <event_type>: { User | user } '<username>' performed '<action>'
	else if [logstash][msgparser][id] == "msgParserId648" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+([\s]*User[\s]+|[\s]*user[\s]+)[\s]+'(?<username>[^']*)'[\s]+performed[\s]+'(?<action>[^']*)'$" }
			id => "msgParserId648"
			add_field => {
				"event_description" => "user performed commit confirm"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId649
	# line in RSA:  <process>[<process_id>]: <event_type>: Skipped empty object <result>
	else if [logstash][msgparser][id] == "msgParserId649" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Skipped empty object %{result}" }
			id => "msgParserId649"
			add_field => {
				"event_description" => "Skipped empty object"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId650
	# line in RSA:  <process>[<process_id>]: <event_type>: Commit was not confirmed; <result>
	else if [logstash][msgparser][id] == "msgParserId650" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Commit was not confirmed; %{result}" }
			id => "msgParserId650"
			add_field => {
				"event_description" => "COMMIT NOT CONFIRMED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId651
	# line in RSA:  <process>[<process_id>]: <event_type>:  { commit | Commit operation in progress }: <action>
	else if [logstash][msgparser][id] == "msgParserId651" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+([\s]*commit[\s]+|[\s]*Commit[\s]+operation[\s]+in[\s]+progress[\s]+):[\s]+(?<action>.*)$" }
			id => "msgParserId651"
			add_field => {
				"event_description" => "Commit operation in progress"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId652
	# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' performed <action>
	else if [logstash][msgparser][id] == "msgParserId652" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' performed %{action}" }
			id => "msgParserId652"
			add_field => {
				"event_description" => "COMMIT QUIT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId653
	# line in RSA:  <process>[<process_id>]: <event_type>: Automatic rollback failed
	else if [logstash][msgparser][id] == "msgParserId653" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Automatic rollback failed" }
			id => "msgParserId653"
			add_field => {
				"event_description" => "Automatic rollback failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId654
	# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' performed <action>
	else if [logstash][msgparser][id] == "msgParserId654" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' performed %{action}" }
			id => "msgParserId654"
			add_field => {
				"event_description" => "COMMIT SYNC"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId655
	# line in RSA:  <process>[<process_id>]: <event_type>: All logins to local configuration database were terminated because <result>
	else if [logstash][msgparser][id] == "msgParserId655" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: All logins to local configuration database were terminated because %{result}" }
			id => "msgParserId655"
			add_field => {
				"event_description" => "All logins to local configuration database were terminated"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId656
	# line in RSA:  <process>[<process_id>]: <event_type>: Process: <agent>, path: { [<filename>], | <filename>, } statement: <info>{ , error: <result> | <space>} 
	else if [logstash][msgparser][id] == "msgParserId656" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+Process:[\s]+(?<agent>[^,]*),[\s]+path:[\s]+([\s]*\[(?<filename>[^\]]*)\],[\s]+|[\s]*(?<filename>[^,]*),[\s]+)[\s]+statement:[\s]+(?<info>[^\s\s]*)([\s]*,[\s]+error:[\s]+(?<result>[^\s]*)[\s]+|[\s]*(?<space>[^\s]*))[\s]+$" }
			id => "msgParserId656"
			add_field => {
				"event_description" => "CONFIGURATION ERROR"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId657
	# line in RSA:  <process>[<process_id>]: <event_type>: { Network | Local } socket connection accept failed: <result>
	else if [logstash][msgparser][id] == "msgParserId657" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+([\s]*Network[\s]+|[\s]*Local[\s]+)[\s]+socket[\s]+connection[\s]+accept[\s]+failed:[\s]+(?<result>.*)$" }
			id => "msgParserId657"
			add_field => {
				"event_description" => "socket connection accept failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId658
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to create session child: <result>
	else if [logstash][msgparser][id] == "msgParserId658" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to create session child: %{result}" }
			id => "msgParserId658"
			add_field => {
				"event_description" => "Unable to create session child"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId659
	# line in RSA:  <process>[<process_id>]: <event_type>: select failed: <result>
	else if [logstash][msgparser][id] == "msgParserId659" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: select failed: %{result}" }
			id => "msgParserId659"
			add_field => {
				"event_description" => "DAEMON SELECT FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId660
	# line in RSA:  <process>[<process_id>]: <event_type>: { Network | Local } socket create failed: <result>
	else if [logstash][msgparser][id] == "msgParserId660" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+([\s]*Network[\s]+|[\s]*Local[\s]+)[\s]+socket[\s]+create[\s]+failed:[\s]+(?<result>.*)$" }
			id => "msgParserId660"
			add_field => {
				"event_description" => "socket create failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId661
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to reaccess database file '<filename>', address <interface>, size <dclass_counter1>: <result>
	else if [logstash][msgparser][id] == "msgParserId661" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to reaccess database file '%{filename}', address %{interface}, size %{dclass_counter1}: %{result}" }
			id => "msgParserId661"
			add_field => {
				"event_description" => "Unable to reaccess database file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId662
	# line in RSA:  <process>[<process_id>]: <event_type>: Database '<filename>' is out of data and needs to be rebuilt
	else if [logstash][msgparser][id] == "msgParserId662" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Database '%{filename}' is out of data and needs to be rebuilt" }
			id => "msgParserId662"
			add_field => {
				"event_description" => "Database is out of data"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId663
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to extend database file '<filename>' to size <dclass_counter1>: <result>
	else if [logstash][msgparser][id] == "msgParserId663" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to extend database file '%{filename}' to size %{dclass_counter1}: %{result}" }
			id => "msgParserId663"
			add_field => {
				"event_description" => "Unable to extend database file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId664
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' entering configuration mode
	else if [logstash][msgparser][id] == "msgParserId664" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' entering configuration mode" }
			id => "msgParserId664"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "User entering configuration mode"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId665
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' <event_description>
	else if [logstash][msgparser][id] == "msgParserId665" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' %{event_description}" }
			id => "msgParserId665"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "User exiting configuration mode"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId666
	# line in RSA:  <process>[<process_id>]: <event_type>: Database header extent mismatch for file '<agent>': expecting <dclass_counter1>, got <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId666" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Database header extent mismatch for file '%{agent}': expecting %{dclass_counter1}, got %{dclass_counter2}" }
			id => "msgParserId666"
			add_field => {
				"event_description" => "Database header extent mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId667
	# line in RSA:  <process>[<process_id>]: <event_type>: Database header major version number mismatch for file '<filename>': expecting <dclass_counter1>, got <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId667" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Database header major version number mismatch for file '%{filename}': expecting %{dclass_counter1}, got %{dclass_counter2}" }
			id => "msgParserId667"
			add_field => {
				"event_description" => "Database header major version number mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId668
	# line in RSA:  <process>[<process_id>]: <event_type>: Database header minor version number mismatch for file '<filename>': expecting <dclass_counter1>, got <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId668" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Database header minor version number mismatch for file '%{filename}': expecting %{dclass_counter1}, got %{dclass_counter2}" }
			id => "msgParserId668"
			add_field => {
				"event_description" => "Database header minor version number mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId669
	# line in RSA:  <process>[<process_id>]: <event_type>: Database header sequence numbers mismatch for file '<filename>'
	else if [logstash][msgparser][id] == "msgParserId669" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Database header sequence numbers mismatch for file '%{filename}'" }
			id => "msgParserId669"
			add_field => {
				"event_description" => "Database header sequence numbers mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId670
	# line in RSA:  <process>[<process_id>]: <event_type>: Database header size mismatch for file '<filename>': expecting <dclass_counter1>, got <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId670" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Database header size mismatch for file '%{filename}': expecting %{dclass_counter1}, got %{dclass_counter2}" }
			id => "msgParserId670"
			add_field => {
				"event_description" => "Database header size mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId671
	# line in RSA:  <process>[<process_id>]: <event_type>: Database open failed for file '<filename>': <result>
	else if [logstash][msgparser][id] == "msgParserId671" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Database open failed for file '%{filename}': %{result}" }
			id => "msgParserId671"
			add_field => {
				"event_description" => "Database open failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId672
	# line in RSA:  <process>[<process_id>]: <event_type>: User <username> Automatic rebuild of the database '<filename>' failed
	else if [logstash][msgparser][id] == "msgParserId672" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User %{username} Automatic rebuild of the database '%{filename}' failed" }
			id => "msgParserId672"
			add_field => {
				"event_description" => "DBASE REBUILD FAILED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId673
	# line in RSA:  <process>[<process_id>]: <event_type>: Automatic rebuild of the database failed
	else if [logstash][msgparser][id] == "msgParserId673" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Automatic rebuild of the database failed" }
			id => "msgParserId673"
			add_field => {
				"event_description" => "Automatic rebuild of the database failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId674
	# line in RSA:  <process>[<process_id>]: <event_type>: { User | Automatic } <username> rebuild/rollback of the database '<filename>' started
	else if [logstash][msgparser][id] == "msgParserId674" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+(?<event_type>[^:]*):[\s]+([\s]*User[\s]+|[\s]*Automatic[\s]+)[\s]+(?<username>[^\s]*)[\s]+rebuild/rollback[\s]+of[\s]+the[\s]+database[\s]+'(?<filename>[^']*)'[\s]+started$" }
			id => "msgParserId674"
			add_field => {
				"event_description" => "DBASE REBUILD STARTED"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId675
	# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' attempting database re-creation
	else if [logstash][msgparser][id] == "msgParserId675" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' attempting database re-creation" }
			id => "msgParserId675"
			add_field => {
				"event_description" => "user attempting database re-creation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId676
	# line in RSA:  <process>[<process_id>]: <event_type>: Reopen of the database failed
	else if [logstash][msgparser][id] == "msgParserId676" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Reopen of the database failed" }
			id => "msgParserId676"
			add_field => {
				"event_description" => "Reopen of the database failed"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId677
	# line in RSA:  <process>[<process_id>]: <event_type>: Users <username> have the same UID <uid>
	else if [logstash][msgparser][id] == "msgParserId677" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Users %{username} have the same UID %{uid}" }
			id => "msgParserId677"
			add_field => {
				"event_description" => "Users have the same UID"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId678
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' used JUNOScript client to run command '<action>'
	else if [logstash][msgparser][id] == "msgParserId678" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' used JUNOScript client to run command '%{action}'" }
			id => "msgParserId678"
			add_field => {
				"event_description" => "User used JUNOScript client to run command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId679
	# line in RSA:  <process>[<process_id>]: <event_type>: JUNOScript error: <result>
	else if [logstash][msgparser][id] == "msgParserId679" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: JUNOScript error: %{result}" }
			id => "msgParserId679"
			add_field => {
				"event_description" => "JUNOScript error"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId680
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' is performing a '<action>'
	else if [logstash][msgparser][id] == "msgParserId680" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' is performing a '%{action}'" }
			id => "msgParserId680"
			add_field => {
				"event_description" => "User command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId681
	# line in RSA:  <process>[<process_id>]: <event_type>: Loading the default config from <filename>
	else if [logstash][msgparser][id] == "msgParserId681" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Loading the default config from %{filename}" }
			id => "msgParserId681"
			add_field => {
				"event_description" => "Loading default config from file"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "UI_LOGIN_EVENT" {
		# MESSAGE UI_LOGIN_EVENT:01
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' login, class '<group>' [<fld01>], <info> '<saddr> <sport> <daddr> <dport>', client-mode '<fld02>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' login, class '%{group}' [%{fld01}], %{info} '%{saddr} %{sport} %{daddr} %{dport}', client-mode '%{fld02}'" }
				id => "message-UI_LOGIN_EVENT:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Successful login"
				"hostname" => "%{hostip}"
					"[event][id]" => "UI_LOGIN_EVENT:01"
					"[rsa][message][id1]" => "UI_LOGIN_EVENT:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE UI_LOGIN_EVENT
		# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' login, class '<group>' <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' login, class '%{group}' %{info}" }
				id => "message-UI_LOGIN_EVENT"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Successful login"
					"[event][id]" => "UI_LOGIN_EVENT"
					"[rsa][message][id1]" => "UI_LOGIN_EVENT"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId684
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' logout
	else if [logstash][msgparser][id] == "msgParserId684" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' logout" }
			id => "msgParserId684"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "User logout"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId685
	# line in RSA:  <process>[<process_id>]: <event_type>: Lost connection to daemon <agent>
	else if [logstash][msgparser][id] == "msgParserId685" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Lost connection to daemon %{agent}" }
			id => "msgParserId685"
			add_field => {
				"event_description" => "Lost connection to daemon"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId686
	# line in RSA:  <process>[<process_id>]: <event_type>: <action> by '<username>'
	else if [logstash][msgparser][id] == "msgParserId686" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: %{action} by '%{username}'" }
			id => "msgParserId686"
			add_field => {
				"event_description" => "MASTERSHIP EVENT"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId687
	# line in RSA:  <process>[<process_id>]: <event_type>: Terminating operation: exit status <resultcode>
	else if [logstash][msgparser][id] == "msgParserId687" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Terminating operation: exit status %{resultcode}" }
			id => "msgParserId687"
			add_field => {
				"event_description" => "Terminating operation"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId688
	# line in RSA:  <process>[<process_id>]: <event_type>: User '<username>' used NETCONF client to run command '<action>'
	else if [logstash][msgparser][id] == "msgParserId688" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: User '%{username}' used NETCONF client to run command '%{action}'" }
			id => "msgParserId688"
			add_field => {
				"event_description" => "User used NETCONF client to run command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId689
	# line in RSA:  <process>[<process_id>]: <event_type>: read failed for peer <hostname>: <result>
	else if [logstash][msgparser][id] == "msgParserId689" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: read failed for peer %{hostname}: %{result}" }
			id => "msgParserId689"
			add_field => {
				"event_description" => "read failed for peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId690
	# line in RSA:  <process>[<process_id>]: <event_type>: Timeout on read of peer <hostname>
	else if [logstash][msgparser][id] == "msgParserId690" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Timeout on read of peer %{hostname}" }
			id => "msgParserId690"
			add_field => {
				"event_description" => "Timeout on read of peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId691
	# line in RSA:  <process>[<process_id>]: <event_type>: System <action> by '<username>'
	else if [logstash][msgparser][id] == "msgParserId691" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: System %{action} by '%{username}'" }
			id => "msgParserId691"
			add_field => {
				"event_description" => "System reboot or halt"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId692
	# line in RSA:  <process>[<process_id>]: <event_type>: user '<username>' restarting daemon <service>
	else if [logstash][msgparser][id] == "msgParserId692" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: user '%{username}' restarting daemon %{service}" }
			id => "msgParserId692"
			add_field => {
				"event_description" => "user restarting daemon"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId693
	# line in RSA:  <process>[<process_id>]: <event_type>: Schema is out of date and <result>
	else if [logstash][msgparser][id] == "msgParserId693" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Schema is out of date and %{result}" }
			id => "msgParserId693"
			add_field => {
				"event_description" => "Schema is out of date"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId694
	# line in RSA:  <process>[<process_id>]: <event_type>: Schema major version mismatch for package <filename> <result>
	else if [logstash][msgparser][id] == "msgParserId694" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Schema major version mismatch for package %{filename} %{result}" }
			id => "msgParserId694"
			add_field => {
				"event_description" => "Schema major version mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId695
	# line in RSA:  <process>[<process_id>]: <event_type>: Schema minor version mismatch for package <filename> <result>
	else if [logstash][msgparser][id] == "msgParserId695" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Schema minor version mismatch for package %{filename} %{result}" }
			id => "msgParserId695"
			add_field => {
				"event_description" => "Schema minor version mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId696
	# line in RSA:  <process>[<process_id>]: <event_type>: Schema header sequence numbers mismatch for package <filename>
	else if [logstash][msgparser][id] == "msgParserId696" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Schema header sequence numbers mismatch for package %{filename}" }
			id => "msgParserId696"
			add_field => {
				"event_description" => "Schema header sequence numbers mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId697
	# line in RSA:  <process>[<process_id>]: <event_type>: Schema sequence number mismatch
	else if [logstash][msgparser][id] == "msgParserId697" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Schema sequence number mismatch" }
			id => "msgParserId697"
			add_field => {
				"event_description" => "Schema sequence number mismatch"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId698
	# line in RSA:  <process>[<process_id>]: <event_type>: Configuration synchronization with remote Routing Engine <result>
	else if [logstash][msgparser][id] == "msgParserId698" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Configuration synchronization with remote Routing Engine %{result}" }
			id => "msgParserId698"
			add_field => {
				"event_description" => "Configuration synchronization with remote Routing Engine"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId699
	# line in RSA:  <process>[<process_id>]: <event_type>: TACACS+ failure: <result>
	else if [logstash][msgparser][id] == "msgParserId699" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: TACACS+ failure: %{result}" }
			id => "msgParserId699"
			add_field => {
				"event_description" => "TACACS+ failure"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId700
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to fetch system version: <result>
	else if [logstash][msgparser][id] == "msgParserId700" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to fetch system version: %{result}" }
			id => "msgParserId700"
			add_field => {
				"event_description" => "Unable to fetch system version"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId701
	# line in RSA:  <process>[<process_id>]: <event_type>: Re-establishing connection to peer <hostname>
	else if [logstash][msgparser][id] == "msgParserId701" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Re-establishing connection to peer %{hostname}" }
			id => "msgParserId701"
			add_field => {
				"event_description" => "Re-establishing connection to peer"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId702
	# line in RSA:  <process>[<process_id>]: <event_type>: Interface <interface> (local addr: <saddr>) is now master for <username>
	else if [logstash][msgparser][id] == "msgParserId702" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Interface %{interface} (local addr: %{saddr}) is now master for %{username}" }
			id => "msgParserId702"
			add_field => {
				"event_description" => "Interface new master for User"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId703
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to authenticate <obj_name> (username <c_username>)
	else if [logstash][msgparser][id] == "msgParserId703" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to authenticate %{obj_name} (username %{c_username})" }
			id => "msgParserId703"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Failure"
				"event_description" => "Unable to authenticate client"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId704
	# line in RSA:  <process>[<process_id>]: <event_type>: Authenticated <agent> client (username <c_username>)
	else if [logstash][msgparser][id] == "msgParserId704" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Authenticated %{agent} client (username %{c_username})" }
			id => "msgParserId704"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
				"event_description" => "Authenticated client"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId705
	# line in RSA:  <process>[<process_id>]: <event_type>: Web services request received from unauthorized interface <interface>
	else if [logstash][msgparser][id] == "msgParserId705" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Web services request received from unauthorized interface %{interface}" }
			id => "msgParserId705"
			add_field => {
				"event_description" => "web request from unauthorized interface"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId706
	# line in RSA:  <process>[<process_id>]: <event_type>: Unable to read from client: <result>
	else if [logstash][msgparser][id] == "msgParserId706" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Unable to read from client: %{result}" }
			id => "msgParserId706"
			add_field => {
				"event_description" => "Unable to read from client"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId707
	# line in RSA:  <process>[<process_id>]: <event_type>: Error encountered: <result>, failed to check request <url>
	else if [logstash][msgparser][id] == "msgParserId707" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{event_type}: Error encountered: %{result}, failed to check request %{url}" }
			id => "msgParserId707"
			add_field => {
				"event_description" => "failed to check web request"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId708
	# line in RSA:  <event_type> [junos@<obj_name> source-address="<saddr>" destination-address="<daddr>" assembly-id="<fld1>"]
	else if [logstash][msgparser][id] == "msgParserId708" {
		dissect {
			mapping => { "message" => "%{event_type} [junos@%{obj_name} source-address=\"%{saddr}\" destination-address=\"%{daddr}\" assembly-id=\"%{fld1}\"]" }
			id => "msgParserId708"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "eswd" {
		# MESSAGE eswd
		# line in RSA:  <process>[<process_id>]: Bridge Address: add <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Bridge Address: add %{macaddr}" }
				id => "message-eswd"
				add_field => {
				"event_description" => "Bridge Address"
					"[event][id]" => "eswd"
					"[rsa][message][id1]" => "eswd"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE eswd:01
		# line in RSA:  <process>[<process_id>]: <info>: STP state for interface <interface>  context id <id> changed from <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{info}: STP state for interface %{interface}  context id %{id} changed from %{fld3}" }
				id => "message-eswd:01"
				add_field => {
				"event_description" => "ESWD STP State Change Info"
					"[event][id]" => "eswd:01"
					"[rsa][message][id1]" => "eswd:01"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId711
	# line in RSA:  <process>[<process_id>]: (<username>) CMD ( <action>)
	else if [logstash][msgparser][id] == "msgParserId711" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: (%{username}) CMD ( %{action})" }
			id => "msgParserId711"
			add_field => {
				"event_description" => "CRON command"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "chassism" {
		# MESSAGE chassism:02
		# line in RSA:  <process>[<process_id>]: <info>: ifd <interface> <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{info}: ifd %{interface} %{action}" }
				id => "message-chassism:02"
				add_field => {
				"event_description" => "Link status change event"
					"[event][id]" => "chassism:02"
					"[rsa][message][id1]" => "chassism:02"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE chassism:01
		# line in RSA:  <process>[<process_id>]: <info>: <interface>, <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{info}: %{interface}, %{action}" }
				id => "message-chassism:01"
				add_field => {
				"event_description" => "ifd process flaps"
					"[event][id]" => "chassism:01"
					"[rsa][message][id1]" => "chassism:01"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE chassism
		# line in RSA:  <process>[<process_id>]: <info>: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: %{info}: %{action}" }
				id => "message-chassism"
				add_field => {
				"event_description" => "IFCM "
					"[event][id]" => "chassism"
					"[rsa][message][id1]" => "chassism"
					"[event][categoryid]" => "1605010000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "WEBFILTER_URL_PERMITTED" {
		# MESSAGE WEBFILTER_URL_PERMITTED
		# line in RSA:  <event_type> [junos@<fld21> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" name="<info>" error-message="<result>" profile-name="<profile>" object-name="<obj_name>" pathname="<directory>" username="<username>" roles="<user_role>"] WebFilter: ACTION="<action>" <fld2>-><fld3> CATEGORY="<category>" REASON="<fld4>" PROFILE="<fld6>" URL=<url> OBJ=<fld7> USERNAME=<fld8> ROLES=<fld9>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{fld21} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" name=\"%{info}\" error-message=\"%{result}\" profile-name=\"%{profile}\" object-name=\"%{obj_name}\" pathname=\"%{directory}\" username=\"%{username}\" roles=\"%{user_role}\"] WebFilter: ACTION=\"%{action}\" %{fld2}->%{fld3} CATEGORY=\"%{category}\" REASON=\"%{fld4}\" PROFILE=\"%{fld6}\" URL=%{url} OBJ=%{fld7} USERNAME=%{fld8} ROLES=%{fld9}" }
				id => "message-WEBFILTER_URL_PERMITTED"
				add_field => {
					"[event][id]" => "WEBFILTER_URL_PERMITTED"
					"[rsa][message][id1]" => "WEBFILTER_URL_PERMITTED"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE WEBFILTER_URL_PERMITTED:01
		# line in RSA:  <event_type> [junos@<fld21> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" name="<info>" error-message="<result>" profile-name="<profile>" object-name="<obj_name>" pathname="<directory>" username="<username>" roles="<user_role>"] WebFilter: ACTION="<action>" <fld2>-><fld3> CATEGORY="<category>" REASON="<fld4>" PROFILE="<fld6>" URL=<url> OBJ=<fld7>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{fld21} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" name=\"%{info}\" error-message=\"%{result}\" profile-name=\"%{profile}\" object-name=\"%{obj_name}\" pathname=\"%{directory}\" username=\"%{username}\" roles=\"%{user_role}\"] WebFilter: ACTION=\"%{action}\" %{fld2}->%{fld3} CATEGORY=\"%{category}\" REASON=\"%{fld4}\" PROFILE=\"%{fld6}\" URL=%{url} OBJ=%{fld7}" }
				id => "message-WEBFILTER_URL_PERMITTED:01"
				add_field => {
					"[event][id]" => "WEBFILTER_URL_PERMITTED:01"
					"[rsa][message][id1]" => "WEBFILTER_URL_PERMITTED:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE WEBFILTER_URL_PERMITTED:03
		# line in RSA:  <event_type> [junos@<fld21> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" name="<info>" error-message="<result>" profile-name="<profile>" object-name="<obj_name>" pathname="<directory>" username="<username>" roles="<user_role>"] WebFilter: ACTION="<action>" <fld2>-><fld3> CATEGORY="<category>" REASON=<fld4>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{fld21} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" name=\"%{info}\" error-message=\"%{result}\" profile-name=\"%{profile}\" object-name=\"%{obj_name}\" pathname=\"%{directory}\" username=\"%{username}\" roles=\"%{user_role}\"] WebFilter: ACTION=\"%{action}\" %{fld2}->%{fld3} CATEGORY=\"%{category}\" REASON=%{fld4}" }
				id => "message-WEBFILTER_URL_PERMITTED:03"
				add_field => {
					"[event][id]" => "WEBFILTER_URL_PERMITTED:03"
					"[rsa][message][id1]" => "WEBFILTER_URL_PERMITTED:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE WEBFILTER_URL_PERMITTED:02
		# line in RSA:  <event_type> [junos@<fld21> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" name="<info>" error-message="<result>" profile-name="<profile>" object-name="<obj_name>" pathname=<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{fld21} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" name=\"%{info}\" error-message=\"%{result}\" profile-name=\"%{profile}\" object-name=\"%{obj_name}\" pathname=%{url}" }
				id => "message-WEBFILTER_URL_PERMITTED:02"
				add_field => {
					"[event][id]" => "WEBFILTER_URL_PERMITTED:02"
					"[rsa][message][id1]" => "WEBFILTER_URL_PERMITTED:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "WEBFILTER_URL_BLOCKED" {
		# MESSAGE WEBFILTER_URL_BLOCKED
		# line in RSA:  <event_type> [junos@<fld21> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" name="<info>" error-message="<result>" profile-name="<profile>" object-name="<obj_name>" pathname="<directory>" username="<username>" roles="<user_role>"] WebFilter: ACTION="<action>" <fld2>-><fld3> CATEGORY="<category>" REASON="<fld4>" PROFILE="<fld6>" URL=<url> OBJ=<fld7> USERNAME=<fld8> ROLES=<fld9>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{fld21} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" name=\"%{info}\" error-message=\"%{result}\" profile-name=\"%{profile}\" object-name=\"%{obj_name}\" pathname=\"%{directory}\" username=\"%{username}\" roles=\"%{user_role}\"] WebFilter: ACTION=\"%{action}\" %{fld2}->%{fld3} CATEGORY=\"%{category}\" REASON=\"%{fld4}\" PROFILE=\"%{fld6}\" URL=%{url} OBJ=%{fld7} USERNAME=%{fld8} ROLES=%{fld9}" }
				id => "message-WEBFILTER_URL_BLOCKED"
				add_field => {
					"[event][id]" => "WEBFILTER_URL_BLOCKED"
					"[rsa][message][id1]" => "WEBFILTER_URL_BLOCKED"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
		# MESSAGE WEBFILTER_URL_BLOCKED:01
		# line in RSA:  <event_type> [junos@<fld21> source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" name="<info>" error-message="<result>" profile-name="<profile>" object-name="<obj_name>" pathname="<directory>" username="<username>" roles="<user_role>"] WebFilter: ACTION="<action>" <fld2>-><fld3> CATEGORY="<category>" REASON="<fld4>" PROFILE="<fld6>" URL=<url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} [junos@%{fld21} source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" name=\"%{info}\" error-message=\"%{result}\" profile-name=\"%{profile}\" object-name=\"%{obj_name}\" pathname=\"%{directory}\" username=\"%{username}\" roles=\"%{user_role}\"] WebFilter: ACTION=\"%{action}\" %{fld2}->%{fld3} CATEGORY=\"%{category}\" REASON=\"%{fld4}\" PROFILE=\"%{fld6}\" URL=%{url}" }
				id => "message-WEBFILTER_URL_BLOCKED:01"
				add_field => {
					"[event][id]" => "WEBFILTER_URL_BLOCKED:01"
					"[rsa][message][id1]" => "WEBFILTER_URL_BLOCKED:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hfld32}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId721
	# line in RSA: <process>[<process_id>]: <id>: <<<fld12>> Access url <url> on port <network_port> failed<<<result>>.
	else if [logstash][msgparser][id] == "msgParserId721" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{id}: <%{fld12}> Access url %{url} on port %{network_port} failed<%{result}>." }
			id => "msgParserId721"
			add_field => {
				"event_type" => "VPN"
				"hostname" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId722
	# line in RSA: <process>[<process_id>]: <id>: <<<fld12>> Access host <hostname> on ip <hostip> port <network_port> <result>.
	else if [logstash][msgparser][id] == "msgParserId722" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{id}: <%{fld12}> Access host %{hostname} on ip %{hostip} port %{network_port} %{result}." }
			id => "msgParserId722"
			add_field => {
				"event_type" => "VPN"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId723
	# line in RSA: <process>[<process_id>]: <id>: Failed to retrieve CRL from received file for <node>
	else if [logstash][msgparser][id] == "msgParserId723" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{id}: Failed to retrieve CRL from received file for %{node}" }
			id => "msgParserId723"
			add_field => {
				"event_type" => "VPN"
				"hostname" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId724
	# line in RSA: <process>[<process_id>]: <id>: <<<fld12>> <result>
	else if [logstash][msgparser][id] == "msgParserId724" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{id}: <%{fld12}> %{result}" }
			id => "msgParserId724"
			add_field => {
				"event_type" => "VPN"
				"hostname" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId725
	# line in RSA: <process>[<process_id>]: <id>: HA control link monitor status is marked up
	else if [logstash][msgparser][id] == "msgParserId725" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: %{id}: HA control link monitor status is marked up" }
			id => "msgParserId725"
			add_field => {
				"event_type" => "VPN"
				"hostname" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId726
	# line in RSA: <process>[<process_id>]: LACPD_TIMEOUT: <sinterface>: <event_description>
	else if [logstash][msgparser][id] == "msgParserId726" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: LACPD_TIMEOUT: %{sinterface}: %{event_description}" }
			id => "msgParserId726"
			add_field => {
				"event_type" => "VPN"
				"hostname" => "%{hostip}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId728
	# line in RSA: <fld12>
	else if [logstash][msgparser][id] == "msgParserId728" {
		dissect {
			mapping => { "message" => "%{fld12}" }
			id => "msgParserId728"
			add_field => {
				"event_type" => "VPN"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "node" {
		# MESSAGE node:01
		# line in RSA: <hostname> <node> Next-hop resolution requests from interface <interface> throttled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{node} Next-hop resolution requests from interface %{interface} throttled" }
				id => "message-node:01"
				add_field => {
					"[event][id]" => "node:01"
					"[rsa][message][id1]" => "node:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:02
		# line in RSA: <hostname> <node> <process>: Trying peer connection, status <resultcode>, attempt <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{node} %{process}: Trying peer connection, status %{resultcode}, attempt %{fld1}" }
				id => "message-node:02"
				add_field => {
					"[event][id]" => "node:02"
					"[rsa][message][id1]" => "node:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:03
		# line in RSA: <hostname> <node> <process>: trying master connection, status <resultcode>, attempt <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{node} %{process}: trying master connection, status %{resultcode}, attempt %{fld1}" }
				id => "message-node:03"
				add_field => {
					"[event][id]" => "node:03"
					"[rsa][message][id1]" => "node:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:04
		# line in RSA: <hostname> <node> <fld1> key <fld2> <fld3> port priority <fld6> <fld4> port <portname> <fld5> state <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{node} %{fld1} key %{fld2} %{fld3} port priority %{fld6} %{fld4} port %{portname} %{fld5} state %{resultcode}" }
				id => "message-node:04"
				add_field => {
					"[event][id]" => "node:04"
					"[rsa][message][id1]" => "node:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:05
		# line in RSA: <hostname> <node>   {partner|actor} sys priority <fld4> {actor|partner} sys <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<node>[^\s]*)[\s]+(partner|actor)[\s]+sys[\s]+priority[\s]+(?<fld4>[^\s]*)[\s]+(actor|partner)[\s]+sys[\s]+(?<interface>.*)$" }
				id => "message-node:05"
				add_field => {
					"[event][id]" => "node:05"
					"[rsa][message][id1]" => "node:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:06
		# line in RSA: <hostname> <node>  {dst mac <dinterface>|src mac <sinterface> ether type <fld1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+(?<node>[^\s]*)[\s]+(dst[\s]+mac[\s]+(?<dinterface>.*)|src[\s]+mac[\s]+(?<sinterface>[^\s]*)[\s]+ether[\s]+type[\s]+(?<fld1>.*))$" }
				id => "message-node:06"
				add_field => {
					"[event][id]" => "node:06"
					"[rsa][message][id1]" => "node:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:07
		# line in RSA: <hostname> <node> <process>: interface <interface> trigger reth_scan
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{node} %{process}: interface %{interface} trigger reth_scan" }
				id => "message-node:07"
				add_field => {
					"[event][id]" => "node:07"
					"[rsa][message][id1]" => "node:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:08
		# line in RSA: <hostname> <node> <process>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{node} %{process}: %{info}" }
				id => "message-node:08"
				add_field => {
					"[event][id]" => "node:08"
					"[rsa][message][id1]" => "node:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE node:09
		# line in RSA: <hostname> <node> <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} %{node} %{fld1}" }
				id => "message-node:09"
				add_field => {
					"[event][id]" => "node:09"
					"[rsa][message][id1]" => "node:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "(FPC" {
		# MESSAGE (FPC:01
		# line in RSA: <fld1>) <node> kernel: <event_type>: deleting active remote neighbor entry <fld2> from interface <interface>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}) %{node} kernel: %{event_type}: deleting active remote neighbor entry %{fld2} from interface %{interface}." }
				id => "message-(FPC:01"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "(FPC:01"
					"[rsa][message][id1]" => "(FPC:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE (FPC:02
		# line in RSA: <fld1>) <node> kernel: <event_type> deleting nb <fld2> on ifd <interface> for cid <fld3> from active neighbor table
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}) %{node} kernel: %{event_type} deleting nb %{fld2} on ifd %{interface} for cid %{fld3} from active neighbor table" }
				id => "message-(FPC:02"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "(FPC:02"
					"[rsa][message][id1]" => "(FPC:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE (FPC:03
		# line in RSA: <fld1>) <node> kernel: <event_type>: { MDOWN | MUP } received for interface <interface>, member of <fld4>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\)]*)\)[\s]+(?<node>[^\s]*)[\s]+kernel:[\s]+(?<event_type>[^:]*):[\s]+([\s]*MDOWN[\s]+|[\s]*MUP[\s]+)[\s]+received[\s]+for[\s]+interface[\s]+(?<interface>[^,]*),[\s]+member[\s]+of[\s]+(?<fld4>.*)$" }
				id => "message-(FPC:03"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "(FPC:03"
					"[rsa][message][id1]" => "(FPC:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE (FPC:04
		# line in RSA: <fld1>) <node> kernel: <event_type>: ifd=<interface>, ifd flags=<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}) %{node} kernel: %{event_type}: ifd=%{interface}, ifd flags=%{fld2}" }
				id => "message-(FPC:04"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "(FPC:04"
					"[rsa][message][id1]" => "(FPC:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE (FPC:05
		# line in RSA: <fld1>) <node> kernel: rdp keepalive expired, connection dropped - src <fld3>:<fld2> dest <fld4>:<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}) %{node} kernel: rdp keepalive expired, connection dropped - src %{fld3}:%{fld2} dest %{fld4}:%{fld5}" }
				id => "message-(FPC:05"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "(FPC:05"
					"[rsa][message][id1]" => "(FPC:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE (FPC
		# line in RSA: <fld1>) <node> <fld10>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}) %{node} %{fld10}" }
				id => "message-(FPC"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "(FPC"
					"[rsa][message][id1]" => "(FPC"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId744
	# line in RSA: <process>[<process_id>]:<fld1>
	else if [logstash][msgparser][id] == "msgParserId744" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]:%{fld1}" }
			id => "msgParserId744"
			add_field => {
				"hostname" => "%{hhost}"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId747
	# line in RSA: <event_type>[junos@<fld32> hostname="<hostname>" file-category="<fld9>" verdict-number="<fld10>" action="<action>" list-hit="<fld19>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" protocol-id="<protocol>" application="<fld6>" nested-application="<fld7>" policy-name="<policyname>" username="<username>" roles="<user_role>" session-id-32="<sessionid>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>" url="<url>"] <fld27>
	else if [logstash][msgparser][id] == "msgParserId747" {
		dissect {
			mapping => { "message" => "%{event_type}[junos@%{fld32} hostname=\"%{hostname}\" file-category=\"%{fld9}\" verdict-number=\"%{fld10}\" action=\"%{action}\" list-hit=\"%{fld19}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" protocol-id=\"%{protocol}\" application=\"%{fld6}\" nested-application=\"%{fld7}\" policy-name=\"%{policyname}\" username=\"%{username}\" roles=\"%{user_role}\" session-id-32=\"%{sessionid}\" source-zone-name=\"%{src_zone}\" destination-zone-name=\"%{dst_zone}\" url=\"%{url}\"] %{fld27}" }
			id => "msgParserId747"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId748
	# line in RSA: <event_type>[junos@<fld32> timestamp="<fld30>" tenant-id="<fld1>" client-ip-str="<hostip>" hostname="<hostname>" status="<fld13>" policy-name="<policyname>" verdict-number="<fld15>" state="<fld16>" reason="<result>" message="<info>" <fld3>
	else if [logstash][msgparser][id] == "msgParserId748" {
		dissect {
			mapping => { "message" => "%{event_type}[junos@%{fld32} timestamp=\"%{fld30}\" tenant-id=\"%{fld1}\" client-ip-str=\"%{hostip}\" hostname=\"%{hostname}\" status=\"%{fld13}\" policy-name=\"%{policyname}\" verdict-number=\"%{fld15}\" state=\"%{fld16}\" reason=\"%{result}\" message=\"%{info}\" %{fld3}" }
			id => "msgParserId748"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId749
	# line in RSA: <event_type>[junos@<fld32> timestamp="<fld30>" tenant-id="<fld1>" sample-sha256="<checksum>" client-ip-str="<hostip>" verdict-number="<fld26>" malware-info="<threat_name>" username="<username>" hostname="<hostname>" <fld3>
	else if [logstash][msgparser][id] == "msgParserId749" {
		dissect {
			mapping => { "message" => "%{event_type}[junos@%{fld32} timestamp=\"%{fld30}\" tenant-id=\"%{fld1}\" sample-sha256=\"%{checksum}\" client-ip-str=\"%{hostip}\" verdict-number=\"%{fld26}\" malware-info=\"%{threat_name}\" username=\"%{username}\" hostname=\"%{hostname}\" %{fld3}" }
			id => "msgParserId749"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId750
	# line in RSA: <event_type>[junos@<fld32> epoch-time="<fld1>" message-type="<info>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" protocol-name="<protocol>" service-name="<service>" application-name="<application>" rule-name="<fld5>" rulebase-name="<rulename>" policy-name="<policyname>" export-id="<fld6>" repeat-count="<fld7>" action="<action>" threat-severity="<severity>" attack-name="<threat_name>" nat-source-address="<hostip>" nat-source-port="<network_port>" nat-destination-address="<dtransaddr>" nat-destination-port="<dtransport>" elapsed-time=<fld8> inbound-bytes="<rbytes>" outbound-bytes="<sbytes>" inbound-packets="<packets>" outbound-packets="<dclass_counter1>" source-zone-name="<src_zone>" source-interface-name="<sinterface>" destination-zone-name="<dst_zone>" destination-interface-name="<dinterface>" packet-log-id="<fld9>" alert="<fld19>" username="<username>" roles="<fld15>" message="<fld28>" <fld3>
	else if [logstash][msgparser][id] == "msgParserId750" {
		dissect {
			mapping => { "message" => "%{event_type}[junos@%{fld32} epoch-time=\"%{fld1}\" message-type=\"%{info}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" protocol-name=\"%{protocol}\" service-name=\"%{service}\" application-name=\"%{application}\" rule-name=\"%{fld5}\" rulebase-name=\"%{rulename}\" policy-name=\"%{policyname}\" export-id=\"%{fld6}\" repeat-count=\"%{fld7}\" action=\"%{action}\" threat-severity=\"%{severity}\" attack-name=\"%{threat_name}\" nat-source-address=\"%{hostip}\" nat-source-port=\"%{network_port}\" nat-destination-address=\"%{dtransaddr}\" nat-destination-port=\"%{dtransport}\" elapsed-time=%{fld8} inbound-bytes=\"%{rbytes}\" outbound-bytes=\"%{sbytes}\" inbound-packets=\"%{packets}\" outbound-packets=\"%{dclass_counter1}\" source-zone-name=\"%{src_zone}\" source-interface-name=\"%{sinterface}\" destination-zone-name=\"%{dst_zone}\" destination-interface-name=\"%{dinterface}\" packet-log-id=\"%{fld9}\" alert=\"%{fld19}\" username=\"%{username}\" roles=\"%{fld15}\" message=\"%{fld28}\" %{fld3}" }
			id => "msgParserId750"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId751
	# line in RSA: <event_type>[junos@<fld32> attack-name="<threat_name>" source-address="<saddr>" destination-address="<daddr>" source-zone-name="<src_zone>" interface-name="<interface>" action="<action>"] <fld23>
	else if [logstash][msgparser][id] == "msgParserId751" {
		dissect {
			mapping => { "message" => "%{event_type}[junos@%{fld32} attack-name=\"%{threat_name}\" source-address=\"%{saddr}\" destination-address=\"%{daddr}\" source-zone-name=\"%{src_zone}\" interface-name=\"%{interface}\" action=\"%{action}\"] %{fld23}" }
			id => "msgParserId751"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId752
	# line in RSA: <event_type>[junos@<fld32> category="<fld1>" sub-category="<fld2>" action="<action>" action-detail="<fld4>" http-host="<fld17>" threat-severity="<severity>" source-address="<saddr>" source-port="<sport>" destination-address="<daddr>" destination-port="<dport>" protocol-id="<protocol>" application="<fld5>" nested-application="<fld6>" feed-name="<fld18>" policy-name="<policyname>" profile-name="<rulename>" username="<username>" roles="<user_role>" session-id-32="<sessionid>" source-zone-name="<src_zone>" destination-zone-name="<dst_zone>"]<fld10>
	else if [logstash][msgparser][id] == "msgParserId752" {
		dissect {
			mapping => { "message" => "%{event_type}[junos@%{fld32} category=\"%{fld1}\" sub-category=\"%{fld2}\" action=\"%{action}\" action-detail=\"%{fld4}\" http-host=\"%{fld17}\" threat-severity=\"%{severity}\" source-address=\"%{saddr}\" source-port=\"%{sport}\" destination-address=\"%{daddr}\" destination-port=\"%{dport}\" protocol-id=\"%{protocol}\" application=\"%{fld5}\" nested-application=\"%{fld6}\" feed-name=\"%{fld18}\" policy-name=\"%{policyname}\" profile-name=\"%{rulename}\" username=\"%{username}\" roles=\"%{user_role}\" session-id-32=\"%{sessionid}\" source-zone-name=\"%{src_zone}\" destination-zone-name=\"%{dst_zone}\"]%{fld10}" }
			id => "msgParserId752"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld32}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d'T'H:m:s" ] }
		}
	}
	# PARSER msgParserId753
	# line in RSA: <hostname> {<fld2> <fld3> <process>: qsfp-<interface> Chan# |<fld2> qsfp-<interface> Chan# }<fld5>:<event_description>
	else if [logstash][msgparser][id] == "msgParserId753" {
		grok {
			match => { "message" => "^(?<hostname>[^\s]*)[\s]+((?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<process>[^:]*):[\s]+qsfp\-(?<interface>[^\s]*)[\s]+Chan#[\s]+|(?<fld2>[^\s]*)[\s]+qsfp\-(?<interface>[^\s]*)[\s]+Chan#[\s]+)(?<fld5>[^:]*):(?<event_description>.*)$" }
			id => "msgParserId753"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "JUNOSROUTER_GENERIC" {
		# MESSAGE JUNOSROUTER_GENERIC:03
		# line in RSA:  <event_type>: User '<username>', command '<action>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: User '%{username}', command '%{action}'" }
				id => "message-JUNOSROUTER_GENERIC:03"
				add_field => {
				"event_description" => "UI CMDLINE READ LINE"
					"[event][id]" => "JUNOSROUTER_GENERIC:03"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:04
		# line in RSA:  <event_type>: User '<username>' <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: User '%{username}' %{fld1}" }
				id => "message-JUNOSROUTER_GENERIC:04"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "LOGOUT"
					"[event][id]" => "JUNOSROUTER_GENERIC:04"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:04"
					"[event][categoryid]" => "1401070000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:05
		# line in RSA: <event_type>: TACACS+ failure: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: TACACS+ failure: %{result}" }
				id => "message-JUNOSROUTER_GENERIC:05"
				add_field => {
				"event_description" => "TACACS+ failure"
					"[event][id]" => "JUNOSROUTER_GENERIC:05"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:06
		# line in RSA: <event_type>: mismatch NLRI with <hostip> (<hostname>): peer: <daddr> us: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: mismatch NLRI with %{hostip} (%{hostname}): peer: %{daddr} us: %{saddr}" }
				id => "message-JUNOSROUTER_GENERIC:06"
				add_field => {
				"event_description" => "peer NLRI mismatch"
					"[event][id]" => "JUNOSROUTER_GENERIC:06"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:07
		# line in RSA:  <event_type>: NOTIFICATION sent to <daddr> (<dhost>): code <resultcode> (<action>), Reason: <result> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: NOTIFICATION sent to %{daddr} (%{dhost}): code %{resultcode} (%{action}), Reason: %{result}" }
				id => "message-JUNOSROUTER_GENERIC:07"
				add_field => {
				"event_description" => "rpd proceeding"
					"[event][id]" => "JUNOSROUTER_GENERIC:07"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:08
		# line in RSA:  <event_type>: NOTIFICATION received from {<daddr> (<dhost>): code <resultcode> (<action>), socket buffer sndcc: <fld1> rcvcc: <fld2> TCP state: <event_state>, snd_una: <fld3> snd_nxt: <fld4> snd_wnd: <fld5> rcv_nxt: <fld6> rcv_adv: <fld7>, hold timer <fld8>|<daddr> (<dhost>): code <resultcode> (<action>)} 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<event_type>[^:]*):[\s]+NOTIFICATION[\s]+received[\s]+from[\s]+((?<daddr>[^\s]*)[\s]+\((?<dhost>[^\)]*)\):[\s]+code[\s]+(?<resultcode>[^\s]*)[\s]+\((?<action>[^\)]*)\),[\s]+socket[\s]+buffer[\s]+sndcc:[\s]+(?<fld1>[^\s]*)[\s]+rcvcc:[\s]+(?<fld2>[^\s]*)[\s]+TCP[\s]+state:[\s]+(?<event_state>[^,]*),[\s]+snd_una:[\s]+(?<fld3>[^\s]*)[\s]+snd_nxt:[\s]+(?<fld4>[^\s]*)[\s]+snd_wnd:[\s]+(?<fld5>[^\s]*)[\s]+rcv_nxt:[\s]+(?<fld6>[^\s]*)[\s]+rcv_adv:[\s]+(?<fld7>[^,]*),[\s]+hold[\s]+timer[\s]+(?<fld8>[^\s]*)|(?<daddr>[^\s]*)[\s]+\((?<dhost>[^\)]*)\):[\s]+code[\s]+(?<resultcode>[^\s]*)[\s]+\((?<action>[^\)]*)\))[\s]+$" }
				id => "message-JUNOSROUTER_GENERIC:08"
				add_field => {
				"event_description" => "rpd proceeding"
					"[event][id]" => "JUNOSROUTER_GENERIC:08"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:09
		# line in RSA: <event_type>: [edit interfaces<interface>unit<fld1>family inet address<hostip>/<network_port>] :<event_description>:<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}: [edit interfaces%{interface}unit%{fld1}family inet address%{hostip}/%{network_port}] :%{event_description}:%{info}" }
				id => "message-JUNOSROUTER_GENERIC:09"
				add_field => {
					"[event][id]" => "JUNOSROUTER_GENERIC:09"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:01
		# line in RSA: <event_type> Interface Monitor failed <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} Interface Monitor failed %{fld1}" }
				id => "message-JUNOSROUTER_GENERIC:01"
				add_field => {
				"event_description" => "Interface Monitor failed "
				"hostname" => "%{hhost}"
					"[event][id]" => "JUNOSROUTER_GENERIC:01"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:01"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC:02
		# line in RSA: <event_type> Interface Monitor failure recovered <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} Interface Monitor failure recovered %{fld1}" }
				id => "message-JUNOSROUTER_GENERIC:02"
				add_field => {
				"event_description" => "Interface Monitor failure recovered"
				"hostname" => "%{hhost}"
					"[event][id]" => "JUNOSROUTER_GENERIC:02"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC:02"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE JUNOSROUTER_GENERIC
		# line in RSA: <event_type> <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type} %{fld1}" }
				id => "message-JUNOSROUTER_GENERIC"
				add_field => {
				"hostname" => "%{hhost}"
					"[event][id]" => "JUNOSROUTER_GENERIC"
					"[rsa][message][id1]" => "JUNOSROUTER_GENERIC"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_junosroutermsg.json"
#			template_name => "junosrouter_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

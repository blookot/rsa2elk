# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "silvertailforensics"
			"[observer][name]" => "RSA Web Threat Detection"
			"[observer][type]" => "Analysis"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld1> <hfld2> <hfld3> <hhostname> <hprocess>: CEF:0|Silver Tail Systems|Forensics|<hfld4>|<messageid>|<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<hprocess>[^:]*):[\s]+CEF:0\|Silver[\s]+Tail[\s]+Systems\|Forensics\|(?<hfld4>[^\|]*)\|(?<messageid>[^\|]*)\|(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> <hfld2> <hfld3> <hhostname> <hprocess>: RSA|Web Threat Detection|<hseverity>|<messageid>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2} %{hfld3} %{hhostname} %{hprocess}: RSA|Web Threat Detection|%{hseverity}|%{messageid}|%{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-silvertailforensicsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld1> <fld2> <fld3> <hostname> <process>: CEF:0|Silver Tail Systems|<product>|<version>|<sigid>|Rule <rulename> <action>|<severity>|src=<saddr> suser=<username> request=<web_ref_page>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{hostname} %{process}: CEF:0|Silver Tail Systems|%{product}|%{version}|%{sigid}|Rule %{rulename} %{action}|%{severity}|src=%{saddr} suser=%{username} request=%{web_ref_page}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: RuleAction=<action> RuleName=<rulename> RuleDate=<fld4> user=<username> request=<web_ref_page> ip=<saddr> ip_page=<fld5> agent=<user_agent> user_ip=<fld6> user_page=<fld7> refer=<web_referer> page=<webpage> email=<user_address>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "RuleAction=%{action} RuleName=%{rulename} RuleDate=%{fld4} user=%{username} request=%{web_ref_page} ip=%{saddr} ip_page=%{fld5} agent=%{user_agent} user_ip=%{fld6} user_page=%{fld7} refer=%{web_referer} page=%{webpage} email=%{user_address}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", " MMM d H:m:s yyyy" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-silvertailforensicsmsg.json"
#			template_name => "silvertailforensics_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

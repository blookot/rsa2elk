# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ciscowcs"
			"[observer][name]" => "Cisco WCS"
			"[observer][type]" => "Configuration Management"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %CISCOWCS <messageid> <hfld1>|<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CISCOWCS[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<hfld1>[^\|]*)\|(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %CISCOWCS |<hfld1>|<messageid> <hfld2> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CISCOWCS[\s]+\|(?<message>(?<hfld1>[^\|]*)\|(?<messageid>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %CISCOWCS |<hfld1>|'<messageid> <hfld2> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%CISCOWCS[\s]+\|(?<message>(?<hfld1>[^\|]*)\|'(?<messageid>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-ciscowcsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <hostip>|'Network User' '<username>' failed authentication on Controller '<daddr>'.
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{hostip}|'Network User' '%{username}' failed authentication on Controller '%{daddr}'." }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"id" => "Network User"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Rogue" {
		# MESSAGE Rogue
		# line in RSA: <id>|<hostip>|Rogue AP '<smacaddr>' is no longer detected; it was detected as Rogue AP by AP '<access_point>' Radio Type '<protocol>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Rogue AP '%{smacaddr}' is no longer detected; it was detected as Rogue AP by AP '%{access_point}' Radio Type '%{protocol}'." }
				id => "message-Rogue"
				add_field => {
					"[event][id]" => "Rogue"
					"[rsa][message][id1]" => "Rogue"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:12
		# line in RSA: <hostip>|Rogue AP '<smacaddr>' is no longer detected; it was detected as Rogue AP by AP '<access_point>' Radio Type '<protocol>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Rogue AP '%{smacaddr}' is no longer detected; it was detected as Rogue AP by AP '%{access_point}' Radio Type '%{protocol}'." }
				id => "message-Rogue:12"
				add_field => {
				"id" => "Rogue AP"
					"[event][id]" => "Rogue:12"
					"[rsa][message][id1]" => "Rogue:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:04
		# line in RSA: <id>|<hostip>|Rogue AP '<smacaddr>' is no longer detected on the network.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Rogue AP '%{smacaddr}' is no longer detected on the network." }
				id => "message-Rogue:04"
				add_field => {
					"[event][id]" => "Rogue:04"
					"[rsa][message][id1]" => "Rogue:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:01
		# line in RSA: <id>|<hostip>|Rogue AP '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>' and SNR '<dclass_ratio1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Rogue AP '%{smacaddr}' with SSID '%{ssid}' and channel number '%{wifi_channel}' is detected by AP '%{access_point}' Radio type '%{protocol}' with RSSI '%{data}' and SNR '%{dclass_ratio1}'." }
				id => "message-Rogue:01"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Rogue:01"
					"[rsa][message][id1]" => "Rogue:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:02
		# line in RSA: <id>|<hostip>|Adhoc Rogue '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>' and SNR '<dclass_ratio1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Adhoc Rogue '%{smacaddr}' with SSID '%{ssid}' and channel number '%{wifi_channel}' is detected by AP '%{access_point}' Radio type '%{protocol}' with RSSI '%{data}' and SNR '%{dclass_ratio1}'." }
				id => "message-Rogue:02"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Rogue:02"
					"[rsa][message][id1]" => "Rogue:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:03
		# line in RSA: <id>|<hostip>|Adhoc Rogue  '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>' and SNR '<dclass_ratio1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Adhoc Rogue  '%{smacaddr}' with SSID '%{ssid}' and channel number '%{wifi_channel}' is detected by AP '%{access_point}' Radio type '%{protocol}' with RSSI '%{data}' and SNR '%{dclass_ratio1}'." }
				id => "message-Rogue:03"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Rogue:03"
					"[rsa][message][id1]" => "Rogue:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:05
		# line in RSA: <id>|<hostip>|{ Adhoc Rogue | Rogue AP } '<smacaddr>' with SSID '<ssid>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|([\s]*Adhoc[\s]+Rogue[\s]+|[\s]*Rogue[\s]+AP[\s]+)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+detected[\s]+by[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+with[\s]+RSSI[\s]+'(?<data>[^']*)'\.$" }
				id => "message-Rogue:05"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Rogue:05"
					"[rsa][message][id1]" => "Rogue:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:06
		# line in RSA: <hostip>|Rogue AP '<smacaddr>' with SSID '<ssid>' { and channel number '<wifi_channel>' is detected by AP | is detected by AP } '<access_point>' Radio type '<protocol>' { with RSSI '<data>' and SNR '<dclass_ratio1>' | with RSSI '<data>' }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostip>[^\|]*)\|Rogue[\s]+AP[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+([\s]*and[\s]+channel[\s]+number[\s]+'(?<wifi_channel>[^']*)'[\s]+is[\s]+detected[\s]+by[\s]+AP[\s]+|[\s]*is[\s]+detected[\s]+by[\s]+AP[\s]+)[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+([\s]*with[\s]+RSSI[\s]+'(?<data>[^']*)'[\s]+and[\s]+SNR[\s]+'(?<dclass_ratio1>[^']*)'[\s]+|[\s]*with[\s]+RSSI[\s]+'(?<data>[^']*)'[\s]+)\.$" }
				id => "message-Rogue:06"
				add_field => {
				"data_type" => "RSSI"
				"id" => "Rogue AP"
					"[event][id]" => "Rogue:06"
					"[rsa][message][id1]" => "Rogue:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:07
		# line in RSA: <hostip>|Adhoc Rogue <space> '<smacaddr>' is no longer detected on the network.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Adhoc Rogue %{space} '%{smacaddr}' is no longer detected on the network." }
				id => "message-Rogue:07"
				add_field => {
					"[event][id]" => "Rogue:07"
					"[rsa][message][id1]" => "Rogue:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:09
		# line in RSA: <hostip>|Rogue AP <space> '<smacaddr>' is no longer detected on the network.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Rogue AP %{space} '%{smacaddr}' is no longer detected on the network." }
				id => "message-Rogue:09"
				add_field => {
				"id" => "Rogue AP"
					"[event][id]" => "Rogue:09"
					"[rsa][message][id1]" => "Rogue:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:08
		# line in RSA: <id>|<hostip>|{ Rogue AP | Adhoc Rogue } '<smacaddr>' with SSID '<ssid>' is reported by controller '<fld2>' with RSSI '<data>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|([\s]*Rogue[\s]+AP[\s]+|[\s]*Adhoc[\s]+Rogue[\s]+)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+reported[\s]+by[\s]+controller[\s]+'(?<fld2>[^']*)'[\s]+with[\s]+RSSI[\s]+'(?<data>[^']*)'\.$" }
				id => "message-Rogue:08"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Rogue:08"
					"[rsa][message][id1]" => "Rogue:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:10
		# line in RSA: <hostip>|{ Rogue AP | Adhoc Rogue } '<smacaddr>' with SSID '<ssid>' is reported by controller '<fld2>' with RSSI '<data>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostip>[^\|]*)\|([\s]*Rogue[\s]+AP[\s]+|[\s]*Adhoc[\s]+Rogue[\s]+)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+reported[\s]+by[\s]+controller[\s]+'(?<fld2>[^']*)'[\s]+with[\s]+RSSI[\s]+'(?<data>[^']*)'\.$" }
				id => "message-Rogue:10"
				add_field => {
				"data_type" => "RSSI"
				"id" => "Rogue AP"
					"[event][id]" => "Rogue:10"
					"[rsa][message][id1]" => "Rogue:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:11
		# line in RSA: <hostip>|Rogue AP classified as <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Rogue AP classified as %{info}." }
				id => "message-Rogue:11"
				add_field => {
				"id" => "Rogue AP"
					"[event][id]" => "Rogue:11"
					"[rsa][message][id1]" => "Rogue:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:13
		# line in RSA: <hostip>|Rogue AP '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI <data> and SNR '<dclass_ratio1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Rogue AP '%{smacaddr}' with SSID '%{ssid}' and channel number '%{wifi_channel}' is detected by AP '%{access_point}' Radio type '%{protocol}' with RSSI %{data} and SNR '%{dclass_ratio1}'." }
				id => "message-Rogue:13"
				add_field => {
				"data_type" => "RSSI"
				"id" => "Rogue AP"
					"[event][id]" => "Rogue:13"
					"[rsa][message][id1]" => "Rogue:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:14
		# line in RSA: <hostip>|{ Rogue AP | Adhoc Rogue } '<smacaddr>' with SSID '<ssid>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostip>[^\|]*)\|([\s]*Rogue[\s]+AP[\s]+|[\s]*Adhoc[\s]+Rogue[\s]+)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+detected[\s]+by[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+with[\s]+RSSI[\s]+'(?<data>[^']*)'\.$" }
				id => "message-Rogue:14"
				add_field => {
				"data_type" => "RSSI"
				"id" => "Rogue AP"
					"[event][id]" => "Rogue:14"
					"[rsa][message][id1]" => "Rogue:14"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Rogue:15
		# line in RSA: Rogue<event_description>|<fld1>|Rogue AP '<smacaddr>' on Controller '<saddr>' was advertising our SSID and <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Rogue%{event_description}|%{fld1}|Rogue AP '%{smacaddr}' on Controller '%{saddr}' was advertising our SSID and %{fld2}" }
				id => "message-Rogue:15"
				add_field => {
					"[event][id]" => "Rogue:15"
					"[rsa][message][id1]" => "Rogue:15"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Adhoc" {
		# MESSAGE Adhoc
		# line in RSA: <id>|<hostip>|Rogue AP '<smacaddr>' is no longer detected; it was detected as Rogue AP by AP '<access_point>' Radio Type '<protocol>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Rogue AP '%{smacaddr}' is no longer detected; it was detected as Rogue AP by AP '%{access_point}' Radio Type '%{protocol}'." }
				id => "message-Adhoc"
				add_field => {
					"[event][id]" => "Adhoc"
					"[rsa][message][id1]" => "Adhoc"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Adhoc:01
		# line in RSA: <id>|<hostip>|{ Adhoc Rogue | Rogue AP } <space> '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>' and SNR '<dclass_ratio1>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|([\s]*Adhoc[\s]+Rogue[\s]+|[\s]*Rogue[\s]+AP[\s]+)[\s]+(?<space>[^\s]*)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+and[\s]+channel[\s]+number[\s]+'(?<wifi_channel>[^']*)'[\s]+is[\s]+detected[\s]+by[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+with[\s]+RSSI[\s]+'(?<data>[^']*)'[\s]+and[\s]+SNR[\s]+'(?<dclass_ratio1>[^']*)'\.$" }
				id => "message-Adhoc:01"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Adhoc:01"
					"[rsa][message][id1]" => "Adhoc:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Adhoc:02
		# line in RSA: <id>|<hostip>|{ Adhoc Rogue | Rogue AP } <space> '<smacaddr>' with SSID '<ssid>' is detected by AP '<access_point>' Radio type '<protocol>' { with RSSI '<data>' and SNR '<dclass_ratio1>' | with RSSI '<data>' }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|([\s]*Adhoc[\s]+Rogue[\s]+|[\s]*Rogue[\s]+AP[\s]+)[\s]+(?<space>[^\s]*)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+detected[\s]+by[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+([\s]*with[\s]+RSSI[\s]+'(?<data>[^']*)'[\s]+and[\s]+SNR[\s]+'(?<dclass_ratio1>[^']*)'[\s]+|[\s]*with[\s]+RSSI[\s]+'(?<data>[^']*)'[\s]+)\.$" }
				id => "message-Adhoc:02"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Adhoc:02"
					"[rsa][message][id1]" => "Adhoc:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Adhoc:05
		# line in RSA: <hostip>|{ Adhoc Rogue | Rogue AP } <space> '<smacaddr>' with SSID '<ssid>' is detected by AP '<access_point>' Radio type '<protocol>' { with RSSI '<data>' and SNR '<dclass_ratio1>' | with RSSI '<data>' }.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostip>[^\|]*)\|([\s]*Adhoc[\s]+Rogue[\s]+|[\s]*Rogue[\s]+AP[\s]+)[\s]+(?<space>[^\s]*)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+detected[\s]+by[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+([\s]*with[\s]+RSSI[\s]+'(?<data>[^']*)'[\s]+and[\s]+SNR[\s]+'(?<dclass_ratio1>[^']*)'[\s]+|[\s]*with[\s]+RSSI[\s]+'(?<data>[^']*)'[\s]+)\.$" }
				id => "message-Adhoc:05"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Adhoc:05"
					"[rsa][message][id1]" => "Adhoc:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Adhoc:03
		# line in RSA: <hostip>|Adhoc Rogue <space> '<smacaddr>' is no longer detected on the network.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Adhoc Rogue %{space} '%{smacaddr}' is no longer detected on the network." }
				id => "message-Adhoc:03"
				add_field => {
					"[event][id]" => "Adhoc:03"
					"[rsa][message][id1]" => "Adhoc:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Adhoc:04
		# line in RSA: <hostip>|Rogue AP <space> '<smacaddr>' is no longer detected on the network.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Rogue AP %{space} '%{smacaddr}' is no longer detected on the network." }
				id => "message-Adhoc:04"
				add_field => {
					"[event][id]" => "Adhoc:04"
					"[rsa][message][id1]" => "Adhoc:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: <id>|<hostip>|Northbound notification server '<daddr>' is reachable.
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|Northbound notification server '%{daddr}' is reachable." }
			id => "msgParserId8"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA: <id>|<hostip>|Air Quality Index on Channel '<wifi_channel>' is '<fld1>' (Threshold:'<fld2>').
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|Air Quality Index on Channel '%{wifi_channel}' is '%{fld1}' (Threshold:'%{fld2}')." }
			id => "msgParserId21"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA: <id>|<hostip>|Radius server '<saddr>'(port <sport>) failed to respond to request from client '<fld1>' with MAC '<smacaddr>'.
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|Radius server '%{saddr}'(port %{sport}) failed to respond to request from client '%{fld1}' with MAC '%{smacaddr}'." }
			id => "msgParserId22"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Radius" {
		# MESSAGE Radius
		# line in RSA: <id>|<hostip>|Radius server '<saddr>'(port <sport>) failed to respond to request from client '<fld1>' with MAC '<smacaddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Radius server '%{saddr}'(port %{sport}) failed to respond to request from client '%{fld1}' with MAC '%{smacaddr}'." }
				id => "message-Radius"
				add_field => {
					"[event][id]" => "Radius"
					"[rsa][message][id1]" => "Radius"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radius:01
		# line in RSA: <id>|<hostip>|Radius server '<saddr>'(port <sport>) { is activated on WLAN '<fld11>'. | is activated. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Radius[\s]+server[\s]+'(?<saddr>[^']*)'\(port[\s]+(?<sport>[^\)]*)\)[\s]+([\s]*is[\s]+activated[\s]+on[\s]+WLAN[\s]+'(?<fld11>[^']*)'\.[\s]+|[\s]*is[\s]+activated\.[\s]+)$" }
				id => "message-Radius:01"
				add_field => {
					"[event][id]" => "Radius:01"
					"[rsa][message][id1]" => "Radius:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "MSE" {
		# MESSAGE MSE
		# line in RSA: <id>|<hostip>|'<application>' is down on Mobility Services Engine '<shost>' with IP Address '<saddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|'%{application}' is down on Mobility Services Engine '%{shost}' with IP Address '%{saddr}'." }
				id => "message-MSE"
				add_field => {
					"[event][id]" => "MSE"
					"[rsa][message][id1]" => "MSE"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE MSE:01
		# line in RSA: <id>|<hostip>|'<application>' is up on Mobility Services Engine '<shost>' with IP Address '<saddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|'%{application}' is up on Mobility Services Engine '%{shost}' with IP Address '%{saddr}'." }
				id => "message-MSE:01"
				add_field => {
					"[event][id]" => "MSE:01"
					"[rsa][message][id1]" => "MSE:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE MSE:02
		# line in RSA: <id>|<hostip>|Mobility Services Engine '<shost>' with IP Address '<saddr>' on port '<sport>' is reachable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Mobility Services Engine '%{shost}' with IP Address '%{saddr}' on port '%{sport}' is reachable." }
				id => "message-MSE:02"
				add_field => {
					"[event][id]" => "MSE:02"
					"[rsa][message][id1]" => "MSE:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE MSE:03
		# line in RSA: <id>|<hostip>|Evaluation license for <application> is expired.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Evaluation license for %{application} is expired." }
				id => "message-MSE:03"
				add_field => {
					"[event][id]" => "MSE:03"
					"[rsa][message][id1]" => "MSE:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE MSE:04
		# line in RSA: <id>|<hostip>|Element limit for Context Aware Service is reached or exceeded <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Element limit for Context Aware Service is reached or exceeded %{fld2}." }
				id => "message-MSE:04"
				add_field => {
					"[event][id]" => "MSE:04"
					"[rsa][message][id1]" => "MSE:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Controller" {
		# MESSAGE Controller
		# line in RSA: <id>|<hostip>|Controller '<saddr>' is reachable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Controller '%{saddr}' is reachable." }
				id => "message-Controller"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
					"[event][id]" => "Controller"
					"[rsa][message][id1]" => "Controller"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Controller:01
		# line in RSA: <id>|<hostip>|Controller '<saddr>' is unreachable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Controller '%{saddr}' is unreachable." }
				id => "message-Controller:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_theme" => "Communication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Controller:01"
					"[rsa][message][id1]" => "Controller:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Link" {
		# MESSAGE Link:01
		# line in RSA: <id>|<hostip>|Port '<sport>' is up on {Controller|device} '<saddr>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Port[\s]+'(?<sport>[^']*)'[\s]+is[\s]+up[\s]+on[\s]+(Controller|device)[\s]+'(?<saddr>[^']*)'\.$" }
				id => "message-Link:01"
				add_field => {
					"[event][id]" => "Link:01"
					"[rsa][message][id1]" => "Link:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Link:02
		# line in RSA: <id>|<hostip>|Port '<sport>' is down on {Controller|device} '<saddr>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Port[\s]+'(?<sport>[^']*)'[\s]+is[\s]+down[\s]+on[\s]+(Controller|device)[\s]+'(?<saddr>[^']*)'\.$" }
				id => "message-Link:02"
				add_field => {
					"[event][id]" => "Link:02"
					"[rsa][message][id1]" => "Link:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId33
	# line in RSA: <hostip>|<interface> interface of AP  <access_point> is down: Controller <saddr>
	else if [logstash][msgparser][id] == "msgParserId33" {
		dissect {
			mapping => { "message" => "%{hostip}|%{interface} interface of AP  %{access_point} is down: Controller %{saddr}" }
			id => "msgParserId33"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId34
	# line in RSA: <hostip>|<interface> interface of AP  <access_point> associated to controller '<fld1>' is { down | up }. Reason <result>
	else if [logstash][msgparser][id] == "msgParserId34" {
		grok {
			match => { "message" => "^(?<hostip>[^\|]*)\|(?<interface>[^\s]*)[\s]+interface[\s]+of[\s]+AP[\s]+(?<access_point>[^\s]*)[\s]+associated[\s]+to[\s]+controller[\s]+'(?<fld1>[^']*)'[\s]+is[\s]+([\s]*down[\s]+|[\s]*up[\s]+)\.[\s]+Reason[\s]+(?<result>.*)$" }
			id => "msgParserId34"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Radio" {
		# MESSAGE Radio
		# line in RSA: <id>|<hostip>|{ Interference | Load | Noise} threshold violation reported by '<interface>' interface <space> of AP '<access_point>', connected to Controller { '<saddr>'. | '<saddr>' }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|([\s]*Interference[\s]+|[\s]*Load[\s]+|[\s]*Noise)[\s]+threshold[\s]+violation[\s]+reported[\s]+by[\s]+'(?<interface>[^']*)'[\s]+interface[\s]+(?<space>[^\s]*)[\s]+of[\s]+AP[\s]+'(?<access_point>[^']*)',[\s]+connected[\s]+to[\s]+Controller[\s]+([\s]*'(?<saddr>[^']*)'\.[\s]+|[\s]*'(?<saddr>[^']*)'[\s]+)$" }
				id => "message-Radio"
				add_field => {
					"[event][id]" => "Radio"
					"[rsa][message][id1]" => "Radio"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:01
		# line in RSA: <id>|<hostip>|{ Interference | Load | Transmit Power| Noise} changed to { acceptable level | '<change_new>' } on '<interface>' interface of AP '<access_point>', connected to Controller '<saddr>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|([\s]*Interference[\s]+|[\s]*Load[\s]+|[\s]*Transmit[\s]+Power|[\s]*Noise)[\s]+changed[\s]+to[\s]+([\s]*acceptable[\s]+level[\s]+|[\s]*'(?<change_new>[^']*)'[\s]+)[\s]+on[\s]+'(?<interface>[^']*)'[\s]+interface[\s]+of[\s]+AP[\s]+'(?<access_point>[^']*)',[\s]+connected[\s]+to[\s]+Controller[\s]+'(?<saddr>[^']*)'\.$" }
				id => "message-Radio:01"
				add_field => {
					"[event][id]" => "Radio:01"
					"[rsa][message][id1]" => "Radio:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:02
		# line in RSA: <id>|<hostip>|<interface> interface of AP <access_point> is down: Controller <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|%{interface} interface of AP %{access_point} is down: Controller %{saddr}" }
				id => "message-Radio:02"
				add_field => {
					"[event][id]" => "Radio:02"
					"[rsa][message][id1]" => "Radio:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:03
		# line in RSA: <id>|<hostip>|<interface> interface of AP <access_point> is down. Reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|%{interface} interface of AP %{access_point} is down. Reason: %{result}" }
				id => "message-Radio:03"
				add_field => {
					"[event][id]" => "Radio:03"
					"[rsa][message][id1]" => "Radio:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:04
		# line in RSA: <id>|<hostip>|<interface> interface of AP <access_point> associated to controller <saddr> is up. Reason: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|%{interface} interface of AP %{access_point} associated to controller %{saddr} is up. Reason: %{result}" }
				id => "message-Radio:04"
				add_field => {
					"[event][id]" => "Radio:04"
					"[rsa][message][id1]" => "Radio:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:05
		# line in RSA: <id>|<hostip>|'<interface>' interface of AP '<access_point>' associated to controller '<info>' is up.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|'%{interface}' interface of AP '%{access_point}' associated to controller '%{info}' is up." }
				id => "message-Radio:05"
				add_field => {
					"[event][id]" => "Radio:05"
					"[rsa][message][id1]" => "Radio:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:06
		# line in RSA: <id>|<hostip>|Coverage changed to acceptable level on '<interface>' interface of AP '<access_point>', connected to Controller '<saddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Coverage changed to acceptable level on '%{interface}' interface of AP '%{access_point}', connected to Controller '%{saddr}'." }
				id => "message-Radio:06"
				add_field => {
					"[event][id]" => "Radio:06"
					"[rsa][message][id1]" => "Radio:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:07
		# line in RSA: <id>|<hostip>|Coverage threshold of '<fld11>' violated on '<interface>' interface of AP '<access_point>', connected to Controller '<saddr>'. Total no of clients is '<fld12>' and no of failed clients is '<fld13>'.<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Coverage threshold of '%{fld11}' violated on '%{interface}' interface of AP '%{access_point}', connected to Controller '%{saddr}'. Total no of clients is '%{fld12}' and no of failed clients is '%{fld13}'.%{info}" }
				id => "message-Radio:07"
				add_field => {
					"[event][id]" => "Radio:07"
					"[rsa][message][id1]" => "Radio:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:08
		# line in RSA: <id>|<hostip>|Channel changed due to '<fld11>', from '<fld12>' to '<fld13>' on interface '<interface>' of AP '<access_point>', connected to Controller '<saddr>'.<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Channel changed due to '%{fld11}', from '%{fld12}' to '%{fld13}' on interface '%{interface}' of AP '%{access_point}', connected to Controller '%{saddr}'.%{info}" }
				id => "message-Radio:08"
				add_field => {
					"[event][id]" => "Radio:08"
					"[rsa][message][id1]" => "Radio:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:09
		# line in RSA: <id>|<hostip>|<interface> interface of AP <access_point> is up: Controller <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|%{interface} interface of AP %{access_point} is up: Controller %{saddr}" }
				id => "message-Radio:09"
				add_field => {
					"[event][id]" => "Radio:09"
					"[rsa][message][id1]" => "Radio:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Radio:10
		# line in RSA: <id>|<hostip>|Coverage threshold violated on '<interface>' interface  of AP '<access_point>', connected to Controller '<saddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Coverage threshold violated on '%{interface}' interface  of AP '%{access_point}', connected to Controller '%{saddr}'." }
				id => "message-Radio:10"
				add_field => {
					"[event][id]" => "Radio:10"
					"[rsa][message][id1]" => "Radio:10"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Interferer" {
		# MESSAGE Interferer
		# line in RSA: <id>|<hostip>|Security-risk Interferer '<fld1>' {  is detected by '<fld11>'. | is detected. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Security\-risk[\s]+Interferer[\s]+'(?<fld1>[^']*)'[\s]+([\s]*is[\s]+detected[\s]+by[\s]+'(?<fld11>[^']*)'\.[\s]+|[\s]*is[\s]+detected\.[\s]+)$" }
				id => "message-Interferer"
				add_field => {
					"[event][id]" => "Interferer"
					"[rsa][message][id1]" => "Interferer"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Interferer:01
		# line in RSA: <id>|<hostip>|Security-risk Interferer '<fld1>' {  is no longer detected by '<fld11>'. | is no longer detected. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Security\-risk[\s]+Interferer[\s]+'(?<fld1>[^']*)'[\s]+([\s]*is[\s]+no[\s]+longer[\s]+detected[\s]+by[\s]+'(?<fld11>[^']*)'\.[\s]+|[\s]*is[\s]+no[\s]+longer[\s]+detected\.[\s]+)$" }
				id => "message-Interferer:01"
				add_field => {
					"[event][id]" => "Interferer:01"
					"[rsa][message][id1]" => "Interferer:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Interferer:02
		# line in RSA: <event_type>|<fld1>|<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}|%{fld1}|%{info}" }
				id => "message-Interferer:02"
				add_field => {
					"[event][id]" => "Interferer:02"
					"[rsa][message][id1]" => "Interferer:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "AP" {
		# MESSAGE AP:01
		# line in RSA: <id>|<hostip>|AP '<access_point>' disassociated from Controller '<saddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|AP '%{access_point}' disassociated from Controller '%{saddr}'." }
				id => "message-AP:01"
				add_field => {
					"[event][id]" => "AP:01"
					"[rsa][message][id1]" => "AP:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:02
		# line in RSA: <id>|<hostip>|AP '<access_point>' associated with Controller '<saddr>' on Port number '<sport>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|AP '%{access_point}' associated with Controller '%{saddr}' on Port number '%{sport}'." }
				id => "message-AP:02"
				add_field => {
					"[event][id]" => "AP:02"
					"[rsa][message][id1]" => "AP:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:03
		# line in RSA: <hostip>|AP '<access_point>' is being contained. This is due to rogue device spoofing or targeting AP '<fld3>' BSSID on '<fld2>' radio.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|AP '%{access_point}' is being contained. This is due to rogue device spoofing or targeting AP '%{fld3}' BSSID on '%{fld2}' radio." }
				id => "message-AP:03"
				add_field => {
					"[event][id]" => "AP:03"
					"[rsa][message][id1]" => "AP:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:04
		# line in RSA: <hostip>|AP '<access_point>' with protocol '<interface>' on Controller '<saddr>' is no longer being contained. Service is restored.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|AP '%{access_point}' with protocol '%{interface}' on Controller '%{saddr}' is no longer being contained. Service is restored." }
				id => "message-AP:04"
				add_field => {
					"[event][id]" => "AP:04"
					"[rsa][message][id1]" => "AP:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:05
		# line in RSA: AP reboot reason|<hostip>|Access Point '<access_point>' associated to controller '<fld13>'. Reason for association '<result>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AP reboot reason|%{hostip}|Access Point '%{access_point}' associated to controller '%{fld13}'. Reason for association '%{result}'." }
				id => "message-AP:05"
				add_field => {
					"[event][id]" => "AP:05"
					"[rsa][message][id1]" => "AP:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:06
		# line in RSA: AP maximum rogue count exceeded|<hostip>|Rogue AP count on AP '<access_point>' associated with Controller '<fld13>' has exceeded the security warning threshold of '<fld11>'. Fake AP or other attack may be in progress.  - Controller Name: <fld14>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AP maximum rogue count exceeded|%{hostip}|Rogue AP count on AP '%{access_point}' associated with Controller '%{fld13}' has exceeded the security warning threshold of '%{fld11}'. Fake AP or other attack may be in progress.  - Controller Name: %{fld14}" }
				id => "message-AP:06"
				add_field => {
					"[event][id]" => "AP:06"
					"[rsa][message][id1]" => "AP:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:07
		# line in RSA: <id>|<hostip>|AP '<access_point>' disassociated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|AP '%{access_point}' disassociated." }
				id => "message-AP:07"
				add_field => {
					"[event][id]" => "AP:07"
					"[rsa][message][id1]" => "AP:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:08
		# line in RSA: <id>|<hostip>|Fake AP or other attack on AP '<access_point>' associated with Controller <saddr>' has cleared now.<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Fake AP or other attack on AP '%{access_point}' associated with Controller %{saddr}' has cleared now.%{info}" }
				id => "message-AP:08"
				add_field => {
					"[event][id]" => "AP:08"
					"[rsa][message][id1]" => "AP:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:09
		# line in RSA: AP maximum rogue count exceeded|<hostip>|Rogue AP count on AP '<access_point>' associated with Controller '<fld13>' has exceeded the security warning threshold of '<fld11>'.<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AP maximum rogue count exceeded|%{hostip}|Rogue AP count on AP '%{access_point}' associated with Controller '%{fld13}' has exceeded the security warning threshold of '%{fld11}'.%{info}" }
				id => "message-AP:09"
				add_field => {
					"[event][id]" => "AP:09"
					"[rsa][message][id1]" => "AP:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:10
		# line in RSA: <id>|<hostip>|AP Impersonation of MAC '<dmacaddr>' using source MAC '<smacaddr>' is detected by authenticated AP '<access_point>' on '<interface>' radio and Slot ID <fld11>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|AP Impersonation of MAC '%{dmacaddr}' using source MAC '%{smacaddr}' is detected by authenticated AP '%{access_point}' on '%{interface}' radio and Slot ID %{fld11}." }
				id => "message-AP:10"
				add_field => {
				"ec_activity" => "Detect"
					"[event][id]" => "AP:10"
					"[rsa][message][id1]" => "AP:10"
					"[event][categoryid]" => "1607000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AP:11
		# line in RSA: AP disassociated from controller|<fld1>|Access Point '<access_point>' associated to controller '<saddr>'. Reason for association '<result>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AP disassociated from controller|%{fld1}|Access Point '%{access_point}' associated to controller '%{saddr}'. Reason for association '%{result}'" }
				id => "message-AP:11"
				add_field => {
				"event_description" => "AP disassociated from controller"
					"[event][id]" => "AP:11"
					"[rsa][message][id1]" => "AP:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Signature" {
		# MESSAGE Signature
		# line in RSA: <id>|<hostip>|IDS '<signame>' Signature attack detected on AP '<access_point>' protocol '<interface>' on Controller '<saddr>'. The Signature description is '<context>', with precedence '<severity>'. The attacker's mac address is '<smacaddr>', channel number is '<wifi_channel>', and the number of detections is '<dclass_counter1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|IDS '%{signame}' Signature attack detected on AP '%{access_point}' protocol '%{interface}' on Controller '%{saddr}'. The Signature description is '%{context}', with precedence '%{severity}'. The attacker's mac address is '%{smacaddr}', channel number is '%{wifi_channel}', and the number of detections is '%{dclass_counter1}'." }
				id => "message-Signature"
				add_field => {
					"[event][id]" => "Signature"
					"[rsa][message][id1]" => "Signature"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Signature:02
		# line in RSA: <id>|<hostip>|IDS '<signame>' Signature attack detected on AP '<access_point>' protocol '<interface>' on Controller '<saddr>'. The Signature description is '<context>', with precedence '<severity>'. The channel number is '<wifi_channel>', the number of detections is '<dclass_counter1>', and one of potentially several attackers' mac addresses is '<smacaddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|IDS '%{signame}' Signature attack detected on AP '%{access_point}' protocol '%{interface}' on Controller '%{saddr}'. The Signature description is '%{context}', with precedence '%{severity}'. The channel number is '%{wifi_channel}', the number of detections is '%{dclass_counter1}', and one of potentially several attackers' mac addresses is '%{smacaddr}'." }
				id => "message-Signature:02"
				add_field => {
					"[event][id]" => "Signature:02"
					"[rsa][message][id1]" => "Signature:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Signature:01
		# line in RSA: <id>|<hostip>|IDS '<signame>' Signature attack cleared on AP '<access_point>' protocol '<interface>' on Controller '<saddr>'. The Signature description is '<context>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|IDS '%{signame}' Signature attack cleared on AP '%{access_point}' protocol '%{interface}' on Controller '%{saddr}'. The Signature description is '%{context}'." }
				id => "message-Signature:01"
				add_field => {
					"[event][id]" => "Signature:01"
					"[rsa][message][id1]" => "Signature:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Client" {
		# MESSAGE Client
		# line in RSA: <id>|<hostip>|Client '<smacaddr> (<saddr>)' failed to associate with interface '<interface>' of AP '<access_point>'. The reason code is '<resultcode>(<result>)'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Client '%{smacaddr} (%{saddr})' failed to associate with interface '%{interface}' of AP '%{access_point}'. The reason code is '%{resultcode}(%{result})'." }
				id => "message-Client"
				add_field => {
					"[event][id]" => "Client"
					"[rsa][message][id1]" => "Client"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Client:01
		# line in RSA: <id>|<hostip>|Client '<smacaddr>' completed security policy with interface '<interface>' of AP '<access_point>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Client '%{smacaddr}' completed security policy with interface '%{interface}' of AP '%{access_point}'." }
				id => "message-Client:01"
				add_field => {
					"[event][id]" => "Client:01"
					"[rsa][message][id1]" => "Client:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Client:03
		# line in RSA: <id>|<hostip>|Client '<smacaddr> (<saddr>)' is associated with interface '<interface>' of AP '<access_point>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Client '%{smacaddr} (%{saddr})' is associated with interface '%{interface}' of AP '%{access_point}'." }
				id => "message-Client:03"
				add_field => {
					"[event][id]" => "Client:03"
					"[rsa][message][id1]" => "Client:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Client:04
		# line in RSA: <id>|<hostip>|Client '<smacaddr> (<c_username> ,<saddr>)' is disassociated from interface '<interface>' of AP '<access_point>' with reason code '<resultcode>(<result>)'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Client '%{smacaddr} (%{c_username} ,%{saddr})' is disassociated from interface '%{interface}' of AP '%{access_point}' with reason code '%{resultcode}(%{result})'." }
				id => "message-Client:04"
				add_field => {
					"[event][id]" => "Client:04"
					"[rsa][message][id1]" => "Client:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Client:02
		# line in RSA: <id>|<hostip>|Client '<smacaddr> (<saddr>)' is { disassociated | deauthenticated } from interface '<interface>' of AP '<access_point>' with reason code '<resultcode>(<result>)'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Client[\s]+'(?<smacaddr>[^\s]*)[\s]+\((?<saddr>[^\)]*)\)'[\s]+is[\s]+([\s]*disassociated[\s]+|[\s]*deauthenticated[\s]+)[\s]+from[\s]+interface[\s]+'(?<interface>[^']*)'[\s]+of[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+with[\s]+reason[\s]+code[\s]+'(?<resultcode>[^\(]*)\((?<result>[^\)]*)\)'\.$" }
				id => "message-Client:02"
				add_field => {
					"[event][id]" => "Client:02"
					"[rsa][message][id1]" => "Client:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Client:05
		# line in RSA: <id>|<hostip>|Client Traps are disabled on controller(s) <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Client Traps are disabled on controller(s) %{saddr}" }
				id => "message-Client:05"
				add_field => {
					"[event][id]" => "Client:05"
					"[rsa][message][id1]" => "Client:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Client:06
		# line in RSA: <id>|<hostip>|Client '<smacaddr> { (<c_username> ,<saddr>)' | (<saddr>)' } which was associated with interface '<interface>' of AP '<access_point>' is excluded. The reason code is '<resultcode>(<result>)'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Client[\s]+'(?<smacaddr>[^\s]*)[\s]+([\s]*\((?<c_username>[^\s]*)[\s]+,(?<saddr>[^\)]*)\)'[\s]+|[\s]*\((?<saddr>[^\)]*)\)'[\s]+)[\s]+which[\s]+was[\s]+associated[\s]+with[\s]+interface[\s]+'(?<interface>[^']*)'[\s]+of[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+is[\s]+excluded\.[\s]+The[\s]+reason[\s]+code[\s]+is[\s]+'(?<resultcode>[^\(]*)\((?<result>[^\)]*)\)'\.$" }
				id => "message-Client:06"
				add_field => {
					"[event][id]" => "Client:06"
					"[rsa][message][id1]" => "Client:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Client:07
		# line in RSA: <id>|<hostip>|Client '<smacaddr> (<saddr>)' has failed authenticating with interface '<interface>' of AP '<access_point>'. The reason code is <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|Client '%{smacaddr} (%{saddr})' has failed authenticating with interface '%{interface}' of AP '%{access_point}'. The reason code is %{resultcode}" }
				id => "message-Client:07"
				add_field => {
				"ec_subject" => "Agent"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Client:07"
					"[rsa][message][id1]" => "Client:07"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId72
	# line in RSA: <id>|<hostip>|Pre-Coverage Hole reported by '<fld1>' was found on Controller '<saddr>' near '<access_point>' with MacAddress '<fld2>'.
	else if [logstash][msgparser][id] == "msgParserId72" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|Pre-Coverage Hole reported by '%{fld1}' was found on Controller '%{saddr}' near '%{access_point}' with MacAddress '%{fld2}'." }
			id => "msgParserId72"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "NMSP" {
		# MESSAGE NMSP
		# line in RSA: <id>|<hostip>|NMSP Connection Status: <event_state>, Controller IP: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|NMSP Connection Status: %{event_state}, Controller IP: %{saddr}" }
				id => "message-NMSP"
				add_field => {
					"[event][id]" => "NMSP"
					"[rsa][message][id1]" => "NMSP"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NMSP:01
		# line in RSA: <hostip>|NMSP Connection Status: <event_state>, Controller IP: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|NMSP Connection Status: %{event_state}, Controller IP: %{saddr}" }
				id => "message-NMSP:01"
				add_field => {
					"[event][id]" => "NMSP:01"
					"[rsa][message][id1]" => "NMSP:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId75
	# line in RSA: <id>|<hostip>|Controller '<saddr>'. Data path on anchor '<fld11>' is { up. | down. }
	else if [logstash][msgparser][id] == "msgParserId75" {
		grok {
			match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|Controller[\s]+'(?<saddr>[^']*)'\.[\s]+Data[\s]+path[\s]+on[\s]+anchor[\s]+'(?<fld11>[^']*)'[\s]+is[\s]+([\s]*up\.[\s]+|[\s]*down\.[\s]+)$" }
			id => "msgParserId75"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Device" {
		# MESSAGE Device
		# line in RSA: <hostip>|Device '<fld11>'. Configuration management event has been recorded in ccmHistoryEventTable.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Device '%{fld11}'. Configuration management event has been recorded in ccmHistoryEventTable." }
				id => "message-Device"
				add_field => {
					"[event][id]" => "Device"
					"[rsa][message][id1]" => "Device"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:01
		# line in RSA: <hostip>|Device '<fld11>'. Authentication failed for request from '<saddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Device '%{fld11}'. Authentication failed for request from '%{saddr}'." }
				id => "message-Device:01"
				add_field => {
					"[event][id]" => "Device:01"
					"[rsa][message][id1]" => "Device:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:02
		# line in RSA: <hostip>|Device '<fld11>'. PSE Threshold usage indication is on, the usage power is above the threshold.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Device '%{fld11}'. PSE Threshold usage indication is on, the usage power is above the threshold." }
				id => "message-Device:02"
				add_field => {
					"[event][id]" => "Device:02"
					"[rsa][message][id1]" => "Device:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Device:03
		# line in RSA: <hostip>|Device '<fld11>'. The value of vlanTrunkPortDynamicStatus object has been changed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}|Device '%{fld11}'. The value of vlanTrunkPortDynamicStatus object has been changed." }
				id => "message-Device:03"
				add_field => {
					"[event][id]" => "Device:03"
					"[rsa][message][id1]" => "Device:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId80
	# line in RSA: <hostip>|Device '<fld11>' is { unreachable. | reachable. }
	else if [logstash][msgparser][id] == "msgParserId80" {
		grok {
			match => { "message" => "^(?<hostip>[^\|]*)\|Device[\s]+'(?<fld11>[^']*)'[\s]+is[\s]+([\s]*unreachable\.[\s]+|[\s]*reachable\.[\s]+)$" }
			id => "msgParserId80"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId81
	# line in RSA: <id>|<hostip>|.             <smacaddr>-g [Channel: <wifi_channel>, SSID:<ssid>] has been attacked by malformed 802.11 frames <context>
	else if [logstash][msgparser][id] == "msgParserId81" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|.             %{smacaddr}-g [Channel: %{wifi_channel}, SSID:%{ssid}] has been attacked by malformed 802.11 frames %{context}" }
			id => "msgParserId81"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "HT-Intolerant" {
		# MESSAGE HT-Intolerant:02
		# line in RSA: <id>|<hostip>|.<space>The system has detected <interface> client <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid>,<vsys>,<access_point> ] is sending an association request frame to <fld1>] with HT Capability information element, <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^T]*)The[\s]+system[\s]+has[\s]+detected[\s]+(?<interface>[^\s]*)[\s]+client[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^,]*),(?<vsys>[^,]*),(?<access_point>[^\s]*)[\s]+\][\s]+is[\s]+sending[\s]+an[\s]+association[\s]+request[\s]+frame[\s]+to[\s]+(?<fld1>[^\]]*)\][\s]+with[\s]+HT[\s]+Capability[\s]+information[\s]+element,[\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-HT-Intolerant:02"
				add_field => {
					"[event][id]" => "HT-Intolerant:02"
					"[rsa][message][id1]" => "HT-Intolerant:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE HT-Intolerant:01
		# line in RSA: <id>|<hostip>|.<space>The system has detected <interface> client <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid>,<access_point> ] is sending an association request frame to <fld1>] with HT Capability information element, <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^T]*)The[\s]+system[\s]+has[\s]+detected[\s]+(?<interface>[^\s]*)[\s]+client[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^,]*),(?<access_point>[^\s]*)[\s]+\][\s]+is[\s]+sending[\s]+an[\s]+association[\s]+request[\s]+frame[\s]+to[\s]+(?<fld1>[^\]]*)\][\s]+with[\s]+HT[\s]+Capability[\s]+information[\s]+element,[\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-HT-Intolerant:01"
				add_field => {
					"[event][id]" => "HT-Intolerant:01"
					"[rsa][message][id1]" => "HT-Intolerant:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE HT-Intolerant
		# line in RSA: <id>|<hostip>|.<space>The system has detected <interface> client <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid> ] is sending an association request frame to <fld1>] with HT Capability information element, <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^T]*)The[\s]+system[\s]+has[\s]+detected[\s]+(?<interface>[^\s]*)[\s]+client[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^\s]*)[\s]+\][\s]+is[\s]+sending[\s]+an[\s]+association[\s]+request[\s]+frame[\s]+to[\s]+(?<fld1>[^\]]*)\][\s]+with[\s]+HT[\s]+Capability[\s]+information[\s]+element,[\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-HT-Intolerant"
				add_field => {
					"[event][id]" => "HT-Intolerant"
					"[rsa][message][id1]" => "HT-Intolerant"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId85
	# line in RSA: <id>|<hostip>|....The system has detected wireless device <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid> ] is broadcasting wireless frames with <fld1> type and <fld2> subtype that does not support broadcast. <context>.
	else if [logstash][msgparser][id] == "msgParserId85" {
		grok {
			match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.\.\.\.The[\s]+system[\s]+has[\s]+detected[\s]+wireless[\s]+device[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^\s]*)[\s]+\][\s]+is[\s]+broadcasting[\s]+wireless[\s]+frames[\s]+with[\s]+(?<fld1>[^\s]*)[\s]+type[\s]+and[\s]+(?<fld2>[^\s]*)[\s]+subtype[\s]+that[\s]+does[\s]+not[\s]+support[\s]+broadcast\.[\s]+(?<context>[^\.]*)\.$" }
			id => "msgParserId85"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "NetStumbler" {
		# MESSAGE NetStumbler:01
		# line in RSA: <id>|<hostip>|.<space>It has been determined that <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid>,<access_point> ] is potentially running Netstumbler. <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^I]*)It[\s]+has[\s]+been[\s]+determined[\s]+that[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^,]*),(?<access_point>[^\s]*)[\s]+\][\s]+is[\s]+potentially[\s]+running[\s]+Netstumbler\.[\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-NetStumbler:01"
				add_field => {
					"[event][id]" => "NetStumbler:01"
					"[rsa][message][id1]" => "NetStumbler:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE NetStumbler
		# line in RSA: <id>|<hostip>|.<space>It has been determined that <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid> ] is potentially running Netstumbler. <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^I]*)It[\s]+has[\s]+been[\s]+determined[\s]+that[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^\s]*)[\s]+\][\s]+is[\s]+potentially[\s]+running[\s]+Netstumbler\.[\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-NetStumbler"
				add_field => {
					"[event][id]" => "NetStumbler"
					"[rsa][message][id1]" => "NetStumbler"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId88
	# line in RSA: <id>|<hostip>|.<space>Approved (In ACL) client station <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid> ] is detected to be connected to rogue access point <fld1>] operating in channel #<fld2>#. <context>..
	else if [logstash][msgparser][id] == "msgParserId88" {
		grok {
			match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^A]*)Approved[\s]+\(In[\s]+ACL\)[\s]+client[\s]+station[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^\s]*)[\s]+\][\s]+is[\s]+detected[\s]+to[\s]+be[\s]+connected[\s]+to[\s]+rogue[\s]+access[\s]+point[\s]+(?<fld1>[^\]]*)\][\s]+operating[\s]+in[\s]+channel[\s]+#(?<fld2>[^#]*)#\.[\s]+(?<context>[^\.]*)\.\.$" }
			id => "msgParserId88"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId89
	# line in RSA: <id>|<hostip>|.<space>A device spoofing the MAC address of <shost> [Channel: <wifi_channel>, SSID:<ssid> ] was detected. Please power off <fld1> [<fld2>] to see if 802.11 frames transmitted from the same MAC address still exist. <context>..
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|.%{space}A device spoofing the MAC address of %{shost} [Channel: %{wifi_channel}, SSID:%{ssid} ] was detected. Please power off %{fld1} [%{fld2}] to see if 802.11 frames transmitted from the same MAC address still exist. %{context}.." }
			id => "msgParserId89"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "DoS:" {
		# MESSAGE DoS
		# line in RSA: <id>|<hostip>|.<space>There may have been a Denial-of-Service attack underway to the Station <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid> ].  The system detected a number of Probe Response frames sent to <fld1>[<fld2>]'s MAC address. <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^T]*)There[\s]+may[\s]+have[\s]+been[\s]+a[\s]+Denial\-of\-Service[\s]+attack[\s]+underway[\s]+to[\s]+the[\s]+Station[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^\s]*)[\s]+\]\.[\s]+The[\s]+system[\s]+detected[\s]+a[\s]+number[\s]+of[\s]+Probe[\s]+Response[\s]+frames[\s]+sent[\s]+to[\s]+(?<fld1>[^\[]*)\[(?<fld2>[^\]]*)\]'s[\s]+MAC[\s]+address\.[\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-DoS"
				add_field => {
					"[event][id]" => "DoS"
					"[rsa][message][id1]" => "DoS"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE DoS:01
		# line in RSA: <id>|<hostip>|.<space>There may have been a Denial-of-Service attack underway from the Station <smacaddr>-{a|g} [Channel: <wifi_channel>, SSID:<ssid> ].  The system detected a number of Probe Request frames sent from the <fld1>[<fld2>]'s MAC address. <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^T]*)There[\s]+may[\s]+have[\s]+been[\s]+a[\s]+Denial\-of\-Service[\s]+attack[\s]+underway[\s]+from[\s]+the[\s]+Station[\s]+(?<smacaddr>[^\-]*)\-(a|g)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^\s]*)[\s]+\]\.[\s]+The[\s]+system[\s]+detected[\s]+a[\s]+number[\s]+of[\s]+Probe[\s]+Request[\s]+frames[\s]+sent[\s]+from[\s]+the[\s]+(?<fld1>[^\[]*)\[(?<fld2>[^\]]*)\]'s[\s]+MAC[\s]+address\.[\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-DoS:01"
				add_field => {
					"[event][id]" => "DoS:01"
					"[rsa][message][id1]" => "DoS:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE DoS:02
		# line in RSA: <id>|<hostip>|.<space>There may have been a Denial-of-Service attack underway from the AP <shost> [Channel: <wifi_channel>, SSID:<ssid> ].  The system detected a number of out of sequence beacon frames sent from the <fld1>[<fld2>]'s MAC address. <context>..
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|.%{space}There may have been a Denial-of-Service attack underway from the AP %{shost} [Channel: %{wifi_channel}, SSID:%{ssid} ].  The system detected a number of out of sequence beacon frames sent from the %{fld1}[%{fld2}]'s MAC address. %{context}.." }
				id => "message-DoS:02"
				add_field => {
					"[event][id]" => "DoS:02"
					"[rsa][message][id1]" => "DoS:02"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE DoS:03
		# line in RSA: <id>|<hostip>|.<space>The system has detected a DoS Block ACK attack from <shost> [Channel: <wifi_channel>, SSID:<ssid> ] against <smacaddr>-a [<fld3>]. <fld4>-a [<fld5>] <context>..
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{id}|%{hostip}|.%{space}The system has detected a DoS Block ACK attack from %{shost} [Channel: %{wifi_channel}, SSID:%{ssid} ] against %{smacaddr}-a [%{fld3}]. %{fld4}-a [%{fld5}] %{context}.." }
				id => "message-DoS:03"
				add_field => {
					"[event][id]" => "DoS:03"
					"[rsa][message][id1]" => "DoS:03"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE DoS:04
		# line in RSA: <id>|<hostip>|.<space>The system has detected a DoS Block ACK attack from <smacaddr>-{g|a} [Channel: <wifi_channel>, SSID:<ssid> ]. By sending a lot of misconfigured Block ACK action frames, <fld2> [<fld3>] <context>..
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<id>[^\|]*)\|(?<hostip>[^\|]*)\|\.(?<space>[^T]*)The[\s]+system[\s]+has[\s]+detected[\s]+a[\s]+DoS[\s]+Block[\s]+ACK[\s]+attack[\s]+from[\s]+(?<smacaddr>[^\-]*)\-(g|a)[\s]+\[Channel:[\s]+(?<wifi_channel>[^,]*),[\s]+SSID:(?<ssid>[^\s]*)[\s]+\]\.[\s]+By[\s]+sending[\s]+a[\s]+lot[\s]+of[\s]+misconfigured[\s]+Block[\s]+ACK[\s]+action[\s]+frames,[\s]+(?<fld2>[^\s]*)[\s]+\[(?<fld3>[^\]]*)\][\s]+(?<context>[^\.]*)\.\.$" }
				id => "message-DoS:04"
				add_field => {
					"[event][id]" => "DoS:04"
					"[rsa][message][id1]" => "DoS:04"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId95
	# line in RSA: <hostip>|Guest user '<fld11>' <fld12> '<saddr>'.
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "%{hostip}|Guest user '%{fld11}' %{fld12} '%{saddr}'." }
			id => "msgParserId95"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId96
	# line in RSA: <id>|<hostip>|Radar has been detected on channel '<wifi_channel>' by AP '<access_point>' on 5GHz Radio.
	else if [logstash][msgparser][id] == "msgParserId96" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|Radar has been detected on channel '%{wifi_channel}' by AP '%{access_point}' on 5GHz Radio." }
			id => "msgParserId96"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId97
	# line in RSA: <fld13>|<hostip>|<fld12>. Controller '<saddr>'. 
	else if [logstash][msgparser][id] == "msgParserId97" {
		dissect {
			mapping => { "message" => "%{fld13}|%{hostip}|%{fld12}. Controller '%{saddr}'." }
			id => "msgParserId97"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId98
	# line in RSA: <id>|<hostip>|Access point '<access_point>' tried to join controller '<shost>' and failed.  Associate failure reason: '<result>'.
	else if [logstash][msgparser][id] == "msgParserId98" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|Access point '%{access_point}' tried to join controller '%{shost}' and failed.  Associate failure reason: '%{result}'." }
			id => "msgParserId98"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId99
	# line in RSA: <id>|<hostip>|'<access_point>,<fld1>' Audit done at '<event_time_string>'..<info>
	else if [logstash][msgparser][id] == "msgParserId99" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|'%{access_point},%{fld1}' Audit done at '%{event_time_string}'..%{info}" }
			id => "msgParserId99"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId100
	# line in RSA: <id>|<hostip>|VoIP Call failure of '<result>' (Error Code <resultcode>) occurred on Client '<smacaddr>' which was associated with AP '<access_point>' on interface '<interface>'.
	else if [logstash][msgparser][id] == "msgParserId100" {
		dissect {
			mapping => { "message" => "%{id}|%{hostip}|VoIP Call failure of '%{result}' (Error Code %{resultcode}) occurred on Client '%{smacaddr}' which was associated with AP '%{access_point}' on interface '%{interface}'." }
			id => "msgParserId100"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Unclassified" {
		# MESSAGE Unclassified:01
		# line in RSA: <event_description>|<fld1>|Rogue AP '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>' and SNR '<dclass_ratio1>'. - Device Name: <device> - Reporting Address: <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}|%{fld1}|Rogue AP '%{smacaddr}' with SSID '%{ssid}' and channel number '%{wifi_channel}' is detected by AP '%{access_point}' Radio type '%{protocol}' with RSSI '%{data}' and SNR '%{dclass_ratio1}'. - Device Name: %{device} - Reporting Address: %{saddr}" }
				id => "message-Unclassified:01"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Unclassified:01"
					"[rsa][message][id1]" => "Unclassified:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Unclassified:02
		# line in RSA: <event_description>|<fld1>|{Rogue AP|Adhoc Rogue} '<smacaddr>' with SSID '<ssid>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|(Rogue[\s]+AP|Adhoc[\s]+Rogue)[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+detected[\s]+by[\s]+AP[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+with[\s]+RSSI[\s]+'(?<data>[^']*)'$" }
				id => "message-Unclassified:02"
				add_field => {
					"[event][id]" => "Unclassified:02"
					"[rsa][message][id1]" => "Unclassified:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Unclassified:03
		# line in RSA: <event_description>|<fld1>|{Rogue AP|Adhoc Rogue} '<smacaddr>' is no longer detected on the network. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|(Rogue[\s]+AP|Adhoc[\s]+Rogue)[\s]+'(?<smacaddr>[^']*)'[\s]+is[\s]+no[\s]+longer[\s]+detected[\s]+on[\s]+the[\s]+network\.[\s]+$" }
				id => "message-Unclassified:03"
				add_field => {
					"[event][id]" => "Unclassified:03"
					"[rsa][message][id1]" => "Unclassified:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Friendly" {
		# MESSAGE Friendly:01
		# line in RSA: <event_description>|<fld1>|Rogue AP '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>' and SNR '<dclass_ratio1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}|%{fld1}|Rogue AP '%{smacaddr}' with SSID '%{ssid}' and channel number '%{wifi_channel}' is detected by AP '%{access_point}' Radio type '%{protocol}' with RSSI '%{data}' and SNR '%{dclass_ratio1}'." }
				id => "message-Friendly:01"
				add_field => {
				"data_type" => "RSSI"
					"[event][id]" => "Friendly:01"
					"[rsa][message][id1]" => "Friendly:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Friendly:02
		# line in RSA: <event_description>|<fld1>|Rogue AP '<smacaddr>' with SSID '<ssid>' is {reported by controller|detected by AP} '<fld2>' with RSSI {'<data>'. Rogue AP classified as Known AP.|'<data>'.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|Rogue[\s]+AP[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+(reported[\s]+by[\s]+controller|detected[\s]+by[\s]+AP)[\s]+'(?<fld2>[^']*)'[\s]+with[\s]+RSSI[\s]+('(?<data>[^']*)'\.[\s]+Rogue[\s]+AP[\s]+classified[\s]+as[\s]+Known[\s]+AP\.|'(?<data>[^']*)'\.)$" }
				id => "message-Friendly:02"
				add_field => {
					"[event][id]" => "Friendly:02"
					"[rsa][message][id1]" => "Friendly:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Friendly:03
		# line in RSA: <event_description>|<fld1>|Rogue AP classified as <fld2> AP.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}|%{fld1}|Rogue AP classified as %{fld2} AP." }
				id => "message-Friendly:03"
				add_field => {
					"[event][id]" => "Friendly:03"
					"[rsa][message][id1]" => "Friendly:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Friendly:04
		# line in RSA: <event_description>|<fld1>|<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}|%{fld1}|%{fld2}" }
				id => "message-Friendly:04"
				add_field => {
					"[event][id]" => "Friendly:04"
					"[rsa][message][id1]" => "Friendly:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE User:01
		# line in RSA: User authentication failure|<fld1>|'Network User' '<username>' failed authentication on Controller '<daddr>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User authentication failure|%{fld1}|'Network User' '%{username}' failed authentication on Controller '%{daddr}'." }
				id => "message-User:01"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"id" => "Network User"
					"[event][id]" => "User:01"
					"[rsa][message][id1]" => "User:01"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE User:02
		# line in RSA: User authentication failure|<fld1>|<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User authentication failure|%{fld1}|%{fld2}" }
				id => "message-User:02"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"id" => "Network User"
					"[event][id]" => "User:02"
					"[rsa][message][id1]" => "User:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Wired" {
		# MESSAGE Wired
		# line in RSA: <event_description>|<fld1>|<fld2>:Authentication failed for client (<saddr>) on{Interface<interface>AuditSessionID<sessionid>|Interface<interface>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|(?<fld2>[^:]*):Authentication[\s]+failed[\s]+for[\s]+client[\s]+\((?<saddr>[^\)]*)\)[\s]+on(Interface(?<interface>[^A]*)AuditSessionID(?<sessionid>.*)|Interface(?<interface>.*))$" }
				id => "message-Wired"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Wired"
					"[rsa][message][id1]" => "Wired"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Wired:01
		# line in RSA: <event_description>|<fld1>|<fld2>:Authentication successful for client (<saddr>) on{Interface<interface>AuditSessionID<sessionid>|Interface<interface>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|(?<fld2>[^:]*):Authentication[\s]+successful[\s]+for[\s]+client[\s]+\((?<saddr>[^\)]*)\)[\s]+on(Interface(?<interface>[^A]*)AuditSessionID(?<sessionid>.*)|Interface(?<interface>.*))$" }
				id => "message-Wired:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Wired:01"
					"[rsa][message][id1]" => "Wired:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Wired:02
		# line in RSA: <event_description>|<fld1>|Authorization { failed or unapplied | failed } for client (<saddr>) on {Interface<interface>AuditSessionID<sessionid>|Interface<interface>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|Authorization[\s]+([\s]*failed[\s]+or[\s]+unapplied[\s]+|[\s]*failed[\s]+)[\s]+for[\s]+client[\s]+\((?<saddr>[^\)]*)\)[\s]+on[\s]+(Interface(?<interface>[^A]*)AuditSessionID(?<sessionid>.*)|Interface(?<interface>.*))$" }
				id => "message-Wired:02"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "Wired:02"
					"[rsa][message][id1]" => "Wired:02"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Wired:03
		# line in RSA: <event_description>|<fld1>|Authorization succeeded for client (<saddr>) on {Interface<interface>AuditSessionID<sessionid>|Interface<interface>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|Authorization[\s]+succeeded[\s]+for[\s]+client[\s]+\((?<saddr>[^\)]*)\)[\s]+on[\s]+(Interface(?<interface>[^A]*)AuditSessionID(?<sessionid>.*)|Interface(?<interface>.*))$" }
				id => "message-Wired:03"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Wired:03"
					"[rsa][message][id1]" => "Wired:03"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Wired:04
		# line in RSA: <event_description>|<fld1>|Critical VLAN <vlan> is assigned to Client '<smacaddr>' on Interface  {>> <interface> <<<<|<interface>}.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|Critical[\s]+VLAN[\s]+(?<vlan>[^\s]*)[\s]+is[\s]+assigned[\s]+to[\s]+Client[\s]+'(?<smacaddr>[^']*)'[\s]+on[\s]+Interface[\s]+(>>[\s]+(?<interface>[^\s]*)[\s]+<<|(?<interface>[^\.]*))\.$" }
				id => "message-Wired:04"
				add_field => {
					"[event][id]" => "Wired:04"
					"[rsa][message][id1]" => "Wired:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Malicious" {
		# MESSAGE Malicious
		# line in RSA: <event_description>|<fld1>|Rogue AP '<smacaddr>' with SSID '<ssid>' and channel number '<wifi_channel>' is detected by AP '<access_point>' Radio type '<protocol>' with RSSI '<data>' and SNR '<dclass_ratio1>'.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}|%{fld1}|Rogue AP '%{smacaddr}' with SSID '%{ssid}' and channel number '%{wifi_channel}' is detected by AP '%{access_point}' Radio type '%{protocol}' with RSSI '%{data}' and SNR '%{dclass_ratio1}'." }
				id => "message-Malicious"
				add_field => {
					"[event][id]" => "Malicious"
					"[rsa][message][id1]" => "Malicious"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Malicious:01
		# line in RSA: <event_description>|<fld1>|Rogue AP '<smacaddr>' with SSID '<ssid>' is {reported by controller|detected by AP} '<access_point>' Radio type '<protocol>' with RSSI '<data>'.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<event_description>[^\|]*)\|(?<fld1>[^\|]*)\|Rogue[\s]+AP[\s]+'(?<smacaddr>[^']*)'[\s]+with[\s]+SSID[\s]+'(?<ssid>[^']*)'[\s]+is[\s]+(reported[\s]+by[\s]+controller|detected[\s]+by[\s]+AP)[\s]+'(?<access_point>[^']*)'[\s]+Radio[\s]+type[\s]+'(?<protocol>[^']*)'[\s]+with[\s]+RSSI[\s]+'(?<data>[^']*)'\.$" }
				id => "message-Malicious:01"
				add_field => {
					"[event][id]" => "Malicious:01"
					"[rsa][message][id1]" => "Malicious:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Malicious:02
		# line in RSA: <event_description>|<fld1>|Rogue AP '<smacaddr>' is no longer detected on the network. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}|%{fld1}|Rogue AP '%{smacaddr}' is no longer detected on the network." }
				id => "message-Malicious:02"
				add_field => {
					"[event][id]" => "Malicious:02"
					"[rsa][message][id1]" => "Malicious:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId118
	# line in RSA: POE status|<fld1>|Access point '<access_point>' associated with controller<fld2>. Failure reason: '<result>'.
	else if [logstash][msgparser][id] == "msgParserId118" {
		dissect {
			mapping => { "message" => "POE status|%{fld1}|Access point '%{access_point}' associated with controller%{fld2}. Failure reason: '%{result}'." }
			id => "msgParserId118"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId119
	# line in RSA: <event_description>||Component: <event_source>, Server: <fld1>, Type: <fld2>, Message: <info>
	else if [logstash][msgparser][id] == "msgParserId119" {
		dissect {
			mapping => { "message" => "%{event_description}||Component: %{event_source}, Server: %{fld1}, Type: %{fld2}, Message: %{info}" }
			id => "msgParserId119"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId120
	# line in RSA: <event_description>|<fld1>|Wlan '<wlan>' successfully shutdown on controller '<saddr>'.
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "%{event_description}|%{fld1}|Wlan '%{wlan}' successfully shutdown on controller '%{saddr}'." }
			id => "msgParserId120"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-ciscowcsmsg.json"
#			template_name => "ciscowcs_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

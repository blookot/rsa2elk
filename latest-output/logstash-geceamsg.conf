# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "gecea"
			"[observer][name]" => "GE Centricity Enterprise Archive"
			"[observer][type]" => "Storage"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %GE_CEA: <messageid>^^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%GE_CEA: %{messageid}^^%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-geceamsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld0>^^<username>^^<action>^^<info>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld0}^^%{username}^^%{action}^^%{info}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld0}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "ILM_TRAIL" {
		# MESSAGE ILM_TRAIL:SAVE_RULE
		# line in RSA: <fld0>^^<username>^^SAVE_RULE^^<fld1>^^<result>^^RuleId=<rule>|RuleName=<rulename>|ArchiveName=<fld4>|CriteriaXml=<fld5>|RuleStatusId=<fld6>|Description=<event_description>|
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld0}^^%{username}^^SAVE_RULE^^%{fld1}^^%{result}^^RuleId=%{rule}|RuleName=%{rulename}|ArchiveName=%{fld4}|CriteriaXml=%{fld5}|RuleStatusId=%{fld6}|Description=%{event_description}|" }
				id => "message-ILM_TRAIL:SAVE_RULE"
				add_field => {
				"action" => "SAVE_RULE"
					"[event][id]" => "ILM_TRAIL:SAVE_RULE"
					"[rsa][message][id1]" => "ILM_TRAIL:SAVE_RULE"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ILM_TRAIL:MODIFY_RULE
		# line in RSA: <fld0>^^<username>^^MODIFY_RULE^^<fld1>^^<result>^^RuleId=<rule>|RuleName=<rulename>|ArchiveName=<fld4>|CriteriaXml=<fld5>|RuleStatusId=<fld6>|Description=<event_description>|
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld0}^^%{username}^^MODIFY_RULE^^%{fld1}^^%{result}^^RuleId=%{rule}|RuleName=%{rulename}|ArchiveName=%{fld4}|CriteriaXml=%{fld5}|RuleStatusId=%{fld6}|Description=%{event_description}|" }
				id => "message-ILM_TRAIL:MODIFY_RULE"
				add_field => {
				"action" => "MODIFY_RULE"
					"[event][id]" => "ILM_TRAIL:MODIFY_RULE"
					"[rsa][message][id1]" => "ILM_TRAIL:MODIFY_RULE"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ILM_TRAIL:CONFIG_CHANGED
		# line in RSA: <fld0>^^<username>^^CONFIG_CHANGED^^<fld1>^^<result>^^<<Old Value=<fld2>|New Value=<fld3>>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld0}^^%{username}^^CONFIG_CHANGED^^%{fld1}^^%{result}^^<Old Value=%{fld2}|New Value=%{fld3}>" }
				id => "message-ILM_TRAIL:CONFIG_CHANGED"
				add_field => {
				"action" => "CONFIG_CHANGED"
					"[event][id]" => "ILM_TRAIL:CONFIG_CHANGED"
					"[rsa][message][id1]" => "ILM_TRAIL:CONFIG_CHANGED"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ILM_TRAIL:START_RULE_ENGINE
		# line in RSA: <fld0>^^<username>^^START_RULE_ENGINE^^<fld1>^^<result>^^<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld0}^^%{username}^^START_RULE_ENGINE^^%{fld1}^^%{result}^^%{info}" }
				id => "message-ILM_TRAIL:START_RULE_ENGINE"
				add_field => {
				"action" => "START_RULE_ENGINE"
					"[event][id]" => "ILM_TRAIL:START_RULE_ENGINE"
					"[rsa][message][id1]" => "ILM_TRAIL:START_RULE_ENGINE"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ILM_TRAIL
		# line in RSA: <fld0>^^<username>^^<action>^^<fld1>^^<result>^^<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld0}^^%{username}^^%{action}^^%{fld1}^^%{result}^^%{fld2}" }
				id => "message-ILM_TRAIL"
				add_field => {
					"[event][id]" => "ILM_TRAIL"
					"[rsa][message][id1]" => "ILM_TRAIL"
					"[event][categoryid]" => "1704010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-geceamsg.json"
#			template_name => "gecea_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

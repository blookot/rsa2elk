# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "alcatelomniswitch"
			"[observer][name]" => "Alcatel-Lucent OmniSwitch"
			"[observer][type]" => "Switch"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0003
	# line in RSA: <hmonth> <hdate> <hhour>:<hmin>:<hsec> <hostname> <messageid>(<number>) <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<hhour>[^:]*):(?<hmin>[^:]*):(?<hsec>[^\s]*)[\s]+(?<hostname>[^\s]*)[\s]+(?<message>(?<messageid>[^\(]*)\((?<number>[^\)]*)\)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: <hday> <hmonth> <hdate> <htime> <messageid>(<number>) <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hday>[^\s]*)[\s]+(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<messageid>[^\(]*)\((?<number>[^\)]*)\)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %ALA-LUCENT <messageid>=<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%ALA-LUCENT %{messageid}=%{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_alcatelomniswitchmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: CSM-CHASSIS(<number>) Data: == <service> == <status>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "CSM-CHASSIS(%{number}) Data: == %{service} == %{status}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: CVM-CHASSIS(<number>) Data: == <service> == <status>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "CVM-CHASSIS(%{number}) Data: == %{service} == %{status}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: STACK-MANAGER(<number>) Data: == <service> == Stacking link <event_description>: <status> 
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "STACK-MANAGER(%{number}) Data: == %{service} == Stacking link %{event_description}: %{status}" }
			id => "msgParserId2"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: HSM-CHASSIS(<number>) Data: == <service> == <event_description>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "HSM-CHASSIS(%{number}) Data: == %{service} == %{event_description}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: PRB-CHASSIS(<number>) Data: <event_description>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "PRB-CHASSIS(%{number}) Data: %{event_description}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "DRC" {
		# MESSAGE DRC
		# line in RSA: DRC(<number>) Data: RDP interface <interface> vlan-<vlan> deleted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DRC(%{number}) Data: RDP interface %{interface} vlan-%{vlan} deleted" }
				id => "message-DRC"
				add_field => {
					"[event][id]" => "DRC"
					"[rsa][message][id1]" => "DRC"
					"[event][categoryid]" => "1701030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE DRC_OSPF_Status
		# line in RSA: DRC(<number>) Data: OSPF Nbr=<daddr> RID=<group> state <status>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DRC(%{number}) Data: OSPF Nbr=%{daddr} RID=%{group} state %{status}" }
				id => "message-DRC_OSPF_Status"
				add_field => {
				"service" => "DRC"
					"[event][id]" => "DRC_OSPF_Status"
					"[rsa][message][id1]" => "DRC_OSPF_Status"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "FTP" {
		# MESSAGE FTP_New_Connection
		# line in RSA: FTP(<number>) Data: Session <fld5> New Connection, Client Address <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FTP(%{number}) Data: Session %{fld5} New Connection, Client Address %{saddr}" }
				id => "message-FTP_New_Connection"
				add_field => {
				"service" => "FTP"
				"event_description" => "New FTP Connection"
					"[event][id]" => "FTP_New_Connection"
					"[rsa][message][id1]" => "FTP_New_Connection"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE FTP_Session_Ending
		# line in RSA: FTP(<number>) Data: Session <fld5> Ending
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FTP(%{number}) Data: Session %{fld5} Ending" }
				id => "message-FTP_Session_Ending"
				add_field => {
				"service" => "FTP"
				"event_description" => "FTP Session Termination"
					"[event][id]" => "FTP_Session_Ending"
					"[rsa][message][id1]" => "FTP_Session_Ending"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE FTP_Session_Delete
		# line in RSA: FTP(<number>) Data: Session <fld5>, Session Deleted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FTP(%{number}) Data: Session %{fld5}, Session Deleted" }
				id => "message-FTP_Session_Delete"
				add_field => {
				"service" => "FTP"
				"event_description" => "Session Deleted"
					"[event][id]" => "FTP_Session_Delete"
					"[rsa][message][id1]" => "FTP_Session_Delete"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE FTP_Info_Filename
		# line in RSA: FTP(<number>) Data: Get <filename>!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "FTP(%{number}) Data: Get %{filename}!" }
				id => "message-FTP_Info_Filename"
				add_field => {
				"service" => "FTP"
				"event_description" => "Get Filename in FTP"
					"[event][id]" => "FTP_Info_Filename"
					"[rsa][message][id1]" => "FTP_Info_Filename"
					"[event][categoryid]" => "1401010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "IP" {
		# MESSAGE IP_Duplicate
		# line in RSA: IP(<number>) Data: <fld5> duplicate IP address <saddr> from port <sport> eth addr <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "IP(%{number}) Data: %{fld5} duplicate IP address %{saddr} from port %{sport} eth addr %{smacaddr}" }
				id => "message-IP_Duplicate"
				add_field => {
				"service" => "IP"
				"event_description" => "Duplicate IP Address"
					"[event][id]" => "IP_Duplicate"
					"[rsa][message][id1]" => "IP_Duplicate"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE IP_DOS_Attack_Detected
		# line in RSA: <event_description>^^alaDoSType=<tbdstr1>^^alaDoSDetected=<tbdstr2>^^alaDosSourceIP=<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}^^alaDoSType=%{tbdstr1}^^alaDoSDetected=%{tbdstr2}^^alaDosSourceIP=%{saddr}" }
				id => "message-IP_DOS_Attack_Detected"
				add_field => {
					"[event][id]" => "IP_DOS_Attack_Detected"
					"[rsa][message][id1]" => "IP_DOS_Attack_Detected"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: MIPGW(<number>) Data: === <service> === <group> trap generated
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "MIPGW(%{number}) Data: === %{service} === %{group} trap generated" }
			id => "msgParserId12"
			add_field => {
				"event_description" => "Trap generated"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SSH" {
		# MESSAGE SSH_New_Connection
		# line in RSA: SSH(<number>) Data: Session <fld5> New <group> Connection from <saddr> port <sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH(%{number}) Data: Session %{fld5} New %{group} Connection from %{saddr} port %{sport}" }
				id => "message-SSH_New_Connection"
				add_field => {
				"service" => "SSH"
				"event_description" => "New SSH Connection"
					"[event][id]" => "SSH_New_Connection"
					"[rsa][message][id1]" => "SSH_New_Connection"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SSH_Session_Deleted
		# line in RSA: SSH(<number>) Data: Session <fld5>, Session Deleted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH(%{number}) Data: Session %{fld5}, Session Deleted" }
				id => "message-SSH_Session_Deleted"
				add_field => {
				"service" => "SSH"
				"event_description" => "SSH Session Deleted"
					"[event][id]" => "SSH_Session_Deleted"
					"[rsa][message][id1]" => "SSH_Session_Deleted"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SSH_Exchange_Identification
		# line in RSA: SSH(<number>) Data: [<service> <fld5>] <status>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH(%{number}) Data: [%{service} %{fld5}] %{status}" }
				id => "message-SSH_Exchange_Identification"
				add_field => {
				"event_description" => "SSH session identification failure"
					"[event][id]" => "SSH_Exchange_Identification"
					"[rsa][message][id1]" => "SSH_Exchange_Identification"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SSH_Session_Unavailable
		# line in RSA: SSH(<number>) Data: No more SSH session available in this minute
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH(%{number}) Data: No more SSH session available in this minute" }
				id => "message-SSH_Session_Unavailable"
				add_field => {
				"service" => "SSH"
				"event_description" => "No more SSH session available in this minute"
					"[event][id]" => "SSH_Session_Unavailable"
					"[rsa][message][id1]" => "SSH_Session_Unavailable"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SSH_Session_Unavailable01
		# line in RSA: SSH(<number>) Data: SSH Connection from <saddr> refused : no more SSH session available
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH(%{number}) Data: SSH Connection from %{saddr} refused : no more SSH session available" }
				id => "message-SSH_Session_Unavailable01"
				add_field => {
				"service" => "SSH"
				"event_description" => "No more SSH session available in this minute"
					"[event][id]" => "SSH_Session_Unavailable01"
					"[rsa][message][id1]" => "SSH_Session_Unavailable01"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SSH
		# line in RSA: SSH(<number>) Data: Maximum session:<fld1>,Established:<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH(%{number}) Data: Maximum session:%{fld1},Established:%{fld2}" }
				id => "message-SSH"
				add_field => {
				"service" => "SSH"
					"[event][id]" => "SSH"
					"[rsa][message][id1]" => "SSH"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SSH:01
		# line in RSA: SSH(<number>) Data: SSH : The Value set for IPC socket max segment size is <bytes>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSH(%{number}) Data: SSH : The Value set for IPC socket max segment size is %{bytes}" }
				id => "message-SSH:01"
				add_field => {
				"service" => "SSH"
					"[event][id]" => "SSH:01"
					"[rsa][message][id1]" => "SSH:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: CCM-CHASSIS(<number>) Data: CMM Slot [<fld5>] detected [Power supply is inoperable] on device [<fld2>]
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "CCM-CHASSIS(%{number}) Data: CMM Slot [%{fld5}] detected [Power supply is inoperable] on device [%{fld2}]" }
			id => "msgParserId20"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SYSTEM" {
		# MESSAGE SYSTEM_Device_Enabled_Output
		# line in RSA: SYSTEM(<number>) Data: <interface> '<saddr>' enabled for output
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SYSTEM(%{number}) Data: %{interface} '%{saddr}' enabled for output" }
				id => "message-SYSTEM_Device_Enabled_Output"
				add_field => {
				"service" => "SYSTEM"
				"event_description" => "Remote Device enabled for output"
					"[event][id]" => "SYSTEM_Device_Enabled_Output"
					"[rsa][message][id1]" => "SYSTEM_Device_Enabled_Output"
					"[event][categoryid]" => "1804010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SYSTEM_Boot_Param_Activity
		# line in RSA: SYSTEM(<number>) Data: Boot param <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SYSTEM(%{number}) Data: Boot param %{reason}" }
				id => "message-SYSTEM_Boot_Param_Activity"
				add_field => {
				"service" => "SYSTEM"
				"event_description" => "Boot Param activity"
					"[event][id]" => "SYSTEM_Boot_Param_Activity"
					"[rsa][message][id1]" => "SYSTEM_Boot_Param_Activity"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SYSTEM_Wrong_Ifa
		# line in RSA: SYSTEM(<number>) Data: <group>: wrong ifa (<interface>) was (<reason>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SYSTEM(%{number}) Data: %{group}: wrong ifa (%{interface}) was (%{reason})" }
				id => "message-SYSTEM_Wrong_Ifa"
				add_field => {
				"service" => "SYSTEM"
				"event_description" => "Wrong ifa"
					"[event][id]" => "SYSTEM_Wrong_Ifa"
					"[rsa][message][id1]" => "SYSTEM_Wrong_Ifa"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "WEB" {
		# MESSAGE WEB_Successful_Login
		# line in RSA: WEB(<number>) Data: The <group> session login successful!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WEB(%{number}) Data: The %{group} session login successful!" }
				id => "message-WEB_Successful_Login"
				add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"service" => "WEB"
				"event_description" => "Successful Web Login"
					"[event][id]" => "WEB_Successful_Login"
					"[rsa][message][id1]" => "WEB_Successful_Login"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WEB_Successful_Logout
		# line in RSA: WEB(<number>) Data: The <protocol> session logout successful!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WEB(%{number}) Data: The %{protocol} session logout successful!" }
				id => "message-WEB_Successful_Logout"
				add_field => {
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"service" => "WEB"
				"event_description" => "Successful Web Logout"
					"[event][id]" => "WEB_Successful_Logout"
					"[rsa][message][id1]" => "WEB_Successful_Logout"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WEB_User_Successful_Logout
		# line in RSA: WEB(<number>) Data: The <protocol> session user logout successful!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WEB(%{number}) Data: The %{protocol} session user logout successful!" }
				id => "message-WEB_User_Successful_Logout"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"service" => "WEB"
				"event_description" => "Successful Logout by the User"
					"[event][id]" => "WEB_User_Successful_Logout"
					"[rsa][message][id1]" => "WEB_User_Successful_Logout"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WEB_Login_Failed
		# line in RSA: WEB(<number>) Data: <protocol> login attempt failed!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WEB(%{number}) Data: %{protocol} login attempt failed!" }
				id => "message-WEB_Login_Failed"
				add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"service" => "WEB"
				"event_description" => "Web User Login Failed!"
					"[event][id]" => "WEB_Login_Failed"
					"[rsa][message][id1]" => "WEB_Login_Failed"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WEB
		# line in RSA: WEB(<number>) Data: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WEB(%{number}) Data: %{event_description}" }
				id => "message-WEB"
				add_field => {
					"[event][id]" => "WEB"
					"[rsa][message][id1]" => "WEB"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "TELNET" {
		# MESSAGE TELNET_Session_created
		# line in RSA: TELNET(<number>) Data: Session <fld5>, Created
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TELNET(%{number}) Data: Session %{fld5}, Created" }
				id => "message-TELNET_Session_created"
				add_field => {
				"service" => "TELNET"
				"event_description" => "Telnet Session Created"
					"[event][id]" => "TELNET_Session_created"
					"[rsa][message][id1]" => "TELNET_Session_created"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE TELNET_New_Connection
		# line in RSA: TELNET(<number>) Data: <status>, Address  <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TELNET(%{number}) Data: %{status}, Address  %{saddr}" }
				id => "message-TELNET_New_Connection"
				add_field => {
				"service" => "TELNET"
					"[event][id]" => "TELNET_New_Connection"
					"[rsa][message][id1]" => "TELNET_New_Connection"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE TELNET_Session_Ending
		# line in RSA: TELNET(<number>) Data: Session <fld5>, Session Ending
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TELNET(%{number}) Data: Session %{fld5}, Session Ending" }
				id => "message-TELNET_Session_Ending"
				add_field => {
				"service" => "TELNET"
				"event_description" => "Telnet Session Ending"
					"[event][id]" => "TELNET_Session_Ending"
					"[rsa][message][id1]" => "TELNET_Session_Ending"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "CLI" {
		# MESSAGE CLI_Login_Timeout
		# line in RSA:  CLI(<number>) Data: [CLISHELL <fld5>] fd = <filename>, Login timeout at { login | password }:
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*CLI\((?<number>[^\)]*)\)[\s]+Data:[\s]+\[CLISHELL[\s]+(?<fld5>[^\]]*)\][\s]+fd[\s]+=[\s]+(?<filename>[^,]*),[\s]+Login[\s]+timeout[\s]+at[\s]+([\s]*login[\s]+|[\s]*password[\s]+):$" }
				id => "message-CLI_Login_Timeout"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"service" => "CLI"
				"event_description" => "Login timeout at login"
					"[event][id]" => "CLI_Login_Timeout"
					"[rsa][message][id1]" => "CLI_Login_Timeout"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CLI_Maximum_Logins_Reached
		# line in RSA:  CLI(<number>) Data: [CLISHELL <fld5>] Maximum number of login attempt reached
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CLI(%{number}) Data: [CLISHELL %{fld5}] Maximum number of login attempt reached" }
				id => "message-CLI_Maximum_Logins_Reached"
				add_field => {
				"service" => "CLI"
				"event_description" => "Maximum number of login attempt reached"
					"[event][id]" => "CLI_Maximum_Logins_Reached"
					"[rsa][message][id1]" => "CLI_Maximum_Logins_Reached"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CLI_Connection_Closed
		# line in RSA: CLI(<number>) Data: [CLISHELL <fld5>] Connection closed by remote host!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CLI(%{number}) Data: [CLISHELL %{fld5}] Connection closed by remote host!" }
				id => "message-CLI_Connection_Closed"
				add_field => {
				"service" => "CLI"
				"event_description" => "Remote Host closed connection"
					"[event][id]" => "CLI_Connection_Closed"
					"[rsa][message][id1]" => "CLI_Connection_Closed"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "SESSION" {
		# MESSAGE SESSION_Authentication_failed
		# line in RSA:  SESSION(<number>) Data: [SES] Authentication failed: { Session | Sesion } <fld5>, access type <group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SESSION\((?<number>[^\)]*)\)[\s]+Data:[\s]+\[SES\][\s]+Authentication[\s]+failed:[\s]+([\s]*Session[\s]+|[\s]*Sesion[\s]+)[\s]+(?<fld5>[^,]*),[\s]+access[\s]+type[\s]+(?<group>.*)$" }
				id => "message-SESSION_Authentication_failed"
				add_field => {
				"service" => "SESSION"
				"event_description" => "Authentication Failed"
					"[event][id]" => "SESSION_Authentication_failed"
					"[rsa][message][id1]" => "SESSION_Authentication_failed"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SESSION_Authentication_succeed
		# line in RSA:  SESSION(<number>) Data: [SES] Authentication succeed: { Session | Sesion } <fld5>, access type <group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*SESSION\((?<number>[^\)]*)\)[\s]+Data:[\s]+\[SES\][\s]+Authentication[\s]+succeed:[\s]+([\s]*Session[\s]+|[\s]*Sesion[\s]+)[\s]+(?<fld5>[^,]*),[\s]+access[\s]+type[\s]+(?<group>.*)$" }
				id => "message-SESSION_Authentication_succeed"
				add_field => {
				"service" => "SESSION"
				"event_description" => "Authentication succeed"
					"[event][id]" => "SESSION_Authentication_succeed"
					"[rsa][message][id1]" => "SESSION_Authentication_succeed"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SESSION_Info_Username
		# line in RSA: SESSION(<number>) Data: [SES] { Session | Sesion } <fld5>, user "<username>"
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SESSION\((?<number>[^\)]*)\)[\s]+Data:[\s]+\[SES\][\s]+([\s]*Session[\s]+|[\s]*Sesion[\s]+)[\s]+(?<fld5>[^,]*),[\s]+user[\s]+\"(?<username>[^\"]*)\"$" }
				id => "message-SESSION_Info_Username"
				add_field => {
				"service" => "SESSION"
				"event_description" => "Session User"
					"[event][id]" => "SESSION_Info_Username"
					"[rsa][message][id1]" => "SESSION_Info_Username"
					"[event][categoryid]" => "1803010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SESSION_Info_UserIP
		# line in RSA: SESSION(<number>) Data: [SES] { Session | Sesion } <fld5>, IP address <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SESSION\((?<number>[^\)]*)\)[\s]+Data:[\s]+\[SES\][\s]+([\s]*Session[\s]+|[\s]*Sesion[\s]+)[\s]+(?<fld5>[^,]*),[\s]+IP[\s]+address[\s]+(?<saddr>.*)$" }
				id => "message-SESSION_Info_UserIP"
				add_field => {
				"service" => "SESSION"
				"event_description" => "Session User IP address"
					"[event][id]" => "SESSION_Info_UserIP"
					"[rsa][message][id1]" => "SESSION_Info_UserIP"
					"[event][categoryid]" => "1803030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Session_SNMP_Authentication_Failure
		# line in RSA: <event_description>^^SessionAccessType=<tbdstr1>^^SessionUserName="<username>"^^SessionUserIpAddress=<saddr>^^SessionAuthFailure=<tbdstr2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}^^SessionAccessType=%{tbdstr1}^^SessionUserName=\"%{username}\"^^SessionUserIpAddress=%{saddr}^^SessionAuthFailure=%{tbdstr2}" }
				id => "message-Session_SNMP_Authentication_Failure"
				add_field => {
					"[event][id]" => "Session_SNMP_Authentication_Failure"
					"[rsa][message][id1]" => "Session_SNMP_Authentication_Failure"
					"[event][categoryid]" => "1803000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId38
	# line in RSA:  STP(<number>) Data: Topology changed on VLAN/STP id <vlan>
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "STP(%{number}) Data: Topology changed on VLAN/STP id %{vlan}" }
			id => "msgParserId38"
			add_field => {
				"service" => "CLI"
				"event_description" => "Topology changed on VLAN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: VRRP(77) Data: VRRP toggled once in the last minute. VRID=<vlan>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "VRRP(77) Data: VRRP toggled once in the last minute. VRID=%{vlan}" }
			id => "msgParserId39"
			add_field => {
				"service" => "VRRP"
				"event_description" => "VRRP toggled"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA: <event_description>^^httpConnectionStats=<tbdstr1>^^httpsConnectionStats=<tbdstr2>^^httpServerDoSAttackSrcIp=<saddr>
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "%{event_description}^^httpConnectionStats=%{tbdstr1}^^httpsConnectionStats=%{tbdstr2}^^httpServerDoSAttackSrcIp=%{saddr}" }
			id => "msgParserId41"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId43
	# line in RSA: <event_description>^^trapAbsorStamp=<tbdstr1>^^trapAbsorTrapId=<number>^^trapAbsorCounter=<fld8>^^trapAbsorTime=<tbdstr2>
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "%{event_description}^^trapAbsorStamp=%{tbdstr1}^^trapAbsorTrapId=%{number}^^trapAbsorCounter=%{fld8}^^trapAbsorTime=%{tbdstr2}" }
			id => "msgParserId43"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId45
	# line in RSA: NTP(<number>) Data:  NTP Active server is <hostip>
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "NTP(%{number}) Data:  NTP Active server is %{hostip}" }
			id => "msgParserId45"
			add_field => {
				"service" => "NTP"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "802.1X" {
		# MESSAGE Auth:01
		# line in RSA: 802.1X(<number>) Data: [Count.] <macaddr>  vlan <vlan> on gport <network_port> LINE <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "802.1X(%{number}) Data: [Count.] %{macaddr}  vlan %{vlan} on gport %{network_port} LINE %{fld1}" }
				id => "message-Auth:01"
				add_field => {
				"service" => "802.1X"
					"[event][id]" => "Auth:01"
					"[rsa][message][id1]" => "Auth:01"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Auth:02
		# line in RSA: 802.1X(<number>) Data: *ignoreMacToSL flag set, Since vlan and gport is same for mac <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "802.1X(%{number}) Data: *ignoreMacToSL flag set, Since vlan and gport is same for mac %{macaddr}" }
				id => "message-Auth:02"
				add_field => {
				"service" => "802.1X"
					"[event][id]" => "Auth:02"
					"[rsa][message][id1]" => "Auth:02"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Auth:03
		# line in RSA: 802.1X(<number>) Data: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "802.1X(%{number}) Data: %{event_description}" }
				id => "message-Auth:03"
				add_field => {
				"service" => "802.1X"
					"[event][id]" => "Auth:03"
					"[rsa][message][id1]" => "Auth:03"
					"[event][categoryid]" => "1304000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_alcatelomniswitchmsg.json"
#			template_name => "alcatelomniswitch_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

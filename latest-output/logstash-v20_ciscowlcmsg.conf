# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ciscowlc"
			"[observer][name]" => "Cisco Wireless LAN Controller"
			"[observer][type]" => "Wireless Devices"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 1111
	# line in RSA: %AIRESPACE <messageid>-<hlevel> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%AIRESPACE %{messageid}-%{hlevel} %{message}" }
			id => "header-1111"
			add_field => {
				"[rsa][header][id]" => "1111"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1112
	# line in RSA: %CISCOWLC <messageid>-<hlevel> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%CISCOWLC %{messageid}-%{hlevel} %{message}" }
			id => "header-1112"
			add_field => {
				"[rsa][header][id]" => "1112"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1113
	# line in RSA: [<messageid>] <haction> <hpid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^\[(?<message>(?<messageid>[^\]]*)\][\s]+(?<haction>[^\s]*)[\s]+(?<hpid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-1113"
			add_field => {
				"[rsa][header][id]" => "1113"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <Hfld4>: *<Hfld1>: <month> <day> <time> %<messageid>: <Hfld2>.c:<Hfld3> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{Hfld4}: *%{Hfld1}: %{month} %{day} %{time} %%{messageid}: %{Hfld2}.c:%{Hfld3} %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0066
	# line in RSA: <application>: *<Hfld1>: <month> <day> <time>: %<Hfld5>-<Hfld6>-<messageid>: <Hfld2>.c:<Hfld3> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{Hfld1}: %{month} %{day} %{time}: %%{Hfld5}-%{Hfld6}-%{messageid}: %{Hfld2}.c:%{Hfld3} %{message}" }
			id => "header-0066"
			add_field => {
				"[rsa][header][id]" => "0066"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: <application>: *<month> <day> <time> %<messageid>: <fld1>.c:<fld2> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{month} %{day} %{time} %%{messageid}: %{fld1}.c:%{fld2} %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <application>: *<event_time_string> %<messageid>: /<fld1>:<fld2> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{event_time_string} %%{messageid}: /%{fld1}:%{fld2} %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <application>: <event_time_string> <hfld1>.c:<hfld2> %<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: %{event_time_string} %{hfld1}.c:%{hfld2} %%{messageid}: %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <application>: *<Hfld1>: <event_time_string>: #<messageid>: <Hfld2>.c:<Hfld3> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{Hfld1}: %{event_time_string}: #%{messageid}: %{Hfld2}.c:%{Hfld3} %{message}" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <application>: *<event_time_string> #<messageid>: <fld1>.c:<fld2> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{event_time_string} #%{messageid}: %{fld1}.c:%{fld2} %{message}" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: <application>: *<event_time_string> #<messageid>: /<fld1>:<fld2> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{event_time_string} #%{messageid}: /%{fld1}:%{fld2} %{message}" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0013
	# line in RSA: <application>: <event_time_string> <hfld1>.c: <hfld2> #<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: %{event_time_string} %{hfld1}.c: %{hfld2} #%{messageid}: %{message}" }
			id => "header-0013"
			add_field => {
				"[rsa][header][id]" => "0013"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <application>: <month> <day> <time> <hfld1>.c:<hfld2> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: %{month} %{day} %{time} %{hfld1}.c:%{hfld2} %{messageid}: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <application>: *<Hfld1>: <event_time_string> %<messageid>: <Hfld2>:<Hfld3> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{Hfld1}: %{event_time_string} %%{messageid}: %{Hfld2}:%{Hfld3} %{message}" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0014
	# line in RSA: <application>: *<Hfld1>: <event_time_string> #<messageid>: <Hfld2>:<Hfld3> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{Hfld1}: %{event_time_string} #%{messageid}: %{Hfld2}:%{Hfld3} %{message}" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <month> <day> <time> <fld1>.c:<fld2> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{day} %{time} %{fld1}.c:%{fld2} %{messageid}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 3333
	# line in RSA: <event_time_string> /<fld1>.h:<fld2> <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{event_time_string} /%{fld1}.h:%{fld2} %{messageid}: %{message}" }
			id => "header-3333"
			add_field => {
				"[rsa][header][id]" => "3333"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <application>: *<event_time_string>: -<messageid>:  <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{application}: *%{event_time_string}: -%{messageid}:  %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <hfld1>: <event_time_string> <hfld2>: <messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1}: %{event_time_string} %{hfld2}: %{messageid}: %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: %CISCOWLC <event_type>-<severity> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%CISCOWLC %{event_type}-%{severity} %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "CISCOWLC_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_ciscowlcmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: ACL Name too long : <rulename>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "ACL Name too long : %{rulename}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld1>th AVP is corrupted. <info>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{fld1}th AVP is corrupted. %{info}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: Received bad AVP :<info>.
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "Received bad AVP :%{info}." }
			id => "msgParserId2"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: Could not copy AVPs to block. <info>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "Could not copy AVPs to block. %{info}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: Creating AVL tree with <info> entries
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "Creating AVL tree with %{info} entries" }
			id => "msgParserId4"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: Creating default <info>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "Creating default %{info}" }
			id => "msgParserId5"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: Could not create RADIUS message. <info>.
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "Could not create RADIUS message. %{info}." }
			id => "msgParserId6"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA: Could not create user AVL tree. Reason:<info>.
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "Could not create user AVL tree. Reason:%{info}." }
			id => "msgParserId7"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: Adding blacklist user <username> to AAA database.
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "Adding blacklist user %{username} to AAA database." }
			id => "msgParserId8"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA: Adding user {<username> | '<username>'} to AAA database.
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^Adding[\s]+user[\s]+((?<username>[^]*)[\s]+|[\s]*'(?<username>[^']*)')[\s]+to[\s]+AAA[\s]+database\.$" }
			id => "msgParserId9"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA: <info>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId10"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA: Delete client <smacaddr>because user account (<username>) has been deleted.
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "Delete client %{smacaddr}because user account (%{username}) has been deleted." }
			id => "msgParserId11"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: Delete client <smacaddr>because guest user account (<username>) is expired
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "Delete client %{smacaddr}because guest user account (%{username}) is expired" }
			id => "msgParserId12"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA: Unable to add method <rulename> to EAP profile for user <username>. <info>.
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "Unable to add method %{rulename} to EAP profile for user %{username}. %{info}." }
			id => "msgParserId13"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId14
	# line in RSA: Unable to add EAP profile for user <username>. <info>.
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "Unable to add EAP profile for user %{username}. %{info}." }
			id => "msgParserId14"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA: Unable to add to free list. <info>.
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "Unable to add to free list. %{info}." }
			id => "msgParserId15"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA: Unable to delete to free list. <info>.
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "Unable to delete to free list. %{info}." }
			id => "msgParserId16"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA: Running <info>...
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "Running %{info}..." }
			id => "msgParserId17"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId18
	# line in RSA: Could not get start time for guest user record. <info>.
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "Could not get start time for guest user record. %{info}." }
			id => "msgParserId18"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA: Could not get proxy state. <info>.
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "Could not get proxy state. %{info}." }
			id => "msgParserId19"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: Guest user account (<username>) is created with lifetime (<info>).
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "Guest user account (%{username}) is created with lifetime (%{info})." }
			id => "msgParserId20"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA: Guest user account (<username>) is expired
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "Guest user account (%{username}) is expired" }
			id => "msgParserId21"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA: Unable to set timer for guest accounts. <info>.
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "Unable to set timer for guest accounts. %{info}." }
			id => "msgParserId22"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA: Unable to delete the user <username>. <info>.
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "Unable to delete the user %{username}. %{info}." }
			id => "msgParserId23"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: Unable to verify RADIUS message authenticator for mobile<smacaddr>. <fld5>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "Unable to verify RADIUS message authenticator for mobile%{smacaddr}. %{fld5}" }
			id => "msgParserId24"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId25
	# line in RSA: Invalid RADIUS authentication type <info> in AAA request
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "Invalid RADIUS authentication type %{info} in AAA request" }
			id => "msgParserId25"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId26
	# line in RSA: Could not validate the data structure - <info>.
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "Could not validate the data structure - %{info}." }
			id => "msgParserId26"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA: Invalid message authenticator received in <info> from<saddr>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "Invalid message authenticator received in %{info} from%{saddr}" }
			id => "msgParserId27"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA: RADIUS packet too small.
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "RADIUS packet too small." }
			id => "msgParserId28"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId29
	# line in RSA: Invalid AAA request. <info>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "Invalid AAA request. %{info}" }
			id => "msgParserId29"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId30
	# line in RSA: Received an invalid request type.(<info>).
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "Received an invalid request type.(%{info})." }
			id => "msgParserId30"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId31
	# line in RSA: LDAP DB Task <info>
	else if [logstash][msgparser][id] == "msgParserId31" {
		dissect {
			mapping => { "message" => "LDAP DB Task %{info}" }
			id => "msgParserId31"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId32
	# line in RSA: Could not copy attributes returned by LDAP server. <info>
	else if [logstash][msgparser][id] == "msgParserId32" {
		dissect {
			mapping => { "message" => "Could not copy attributes returned by LDAP server. %{info}" }
			id => "msgParserId32"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId33
	# line in RSA: Could not send a message to LDAP task. <info>.
	else if [logstash][msgparser][id] == "msgParserId33" {
		dissect {
			mapping => { "message" => "Could not send a message to LDAP task. %{info}." }
			id => "msgParserId33"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId34
	# line in RSA: The main LDAP task failed. <info>
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "The main LDAP task failed. %{info}" }
			id => "msgParserId34"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA: Could not perform timer callback. <info>.
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "Could not perform timer callback. %{info}." }
			id => "msgParserId35"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA: Unable to reset the lifetime of <info> account <username> in localdatabase.
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "Unable to reset the lifetime of %{info} account %{username} in localdatabase." }
			id => "msgParserId36"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId37
	# line in RSA: Corrupted value of lifetime for guest user <username>.
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "Corrupted value of lifetime for guest user %{username}." }
			id => "msgParserId37"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId38
	# line in RSA: Error allocating <info> bytes on stack for message. Aborting..
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "Error allocating %{info} bytes on stack for message. Aborting.." }
			id => "msgParserId38"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: Unable to send AAA request, Unknown message type :<info>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "Unable to send AAA request, Unknown message type :%{info}" }
			id => "msgParserId39"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA: Unable to find Mobile Station Entry for <smacaddr> .
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "Unable to find Mobile Station Entry for %{smacaddr} ." }
			id => "msgParserId40"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA: Failed to receive an incoming message. Error = <info>.
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "Failed to receive an incoming message. Error = %{info}." }
			id => "msgParserId41"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA: Could not process accounting type <info>.
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "Could not process accounting type %{info}." }
			id => "msgParserId42"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId43
	# line in RSA: Could not process proxy request. <info>.
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "Could not process proxy request. %{info}." }
			id => "msgParserId43"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId44
	# line in RSA: Could not process a proxy RADIUS response. <info>.
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "Could not process a proxy RADIUS response. %{info}." }
			id => "msgParserId44"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId45
	# line in RSA: Could not process RADIUS response. <fld1>. ResponseLength: <fld2>, Server: <saddr> , ID:<connectionid> , Mobile:<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "Could not process RADIUS response. %{fld1}. ResponseLength: %{fld2}, Server: %{saddr} , ID:%{connectionid} , Mobile:%{smacaddr}" }
			id => "msgParserId45"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId46
	# line in RSA: Could not validate proxied request credentials. <fld1>.STA: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId46" {
		dissect {
			mapping => { "message" => "Could not validate proxied request credentials. %{fld1}.STA: %{macaddr}" }
			id => "msgParserId46"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId47
	# line in RSA: Unable to set state of RADIUS accounting server <info>.
	else if [logstash][msgparser][id] == "msgParserId47" {
		dissect {
			mapping => { "message" => "Unable to set state of RADIUS accounting server %{info}." }
			id => "msgParserId47"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId48
	# line in RSA: Unable to set state of RADIUS authentication server <info>.
	else if [logstash][msgparser][id] == "msgParserId48" {
		dissect {
			mapping => { "message" => "Unable to set state of RADIUS authentication server %{info}." }
			id => "msgParserId48"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA: RADIUS client <saddr> not found in client list.
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "RADIUS client %{saddr} not found in client list." }
			id => "msgParserId49"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId50
	# line in RSA: RADIUS {AUTH Server|ACCT Server|server} {<saddr>:<sport> deactivated|<saddr>:<sport> activated|<saddr> <shost>} in global list
	else if [logstash][msgparser][id] == "msgParserId50" {
		grok {
			match => { "message" => "^RADIUS[\s]+(AUTH[\s]+Server|ACCT[\s]+Server|server)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+deactivated|(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+activated|(?<saddr>[^\s]*)[\s]+(?<shost>[^\s]*))[\s]+in[\s]+global[\s]+list$" }
			id => "msgParserId50"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA: RADIUS server <saddr>:<sport> <event_state> on WLAN <wlan>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "RADIUS server %{saddr}:%{sport} %{event_state} on WLAN %{wlan}" }
			id => "msgParserId51"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA: Unable to send RADIUS message to <shost>(<saddr> (MAC:<macaddr>). Reason : <fld5>.
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "Unable to send RADIUS message to %{shost}(%{saddr} (MAC:%{macaddr}). Reason : %{fld5}." }
			id => "msgParserId52"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId53
	# line in RSA: RADIUS server { <saddr>:<sport> | <saddr> } <event_state> on WLAN <wlan>
	else if [logstash][msgparser][id] == "msgParserId53" {
		grok {
			match => { "message" => "^RADIUS[\s]+server[\s]+([\s]*(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<saddr>[^\s]*)[\s]+)[\s]+(?<event_state>[^\s]*)[\s]+on[\s]+WLAN[\s]+(?<wlan>.*)$" }
			id => "msgParserId53"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId54
	# line in RSA:  RADIUS server <daddr>:<dport> failed to respond to request(ID <fld6>) for STA <smacaddr> / user '<username>'
	else if [logstash][msgparser][id] == "msgParserId54" {
		dissect {
			mapping => { "message" => "RADIUS server %{daddr}:%{dport} failed to respond to request(ID %{fld6}) for STA %{smacaddr} / user '%{username}'" }
			id => "msgParserId54"
			add_field => {
				"action" => "RADIUS server failed to respond to request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId55
	# line in RSA: Truncating RADIUS response from server at AVP code <fld5> for message <rulename>
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "Truncating RADIUS response from server at AVP code %{fld5} for message %{rulename}" }
			id => "msgParserId55"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId56
	# line in RSA:  Could not find appropriate RADIUS server for WLAN <fld6> - <reason>
	else if [logstash][msgparser][id] == "msgParserId56" {
		dissect {
			mapping => { "message" => "Could not find appropriate RADIUS server for WLAN %{fld6} - %{reason}" }
			id => "msgParserId56"
			add_field => {
				"action" => "Could not find appropriate RADIUS server for WLAN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId57
	# line in RSA: Received a <fld1> from unknown server <saddr>
	else if [logstash][msgparser][id] == "msgParserId57" {
		dissect {
			mapping => { "message" => "Received a %{fld1} from unknown server %{saddr}" }
			id => "msgParserId57"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId58
	# line in RSA: RADIUS msg received from wrong switchport, <fld5>, dropping
	else if [logstash][msgparser][id] == "msgParserId58" {
		dissect {
			mapping => { "message" => "RADIUS msg received from wrong switchport, %{fld5}, dropping" }
			id => "msgParserId58"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId59
	# line in RSA: Received an unexpected <info> from <saddr>
	else if [logstash][msgparser][id] == "msgParserId59" {
		dissect {
			mapping => { "message" => "Received an unexpected %{info} from %{saddr}" }
			id => "msgParserId59"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId60
	# line in RSA: Rebuilding the default configuration for <info>
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "Rebuilding the default configuration for %{info}" }
			id => "msgParserId60"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId61
	# line in RSA: Recreating admin login.
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "Recreating admin login." }
			id => "msgParserId61"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId62
	# line in RSA: Recreated the admin user.
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "Recreated the admin user." }
			id => "msgParserId62"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId63
	# line in RSA: Could not retransmit RFC-3576 message to <daddr>:<dport>. <fld5>.
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "Could not retransmit RFC-3576 message to %{daddr}:%{dport}. %{fld5}." }
			id => "msgParserId63"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId64
	# line in RSA: RFC3576 socket error <fld5>
	else if [logstash][msgparser][id] == "msgParserId64" {
		dissect {
			mapping => { "message" => "RFC3576 socket error %{fld5}" }
			id => "msgParserId64"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId65
	# line in RSA: Could not send AAA response. <fld5>.
	else if [logstash][msgparser][id] == "msgParserId65" {
		dissect {
			mapping => { "message" => "Could not send AAA response. %{fld5}." }
			id => "msgParserId65"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId66
	# line in RSA: Could not send RFC-3576 response. <fld5>.
	else if [logstash][msgparser][id] == "msgParserId66" {
		dissect {
			mapping => { "message" => "Could not send RFC-3576 response. %{fld5}." }
			id => "msgParserId66"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId67
	# line in RSA: Could not send TACACS+ message. <fld5>).
	else if [logstash][msgparser][id] == "msgParserId67" {
		dissect {
			mapping => { "message" => "Could not send TACACS+ message. %{fld5})." }
			id => "msgParserId67"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId68
	# line in RSA: Could not set RADIUS server. <info>.
	else if [logstash][msgparser][id] == "msgParserId68" {
		dissect {
			mapping => { "message" => "Could not set RADIUS server. %{info}." }
			id => "msgParserId68"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId69
	# line in RSA: Username & password must be supplied. User : <username>, Pass: <info>.
	else if [logstash][msgparser][id] == "msgParserId69" {
		dissect {
			mapping => { "message" => "Username & password must be supplied. User : %{username}, Pass: %{info}." }
			id => "msgParserId69"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "AAA-5-AAA_AUTH_ADMIN_USER" {
		# MESSAGE AAA-5-AAA_AUTH_ADMIN_USER
		# line in RSA: Authentication failed for admin user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication failed for admin user %{username}" }
				id => "message-AAA-5-AAA_AUTH_ADMIN_USER"
				add_field => {
				"action" => "Authentication failed"
				"ec_outcome" => "Failure"
					"[event][id]" => "AAA-5-AAA_AUTH_ADMIN_USER"
					"[rsa][message][id1]" => "AAA-5-AAA_AUTH_ADMIN_USER"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AAA-5-AAA_AUTH_ADMIN_USER:02
		# line in RSA: Authentication failed for admin user '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication failed for admin user '%{username}'" }
				id => "message-AAA-5-AAA_AUTH_ADMIN_USER:02"
				add_field => {
				"action" => "Authentication failed"
				"ec_outcome" => "Failure"
					"[event][id]" => "AAA-5-AAA_AUTH_ADMIN_USER:02"
					"[rsa][message][id1]" => "AAA-5-AAA_AUTH_ADMIN_USER:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AAA-5-AAA_AUTH_ADMIN_USER:01
		# line in RSA: Authentication succeeded for admin user '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication succeeded for admin user '%{username}'" }
				id => "message-AAA-5-AAA_AUTH_ADMIN_USER:01"
				add_field => {
				"action" => "Authentication suceeded"
				"ec_outcome" => "Success"
					"[event][id]" => "AAA-5-AAA_AUTH_ADMIN_USER:01"
					"[rsa][message][id1]" => "AAA-5-AAA_AUTH_ADMIN_USER:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "AAA-5-AAA_AUTH_NETWORK_USER" {
		# MESSAGE AAA-5-AAA_AUTH_NETWORK_USER
		# line in RSA: Authentication failed for network user {<username> | '<username>'}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+failed[\s]+for[\s]+network[\s]+user[\s]+((?<username>[^]*)[\s]+|[\s]*'(?<username>[^']*)')$" }
				id => "message-AAA-5-AAA_AUTH_NETWORK_USER"
				add_field => {
				"action" => "Authentication failed"
				"ec_outcome" => "Failure"
					"[event][id]" => "AAA-5-AAA_AUTH_NETWORK_USER"
					"[rsa][message][id1]" => "AAA-5-AAA_AUTH_NETWORK_USER"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE AAA-5-AAA_AUTH_NETWORK_USER:01
		# line in RSA: Authentication succeeded for network user {<username>|'<username>'}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+succeeded[\s]+for[\s]+network[\s]+user[\s]+((?<username>[^]*)|'(?<username>[^']*)')$" }
				id => "message-AAA-5-AAA_AUTH_NETWORK_USER:01"
				add_field => {
				"action" => "Authentication suceeded"
				"ec_outcome" => "Success"
					"[event][id]" => "AAA-5-AAA_AUTH_NETWORK_USER:01"
					"[rsa][message][id1]" => "AAA-5-AAA_AUTH_NETWORK_USER:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId75
	# line in RSA: AAA Sync.Callback failed. <msg>.
	else if [logstash][msgparser][id] == "msgParserId75" {
		dissect {
			mapping => { "message" => "AAA Sync.Callback failed. %{msg}." }
			id => "msgParserId75"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId76
	# line in RSA: Unable to allocate memory off the stack.
	else if [logstash][msgparser][id] == "msgParserId76" {
		dissect {
			mapping => { "message" => "Unable to allocate memory off the stack." }
			id => "msgParserId76"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId77
	# line in RSA: TACACS+ server not found. <msg>
	else if [logstash][msgparser][id] == "msgParserId77" {
		dissect {
			mapping => { "message" => "TACACS+ server not found. %{msg}" }
			id => "msgParserId77"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId78
	# line in RSA: TACACS+ server switchover {failed as there is no other server active|failed}. Current server is {<saddr> (port:<sport>)|<saddr>}
	else if [logstash][msgparser][id] == "msgParserId78" {
		grok {
			match => { "message" => "^TACACS\+[\s]+server[\s]+switchover[\s]+(failed[\s]+as[\s]+there[\s]+is[\s]+no[\s]+other[\s]+server[\s]+active|failed)\.[\s]+Current[\s]+server[\s]+is[\s]+((?<saddr>[^\s]*)[\s]+\(port:(?<sport>[^\)]*)\)|(?<saddr>.*))$" }
			id => "msgParserId78"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId79
	# line in RSA: TACACS+ server switchover successful. New server is <saddr>.
	else if [logstash][msgparser][id] == "msgParserId79" {
		dissect {
			mapping => { "message" => "TACACS+ server switchover successful. New server is %{saddr}." }
			id => "msgParserId79"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId80
	# line in RSA: Could not translate AAA AVP to RADIUS AVP. <fld5>.
	else if [logstash][msgparser][id] == "msgParserId80" {
		dissect {
			mapping => { "message" => "Could not translate AAA AVP to RADIUS AVP. %{fld5}." }
			id => "msgParserId80"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId81
	# line in RSA: Transmission queue full. Queue name: <fld5>. Dropping sessionpackets.
	else if [logstash][msgparser][id] == "msgParserId81" {
		dissect {
			mapping => { "message" => "Transmission queue full. Queue name: %{fld5}. Dropping sessionpackets." }
			id => "msgParserId81"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId82
	# line in RSA: Username too long. Username: <username>.
	else if [logstash][msgparser][id] == "msgParserId82" {
		dissect {
			mapping => { "message" => "Username too long. Username: %{username}." }
			id => "msgParserId82"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId83
	# line in RSA: User authenticated. Username: <username>.
	else if [logstash][msgparser][id] == "msgParserId83" {
		dissect {
			mapping => { "message" => "User authenticated. Username: %{username}." }
			id => "msgParserId83"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId84
	# line in RSA: Could not check the CHAP challenge. <fld5>. Username: <username>.
	else if [logstash][msgparser][id] == "msgParserId84" {
		dissect {
			mapping => { "message" => "Could not check the CHAP challenge. %{fld5}. Username: %{username}." }
			id => "msgParserId84"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId85
	# line in RSA: Unable to create user database file. <fld5>.
	else if [logstash][msgparser][id] == "msgParserId85" {
		dissect {
			mapping => { "message" => "Unable to create user database file. %{fld5}." }
			id => "msgParserId85"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId86
	# line in RSA: Unable to load user database file. <fld5>.
	else if [logstash][msgparser][id] == "msgParserId86" {
		dissect {
			mapping => { "message" => "Unable to load user database file. %{fld5}." }
			id => "msgParserId86"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId87
	# line in RSA: User database not initialized
	else if [logstash][msgparser][id] == "msgParserId87" {
		dissect {
			mapping => { "message" => "User database not initialized" }
			id => "msgParserId87"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId88
	# line in RSA: Could not check password for user. <username>.<fld5>.
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "Could not check password for user. %{username}.%{fld5}." }
			id => "msgParserId88"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId89
	# line in RSA:  Guest user session validation failed for <username>. <reason>
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "Guest user session validation failed for %{username}. %{reason}" }
			id => "msgParserId89"
			add_field => {
				"action" => "Guest user session validation failed for user"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId90
	# line in RSA: Could not validate credentials for proxied RADIUS. <fld5>. STA : <macaddr> (len <fld1>)
	else if [logstash][msgparser][id] == "msgParserId90" {
		dissect {
			mapping => { "message" => "Could not validate credentials for proxied RADIUS. %{fld5}. STA : %{macaddr} (len %{fld1})" }
			id => "msgParserId90"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId91
	# line in RSA:  Failed to get ACE from ACL. <fld10>
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "Failed to get ACE from ACL. %{fld10}" }
			id => "msgParserId91"
			add_field => {
				"action" => "Failed to get ACE from ACL"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId92
	# line in RSA: Failed to store Acl Config to Flash <info>.
	else if [logstash][msgparser][id] == "msgParserId92" {
		dissect {
			mapping => { "message" => "Failed to store Acl Config to Flash %{info}." }
			id => "msgParserId92"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId93
	# line in RSA: Couldnt get exclusive access on the Acl database. <fld10>.
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "Couldnt get exclusive access on the Acl database. %{fld10}." }
			id => "msgParserId93"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId94
	# line in RSA: Couldnt release exclusive access on the Acl database. <fld10>.
	else if [logstash][msgparser][id] == "msgParserId94" {
		dissect {
			mapping => { "message" => "Couldnt release exclusive access on the Acl database. %{fld10}." }
			id => "msgParserId94"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId95
	# line in RSA: Couldnt create ACL <rulename>. <info>.
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "Couldnt create ACL %{rulename}. %{info}." }
			id => "msgParserId95"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId96
	# line in RSA: Failed to delete ACL Entry <rulename>. <info>.
	else if [logstash][msgparser][id] == "msgParserId96" {
		dissect {
			mapping => { "message" => "Failed to delete ACL Entry %{rulename}. %{info}." }
			id => "msgParserId96"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId97
	# line in RSA: Unable to find an ACL by name "<fld10>".
	else if [logstash][msgparser][id] == "msgParserId97" {
		dissect {
			mapping => { "message" => "Unable to find an ACL by name \"%{fld10}\"." }
			id => "msgParserId97"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId98
	# line in RSA: Couldnt get an unused ACL. <fld10>.
	else if [logstash][msgparser][id] == "msgParserId98" {
		dissect {
			mapping => { "message" => "Couldnt get an unused ACL. %{fld10}." }
			id => "msgParserId98"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId99
	# line in RSA: Couldnt get ACL name by ID. [<fld10>].
	else if [logstash][msgparser][id] == "msgParserId99" {
		dissect {
			mapping => { "message" => "Couldnt get ACL name by ID. [%{fld10}]." }
			id => "msgParserId99"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId100
	# line in RSA: Deleting the implicit deny rule <info> of ACL <rulename> is not allowed.
	else if [logstash][msgparser][id] == "msgParserId100" {
		dissect {
			mapping => { "message" => "Deleting the implicit deny rule %{info} of ACL %{rulename} is not allowed." }
			id => "msgParserId100"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId101
	# line in RSA: Failed to push CPU Acl info the NPU
	else if [logstash][msgparser][id] == "msgParserId101" {
		dissect {
			mapping => { "message" => "Failed to push CPU Acl info the NPU" }
			id => "msgParserId101"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId102
	# line in RSA: Failure in creating Acl Database. <fld10>.
	else if [logstash][msgparser][id] == "msgParserId102" {
		dissect {
			mapping => { "message" => "Failure in creating Acl Database. %{fld10}." }
			id => "msgParserId102"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId103
	# line in RSA: Incorrect IP address type parameter of rule <info> of ACL <rulename>
	else if [logstash][msgparser][id] == "msgParserId103" {
		dissect {
			mapping => { "message" => "Incorrect IP address type parameter of rule %{info} of ACL %{rulename}" }
			id => "msgParserId103"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId104
	# line in RSA: Acl config is corrupted. Resetting Acl config to default.
	else if [logstash][msgparser][id] == "msgParserId104" {
		dissect {
			mapping => { "message" => "Acl config is corrupted. Resetting Acl config to default." }
			id => "msgParserId104"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId105
	# line in RSA: Incorrect action <action> to set for the rule <info> of the ACL <rulename>.
	else if [logstash][msgparser][id] == "msgParserId105" {
		dissect {
			mapping => { "message" => "Incorrect action %{action} to set for the rule %{info} of the ACL %{rulename}." }
			id => "msgParserId105"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId106
	# line in RSA: Can not Add Rule [<info>] to ACL [<rulename>]. [<msg>].
	else if [logstash][msgparser][id] == "msgParserId106" {
		dissect {
			mapping => { "message" => "Can not Add Rule [%{info}] to ACL [%{rulename}]. [%{msg}]." }
			id => "msgParserId106"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId107
	# line in RSA: Unable to <action> the rule no.<info> in ACL <rulename>. No such rule exist
	else if [logstash][msgparser][id] == "msgParserId107" {
		dissect {
			mapping => { "message" => "Unable to %{action} the rule no.%{info} in ACL %{rulename}. No such rule exist" }
			id => "msgParserId107"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId108
	# line in RSA: Pushing rule <info> of Acl <rulename> to the Network Processor Failed.
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "Pushing rule %{info} of Acl %{rulename} to the Network Processor Failed." }
			id => "msgParserId108"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId109
	# line in RSA: Set Port Range failed for rule <info> of ACL <rulename>. <reason>.
	else if [logstash][msgparser][id] == "msgParserId109" {
		dissect {
			mapping => { "message" => "Set Port Range failed for rule %{info} of ACL %{rulename}. %{reason}." }
			id => "msgParserId109"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId110
	# line in RSA: Incorrect direction parameter for the rule <info> of the ACL <rulename>
	else if [logstash][msgparser][id] == "msgParserId110" {
		dissect {
			mapping => { "message" => "Incorrect direction parameter for the rule %{info} of the ACL %{rulename}" }
			id => "msgParserId110"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId111
	# line in RSA:  Unable to find an ACL by name "<fld10>".
	else if [logstash][msgparser][id] == "msgParserId111" {
		dissect {
			mapping => { "message" => "Unable to find an ACL by name \"%{fld10}\"." }
			id => "msgParserId111"
			add_field => {
				"action" => "Unable to find an ACL by name"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId112
	# line in RSA: Could not send the LWAPP Authenticate Mobile command to rogue AP <macaddr> for mobile <smacaddr>. Unable to find rogue client.
	else if [logstash][msgparser][id] == "msgParserId112" {
		dissect {
			mapping => { "message" => "Could not send the LWAPP Authenticate Mobile command to rogue AP %{macaddr} for mobile %{smacaddr}. Unable to find rogue client." }
			id => "msgParserId112"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId113
	# line in RSA: Can not associate with <macaddr> <info>.
	else if [logstash][msgparser][id] == "msgParserId113" {
		dissect {
			mapping => { "message" => "Can not associate with %{macaddr} %{info}." }
			id => "msgParserId113"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId114
	# line in RSA:  Changing orphan packet IP address for station <saddr> from <reason>
	else if [logstash][msgparser][id] == "msgParserId114" {
		dissect {
			mapping => { "message" => "Changing orphan packet IP address for station %{saddr} from %{reason}" }
			id => "msgParserId114"
			add_field => {
				"action" => "Changing orphan packet IP address for station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId115
	# line in RSA:  Conflicting Supported Rates in Association Request from <saddr>
	else if [logstash][msgparser][id] == "msgParserId115" {
		dissect {
			mapping => { "message" => "Conflicting Supported Rates in Association Request from %{saddr}" }
			id => "msgParserId115"
			add_field => {
				"action" => "Conflicting Supported Rates in Association Request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId116
	# line in RSA: Disconnecting mobile <smacaddr> due to switch of WLANs from <info> to <wlan>
	else if [logstash][msgparser][id] == "msgParserId116" {
		dissect {
			mapping => { "message" => "Disconnecting mobile %{smacaddr} due to switch of WLANs from %{info} to %{wlan}" }
			id => "msgParserId116"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId117
	# line in RSA:  Disconnecting mobile <saddr> due to <reason>
	else if [logstash][msgparser][id] == "msgParserId117" {
		dissect {
			mapping => { "message" => "Disconnecting mobile %{saddr} due to %{reason}" }
			id => "msgParserId117"
			add_field => {
				"action" => "Disconnecting mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "APF-1-HANDOFF_END_RCVD" {
		# MESSAGE APF-1-HANDOFF_END_RCVD
		# line in RSA:  Handoff end received in wrong role (peer Ip: <daddr>, sender:<saddr>, Role:<user_role>) for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Handoff end received in wrong role (peer Ip: %{daddr}, sender:%{saddr}, Role:%{user_role}) for mobile %{smacaddr}" }
				id => "message-APF-1-HANDOFF_END_RCVD"
				add_field => {
				"event_description" => "Handoff end received in wrong role"
					"[event][id]" => "APF-1-HANDOFF_END_RCVD"
					"[rsa][message][id1]" => "APF-1-HANDOFF_END_RCVD"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE APF-1-HANDOFF_END_RCVD:01
		# line in RSA:  Handoff end received from mismatched peer (peer Ip: <daddr>, sender:<saddr>, Role:<user_role>) for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Handoff end received from mismatched peer (peer Ip: %{daddr}, sender:%{saddr}, Role:%{user_role}) for mobile %{smacaddr}" }
				id => "message-APF-1-HANDOFF_END_RCVD:01"
				add_field => {
				"event_description" => "Handoff end received from mismatched peer"
					"[event][id]" => "APF-1-HANDOFF_END_RCVD:01"
					"[rsa][message][id1]" => "APF-1-HANDOFF_END_RCVD:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId120
	# line in RSA: <event_description> Mobile:<smacaddr>, Type:<zone>. <reason>
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "%{event_description} Mobile:%{smacaddr}, Type:%{zone}. %{reason}" }
			id => "msgParserId120"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId121
	# line in RSA:  Moved adHoc client <smacaddr> to auto-contained state.
	else if [logstash][msgparser][id] == "msgParserId121" {
		dissect {
			mapping => { "message" => "Moved adHoc client %{smacaddr} to auto-contained state." }
			id => "msgParserId121"
			add_field => {
				"event_description" => "Moved adHoc client to auto-contained state"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId122
	# line in RSA: Not advertising SSID <ssid> on AP <macaddr> due to <reason>
	else if [logstash][msgparser][id] == "msgParserId122" {
		dissect {
			mapping => { "message" => "Not advertising SSID %{ssid} on AP %{macaddr} due to %{reason}" }
			id => "msgParserId122"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId123
	# line in RSA:  Could not process MM response. <reason>.Mobile:<smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId123" {
		dissect {
			mapping => { "message" => "Could not process MM response. %{reason}.Mobile:%{smacaddr}." }
			id => "msgParserId123"
			add_field => {
				"event_description" => "Could not process MM response"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId124
	# line in RSA:  Could not process the RSN and WARP { IE's | IEs }. <reason>.MobileStation: <saddr>, SSID:<ssid>.
	else if [logstash][msgparser][id] == "msgParserId124" {
		grok {
			match => { "message" => "^[\s]*Could[\s]+not[\s]+process[\s]+the[\s]+RSN[\s]+and[\s]+WARP[\s]+([\s]*IE's[\s]+|[\s]*IEs[\s]+)\.[\s]+(?<reason>[^\.]*)\.MobileStation:[\s]+(?<saddr>[^,]*),[\s]+SSID:(?<ssid>[^\.]*)\.$" }
			id => "msgParserId124"
			add_field => {
				"action" => "Could not process the RSN and WARP IE's"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId125
	# line in RSA: Quarantine VLAN, force it to central switch for mobile <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId125" {
		dissect {
			mapping => { "message" => "Quarantine VLAN, force it to central switch for mobile %{smacaddr}" }
			id => "msgParserId125"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId126
	# line in RSA: Received Mobility response for mobile <smacaddr> as anchor while in the wrong state.
	else if [logstash][msgparser][id] == "msgParserId126" {
		dissect {
			mapping => { "message" => "Received Mobility response for mobile %{smacaddr} as anchor while in the wrong state." }
			id => "msgParserId126"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId127
	# line in RSA:  Could not Register IP Add on MSCB. <reason>. Address: <saddr>
	else if [logstash][msgparser][id] == "msgParserId127" {
		dissect {
			mapping => { "message" => "Could not Register IP Add on MSCB. %{reason}. Address: %{saddr}" }
			id => "msgParserId127"
			add_field => {
				"action" => "Could not Register IP Add on MSCB"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId128
	# line in RSA:  Unable to contain rogue <saddr>. <reason>.
	else if [logstash][msgparser][id] == "msgParserId128" {
		dissect {
			mapping => { "message" => "Unable to contain rogue %{saddr}. %{reason}." }
			id => "msgParserId128"
			add_field => {
				"action" => "Unable to contain rogue"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId129
	# line in RSA:  Could not update rogue AP <macaddr> with rogue client <smacaddr> information.
	else if [logstash][msgparser][id] == "msgParserId129" {
		dissect {
			mapping => { "message" => "Could not update rogue AP %{macaddr} with rogue client %{smacaddr} information." }
			id => "msgParserId129"
			add_field => {
				"action" => "Could not update rogue AP with rogue client information"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId130
	# line in RSA:  Could not send a Client Association request. <reason>. 
	else if [logstash][msgparser][id] == "msgParserId130" {
		dissect {
			mapping => { "message" => "Could not send a Client Association request. %{reason}." }
			id => "msgParserId130"
			add_field => {
				"action" => "Could not send a Client Association request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId131
	# line in RSA:  Could not send a Client Association response to <saddr>  <reason>. 
	else if [logstash][msgparser][id] == "msgParserId131" {
		dissect {
			mapping => { "message" => "Could not send a Client Association response to %{saddr}  %{reason}." }
			id => "msgParserId131"
			add_field => {
				"action" => "Could not send a Client Association response"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId132
	# line in RSA:  Unable to contain rogue <macaddr> - <reason>. <info>
	else if [logstash][msgparser][id] == "msgParserId132" {
		dissect {
			mapping => { "message" => "Unable to contain rogue %{macaddr} - %{reason}. %{info}" }
			id => "msgParserId132"
			add_field => {
				"event_description" => "Unable to contain rogue"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId133
	# line in RSA:  Unable to contain rogue AP <macaddr>.
	else if [logstash][msgparser][id] == "msgParserId133" {
		dissect {
			mapping => { "message" => "Unable to contain rogue AP %{macaddr}." }
			id => "msgParserId133"
			add_field => {
				"event_description" => "Unable to contain rogue AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId134
	# line in RSA:  Unable to validate rogue AP policy for <smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId134" {
		dissect {
			mapping => { "message" => "Unable to validate rogue AP policy for %{smacaddr}." }
			id => "msgParserId134"
			add_field => {
				"event_description" => "Unable to validate rogue AP policy for AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId135
	# line in RSA: Unable to delete username <username> for mobile <saddr>
	else if [logstash][msgparser][id] == "msgParserId135" {
		dissect {
			mapping => { "message" => "Unable to delete username %{username} for mobile %{saddr}" }
			id => "msgParserId135"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId136
	# line in RSA:  Could not check extended supported rates. <reason>. Length :<number>. Mobile MAC: <smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId136" {
		dissect {
			mapping => { "message" => "Could not check extended supported rates. %{reason}. Length :%{number}. Mobile MAC: %{smacaddr}." }
			id => "msgParserId136"
			add_field => {
				"event_description" => "Could not check extended supported rates"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId137
	# line in RSA:  Could not check supported rates. <reason>. Length :<fld6>. Mobile MAC: <smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId137" {
		dissect {
			mapping => { "message" => "Could not check supported rates. %{reason}. Length :%{fld6}. Mobile MAC: %{smacaddr}." }
			id => "msgParserId137"
			add_field => {
				"action" => "Could not check supported rates"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId138
	# line in RSA:  Failed to encapsulate a PDU for transmission to station <saddr>. <reason>.
	else if [logstash][msgparser][id] == "msgParserId138" {
		dissect {
			mapping => { "message" => "Failed to encapsulate a PDU for transmission to station %{saddr}. %{reason}." }
			id => "msgParserId138"
			add_field => {
				"action" => "Failed to encapsulate a PDU for transmission"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId139
	# line in RSA:  Could not validate Dot11i security IE. <reason>.Mobile:<saddr>
	else if [logstash][msgparser][id] == "msgParserId139" {
		dissect {
			mapping => { "message" => "Could not validate Dot11i security IE. %{reason}.Mobile:%{saddr}" }
			id => "msgParserId139"
			add_field => {
				"action" => "Could not validate Dot11i security IE"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId140
	# line in RSA: Association failed with <macaddr> <info>.
	else if [logstash][msgparser][id] == "msgParserId140" {
		dissect {
			mapping => { "message" => "Association failed with %{macaddr} %{info}." }
			id => "msgParserId140"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId141
	# line in RSA:  Changing orphan packet IP address for station<macaddr> from <saddr> ---> <daddr>
	else if [logstash][msgparser][id] == "msgParserId141" {
		dissect {
			mapping => { "message" => "Changing orphan packet IP address for station%{macaddr} from %{saddr} ---> %{daddr}" }
			id => "msgParserId141"
			add_field => {
				"event_description" => "Changing orphan packet IP address for station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId142
	# line in RSA:  Could not process 802.11 Action. <reason>(<info>) from client. Mobile:<smacaddr>, Category:<sigcat>.
	else if [logstash][msgparser][id] == "msgParserId142" {
		dissect {
			mapping => { "message" => "Could not process 802.11 Action. %{reason}(%{info}) from client. Mobile:%{smacaddr}, Category:%{sigcat}." }
			id => "msgParserId142"
			add_field => {
				"event_description" => "Could not process 802.11 Action"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId143
	# line in RSA:  Could not find the mobile <smacaddr> in internal database
	else if [logstash][msgparser][id] == "msgParserId143" {
		dissect {
			mapping => { "message" => "Could not find the mobile %{smacaddr} in internal database" }
			id => "msgParserId143"
			add_field => {
				"event_description" => "Could not find the mobile in internal database"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId144
	# line in RSA:  Could not find the mobile <macaddr> in internal blacklist database
	else if [logstash][msgparser][id] == "msgParserId144" {
		dissect {
			mapping => { "message" => "Could not find the mobile %{macaddr} in internal blacklist database" }
			id => "msgParserId144"
			add_field => {
				"event_description" => "Could not find the mobile in internal blacklist database"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId145
	# line in RSA:  Could not Process 802.11 MAC mgmt Data. <reason>
	else if [logstash][msgparser][id] == "msgParserId145" {
		dissect {
			mapping => { "message" => "Could not Process 802.11 MAC mgmt Data. %{reason}" }
			id => "msgParserId145"
			add_field => {
				"action" => "Could not Process 802.11 MAC mgmt Data"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId146
	# line in RSA:  Received Action frame with code <code> from mobile station <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId146" {
		dissect {
			mapping => { "message" => "Received Action frame with code %{code} from mobile station %{smacaddr}" }
			id => "msgParserId146"
			add_field => {
				"event_description" => "Received Action frame with code 0 from mobile station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId147
	# line in RSA:  <agent>: received a message with an invalid supported rate.
	else if [logstash][msgparser][id] == "msgParserId147" {
		dissect {
			mapping => { "message" => "%{agent}: received a message with an invalid supported rate." }
			id => "msgParserId147"
			add_field => {
				"event_description" => "received a message with an invalid supported rate"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId148
	# line in RSA:  Received an unsupported 802.11 management message<product> from AP <saddr>
	else if [logstash][msgparser][id] == "msgParserId148" {
		dissect {
			mapping => { "message" => "Received an unsupported 802.11 management message%{product} from AP %{saddr}" }
			id => "msgParserId148"
			add_field => {
				"action" => "Received an unsupported 802.11 management message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId149
	# line in RSA:  Cannot find apgroup <group> for AP <macaddr>. <reason>
	else if [logstash][msgparser][id] == "msgParserId149" {
		dissect {
			mapping => { "message" => "Cannot find apgroup %{group} for AP %{macaddr}. %{reason}" }
			id => "msgParserId149"
			add_field => {
				"event_description" => "Cannot find apgroup none or standard for AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId150
	# line in RSA:  Config file '<reason>' saved to flash.
	else if [logstash][msgparser][id] == "msgParserId150" {
		dissect {
			mapping => { "message" => "Config file '%{reason}' saved to flash." }
			id => "msgParserId150"
			add_field => {
				"action" => "Config file saved to flash"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId151
	# line in RSA:  Disconnecting mobile <smacaddr> due to <reason>
	else if [logstash][msgparser][id] == "msgParserId151" {
		dissect {
			mapping => { "message" => "Disconnecting mobile %{smacaddr} due to %{reason}" }
			id => "msgParserId151"
			add_field => {
				"event_description" => "Disconnecting mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId152
	# line in RSA:  Rejecting request for 802.1x on port <portname> from mobile<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId152" {
		dissect {
			mapping => { "message" => "Rejecting request for 802.1x on port %{portname} from mobile%{smacaddr}" }
			id => "msgParserId152"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId153
	# line in RSA: Guest User (<username>) with MAC Address (<macaddr>) assigned IP Address (<saddr>)
	else if [logstash][msgparser][id] == "msgParserId153" {
		dissect {
			mapping => { "message" => "Guest User (%{username}) with MAC Address (%{macaddr}) assigned IP Address (%{saddr})" }
			id => "msgParserId153"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId154
	# line in RSA: Excluded the mobile {<smacaddr> Reason: "<result>"|<smacaddr>.}
	else if [logstash][msgparser][id] == "msgParserId154" {
		grok {
			match => { "message" => "^Excluded[\s]+the[\s]+mobile[\s]+((?<smacaddr>[^\s]*)[\s]+Reason:[\s]+\"(?<result>[^\"]*)\"|(?<smacaddr>[^\.]*)\.)$" }
			id => "msgParserId154"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId155
	# line in RSA:  Could not exclude the mobile <saddr>
	else if [logstash][msgparser][id] == "msgParserId155" {
		dissect {
			mapping => { "message" => "Could not exclude the mobile %{saddr}" }
			id => "msgParserId155"
			add_field => {
				"action" => "Could not exclude mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId156
	# line in RSA:  Radius overrides disabled, ignoring source <fld6>
	else if [logstash][msgparser][id] == "msgParserId156" {
		dissect {
			mapping => { "message" => "Radius overrides disabled, ignoring source %{fld6}" }
			id => "msgParserId156"
			add_field => {
				"action" => "Radius overrides disabled ignoring source"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId157
	# line in RSA:  Username entry (<username>) with length (<number>) created for mobile {<smacaddr>[<info>]|<smacaddr>}
	else if [logstash][msgparser][id] == "msgParserId157" {
		grok {
			match => { "message" => "^[\s]*Username[\s]+entry[\s]+\((?<username>[^\)]*)\)[\s]+with[\s]+length[\s]+\((?<number>[^\)]*)\)[\s]+created[\s]+for[\s]+mobile[\s]+((?<smacaddr>[^\[]*)\[(?<info>[^\]]*)\]|(?<smacaddr>.*))$" }
			id => "msgParserId157"
			add_field => {
				"event_description" => "Username entry created for mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId158
	# line in RSA:  Mobile <smacaddr> has unsupported CCXversion <version>
	else if [logstash][msgparser][id] == "msgParserId158" {
		dissect {
			mapping => { "message" => "Mobile %{smacaddr} has unsupported CCXversion %{version}" }
			id => "msgParserId158"
			add_field => {
				"event_description" => "Mobile has unsupported CCXversion"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId159
	# line in RSA: Unable to add rules for sensor <session>\n
	else if [logstash][msgparser][id] == "msgParserId159" {
		dissect {
			mapping => { "message" => "Unable to add rules for sensor %{session}\n" }
			id => "msgParserId159"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId160
	# line in RSA: Error clean-up sensor <dhost>
	else if [logstash][msgparser][id] == "msgParserId160" {
		dissect {
			mapping => { "message" => "Error clean-up sensor %{dhost}" }
			id => "msgParserId160"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId161
	# line in RSA: Unable to reset cids rule <dhost>
	else if [logstash][msgparser][id] == "msgParserId161" {
		dissect {
			mapping => { "message" => "Unable to reset cids rule %{dhost}" }
			id => "msgParserId161"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId162
	# line in RSA: Error! NULL sensor pointer!
	else if [logstash][msgparser][id] == "msgParserId162" {
		dissect {
			mapping => { "message" => "Error! NULL sensor pointer!" }
			id => "msgParserId162"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId163
	# line in RSA: Unable to clean cids parser
	else if [logstash][msgparser][id] == "msgParserId163" {
		dissect {
			mapping => { "message" => "Unable to clean cids parser" }
			id => "msgParserId163"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId164
	# line in RSA: Unable to create cids parser
	else if [logstash][msgparser][id] == "msgParserId164" {
		dissect {
			mapping => { "message" => "Unable to create cids parser" }
			id => "msgParserId164"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId165
	# line in RSA: Unable to restart timer for sensor <session>
	else if [logstash][msgparser][id] == "msgParserId165" {
		dissect {
			mapping => { "message" => "Unable to restart timer for sensor %{session}" }
			id => "msgParserId165"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId166
	# line in RSA: Unable to setup rules for sensor <session>
	else if [logstash][msgparser][id] == "msgParserId166" {
		dissect {
			mapping => { "message" => "Unable to setup rules for sensor %{session}" }
			id => "msgParserId166"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId167
	# line in RSA: ERROR! shun-list delete from AVL list failed.
	else if [logstash][msgparser][id] == "msgParserId167" {
		dissect {
			mapping => { "message" => "ERROR! shun-list delete from AVL list failed." }
			id => "msgParserId167"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId168
	# line in RSA: Unable to create shun-list entry for ip <session>
	else if [logstash][msgparser][id] == "msgParserId168" {
		dissect {
			mapping => { "message" => "Unable to create shun-list entry for ip %{session}" }
			id => "msgParserId168"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId169
	# line in RSA: Unable to ssl mutex callback for libcurl.
	else if [logstash][msgparser][id] == "msgParserId169" {
		dissect {
			mapping => { "message" => "Unable to ssl mutex callback for libcurl." }
			id => "msgParserId169"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId170
	# line in RSA: Invalid AP Hash Key Provided
	else if [logstash][msgparser][id] == "msgParserId170" {
		dissect {
			mapping => { "message" => "Invalid AP Hash Key Provided" }
			id => "msgParserId170"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId171
	# line in RSA: Login failed. User:<username>, Service type:<service>. <fld5>.
	else if [logstash][msgparser][id] == "msgParserId171" {
		dissect {
			mapping => { "message" => "Login failed. User:%{username}, Service type:%{service}. %{fld5}." }
			id => "msgParserId171"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId172
	# line in RSA: Level Alert.
	else if [logstash][msgparser][id] == "msgParserId172" {
		dissect {
			mapping => { "message" => "Level Alert." }
			id => "msgParserId172"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId173
	# line in RSA: Level Critical.
	else if [logstash][msgparser][id] == "msgParserId173" {
		dissect {
			mapping => { "message" => "Level Critical." }
			id => "msgParserId173"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId174
	# line in RSA: Level Debug.
	else if [logstash][msgparser][id] == "msgParserId174" {
		dissect {
			mapping => { "message" => "Level Debug." }
			id => "msgParserId174"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId175
	# line in RSA: Level Emergency.
	else if [logstash][msgparser][id] == "msgParserId175" {
		dissect {
			mapping => { "message" => "Level Emergency." }
			id => "msgParserId175"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId176
	# line in RSA: Level Error.
	else if [logstash][msgparser][id] == "msgParserId176" {
		dissect {
			mapping => { "message" => "Level Error." }
			id => "msgParserId176"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId177
	# line in RSA: Level information.
	else if [logstash][msgparser][id] == "msgParserId177" {
		dissect {
			mapping => { "message" => "Level information." }
			id => "msgParserId177"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId178
	# line in RSA: Level Notice.
	else if [logstash][msgparser][id] == "msgParserId178" {
		dissect {
			mapping => { "message" => "Level Notice." }
			id => "msgParserId178"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId179
	# line in RSA: Level Warning.
	else if [logstash][msgparser][id] == "msgParserId179" {
		dissect {
			mapping => { "message" => "Level Warning." }
			id => "msgParserId179"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId180
	# line in RSA: File <fld10> does not exist as a logo. Clearing..
	else if [logstash][msgparser][id] == "msgParserId180" {
		dissect {
			mapping => { "message" => "File %{fld10} does not exist as a logo. Clearing.." }
			id => "msgParserId180"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId181
	# line in RSA: Buffer for <info>.
	else if [logstash][msgparser][id] == "msgParserId181" {
		dissect {
			mapping => { "message" => "Buffer for %{info}." }
			id => "msgParserId181"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId182
	# line in RSA: Buffer for <info> too small
	else if [logstash][msgparser][id] == "msgParserId182" {
		dissect {
			mapping => { "message" => "Buffer for %{info} too small" }
			id => "msgParserId182"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId183
	# line in RSA: Index:<info>.
	else if [logstash][msgparser][id] == "msgParserId183" {
		dissect {
			mapping => { "message" => "Index:%{info}." }
			id => "msgParserId183"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId184
	# line in RSA: Unable to initialize. Reason: <info>.
	else if [logstash][msgparser][id] == "msgParserId184" {
		dissect {
			mapping => { "message" => "Unable to initialize. Reason: %{info}." }
			id => "msgParserId184"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId185
	# line in RSA: Unknown Port Speed found for interface <fld10>.
	else if [logstash][msgparser][id] == "msgParserId185" {
		dissect {
			mapping => { "message" => "Unknown Port Speed found for interface %{fld10}." }
			id => "msgParserId185"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId186
	# line in RSA: Failed to <action> the Java Socket.
	else if [logstash][msgparser][id] == "msgParserId186" {
		dissect {
			mapping => { "message" => "Failed to %{action} the Java Socket." }
			id => "msgParserId186"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId187
	# line in RSA: External Web Auth cannot be enabled. <info>.
	else if [logstash][msgparser][id] == "msgParserId187" {
		dissect {
			mapping => { "message" => "External Web Auth cannot be enabled. %{info}." }
			id => "msgParserId187"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId188
	# line in RSA: External Web Auth type cannot be set. <info>.
	else if [logstash][msgparser][id] == "msgParserId188" {
		dissect {
			mapping => { "message" => "External Web Auth type cannot be set. %{info}." }
			id => "msgParserId188"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId189
	# line in RSA: Unable to set External Web Server. <info>.
	else if [logstash][msgparser][id] == "msgParserId189" {
		dissect {
			mapping => { "message" => "Unable to set External Web Server. %{info}." }
			id => "msgParserId189"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId190
	# line in RSA:   <fld7>: Client not found.
	else if [logstash][msgparser][id] == "msgParserId190" {
		dissect {
			mapping => { "message" => "%{fld7}: Client not found." }
			id => "msgParserId190"
			add_field => {
				"action" => "Client not found"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId191
	# line in RSA:  Unhandled debug module <fld10>.
	else if [logstash][msgparser][id] == "msgParserId191" {
		dissect {
			mapping => { "message" => "Unhandled debug module %{fld10}." }
			id => "msgParserId191"
			add_field => {
				"action" => "Unhandled debug module"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId192
	# line in RSA: There are no clients in the database.
	else if [logstash][msgparser][id] == "msgParserId192" {
		dissect {
			mapping => { "message" => "There are no clients in the database." }
			id => "msgParserId192"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId193
	# line in RSA: Error: Ip Address <saddr> is not in pool (<fld10>)
	else if [logstash][msgparser][id] == "msgParserId193" {
		dissect {
			mapping => { "message" => "Error: Ip Address %{saddr} is not in pool (%{fld10})" }
			id => "msgParserId193"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId194
	# line in RSA:  Bad DHCP packet from <saddr>, <reason>
	else if [logstash][msgparser][id] == "msgParserId194" {
		dissect {
			mapping => { "message" => "Bad DHCP packet from %{saddr}, %{reason}" }
			id => "msgParserId194"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId195
	# line in RSA: Binding service port failed.
	else if [logstash][msgparser][id] == "msgParserId195" {
		dissect {
			mapping => { "message" => "Binding service port failed." }
			id => "msgParserId195"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId196
	# line in RSA:  Dropping foreign client for dhcp retries, mac:<dmacaddr> ip: <daddr>
	else if [logstash][msgparser][id] == "msgParserId196" {
		dissect {
			mapping => { "message" => "Dropping foreign client for dhcp retries, mac:%{dmacaddr} ip: %{daddr}" }
			id => "msgParserId196"
			add_field => {
				"event_description" => "Dropping foreign client for dhcp retries"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId197
	# line in RSA:  Oversized DHCP packet
	else if [logstash][msgparser][id] == "msgParserId197" {
		dissect {
			mapping => { "message" => "Oversized DHCP packet" }
			id => "msgParserId197"
			add_field => {
				"event_description" => "Oversized DHCP packet"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId198
	# line in RSA:  DHCP options incorrect length
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "DHCP options incorrect length" }
			id => "msgParserId198"
			add_field => {
				"event_description" => "DHCP options incorrect length"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId199
	# line in RSA:  Unable to encapsulate header.
	else if [logstash][msgparser][id] == "msgParserId199" {
		dissect {
			mapping => { "message" => "Unable to encapsulate header." }
			id => "msgParserId199"
			add_field => {
				"event_description" => "Unable to encapsulate header"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId200
	# line in RSA:  Lease for <saddr> does not belong to {<smacaddr>.|<smacaddr>}
	else if [logstash][msgparser][id] == "msgParserId200" {
		grok {
			match => { "message" => "^[\s]*Lease[\s]+for[\s]+(?<saddr>[^\s]*)[\s]+does[\s]+not[\s]+belong[\s]+to[\s]+((?<smacaddr>[^\.]*)\.|(?<smacaddr>.*))$" }
			id => "msgParserId200"
			add_field => {
				"event_description" => "Lease does not belong to client"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId201
	# line in RSA:  DHCP Lease could not be allocated to the client
	else if [logstash][msgparser][id] == "msgParserId201" {
		dissect {
			mapping => { "message" => "DHCP Lease could not be allocated to the client" }
			id => "msgParserId201"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId202
	# line in RSA:  Unable to get the dhcp relay server's ip address
	else if [logstash][msgparser][id] == "msgParserId202" {
		dissect {
			mapping => { "message" => "Unable to get the dhcp relay server's ip address" }
			id => "msgParserId202"
			add_field => {
				"event_description" => "Unable to get the dhcp relay server's ip address"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId203
	# line in RSA:  Received a packet without a requested ip!.
	else if [logstash][msgparser][id] == "msgParserId203" {
		dissect {
			mapping => { "message" => "Received a packet without a requested ip!." }
			id => "msgParserId203"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId204
	# line in RSA:  Dropping packet from <saddr> (<reason>)
	else if [logstash][msgparser][id] == "msgParserId204" {
		dissect {
			mapping => { "message" => "Dropping packet from %{saddr} (%{reason})" }
			id => "msgParserId204"
			add_field => {
				"action" => "Dropping packet"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId205
	# line in RSA: Backend Authentication SM:: Authentication Aborted..
	else if [logstash][msgparser][id] == "msgParserId205" {
		dissect {
			mapping => { "message" => "Backend Authentication SM:: Authentication Aborted.." }
			id => "msgParserId205"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId206
	# line in RSA: Could not function as authenticator - <fld5>; client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId206" {
		dissect {
			mapping => { "message" => "Could not function as authenticator - %{fld5}; client %{smacaddr}" }
			id => "msgParserId206"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId207
	# line in RSA: 802.1X control block NULL for mobile <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId207" {
		dissect {
			mapping => { "message" => "802.1X control block NULL for mobile %{smacaddr}" }
			id => "msgParserId207"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId208
	# line in RSA:  Couldnt validate EAPOL-Key of type WPA. <reason>.Version:<ntype>. Pkt Type:<sport>. Desc Code:<fport>.Mobile:<saddr>
	else if [logstash][msgparser][id] == "msgParserId208" {
		dissect {
			mapping => { "message" => "Couldnt validate EAPOL-Key of type WPA. %{reason}.Version:%{ntype}. Pkt Type:%{sport}. Desc Code:%{fport}.Mobile:%{saddr}" }
			id => "msgParserId208"
			add_field => {
				"action" => "Couldnt validate EAPOL-Key of type WPA"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId209
	# line in RSA:   Received <product> message while in invalid state (<ntype>) - <protocol>, client <saddr>
	else if [logstash][msgparser][id] == "msgParserId209" {
		dissect {
			mapping => { "message" => "Received %{product} message while in invalid state (%{ntype}) - %{protocol}, client %{saddr}" }
			id => "msgParserId209"
			add_field => {
				"action" => "Received message while in invalid state"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId210
	# line in RSA:  { MAX | Max }{ EAPOL-key | EAPOL-Key } <product> retransmissions reached for mobile <saddr>
	else if [logstash][msgparser][id] == "msgParserId210" {
		grok {
			match => { "message" => "^[\s]*([\s]*MAX[\s]+|[\s]*Max[\s]+)([\s]*EAPOL\-key[\s]+|[\s]*EAPOL\-Key[\s]+)[\s]+(?<product>[^\s]*)[\s]+retransmissions[\s]+reached[\s]+for[\s]+mobile[\s]+(?<saddr>.*)$" }
			id => "msgParserId210"
			add_field => {
				"action" => "Max EAPOL-key retransmissions reached for mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId211
	# line in RSA: Reached Max EAP-Identity Request retries (<fld5>) for STA <macaddr>
	else if [logstash][msgparser][id] == "msgParserId211" {
		dissect {
			mapping => { "message" => "Reached Max EAP-Identity Request retries (%{fld5}) for STA %{macaddr}" }
			id => "msgParserId211"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId212
	# line in RSA:  MAX EAP retransmissions reached for mobile <saddr>
	else if [logstash][msgparser][id] == "msgParserId212" {
		dissect {
			mapping => { "message" => "MAX EAP retransmissions reached for mobile %{saddr}" }
			id => "msgParserId212"
			add_field => {
				"action" => "MAX EAP retransmissions reached for mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId213
	# line in RSA:  Couldnot send AAA message.<reason>. Mobile:<saddr>
	else if [logstash][msgparser][id] == "msgParserId213" {
		dissect {
			mapping => { "message" => "Couldnot send AAA message.%{reason}. Mobile:%{saddr}" }
			id => "msgParserId213"
			add_field => {
				"action" => "Could not send AAA message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId214
	# line in RSA:   Couldnt send WPA EAPOL Key.<reason>. State:<ntype>.Mobile:<saddr>
	else if [logstash][msgparser][id] == "msgParserId214" {
		dissect {
			mapping => { "message" => "Couldnt send WPA EAPOL Key.%{reason}. State:%{ntype}.Mobile:%{saddr}" }
			id => "msgParserId214"
			add_field => {
				"action" => "Couldnt send WPA EAPOL Key"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId215
	# line in RSA: Could not set broadcast keys for WLAN <wlan>; <info>
	else if [logstash][msgparser][id] == "msgParserId215" {
		dissect {
			mapping => { "message" => "Could not set broadcast keys for WLAN %{wlan}; %{info}" }
			id => "msgParserId215"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId216
	# line in RSA: Socket <fld5> operation failed on 802.1X socket
	else if [logstash][msgparser][id] == "msgParserId216" {
		dissect {
			mapping => { "message" => "Socket %{fld5} operation failed on 802.1X socket" }
			id => "msgParserId216"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId217
	# line in RSA:  Unable to send { authentication message to AAA server | AAA message } for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId217" {
		grok {
			match => { "message" => "^[\s]*Unable[\s]+to[\s]+send[\s]+([\s]*authentication[\s]+message[\s]+to[\s]+AAA[\s]+server[\s]+|[\s]*AAA[\s]+message[\s]+)[\s]+for[\s]+client[\s]+(?<smacaddr>.*)$" }
			id => "msgParserId217"
			add_field => {
				"event_description" => "Unable to send authentication message to AAA server for client"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId218
	# line in RSA: Error sending AAA message - <fld5>; client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId218" {
		dissect {
			mapping => { "message" => "Error sending AAA message - %{fld5}; client %{smacaddr}" }
			id => "msgParserId218"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId219
	# line in RSA: Unable to send AAA message for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId219" {
		dissect {
			mapping => { "message" => "Unable to send AAA message for client %{smacaddr}" }
			id => "msgParserId219"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId220
	# line in RSA:   Authentication {<action> for client <smacaddr>|<action>}
	else if [logstash][msgparser][id] == "msgParserId220" {
		grok {
			match => { "message" => "^[\s]*Authentication[\s]+((?<action>[^\s]*)[\s]+for[\s]+client[\s]+(?<smacaddr>.*)|(?<action>.*))$" }
			id => "msgParserId220"
			add_field => {
				"action" => "Authentication aborted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId221
	# line in RSA: Unable to add key mapping key to EAPOL-key message for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId221" {
		dissect {
			mapping => { "message" => "Unable to add key mapping key to EAPOL-key message for client %{smacaddr}" }
			id => "msgParserId221"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId222
	# line in RSA: Authentication state transition to state <fld5>
	else if [logstash][msgparser][id] == "msgParserId222" {
		dissect {
			mapping => { "message" => "Authentication state transition to state %{fld5}" }
			id => "msgParserId222"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId223
	# line in RSA: Max AAA authentication attempts exceeded for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId223" {
		dissect {
			mapping => { "message" => "Max AAA authentication attempts exceeded for client %{smacaddr}" }
			id => "msgParserId223"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId224
	# line in RSA: Empty message received from AAA
	else if [logstash][msgparser][id] == "msgParserId224" {
		dissect {
			mapping => { "message" => "Empty message received from AAA" }
			id => "msgParserId224"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId225
	# line in RSA: Max EAPOL-key <fld1> retransmissions exceeded for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId225" {
		dissect {
			mapping => { "message" => "Max EAPOL-key %{fld1} retransmissions exceeded for client %{smacaddr}" }
			id => "msgParserId225"
			add_field => {
				"event_description" => "Max EAPOL-key retransmissions exceeded for client"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId226
	# line in RSA: CCKM association for <macaddr> updated; <fld5>
	else if [logstash][msgparser][id] == "msgParserId226" {
		dissect {
			mapping => { "message" => "CCKM association for %{macaddr} updated; %{fld5}" }
			id => "msgParserId226"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId227
	# line in RSA: Unable to process 802.1X <fld5> msg - client <smacaddr> not found
	else if [logstash][msgparser][id] == "msgParserId227" {
		dissect {
			mapping => { "message" => "Unable to process 802.1X %{fld5} msg - client %{smacaddr} not found" }
			id => "msgParserId227"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId228
	# line in RSA: Failed to compute PRF mode <fld5> - <ntype>
	else if [logstash][msgparser][id] == "msgParserId228" {
		dissect {
			mapping => { "message" => "Failed to compute PRF mode %{fld5} - %{ntype}" }
			id => "msgParserId228"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId229
	# line in RSA: Could not process EAP message - <fld5>; client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId229" {
		dissect {
			mapping => { "message" => "Could not process EAP message - %{fld5}; client %{smacaddr}" }
			id => "msgParserId229"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId230
	# line in RSA: Possible authentication attack - <fld5>; client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId230" {
		dissect {
			mapping => { "message" => "Possible authentication attack - %{fld5}; client %{smacaddr}" }
			id => "msgParserId230"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId231
	# line in RSA: Unable to encrypt CCKM GTK for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId231" {
		dissect {
			mapping => { "message" => "Unable to encrypt CCKM GTK for client %{smacaddr}" }
			id => "msgParserId231"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId232
	# line in RSA: Max authentication attempts exceeded for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId232" {
		dissect {
			mapping => { "message" => "Max authentication attempts exceeded for client %{smacaddr}" }
			id => "msgParserId232"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId233
	# line in RSA: EAP packet is too long for retransmission
	else if [logstash][msgparser][id] == "msgParserId233" {
		dissect {
			mapping => { "message" => "EAP packet is too long for retransmission" }
			id => "msgParserId233"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId234
	# line in RSA: Ignoring pre-auth request from client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId234" {
		dissect {
			mapping => { "message" => "Ignoring pre-auth request from client %{smacaddr}" }
			id => "msgParserId234"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId235
	# line in RSA:  mobile station <saddr> possiblyattempting to access the network with an improperlyconfigured PSK
	else if [logstash][msgparser][id] == "msgParserId235" {
		dissect {
			mapping => { "message" => "mobile station %{saddr} possiblyattempting to access the network with an improperlyconfigured PSK" }
			id => "msgParserId235"
			add_field => {
				"action" => "mobile station attempting to access the network with an improperlyconfigured PSK"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId236
	# line in RSA: Unable to delete 802.1X interface
	else if [logstash][msgparser][id] == "msgParserId236" {
		dissect {
			mapping => { "message" => "Unable to delete 802.1X interface" }
			id => "msgParserId236"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId237
	# line in RSA: Unable to find 802.1X interface for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId237" {
		dissect {
			mapping => { "message" => "Unable to find 802.1X interface for AP %{macaddr}" }
			id => "msgParserId237"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId238
	# line in RSA: Missing 802.1X control block for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId238" {
		dissect {
			mapping => { "message" => "Missing 802.1X control block for client %{smacaddr}" }
			id => "msgParserId238"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId239
	# line in RSA: Missing 802.1X or client control block
	else if [logstash][msgparser][id] == "msgParserId239" {
		dissect {
			mapping => { "message" => "Missing 802.1X or client control block" }
			id => "msgParserId239"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId240
	# line in RSA: Invalid type (<fld5>) in 802.1X message queue
	else if [logstash][msgparser][id] == "msgParserId240" {
		dissect {
			mapping => { "message" => "Invalid type (%{fld5}) in 802.1X message queue" }
			id => "msgParserId240"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId241
	# line in RSA: Invalid EAP message received - <fld5>, client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId241" {
		dissect {
			mapping => { "message" => "Invalid EAP message received - %{fld5}, client %{smacaddr}" }
			id => "msgParserId241"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId242
	# line in RSA: Invalid EAPOL version (<fld5>, client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId242" {
		dissect {
			mapping => { "message" => "Invalid EAPOL version (%{fld5}, client %{smacaddr}" }
			id => "msgParserId242"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId243
	# line in RSA: Received <fld1> message while in invalid state (<fld11>) - version <fld5>, client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId243" {
		dissect {
			mapping => { "message" => "Received %{fld1} message while in invalid state (%{fld11}) - version %{fld5}, client %{smacaddr}" }
			id => "msgParserId243"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId244
	# line in RSA: Invalid key length (<fld5>)
	else if [logstash][msgparser][id] == "msgParserId244" {
		dissect {
			mapping => { "message" => "Invalid key length (%{fld5})" }
			id => "msgParserId244"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId245
	# line in RSA: Invalid key wrap parameters
	else if [logstash][msgparser][id] == "msgParserId245" {
		dissect {
			mapping => { "message" => "Invalid key wrap parameters" }
			id => "msgParserId245"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId246
	# line in RSA: Received invalid keywrap packet - <fld5>
	else if [logstash][msgparser][id] == "msgParserId246" {
		dissect {
			mapping => { "message" => "Received invalid keywrap packet - %{fld5}" }
			id => "msgParserId246"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId247
	# line in RSA: Unsupported MIC algorithm (<fld5>)
	else if [logstash][msgparser][id] == "msgParserId247" {
		dissect {
			mapping => { "message" => "Unsupported MIC algorithm (%{fld5})" }
			id => "msgParserId247"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId248
	# line in RSA: Invalid message type <fld5> received from AAA
	else if [logstash][msgparser][id] == "msgParserId248" {
		dissect {
			mapping => { "message" => "Invalid message type %{fld5} received from AAA" }
			id => "msgParserId248"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId249
	# line in RSA: Invalid PTK length (<fld5>)
	else if [logstash][msgparser][id] == "msgParserId249" {
		dissect {
			mapping => { "message" => "Invalid PTK length (%{fld5})" }
			id => "msgParserId249"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId250
	# line in RSA: Invalid EAPOL RC4 key msg from client <smacaddr> - <fld5>
	else if [logstash][msgparser][id] == "msgParserId250" {
		dissect {
			mapping => { "message" => "Invalid EAPOL RC4 key msg from client %{smacaddr} - %{fld5}" }
			id => "msgParserId250"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId251
	# line in RSA: Invalid replay counter from client <smacaddr> - <fld5>
	else if [logstash][msgparser][id] == "msgParserId251" {
		dissect {
			mapping => { "message" => "Invalid replay counter from client %{smacaddr} - %{fld5}" }
			id => "msgParserId251"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId252
	# line in RSA: Error in received EAPOL msg - <fld5>, client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId252" {
		dissect {
			mapping => { "message" => "Error in received EAPOL msg - %{fld5}, client %{smacaddr}" }
			id => "msgParserId252"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "DOT1X-3-INVALID_WPA_KEY_MSG_STATE" {
		# MESSAGE DOT1X-3-INVALID_WPA_KEY_MSG_STATE
		# line in RSA:  Received <event_type> msg has invalid information when mobile is in START  state - <reason>; <info>, client <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received %{event_type} msg has invalid information when mobile is in START  state - %{reason}; %{info}, client %{smacaddr}" }
				id => "message-DOT1X-3-INVALID_WPA_KEY_MSG_STATE"
				add_field => {
				"event_description" => "Received msg has invalid information when mobile is in START  state"
					"[event][id]" => "DOT1X-3-INVALID_WPA_KEY_MSG_STATE"
					"[rsa][message][id1]" => "DOT1X-3-INVALID_WPA_KEY_MSG_STATE"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE DOT1X-3-INVALID_WPA_KEY_MSG_STATE:01
		# line in RSA:  Received invalid <event_type> msg in START  state - <result>; <info>, client <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received invalid %{event_type} msg in START  state - %{result}; %{info}, client %{smacaddr}" }
				id => "message-DOT1X-3-INVALID_WPA_KEY_MSG_STATE:01"
				add_field => {
				"event_description" => "Received invalid information  msg in START  state "
					"[event][id]" => "DOT1X-3-INVALID_WPA_KEY_MSG_STATE:01"
					"[rsa][message][id1]" => "DOT1X-3-INVALID_WPA_KEY_MSG_STATE:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId255
	# line in RSA:  FT Auth successful. Moving client <smacaddr> to forced auth state
	else if [logstash][msgparser][id] == "msgParserId255" {
		dissect {
			mapping => { "message" => "FT Auth successful. Moving client %{smacaddr} to forced auth state" }
			id => "msgParserId255"
			add_field => {
				"event_description" => "FT Auth successful"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId256
	# line in RSA: '<fld21>' clt MAC: <smacaddr>  AP MAC: <macaddr> Role '<user_role>' PemState '<event_state>' SSID '<ssid>' Connected for '<duration>' secs
	else if [logstash][msgparser][id] == "msgParserId256" {
		dissect {
			mapping => { "message" => "'%{fld21}' clt MAC: %{smacaddr}  AP MAC: %{macaddr} Role '%{user_role}' PemState '%{event_state}' SSID '%{ssid}' Connected for '%{duration}' secs" }
			id => "msgParserId256"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId257
	# line in RSA: Key length not found for policy <rulename>
	else if [logstash][msgparser][id] == "msgParserId257" {
		dissect {
			mapping => { "message" => "Key length not found for policy %{rulename}" }
			id => "msgParserId257"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId258
	# line in RSA: Max EAPOL-key <fld5> retransmissions exceeded for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId258" {
		dissect {
			mapping => { "message" => "Max EAPOL-key %{fld5} retransmissions exceeded for client %{smacaddr}" }
			id => "msgParserId258"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId259
	# line in RSA:  { Max | MAX } EAP retransmissions exceeded for client <saddr>
	else if [logstash][msgparser][id] == "msgParserId259" {
		grok {
			match => { "message" => "^[\s]*([\s]*Max[\s]+|[\s]*MAX[\s]+)[\s]+EAP[\s]+retransmissions[\s]+exceeded[\s]+for[\s]+client[\s]+(?<saddr>.*)$" }
			id => "msgParserId259"
			add_field => {
				"action" => "MAX EAP retransmissions exceeded for client"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId260
	# line in RSA: Max EAP identity request retries (<fld1>) exceeded for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId260" {
		dissect {
			mapping => { "message" => "Max EAP identity request retries (%{fld1}) exceeded for client %{smacaddr}" }
			id => "msgParserId260"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId261
	# line in RSA: Authentication has run more than <fld5> times - deleting client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId261" {
		dissect {
			mapping => { "message" => "Authentication has run more than %{fld5} times - deleting client %{smacaddr}" }
			id => "msgParserId261"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId262
	# line in RSA: Unable to create EAPOL-key M5 - group key not found for WLAN <wlan>
	else if [logstash][msgparser][id] == "msgParserId262" {
		dissect {
			mapping => { "message" => "Unable to create EAPOL-key M5 - group key not found for WLAN %{wlan}" }
			id => "msgParserId262"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId263
	# line in RSA: Client <smacaddr> may be using an incorrect PSK
	else if [logstash][msgparser][id] == "msgParserId263" {
		dissect {
			mapping => { "message" => "Client %{smacaddr} may be using an incorrect PSK" }
			id => "msgParserId263"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId264
	# line in RSA: <fld5> CCX IE received from client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId264" {
		dissect {
			mapping => { "message" => "%{fld5} CCX IE received from client %{smacaddr}" }
			id => "msgParserId264"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId265
	# line in RSA: Invalid EAPOL packet type <fld5> received from client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId265" {
		dissect {
			mapping => { "message" => "Invalid EAPOL packet type %{fld5} received from client %{smacaddr}" }
			id => "msgParserId265"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId266
	# line in RSA: <fld5> SFA IE received from client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId266" {
		dissect {
			mapping => { "message" => "%{fld5} SFA IE received from client %{smacaddr}" }
			id => "msgParserId266"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId267
	# line in RSA: Received short EAP Attribute for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId267" {
		dissect {
			mapping => { "message" => "Received short EAP Attribute for client %{smacaddr}" }
			id => "msgParserId267"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId268
	# line in RSA: Received unknown AVP <fld5> for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId268" {
		dissect {
			mapping => { "message" => "Received unknown AVP %{fld5} for client %{smacaddr}" }
			id => "msgParserId268"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId269
	# line in RSA: Unable to send EAPOL-key - buffer is too small; <fld5>, client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId269" {
		dissect {
			mapping => { "message" => "Unable to send EAPOL-key - buffer is too small; %{fld5}, client %{smacaddr}" }
			id => "msgParserId269"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId270
	# line in RSA: Truncated user name from <fld5> characters for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId270" {
		dissect {
			mapping => { "message" => "Truncated user name from %{fld5} characters for client %{smacaddr}" }
			id => "msgParserId270"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId271
	# line in RSA: Received unknown EAPOL key descriptor <fld5>
	else if [logstash][msgparser][id] == "msgParserId271" {
		dissect {
			mapping => { "message" => "Received unknown EAPOL key descriptor %{fld5}" }
			id => "msgParserId271"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId272
	# line in RSA: Authentication rejected for user <username> - user may already be logged in
	else if [logstash][msgparser][id] == "msgParserId272" {
		dissect {
			mapping => { "message" => "Authentication rejected for user %{username} - user may already be logged in" }
			id => "msgParserId272"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId273
	# line in RSA: Authentication rejected for user <username> - max number of users (<fld5>) exceeded
	else if [logstash][msgparser][id] == "msgParserId273" {
		dissect {
			mapping => { "message" => "Authentication rejected for user %{username} - max number of users (%{fld5}) exceeded" }
			id => "msgParserId273"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId274
	# line in RSA:  Couldnt Validate the replay counter in packet. <reason>.Got:<portname>.Expected:<fld11>.Mobile:<saddr>
	else if [logstash][msgparser][id] == "msgParserId274" {
		dissect {
			mapping => { "message" => "Couldnt Validate the replay counter in packet. %{reason}.Got:%{portname}.Expected:%{fld11}.Mobile:%{saddr}" }
			id => "msgParserId274"
			add_field => {
				"action" => "Couldnt Validate the replay counter in packet"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId275
	# line in RSA: WARP association for <macaddr> updated; <fld5>
	else if [logstash][msgparser][id] == "msgParserId275" {
		dissect {
			mapping => { "message" => "WARP association for %{macaddr} updated; %{fld5}" }
			id => "msgParserId275"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId276
	# line in RSA: TKIP MIC errors reported in EAPOL key msg from client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId276" {
		dissect {
			mapping => { "message" => "TKIP MIC errors reported in EAPOL key msg from client %{smacaddr}" }
			id => "msgParserId276"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId277
	# line in RSA:  Unable to send EAPOL-key msg { to client  - | - } <reason> (<code>) { for client | - client } <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId277" {
		grok {
			match => { "message" => "^[\s]*Unable[\s]+to[\s]+send[\s]+EAPOL\-key[\s]+msg[\s]+([\s]*to[\s]+client[\s]+\-[\s]+|[\s]*\-[\s]+)[\s]+(?<reason>[^\s]*)[\s]+\((?<code>[^\)]*)\)[\s]+([\s]*for[\s]+client[\s]+|[\s]*\-[\s]+client[\s]+)[\s]+(?<smacaddr>.*)$" }
			id => "msgParserId277"
			add_field => {
				"event_description" => "Unable to send EAPOL-key msg"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId278
	# line in RSA:  STA <fld81> [<saddr>, <shost>] ARP (op <ntype>) received with invalid SPA <reason>
	else if [logstash][msgparser][id] == "msgParserId278" {
		dissect {
			mapping => { "message" => "STA %{fld81} [%{saddr}, %{shost}] ARP (op %{ntype}) received with invalid SPA %{reason}" }
			id => "msgParserId278"
			add_field => {
				"action" => "STA ARP received with invalid SPA"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId279
	# line in RSA:  MAC entry (<saddr>) received for timeout is INVALID. <reason>.
	else if [logstash][msgparser][id] == "msgParserId279" {
		dissect {
			mapping => { "message" => "MAC entry (%{saddr}) received for timeout is INVALID. %{reason}." }
			id => "msgParserId279"
			add_field => {
				"action" => "MAC entry received for timeout is INVALID"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId280
	# line in RSA: IOS Proc shim: Unable to enqueue message to proc
	else if [logstash][msgparser][id] == "msgParserId280" {
		dissect {
			mapping => { "message" => "IOS Proc shim: Unable to enqueue message to proc" }
			id => "msgParserId280"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId281
	# line in RSA: EAP global process Queue not enabled!
	else if [logstash][msgparser][id] == "msgParserId281" {
		dissect {
			mapping => { "message" => "EAP global process Queue not enabled!" }
			id => "msgParserId281"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId282
	# line in RSA: Cannot init timer
	else if [logstash][msgparser][id] == "msgParserId282" {
		dissect {
			mapping => { "message" => "Cannot init timer" }
			id => "msgParserId282"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId283
	# line in RSA: osapiFsWrite failed on <info>.
	else if [logstash][msgparser][id] == "msgParserId283" {
		dissect {
			mapping => { "message" => "osapiFsWrite failed on %{info}." }
			id => "msgParserId283"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId284
	# line in RSA: Cannot deliver timer message to emt task!.
	else if [logstash][msgparser][id] == "msgParserId284" {
		dissect {
			mapping => { "message" => "Cannot deliver timer message to emt task!." }
			id => "msgParserId284"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId285
	# line in RSA: Cannot deliver enable/disable message to emt task!.
	else if [logstash][msgparser][id] == "msgParserId285" {
		dissect {
			mapping => { "message" => "Cannot deliver enable/disable message to emt task!." }
			id => "msgParserId285"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId286
	# line in RSA: Out of System buffers.
	else if [logstash][msgparser][id] == "msgParserId286" {
		dissect {
			mapping => { "message" => "Out of System buffers." }
			id => "msgParserId286"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId287
	# line in RSA: Unable to allocate semaphore.
	else if [logstash][msgparser][id] == "msgParserId287" {
		dissect {
			mapping => { "message" => "Unable to allocate semaphore." }
			id => "msgParserId287"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId288
	# line in RSA: Failed to Create EMT Task..
	else if [logstash][msgparser][id] == "msgParserId288" {
		dissect {
			mapping => { "message" => "Failed to Create EMT Task.." }
			id => "msgParserId288"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId289
	# line in RSA: Did not initialize array ptable_entry_count correctly !.
	else if [logstash][msgparser][id] == "msgParserId289" {
		dissect {
			mapping => { "message" => "Did not initialize array ptable_entry_count correctly !." }
			id => "msgParserId289"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId290
	# line in RSA: Did not initialize array ptable correctly !.
	else if [logstash][msgparser][id] == "msgParserId290" {
		dissect {
			mapping => { "message" => "Did not initialize array ptable correctly !." }
			id => "msgParserId290"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId291
	# line in RSA: Failed to create EMT Hello Timer
	else if [logstash][msgparser][id] == "msgParserId291" {
		dissect {
			mapping => { "message" => "Failed to create EMT Hello Timer" }
			id => "msgParserId291"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId292
	# line in RSA: EMT Task: Received unsupported message.
	else if [logstash][msgparser][id] == "msgParserId292" {
		dissect {
			mapping => { "message" => "EMT Task: Received unsupported message." }
			id => "msgParserId292"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId293
	# line in RSA: Detecting an attack from <info>. Disconnecting
	else if [logstash][msgparser][id] == "msgParserId293" {
		dissect {
			mapping => { "message" => "Detecting an attack from %{info}. Disconnecting" }
			id => "msgParserId293"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId294
	# line in RSA: Received too many Http buffers from a session. <info>. Aborting session.
	else if [logstash][msgparser][id] == "msgParserId294" {
		dissect {
			mapping => { "message" => "Received too many Http buffers from a session. %{info}. Aborting session." }
			id => "msgParserId294"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId295
	# line in RSA: Unable to find Web Authentication Certificate. <info>.
	else if [logstash][msgparser][id] == "msgParserId295" {
		dissect {
			mapping => { "message" => "Unable to find Web Authentication Certificate. %{info}." }
			id => "msgParserId295"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId296
	# line in RSA: CLI output has been truncated. Line no: <info>.
	else if [logstash][msgparser][id] == "msgParserId296" {
		dissect {
			mapping => { "message" => "CLI output has been truncated. Line no: %{info}." }
			id => "msgParserId296"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId297
	# line in RSA: An incoming connection has been rejected. <info>.
	else if [logstash][msgparser][id] == "msgParserId297" {
		dissect {
			mapping => { "message" => "An incoming connection has been rejected. %{info}." }
			id => "msgParserId297"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId298
	# line in RSA: Closing serial console connection.
	else if [logstash][msgparser][id] == "msgParserId298" {
		dissect {
			mapping => { "message" => "Closing serial console connection." }
			id => "msgParserId298"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId299
	# line in RSA: Form submit action failed. <info>.
	else if [logstash][msgparser][id] == "msgParserId299" {
		dissect {
			mapping => { "message" => "Form submit action failed. %{info}." }
			id => "msgParserId299"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId300
	# line in RSA: Unable to get socket name. Error: <info>.
	else if [logstash][msgparser][id] == "msgParserId300" {
		dissect {
			mapping => { "message" => "Unable to get socket name. Error: %{info}." }
			id => "msgParserId300"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId301
	# line in RSA:  { Login failed for the user:<username>. | Login failed. User:<username>. } <reason>.
	else if [logstash][msgparser][id] == "msgParserId301" {
		grok {
			match => { "message" => "^[\s]*([\s]*Login[\s]+failed[\s]+for[\s]+the[\s]+user:(?<username>[^\.]*)\.[\s]+|[\s]*Login[\s]+failed\.[\s]+User:(?<username>[^\.]*)\.[\s]+)[\s]+(?<reason>[^\.]*)\.$" }
			id => "msgParserId301"
			add_field => {
				"action" => "Login Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId302
	# line in RSA: Failed to receive a web request. <info>.
	else if [logstash][msgparser][id] == "msgParserId302" {
		dissect {
			mapping => { "message" => "Failed to receive a web request. %{info}." }
			id => "msgParserId302"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId303
	# line in RSA: http request should begin with a character
	else if [logstash][msgparser][id] == "msgParserId303" {
		dissect {
			mapping => { "message" => "http request should begin with a character" }
			id => "msgParserId303"
			add_field => {
				"event_description" => "http request should begin with a character"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId304
	# line in RSA: parser exited. client mac=<smacaddr> bytes parsed = <fld1> and bytes read = <rbytes>
	else if [logstash][msgparser][id] == "msgParserId304" {
		dissect {
			mapping => { "message" => "parser exited. client mac=%{smacaddr} bytes parsed = %{fld1} and bytes read = %{rbytes}" }
			id => "msgParserId304"
			add_field => {
				"event_description" => "parser exited"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId305
	# line in RSA: unknown http method encountered
	else if [logstash][msgparser][id] == "msgParserId305" {
		dissect {
			mapping => { "message" => "unknown http method encountered" }
			id => "msgParserId305"
			add_field => {
				"event_description" => "unknown http method encountered"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId306
	# line in RSA: http request is not GET
	else if [logstash][msgparser][id] == "msgParserId306" {
		dissect {
			mapping => { "message" => "http request is not GET" }
			id => "msgParserId306"
			add_field => {
				"event_description" => "http request is not GET"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId307
	# line in RSA:  System is rebooting in 5 seconds: <reason>
	else if [logstash][msgparser][id] == "msgParserId307" {
		dissect {
			mapping => { "message" => "System is rebooting in 5 seconds: %{reason}" }
			id => "msgParserId307"
			add_field => {
				"event_description" => "System is rebooting in 5 seconds"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId308
	# line in RSA:  Ethernet over IP pkt too short; <reason>
	else if [logstash][msgparser][id] == "msgParserId308" {
		dissect {
			mapping => { "message" => "Ethernet over IP pkt too short; %{reason}" }
			id => "msgParserId308"
			add_field => {
				"event_description" => "Ethernet over IP pkt too short"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId309
	# line in RSA:  Recv Ethernet over IP ping from <saddr>, not from a mobility peer
	else if [logstash][msgparser][id] == "msgParserId309" {
		dissect {
			mapping => { "message" => "Recv Ethernet over IP ping from %{saddr}, not from a mobility peer" }
			id => "msgParserId309"
			add_field => {
				"event_description" => "Received Ethernet over IP ping from address that was not a mobility peer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId310
	# line in RSA: Duplicate non-deterministic RNG output. Auto-seeding...
	else if [logstash][msgparser][id] == "msgParserId310" {
		dissect {
			mapping => { "message" => "Duplicate non-deterministic RNG output. Auto-seeding..." }
			id => "msgParserId310"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId311
	# line in RSA: Duplicate FIPS 186-2 RNG output. Auto-seeding...
	else if [logstash][msgparser][id] == "msgParserId311" {
		dissect {
			mapping => { "message" => "Duplicate FIPS 186-2 RNG output. Auto-seeding..." }
			id => "msgParserId311"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId312
	# line in RSA: Unable to load configuration.
	else if [logstash][msgparser][id] == "msgParserId312" {
		dissect {
			mapping => { "message" => "Unable to load configuration." }
			id => "msgParserId312"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId313
	# line in RSA: Unable to set FIPS prerequisite mode because it is already <info>.
	else if [logstash][msgparser][id] == "msgParserId313" {
		dissect {
			mapping => { "message" => "Unable to set FIPS prerequisite mode because it is already %{info}." }
			id => "msgParserId313"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId314
	# line in RSA: FIPS 186-2 Seed matches Seed Key. Auto-seeding...
	else if [logstash][msgparser][id] == "msgParserId314" {
		dissect {
			mapping => { "message" => "FIPS 186-2 Seed matches Seed Key. Auto-seeding..." }
			id => "msgParserId314"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId315
	# line in RSA: Unable to reset the system key. <info>.
	else if [logstash][msgparser][id] == "msgParserId315" {
		dissect {
			mapping => { "message" => "Unable to reset the system key. %{info}." }
			id => "msgParserId315"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId316
	# line in RSA: Unable to reset the AP key. <info>.
	else if [logstash][msgparser][id] == "msgParserId316" {
		dissect {
			mapping => { "message" => "Unable to reset the AP key. %{info}." }
			id => "msgParserId316"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId317
	# line in RSA: Invalid ipv6 address <fld1>, failed to do data gleaning.
	else if [logstash][msgparser][id] == "msgParserId317" {
		dissect {
			mapping => { "message" => "Invalid ipv6 address %{fld1}, failed to do data gleaning." }
			id => "msgParserId317"
			add_field => {
				"event_description" => "Invalid ipv6 address failed to do data gleaning"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId318
	# line in RSA: LOCAL-AUTH(SHIM): Received peer cert too big (size <info>)
	else if [logstash][msgparser][id] == "msgParserId318" {
		dissect {
			mapping => { "message" => "LOCAL-AUTH(SHIM): Received peer cert too big (size %{info})" }
			id => "msgParserId318"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId319
	# line in RSA: OPSSL_PARSER: Received a NULL ctx in verify callback
	else if [logstash][msgparser][id] == "msgParserId319" {
		dissect {
			mapping => { "message" => "OPSSL_PARSER: Received a NULL ctx in verify callback" }
			id => "msgParserId319"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId320
	# line in RSA: LOCAL-AUTH(SHIM): Unable to decode peer device cert for session <info>
	else if [logstash][msgparser][id] == "msgParserId320" {
		dissect {
			mapping => { "message" => "LOCAL-AUTH(SHIM): Unable to decode peer device cert for session %{info}" }
			id => "msgParserId320"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId321
	# line in RSA: LOCAL-AUTH(SHIM): Unable to retrieve peer device cert for session <info>
	else if [logstash][msgparser][id] == "msgParserId321" {
		dissect {
			mapping => { "message" => "LOCAL-AUTH(SHIM): Unable to retrieve peer device cert for session %{info}" }
			id => "msgParserId321"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId322
	# line in RSA: LOCAL-AUTH: Peer cert (user <username>) failed <info> check
	else if [logstash][msgparser][id] == "msgParserId322" {
		dissect {
			mapping => { "message" => "LOCAL-AUTH: Peer cert (user %{username}) failed %{info} check" }
			id => "msgParserId322"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId323
	# line in RSA: OPSSL_PARSER: Received a zero len cert from peer for session <info>
	else if [logstash][msgparser][id] == "msgParserId323" {
		dissect {
			mapping => { "message" => "OPSSL_PARSER: Received a zero len cert from peer for session %{info}" }
			id => "msgParserId323"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "LOG-1-Q_IND" {
		# MESSAGE LOG-1-Q_IND:03
		# line in RSA:  Unable to create username <username> for mobile<smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to create username %{username} for mobile%{smacaddr}" }
				id => "message-LOG-1-Q_IND:03"
				add_field => {
				"event_description" => "Unable to create username"
					"[event][id]" => "LOG-1-Q_IND:03"
					"[rsa][message][id1]" => "LOG-1-Q_IND:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-1-Q_IND:02
		# line in RSA:  Received EAPOL-key message while in invalid state (<code>) - version <version>, type <ntype>, descriptor <fld1>, client <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received EAPOL-key message while in invalid state (%{code}) - version %{version}, type %{ntype}, descriptor %{fld1}, client %{smacaddr}" }
				id => "message-LOG-1-Q_IND:02"
				add_field => {
				"event_description" => "Received EAPOL-key message while in invalid state"
					"[event][id]" => "LOG-1-Q_IND:02"
					"[rsa][message][id1]" => "LOG-1-Q_IND:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-1-Q_IND
		# line in RSA:  Could not process the RSN and WARP IEs. station not using WPA or WPA2 on WLAN requiring WPA and/or WPA2.MobileStation: <smacaddr>, SSID:<ssid>,AP: <access_point>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not process the RSN and WARP IEs. station not using WPA or WPA2 on WLAN requiring WPA and/or WPA2.MobileStation: %{smacaddr}, SSID:%{ssid},AP: %{access_point}." }
				id => "message-LOG-1-Q_IND"
				add_field => {
					"[event][id]" => "LOG-1-Q_IND"
					"[rsa][message][id1]" => "LOG-1-Q_IND"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-1-Q_IND:01
		# line in RSA:  Invalid authentication sequence <fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Invalid authentication sequence %{fld20}" }
				id => "message-LOG-1-Q_IND:01"
				add_field => {
					"[event][id]" => "LOG-1-Q_IND:01"
					"[rsa][message][id1]" => "LOG-1-Q_IND:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-1-Q_IND:04
		# line in RSA: Network device with mac addr<macaddr>using IP address of local interface '<interface>'.<saddr>- Received ARP Request on interface<fld1>with vlan ID<vlan>. <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Network device with mac addr%{macaddr}using IP address of local interface '%{interface}'.%{saddr}- Received ARP Request on interface%{fld1}with vlan ID%{vlan}. %{result}" }
				id => "message-LOG-1-Q_IND:04"
				add_field => {
				"event_description" => "IP conflict detected"
					"[event][id]" => "LOG-1-Q_IND:04"
					"[rsa][message][id1]" => "LOG-1-Q_IND:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "LOG-3-Q_IND" {
		# MESSAGE LOG-3-Q_IND
		# line in RSA: Unable to add an ARP entry for <saddr> to the network processor. entry does not <fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to add an ARP entry for %{saddr} to the network processor. entry does not %{fld20}" }
				id => "message-LOG-3-Q_IND"
				add_field => {
					"[event][id]" => "LOG-3-Q_IND"
					"[rsa][message][id1]" => "LOG-3-Q_IND"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-3-Q_IND:01
		# line in RSA: Failed to receive a PDU. <fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to receive a PDU. %{fld20}" }
				id => "message-LOG-3-Q_IND:01"
				add_field => {
					"[event][id]" => "LOG-3-Q_IND:01"
					"[rsa][message][id1]" => "LOG-3-Q_IND:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-3-Q_IND:02
		# line in RSA: Unable to process 802.1X 1 msg - client <smacaddr> not found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to process 802.1X 1 msg - client %{smacaddr} not found" }
				id => "message-LOG-3-Q_IND:02"
				add_field => {
					"[event][id]" => "LOG-3-Q_IND:02"
					"[rsa][message][id1]" => "LOG-3-Q_IND:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-3-Q_IND:03
		# line in RSA: Received invalid EAPOL-key M2 msg in START state - invalid secure bit; len 24, key type 1, client <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received invalid EAPOL-key M2 msg in START state - invalid secure bit; len 24, key type 1, client %{smacaddr}" }
				id => "message-LOG-3-Q_IND:03"
				add_field => {
					"[event][id]" => "LOG-3-Q_IND:03"
					"[rsa][message][id1]" => "LOG-3-Q_IND:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-3-Q_IND:04
		# line in RSA: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-LOG-3-Q_IND:04"
				add_field => {
					"[event][id]" => "LOG-3-Q_IND:04"
					"[rsa][message][id1]" => "LOG-3-Q_IND:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "LOG-4-Q_IND" {
		# MESSAGE LOG-4-Q_IND:12
		# line in RSA:  Failed to add the rogue AP <macaddr>. <reason>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to add the rogue AP %{macaddr}. %{reason}." }
				id => "message-LOG-4-Q_IND:12"
				add_field => {
				"event_description" => "Failed to add the rogue AP"
					"[event][id]" => "LOG-4-Q_IND:12"
					"[rsa][message][id1]" => "LOG-4-Q_IND:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:10
		# line in RSA:  Could not update rogue AP <macaddr> with rogue client <smacaddr> information. <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not update rogue AP %{macaddr} with rogue client %{smacaddr} information. %{reason}" }
				id => "message-LOG-4-Q_IND:10"
				add_field => {
				"event_description" => "Could not update rogue AP with rogue client information"
					"[event][id]" => "LOG-4-Q_IND:10"
					"[rsa][message][id1]" => "LOG-4-Q_IND:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:09
		# line in RSA:  Unable to get the dhcp relay server's ip address
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to get the dhcp relay server's ip address" }
				id => "message-LOG-4-Q_IND:09"
				add_field => {
				"event_description" => "Unable to get the dhcp relay server's ip address"
					"[event][id]" => "LOG-4-Q_IND:09"
					"[rsa][message][id1]" => "LOG-4-Q_IND:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:08
		# line in RSA:  STA(Target MAC Address) [<macaddr>, <hostip>] ARP (<action>) received with invalid SPA(Source IP Address) <saddr>/TPA(Destination IP Address) <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "STA(Target MAC Address) [%{macaddr}, %{hostip}] ARP (%{action}) received with invalid SPA(Source IP Address) %{saddr}/TPA(Destination IP Address) %{daddr}" }
				id => "message-LOG-4-Q_IND:08"
				add_field => {
				"event_description" => "ARP received with invalid SPA IP Address"
					"[event][id]" => "LOG-4-Q_IND:08"
					"[rsa][message][id1]" => "LOG-4-Q_IND:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:07
		# line in RSA:  Failed to send a message to the message queue object: <obj_name>.<reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to send a message to the message queue object: %{obj_name}.%{reason}" }
				id => "message-LOG-4-Q_IND:07"
				add_field => {
				"event_description" => "Failed to send a message to the message queue object"
					"[event][id]" => "LOG-4-Q_IND:07"
					"[rsa][message][id1]" => "LOG-4-Q_IND:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:06
		# line in RSA:  Failed to delete PMK cache entry for station <macaddr> with request from controller <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to delete PMK cache entry for station %{macaddr} with request from controller %{hostip}" }
				id => "message-LOG-4-Q_IND:06"
				add_field => {
				"event_description" => "Failed to delete PMK cache entry for station with request from controller"
					"[event][id]" => "LOG-4-Q_IND:06"
					"[rsa][message][id1]" => "LOG-4-Q_IND:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:05
		# line in RSA:  Could not process 802.11 Action. <reason>(<info>) from client. Mobile:<smacaddr>, Category:<sigcat>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not process 802.11 Action. %{reason}(%{info}) from client. Mobile:%{smacaddr}, Category:%{sigcat}." }
				id => "message-LOG-4-Q_IND:05"
				add_field => {
				"event_description" => "Could not process 802.11 Action"
					"[event][id]" => "LOG-4-Q_IND:05"
					"[rsa][message][id1]" => "LOG-4-Q_IND:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:04
		# line in RSA:  sysnet unable to process packet with encap type <protocol_detail> { [<info>] | <info> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*sysnet[\s]+unable[\s]+to[\s]+process[\s]+packet[\s]+with[\s]+encap[\s]+type[\s]+(?<protocol_detail>[^\s]*)[\s]+([\s]*\[(?<info>[^\]]*)\][\s]+|[\s]*(?<info>[^\s]*)[\s]+)$" }
				id => "message-LOG-4-Q_IND:04"
				add_field => {
				"event_description" => "sysnet unable to process packet"
					"[event][id]" => "LOG-4-Q_IND:04"
					"[rsa][message][id1]" => "LOG-4-Q_IND:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:03
		# line in RSA:  Could not Register IP Add on MSCB. <reason>. Address:<macaddr> { [<info>] | <info> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Could[\s]+not[\s]+Register[\s]+IP[\s]+Add[\s]+on[\s]+MSCB\.[\s]+(?<reason>[^\.]*)\.[\s]+Address:(?<macaddr>[^\s]*)[\s]+([\s]*\[(?<info>[^\]]*)\][\s]+|[\s]*(?<info>[^\s]*)[\s]+)$" }
				id => "message-LOG-4-Q_IND:03"
				add_field => {
				"event_description" => "Could not Register IP Add on MSCB"
					"[event][id]" => "LOG-4-Q_IND:03"
					"[rsa][message][id1]" => "LOG-4-Q_IND:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:02
		# line in RSA:  Failed to process an association request from <macaddr>. WLAN:<wlan>, SSID:<ssid>. <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to process an association request from %{macaddr}. WLAN:%{wlan}, SSID:%{ssid}. %{reason}" }
				id => "message-LOG-4-Q_IND:02"
				add_field => {
				"event_description" => "Failed to process an association request"
					"[event][id]" => "LOG-4-Q_IND:02"
					"[rsa][message][id1]" => "LOG-4-Q_IND:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:01
		# line in RSA:  Unhandled debug module <obj_name>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unhandled debug module %{obj_name}." }
				id => "message-LOG-4-Q_IND:01"
				add_field => {
				"event_description" => "Unhandled debug module"
					"[event][id]" => "LOG-4-Q_IND:01"
					"[rsa][message][id1]" => "LOG-4-Q_IND:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND
		# line in RSA:  Received a packet without a requested ip
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received a packet without a requested ip" }
				id => "message-LOG-4-Q_IND"
				add_field => {
				"event_description" => "Received a packet without a requested ip"
					"[event][id]" => "LOG-4-Q_IND"
					"[rsa][message][id1]" => "LOG-4-Q_IND"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:11
		# line in RSA:  Cannot find apgroup <group> for AP <macaddr>. <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Cannot find apgroup %{group} for AP %{macaddr}. %{reason}" }
				id => "message-LOG-4-Q_IND:11"
				add_field => {
				"event_description" => "Cannot find apgroup none or standard for AP"
					"[event][id]" => "LOG-4-Q_IND:11"
					"[rsa][message][id1]" => "LOG-4-Q_IND:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:13
		# line in RSA:  DHCP Lease could not be allocated to the {client[...It occurred <fld1> times.!]|client}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DHCP[\s]+Lease[\s]+could[\s]+not[\s]+be[\s]+allocated[\s]+to[\s]+the[\s]+(client\[\.\.\.It[\s]+occurred[\s]+(?<fld1>[^\s]*)[\s]+times\.!\]|client)$" }
				id => "message-LOG-4-Q_IND:13"
				add_field => {
				"event_description" => "DHCP Lease could not be allocated to the client"
					"[event][id]" => "LOG-4-Q_IND:13"
					"[rsa][message][id1]" => "LOG-4-Q_IND:13"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:14
		# line in RSA:  Recv ARP Request with source IP as <fld1> Marking for Duplicate Addr Detection.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Recv ARP Request with source IP as %{fld1} Marking for Duplicate Addr Detection." }
				id => "message-LOG-4-Q_IND:14"
				add_field => {
				"event_description" => "Marking for Duplicate Addr Detection"
					"[event][id]" => "LOG-4-Q_IND:14"
					"[rsa][message][id1]" => "LOG-4-Q_IND:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:15
		# line in RSA: Unable to contain rogue<macaddr>-<result>.<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to contain rogue%{macaddr}-%{result}.%{info}" }
				id => "message-LOG-4-Q_IND:15"
				add_field => {
				"event_description" => "Unable to contain rogue"
					"[event][id]" => "LOG-4-Q_IND:15"
					"[rsa][message][id1]" => "LOG-4-Q_IND:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:16
		# line in RSA: Could not Register IP Add on MSCB.<result>. mobility state, <fld1> and client state, APF_MS_STATE_ASSOCIATEDaddress:{<macaddr>[<info>]|<macaddr>[<info>|<macaddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Could[\s]+not[\s]+Register[\s]+IP[\s]+Add[\s]+on[\s]+MSCB\.(?<result>[^\.]*)\.[\s]+mobility[\s]+state,[\s]+(?<fld1>[^\s]*)[\s]+and[\s]+client[\s]+state,[\s]+APF_MS_STATE_ASSOCIATEDaddress:((?<macaddr>[^\[]*)\[(?<info>[^\]]*)\]|(?<macaddr>[^\[]*)\[(?<info>.*)|(?<macaddr>.*))$" }
				id => "message-LOG-4-Q_IND:16"
				add_field => {
				"event_description" => "Could not Register IP Add on MSCB."
					"[event][id]" => "LOG-4-Q_IND:16"
					"[rsa][message][id1]" => "LOG-4-Q_IND:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:17
		# line in RSA: No Entry in Mobility DB for MAC:{<macaddr>[<info>]|<macaddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^No[\s]+Entry[\s]+in[\s]+Mobility[\s]+DB[\s]+for[\s]+MAC:((?<macaddr>[^\[]*)\[(?<info>[^\]]*)\]|(?<macaddr>.*))$" }
				id => "message-LOG-4-Q_IND:17"
				add_field => {
				"event_description" => "No Entry in Mobility DB for MAC"
					"[event][id]" => "LOG-4-Q_IND:17"
					"[rsa][message][id1]" => "LOG-4-Q_IND:17"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:18
		# line in RSA: Ignoring Primary discovery request received on non-management interface (<interface>) from AP<macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Ignoring Primary discovery request received on non-management interface (%{interface}) from AP%{macaddr}" }
				id => "message-LOG-4-Q_IND:18"
				add_field => {
				"event_description" => "Ignoring Primary discovery request received on non-management interface"
					"[event][id]" => "LOG-4-Q_IND:18"
					"[rsa][message][id1]" => "LOG-4-Q_IND:18"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:19
		# line in RSA: All retries for packet Export Anchor Request to<saddr>failed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "All retries for packet Export Anchor Request to%{saddr}failed." }
				id => "message-LOG-4-Q_IND:19"
				add_field => {
				"action" => "All retries for packet Export Anchor Request to IP failed"
					"[event][id]" => "LOG-4-Q_IND:19"
					"[rsa][message][id1]" => "LOG-4-Q_IND:19"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:20
		# line in RSA: The system detects an invalid AP(<macaddr>) event (<event_type>) and state (<event_state>) combination
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system detects an invalid AP(%{macaddr}) event (%{event_type}) and state (%{event_state}) combination" }
				id => "message-LOG-4-Q_IND:20"
				add_field => {
				"event_description" => "invalid AP event and state combination"
					"[event][id]" => "LOG-4-Q_IND:20"
					"[rsa][message][id1]" => "LOG-4-Q_IND:20"
					"[event][categoryid]" => "1603040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:22
		# line in RSA: Ignoring discovery request received on a wrong VLAN (<vlan>) on interface (<interface>) from AP<macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Ignoring discovery request received on a wrong VLAN (%{vlan}) on interface (%{interface}) from AP%{macaddr}" }
				id => "message-LOG-4-Q_IND:22"
				add_field => {
				"event_description" => "Ignoring discovery request received on a wrong VLAN"
					"[event][id]" => "LOG-4-Q_IND:22"
					"[rsa][message][id1]" => "LOG-4-Q_IND:22"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:23
		# line in RSA: Subnet mismatches while registering IP address<saddr>with netmask<smask>for client<smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Subnet mismatches while registering IP address%{saddr}with netmask%{smask}for client%{smacaddr}" }
				id => "message-LOG-4-Q_IND:23"
				add_field => {
				"event_description" => "Subnet mismatches while registering IP address"
					"[event][id]" => "LOG-4-Q_IND:23"
					"[rsa][message][id1]" => "LOG-4-Q_IND:23"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:25
		# line in RSA: TACACS+ server switchover {failed as there is no other server active|failed}. Current server is <saddr> (port:<sport>)[<info>] 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^TACACS\+[\s]+server[\s]+switchover[\s]+(failed[\s]+as[\s]+there[\s]+is[\s]+no[\s]+other[\s]+server[\s]+active|failed)\.[\s]+Current[\s]+server[\s]+is[\s]+(?<saddr>[^\s]*)[\s]+\(port:(?<sport>[^\)]*)\)\[(?<info>[^\]]*)\][\s]+$" }
				id => "message-LOG-4-Q_IND:25"
				add_field => {
				"event_description" => "server switchover failed"
					"[event][id]" => "LOG-4-Q_IND:25"
					"[rsa][message][id1]" => "LOG-4-Q_IND:25"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-4-Q_IND:26
		# line in RSA: Remote client closed connection (bytes read=<bytes>, errno=<resultcode>).<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Remote client closed connection (bytes read=%{bytes}, errno=%{resultcode}).%{info}" }
				id => "message-LOG-4-Q_IND:26"
				add_field => {
				"event_description" => "Remote client closed connection"
					"[event][id]" => "LOG-4-Q_IND:26"
					"[rsa][message][id1]" => "LOG-4-Q_IND:26"
					"[event][categoryid]" => "1801030000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE LOG-4-Q_IND:24
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-LOG-4-Q_IND:24"
				add_field => {
					"[event][id]" => "LOG-4-Q_IND:24"
					"[rsa][message][id1]" => "LOG-4-Q_IND:24"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "LOG-5-Q_IND" {
		# MESSAGE LOG-5-Q_IND:01
		# line in RSA:  Failed to release a mutual exclusion object. { mutex unlock failed, <reason>. | <reason>. }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Failed[\s]+to[\s]+release[\s]+a[\s]+mutual[\s]+exclusion[\s]+object\.[\s]+([\s]*mutex[\s]+unlock[\s]+failed,[\s]+(?<reason>[^\.]*)\.[\s]+|[\s]*(?<reason>[^\.]*)\.[\s]+)$" }
				id => "message-LOG-5-Q_IND:01"
				add_field => {
				"event_description" => "mutex unlock failed"
					"[event][id]" => "LOG-5-Q_IND:01"
					"[rsa][message][id1]" => "LOG-5-Q_IND:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-5-Q_IND
		# line in RSA:  Failed to retrive <fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to retrive %{fld20}" }
				id => "message-LOG-5-Q_IND"
				add_field => {
					"[event][id]" => "LOG-5-Q_IND"
					"[rsa][message][id1]" => "LOG-5-Q_IND"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-5-Q_IND:02
		# line in RSA: Controller is connecting to Tacacs server IP:<daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Controller is connecting to Tacacs server IP:%{daddr}" }
				id => "message-LOG-5-Q_IND:02"
				add_field => {
				"event_description" => "Controller is connecting to Tacacs server"
					"[event][id]" => "LOG-5-Q_IND:02"
					"[rsa][message][id1]" => "LOG-5-Q_IND:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "LOG-6-Q_IND" {
		# MESSAGE LOG-6-Q_IND:07
		# line in RSA:  Record ignored - {<reason>. [<info>]|<reason>.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Record[\s]+ignored[\s]+\-[\s]+((?<reason>[^\.]*)\.[\s]+\[(?<info>[^\]]*)\]|(?<reason>[^\.]*)\.)$" }
				id => "message-LOG-6-Q_IND:07"
				add_field => {
				"event_description" => "Record ignored"
					"[event][id]" => "LOG-6-Q_IND:07"
					"[rsa][message][id1]" => "LOG-6-Q_IND:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:06
		# line in RSA:  Duplicate record received - <reason>. [<info>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Duplicate record received - %{reason}. [%{info}]" }
				id => "message-LOG-6-Q_IND:06"
				add_field => {
				"event_description" => "Duplicate record received"
					"[event][id]" => "LOG-6-Q_IND:06"
					"[rsa][message][id1]" => "LOG-6-Q_IND:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:05
		# line in RSA:  Username entry (<username>) with length (<fld1>) created for mobile {<smacaddr> [<info>]|<smacaddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Username[\s]+entry[\s]+\((?<username>[^\)]*)\)[\s]+with[\s]+length[\s]+\((?<fld1>[^\)]*)\)[\s]+created[\s]+for[\s]+mobile[\s]+((?<smacaddr>[^\s]*)[\s]+\[(?<info>[^\]]*)\]|(?<smacaddr>.*))$" }
				id => "message-LOG-6-Q_IND:05"
				add_field => {
				"event_description" => "Username entry created for mobile"
					"[event][id]" => "LOG-6-Q_IND:05"
					"[rsa][message][id1]" => "LOG-6-Q_IND:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:04
		# line in RSA:  Information not added to the debugging database for <smacaddr>, Maximum number of AP join information entry supported already exists.[<reason>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Information not added to the debugging database for %{smacaddr}, Maximum number of AP join information entry supported already exists.[%{reason}]" }
				id => "message-LOG-6-Q_IND:04"
				add_field => {
				"event_description" => "Information not added to the debugging database, Maximum number of AP join information entry supported already exists."
					"[event][id]" => "LOG-6-Q_IND:04"
					"[rsa][message][id1]" => "LOG-6-Q_IND:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:03
		# line in RSA:  Discarding <event_type> discovery request in LWAPP from AP <macaddr> supporting CAPWAP
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Discarding %{event_type} discovery request in LWAPP from AP %{macaddr} supporting CAPWAP" }
				id => "message-LOG-6-Q_IND:03"
				add_field => {
				"event_description" => "Discarding discovery request in LWAPP from AP supporting CAPWAP"
					"[event][id]" => "LOG-6-Q_IND:03"
					"[rsa][message][id1]" => "LOG-6-Q_IND:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:02
		# line in RSA:  Radius overrides disabled, { <reason>[<info>] | <reason> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Radius[\s]+overrides[\s]+disabled,[\s]+([\s]*(?<reason>[^\[]*)\[(?<info>[^\]]*)\][\s]+|[\s]*(?<reason>[^\s]*)[\s]+)$" }
				id => "message-LOG-6-Q_IND:02"
				add_field => {
				"event_description" => "Radius overrides disabled"
					"[event][id]" => "LOG-6-Q_IND:02"
					"[rsa][message][id1]" => "LOG-6-Q_IND:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:01
		# line in RSA:  There are no clients in the database.[<info>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "There are no clients in the database.[%{info}]" }
				id => "message-LOG-6-Q_IND:01"
				add_field => {
				"action" => "There are no clients in the database"
					"[event][id]" => "LOG-6-Q_IND:01"
					"[rsa][message][id1]" => "LOG-6-Q_IND:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:09
		# line in RSA: Entry changed A=<fld20> V=<fld21> I=<fld22> P=<fld23> M=<fld24>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Entry changed A=%{fld20} V=%{fld21} I=%{fld22} P=%{fld23} M=%{fld24}" }
				id => "message-LOG-6-Q_IND:09"
				add_field => {
				"action" => "Entry changed"
					"[event][id]" => "LOG-6-Q_IND:09"
					"[rsa][message][id1]" => "LOG-6-Q_IND:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:10
		# line in RSA: Unable to find Mobile <smacaddr> entry in the database, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to find Mobile %{smacaddr} entry in the database, %{info}" }
				id => "message-LOG-6-Q_IND:10"
				add_field => {
				"action" => "Unable to find Mobile"
					"[event][id]" => "LOG-6-Q_IND:10"
					"[rsa][message][id1]" => "LOG-6-Q_IND:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND
		# line in RSA: Could not Process 802.11 MAC mgmt Data. Invalid toDs/fromDs bit set - packet <fld20>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Could not Process 802.11 MAC mgmt Data. Invalid toDs/fromDs bit set - packet %{fld20}" }
				id => "message-LOG-6-Q_IND"
				add_field => {
					"[event][id]" => "LOG-6-Q_IND"
					"[rsa][message][id1]" => "LOG-6-Q_IND"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:08
		# line in RSA: RADIUS {AUTH Server|ACCT Server|server} {<saddr>:<sport> deactivated|<saddr>:<sport> activated|<saddr> <shost>} in global list
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^RADIUS[\s]+(AUTH[\s]+Server|ACCT[\s]+Server|server)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+deactivated|(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+activated|(?<saddr>[^\s]*)[\s]+(?<shost>[^\s]*))[\s]+in[\s]+global[\s]+list$" }
				id => "message-LOG-6-Q_IND:08"
				add_field => {
				"event_description" => "server deactivated in global list"
					"[event][id]" => "LOG-6-Q_IND:08"
					"[rsa][message][id1]" => "LOG-6-Q_IND:08"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:21
		# line in RSA: Remapping interface ID for STA <smacaddr> from <fld1> to <fld2> (<fld3>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Remapping interface ID for STA %{smacaddr} from %{fld1} to %{fld2} (%{fld3})" }
				id => "message-LOG-6-Q_IND:21"
				add_field => {
				"event_description" => "Remapping interface ID for STA"
					"[event][id]" => "LOG-6-Q_IND:21"
					"[rsa][message][id1]" => "LOG-6-Q_IND:21"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:12
		# line in RSA: Unable to add an ARP entry for<saddr>to the operating system.<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unable to add an ARP entry for%{saddr}to the operating system.%{result}" }
				id => "message-LOG-6-Q_IND:12"
				add_field => {
				"event_description" => "Unable to add an ARP entry"
					"[event][id]" => "LOG-6-Q_IND:12"
					"[rsa][message][id1]" => "LOG-6-Q_IND:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-6-Q_IND:11
		# line in RSA: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-LOG-6-Q_IND:11"
				add_field => {
					"[event][id]" => "LOG-6-Q_IND:11"
					"[rsa][message][id1]" => "LOG-6-Q_IND:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "LOG-7-Q_IND" {
		# MESSAGE LOG-7-Q_IND
		# line in RSA:  Unable to find an ACL by name "<domain>". { [<info>] | <info> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Unable[\s]+to[\s]+find[\s]+an[\s]+ACL[\s]+by[\s]+name[\s]+\"(?<domain>[^\"]*)\"\.[\s]+([\s]*\[(?<info>[^\]]*)\][\s]+|[\s]*(?<info>[^\s]*)[\s]+)$" }
				id => "message-LOG-7-Q_IND"
				add_field => {
				"action" => "Unable to find an ACL by name"
					"[event][id]" => "LOG-7-Q_IND"
					"[rsa][message][id1]" => "LOG-7-Q_IND"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LOG-7-Q_IND:01
		# line in RSA:  Failed to get ACE from ACL. <domain>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Failed to get ACE from ACL. %{domain}" }
				id => "message-LOG-7-Q_IND:01"
				add_field => {
				"action" => "Failed to get ACE from ACL"
					"[event][id]" => "LOG-7-Q_IND:01"
					"[rsa][message][id1]" => "LOG-7-Q_IND:01"
					"[event][categoryid]" => "1501050000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId359
	# line in RSA: Could not send AP authorization request
	else if [logstash][msgparser][id] == "msgParserId359" {
		dissect {
			mapping => { "message" => "Could not send AP authorization request" }
			id => "msgParserId359"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId360
	# line in RSA: Invalid AAA state (<info>) for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId360" {
		dissect {
			mapping => { "message" => "Invalid AAA state (%{info}) for AP %{macaddr}" }
			id => "msgParserId360"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId361
	# line in RSA: Unable to add <info>
	else if [logstash][msgparser][id] == "msgParserId361" {
		dissect {
			mapping => { "message" => "Unable to add %{info}" }
			id => "msgParserId361"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId362
	# line in RSA: AP (<macaddr>) is not supported
	else if [logstash][msgparser][id] == "msgParserId362" {
		dissect {
			mapping => { "message" => "AP (%{macaddr}) is not supported" }
			id => "msgParserId362"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId363
	# line in RSA: Failed to download event log from AP <macaddr>. <info>
	else if [logstash][msgparser][id] == "msgParserId363" {
		dissect {
			mapping => { "message" => "Failed to download event log from AP %{macaddr}. %{info}" }
			id => "msgParserId363"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId364
	# line in RSA: Unable to create an entry for AP <macaddr> in the database - <info>
	else if [logstash][msgparser][id] == "msgParserId364" {
		dissect {
			mapping => { "message" => "Unable to create an entry for AP %{macaddr} in the database - %{info}" }
			id => "msgParserId364"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId365
	# line in RSA: Could not delete AP entry , invalid ID <info>
	else if [logstash][msgparser][id] == "msgParserId365" {
		dissect {
			mapping => { "message" => "Could not delete AP entry , invalid ID %{info}" }
			id => "msgParserId365"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId366
	# line in RSA: Unable to remove AP <macaddr> <info>
	else if [logstash][msgparser][id] == "msgParserId366" {
		dissect {
			mapping => { "message" => "Unable to remove AP %{macaddr} %{info}" }
			id => "msgParserId366"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId367
	# line in RSA:  Unable to find AP <saddr> entry in the database, <reason>
	else if [logstash][msgparser][id] == "msgParserId367" {
		dissect {
			mapping => { "message" => "Unable to find AP %{saddr} entry in the database, %{reason}" }
			id => "msgParserId367"
			add_field => {
				"action" => "Unable to find AP entry in the database"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId368
	# line in RSA: Unable to find AP <info>
	else if [logstash][msgparser][id] == "msgParserId368" {
		dissect {
			mapping => { "message" => "Unable to find AP %{info}" }
			id => "msgParserId368"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId369
	# line in RSA: Could not allocate an entry for the AP, database is full
	else if [logstash][msgparser][id] == "msgParserId369" {
		dissect {
			mapping => { "message" => "Could not allocate an entry for the AP, database is full" }
			id => "msgParserId369"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId370
	# line in RSA: Could not execute debug command, command is too long; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId370" {
		dissect {
			mapping => { "message" => "Could not execute debug command, command is too long; AP %{macaddr}" }
			id => "msgParserId370"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId371
	# line in RSA: AP information in the database is invalid
	else if [logstash][msgparser][id] == "msgParserId371" {
		dissect {
			mapping => { "message" => "AP information in the database is invalid" }
			id => "msgParserId371"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId372
	# line in RSA: Could not obtain exclusive access to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId372" {
		dissect {
			mapping => { "message" => "Could not obtain exclusive access to AP %{macaddr}" }
			id => "msgParserId372"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId373
	# line in RSA: Unable to create AP Join information entry for AP:<macaddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId373" {
		dissect {
			mapping => { "message" => "Unable to create AP Join information entry for AP:%{macaddr}, %{info}" }
			id => "msgParserId373"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId374
	# line in RSA: Unable to initialize AP join debugging infrastructure (<info>)
	else if [logstash][msgparser][id] == "msgParserId374" {
		dissect {
			mapping => { "message" => "Unable to initialize AP join debugging infrastructure (%{info})" }
			id => "msgParserId374"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId375
	# line in RSA: Invalid AP join debugging data detected (<info>)
	else if [logstash][msgparser][id] == "msgParserId375" {
		dissect {
			mapping => { "message" => "Invalid AP join debugging data detected (%{info})" }
			id => "msgParserId375"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId376
	# line in RSA: Unable to set system logging host configuration for AP:<macaddr>
	else if [logstash][msgparser][id] == "msgParserId376" {
		dissect {
			mapping => { "message" => "Unable to set system logging host configuration for AP:%{macaddr}" }
			id => "msgParserId376"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId377
	# line in RSA: AP <hostname> reported timeout communicating to controller on data plane.
	else if [logstash][msgparser][id] == "msgParserId377" {
		dissect {
			mapping => { "message" => "AP %{hostname} reported timeout communicating to controller on data plane." }
			id => "msgParserId377"
			add_field => {
				"event_description" => "AP reported timeout communicating to controller on data plane."
				"[logstash][fullDateTimeString]" => "%{event_time_string}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId378
	# line in RSA: AP <hostname> is not being contained on slot <portname>
	else if [logstash][msgparser][id] == "msgParserId378" {
		dissect {
			mapping => { "message" => "AP %{hostname} is not being contained on slot %{portname}" }
			id => "msgParserId378"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId379
	# line in RSA: AP <macaddr> is unable to verify sufficient in-line power, radio slot <portname> is disabled
	else if [logstash][msgparser][id] == "msgParserId379" {
		dissect {
			mapping => { "message" => "AP %{macaddr} is unable to verify sufficient in-line power, radio slot %{portname} is disabled" }
			id => "msgParserId379"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId380
	# line in RSA: AP <macaddr> has verified sufficient in-line power, radio slot <portname> re-enabled
	else if [logstash][msgparser][id] == "msgParserId380" {
		dissect {
			mapping => { "message" => "AP %{macaddr} has verified sufficient in-line power, radio slot %{portname} re-enabled" }
			id => "msgParserId380"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId381
	# line in RSA: Could not register for AP state notification, maximum limit reached
	else if [logstash][msgparser][id] == "msgParserId381" {
		dissect {
			mapping => { "message" => "Could not register for AP state notification, maximum limit reached" }
			id => "msgParserId381"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId382
	# line in RSA: AP <macaddr> is not an H-REAP AP, could not process RADIUS configuration payload
	else if [logstash][msgparser][id] == "msgParserId382" {
		dissect {
			mapping => { "message" => "AP %{macaddr} is not an H-REAP AP, could not process RADIUS configuration payload" }
			id => "msgParserId382"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId383
	# line in RSA: Could not resolve ARP of sniffer server IP address (<saddr>), disabling sniffing on AP <hostname>, slot <portname>
	else if [logstash][msgparser][id] == "msgParserId383" {
		dissect {
			mapping => { "message" => "Could not resolve ARP of sniffer server IP address (%{saddr}), disabling sniffing on AP %{hostname}, slot %{portname}" }
			id => "msgParserId383"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId384
	# line in RSA: Invalid band parameter for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId384" {
		dissect {
			mapping => { "message" => "Invalid band parameter for AP %{macaddr}" }
			id => "msgParserId384"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId385
	# line in RSA:  Big Nav attack detected on AP <saddr>, <reason> (errors <fld6>)
	else if [logstash][msgparser][id] == "msgParserId385" {
		dissect {
			mapping => { "message" => "Big Nav attack detected on AP %{saddr}, %{reason} (errors %{fld6})" }
			id => "msgParserId385"
			add_field => {
				"action" => "Big Nav attack detected on AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId386
	# line in RSA: Received unexpected CCX Linktest report message from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId386" {
		dissect {
			mapping => { "message" => "Received unexpected CCX Linktest report message from AP %{macaddr}" }
			id => "msgParserId386"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId387
	# line in RSA: Received an invalid CCX resource management subtype payload <info>)
	else if [logstash][msgparser][id] == "msgParserId387" {
		dissect {
			mapping => { "message" => "Received an invalid CCX resource management subtype payload %{info})" }
			id => "msgParserId387"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId388
	# line in RSA: Error verifying AP certificate, <info>
	else if [logstash][msgparser][id] == "msgParserId388" {
		dissect {
			mapping => { "message" => "Error verifying AP certificate, %{info}" }
			id => "msgParserId388"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId389
	# line in RSA: Unable to retrieve controllers certificate for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId389" {
		dissect {
			mapping => { "message" => "Unable to retrieve controllers certificate for AP %{macaddr}" }
			id => "msgParserId389"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId390
	# line in RSA: Unable to read the controller MAC address from the certificate
	else if [logstash][msgparser][id] == "msgParserId390" {
		dissect {
			mapping => { "message" => "Unable to read the controller MAC address from the certificate" }
			id => "msgParserId390"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId391
	# line in RSA: Could not save LWAPP configuration in file <info>
	else if [logstash][msgparser][id] == "msgParserId391" {
		dissect {
			mapping => { "message" => "Could not save LWAPP configuration in file %{info}" }
			id => "msgParserId391"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId392
	# line in RSA: Invalid checksum in data transfer payload from AP <macaddr> <info>)
	else if [logstash][msgparser][id] == "msgParserId392" {
		dissect {
			mapping => { "message" => "Invalid checksum in data transfer payload from AP %{macaddr} %{info})" }
			id => "msgParserId392"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId393
	# line in RSA:  Discarding <event_type> discovery request in LWAPP from AP <macaddr> supporting CAPWAP
	else if [logstash][msgparser][id] == "msgParserId393" {
		dissect {
			mapping => { "message" => "Discarding %{event_type} discovery request in LWAPP from AP %{macaddr} supporting CAPWAP" }
			id => "msgParserId393"
			add_field => {
				"event_description" => "Discarding discovery request in LWAPP from AP supporting CAPWAP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId394
	# line in RSA: Console login success on AP <hostname>
	else if [logstash][msgparser][id] == "msgParserId394" {
		dissect {
			mapping => { "message" => "Console login success on AP %{hostname}" }
			id => "msgParserId394"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId395
	# line in RSA: Console login failure on AP <hostname>
	else if [logstash][msgparser][id] == "msgParserId395" {
		dissect {
			mapping => { "message" => "Console login failure on AP %{hostname}" }
			id => "msgParserId395"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId396
	# line in RSA: Unknown AP console login alarm from the AP <hostname>
	else if [logstash][msgparser][id] == "msgParserId396" {
		dissect {
			mapping => { "message" => "Unknown AP console login alarm from the AP %{hostname}" }
			id => "msgParserId396"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId397
	# line in RSA: AP <macaddr> <info> but internal counter is zero
	else if [logstash][msgparser][id] == "msgParserId397" {
		dissect {
			mapping => { "message" => "AP %{macaddr} %{info} but internal counter is zero" }
			id => "msgParserId397"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId398
	# line in RSA: AP <macaddr> type count flag is not set
	else if [logstash][msgparser][id] == "msgParserId398" {
		dissect {
			mapping => { "message" => "AP %{macaddr} type count flag is not set" }
			id => "msgParserId398"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId399
	# line in RSA: Mismatch in the internal count <info>)
	else if [logstash][msgparser][id] == "msgParserId399" {
		dissect {
			mapping => { "message" => "Mismatch in the internal count %{info})" }
			id => "msgParserId399"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId400
	# line in RSA: AP <macaddr> marked as normal but internal counter does not reflect this
	else if [logstash][msgparser][id] == "msgParserId400" {
		dissect {
			mapping => { "message" => "AP %{macaddr} marked as normal but internal counter does not reflect this" }
			id => "msgParserId400"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId401
	# line in RSA: Unable to encrypt crypto payload with public key for message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId401" {
		dissect {
			mapping => { "message" => "Unable to encrypt crypto payload with public key for message to AP %{macaddr}" }
			id => "msgParserId401"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId402
	# line in RSA: Unable to encrypt crypto payload with private key for message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId402" {
		dissect {
			mapping => { "message" => "Unable to encrypt crypto payload with private key for message to AP %{macaddr}" }
			id => "msgParserId402"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId403
	# line in RSA: Error decoding <info> from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId403" {
		dissect {
			mapping => { "message" => "Error decoding %{info} from AP %{macaddr}" }
			id => "msgParserId403"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId404
	# line in RSA: {The system is unable|Unable} to decrypt{LWAPP packet;|aireware director data;|image data message;}AP<macaddr>
	else if [logstash][msgparser][id] == "msgParserId404" {
		grok {
			match => { "message" => "^(The[\s]+system[\s]+is[\s]+unable|Unable)[\s]+to[\s]+decrypt(LWAPP[\s]+packet;|aireware[\s]+director[\s]+data;|image[\s]+data[\s]+message;)AP(?<macaddr>.*)$" }
			id => "msgParserId404"
			add_field => {
				"action" => "Unable to decrypt packet"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId405
	# line in RSA:  Invalid session identifier (<fld7>) - unable to decrypt packet; AP:<saddr>
	else if [logstash][msgparser][id] == "msgParserId405" {
		dissect {
			mapping => { "message" => "Invalid session identifier (%{fld7}) - unable to decrypt packet; AP:%{saddr}" }
			id => "msgParserId405"
			add_field => {
				"action" => "Invalid session identifier"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId406
	# line in RSA:  Error decrypting public key in key update response from AP <saddr>
	else if [logstash][msgparser][id] == "msgParserId406" {
		dissect {
			mapping => { "message" => "Error decrypting public key in key update response from AP %{saddr}" }
			id => "msgParserId406"
			add_field => {
				"action" => "Error decrypting public key in key update response from AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId407
	# line in RSA:  Private key decryption failed in key update response from AP <saddr>
	else if [logstash][msgparser][id] == "msgParserId407" {
		dissect {
			mapping => { "message" => "Private key decryption failed in key update response from AP %{saddr}" }
			id => "msgParserId407"
			add_field => {
				"action" => "Private key decryption failed in key update response from AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId408
	# line in RSA:  Error decrypting packet (using old key) from AP <saddr> (session identifier <fld7>)
	else if [logstash][msgparser][id] == "msgParserId408" {
		dissect {
			mapping => { "message" => "Error decrypting packet (using old key) from AP %{saddr} (session identifier %{fld7})" }
			id => "msgParserId408"
			add_field => {
				"action" => "Error decrypting packet"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId409
	# line in RSA:  Authentication of packet from AP <saddr> failed, packet will be dropped
	else if [logstash][msgparser][id] == "msgParserId409" {
		dissect {
			mapping => { "message" => "Authentication of packet from AP %{saddr} failed, packet will be dropped" }
			id => "msgParserId409"
			add_field => {
				"action" => "Authentication of packet from AP failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId410
	# line in RSA:  Unable to decrypt packet from AP <saddr> with the private key
	else if [logstash][msgparser][id] == "msgParserId410" {
		dissect {
			mapping => { "message" => "Unable to decrypt packet from AP %{saddr} with the private key" }
			id => "msgParserId410"
			add_field => {
				"action" => "Unable to decrypt packet with the private key"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId411
	# line in RSA: Ignoring discovery request from AP <macaddr> - no AP manager found with spare capacity
	else if [logstash][msgparser][id] == "msgParserId411" {
		dissect {
			mapping => { "message" => "Ignoring discovery request from AP %{macaddr} - no AP manager found with spare capacity" }
			id => "msgParserId411"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId412
	# line in RSA: Unable to process primary discovery request from AP on interface (<interface>), VLAN (<vlan>), could not get AP manager <macaddr>
	else if [logstash][msgparser][id] == "msgParserId412" {
		dissect {
			mapping => { "message" => "Unable to process primary discovery request from AP on interface (%{interface}), VLAN (%{vlan}), could not get AP manager %{macaddr}" }
			id => "msgParserId412"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId413
	# line in RSA: Unable to process primary discovery request from AP, AP manager IP address is invalid <macaddr>
	else if [logstash][msgparser][id] == "msgParserId413" {
		dissect {
			mapping => { "message" => "Unable to process primary discovery request from AP, AP manager IP address is invalid %{macaddr}" }
			id => "msgParserId413"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId414
	# line in RSA: Ignoring a discovery request from AP <macaddr> via broadcast AP (IP = <saddr>) is not in the same subnet as the controller
	else if [logstash][msgparser][id] == "msgParserId414" {
		dissect {
			mapping => { "message" => "Ignoring a discovery request from AP %{macaddr} via broadcast AP (IP = %{saddr}) is not in the same subnet as the controller" }
			id => "msgParserId414"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId415
	# line in RSA: Ignoring discovery request received on non-management interface (<interface>) in L3 LWAPP mode
	else if [logstash][msgparser][id] == "msgParserId415" {
		dissect {
			mapping => { "message" => "Ignoring discovery request received on non-management interface (%{interface}) in L3 LWAPP mode" }
			id => "msgParserId415"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId416
	# line in RSA: Ignoring discovery request received on a wrong VLAN (<vlan>) on interface (<interface>) in L3 LWAPP mode
	else if [logstash][msgparser][id] == "msgParserId416" {
		dissect {
			mapping => { "message" => "Ignoring discovery request received on a wrong VLAN (%{vlan}) on interface (%{interface}) in L3 LWAPP mode" }
			id => "msgParserId416"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId417
	# line in RSA: Unable to get <info> state of interface <interface> (port <event_source>), not returning interface in discovery response
	else if [logstash][msgparser][id] == "msgParserId417" {
		dissect {
			mapping => { "message" => "Unable to get %{info} state of interface %{interface} (port %{event_source}), not returning interface in discovery response" }
			id => "msgParserId417"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId418
	# line in RSA: Invalid discovery request received from AP <macaddr> - message length (<info>) is invalid
	else if [logstash][msgparser][id] == "msgParserId418" {
		dissect {
			mapping => { "message" => "Invalid discovery request received from AP %{macaddr} - message length (%{info}) is invalid" }
			id => "msgParserId418"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId419
	# line in RSA: Invalid primary discovery request received from AP <macaddr> - message length (<info>) is invalid
	else if [logstash][msgparser][id] == "msgParserId419" {
		dissect {
			mapping => { "message" => "Invalid primary discovery request received from AP %{macaddr} - message length (%{info}) is invalid" }
			id => "msgParserId419"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId420
	# line in RSA: Dropping discovery request from AP <macaddr> - limit for maximum APs supported <info> reached
	else if [logstash][msgparser][id] == "msgParserId420" {
		dissect {
			mapping => { "message" => "Dropping discovery request from AP %{macaddr} - limit for maximum APs supported %{info} reached" }
			id => "msgParserId420"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId421
	# line in RSA: Dropping primary discovery request from AP <macaddr> - maximum APs joined <info>
	else if [logstash][msgparser][id] == "msgParserId421" {
		dissect {
			mapping => { "message" => "Dropping primary discovery request from AP %{macaddr} - maximum APs joined %{info}" }
			id => "msgParserId421"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId422
	# line in RSA: Ignoring discovery request from AP <macaddr> - maximum number of downloads (<info>) exceeded
	else if [logstash][msgparser][id] == "msgParserId422" {
		dissect {
			mapping => { "message" => "Ignoring discovery request from AP %{macaddr} - maximum number of downloads (%{info}) exceeded" }
			id => "msgParserId422"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId423
	# line in RSA: Rejecting discovery request from AP <macaddr> - maximum AP joins (<info>) exceeded
	else if [logstash][msgparser][id] == "msgParserId423" {
		dissect {
			mapping => { "message" => "Rejecting discovery request from AP %{macaddr} - maximum AP joins (%{info}) exceeded" }
			id => "msgParserId423"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId424
	# line in RSA: Ignoring OTAP discovery request from AP <macaddr>, OTAP is disabled
	else if [logstash][msgparser][id] == "msgParserId424" {
		dissect {
			mapping => { "message" => "Ignoring OTAP discovery request from AP %{macaddr}, OTAP is disabled" }
			id => "msgParserId424"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId425
	# line in RSA: Discovery Response sent successfully to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId425" {
		dissect {
			mapping => { "message" => "Discovery Response sent successfully to AP %{macaddr}" }
			id => "msgParserId425"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId426
	# line in RSA: Unable to retrieve time information while processing discovery request from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId426" {
		dissect {
			mapping => { "message" => "Unable to retrieve time information while processing discovery request from AP %{macaddr}" }
			id => "msgParserId426"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId427
	# line in RSA: Ignoring LWAPP packet from AP <macaddr> - <info>
	else if [logstash][msgparser][id] == "msgParserId427" {
		dissect {
			mapping => { "message" => "Ignoring LWAPP packet from AP %{macaddr} - %{info}" }
			id => "msgParserId427"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId428
	# line in RSA: Received a discovery request from AP <macaddr> on an unsupported VLAN (<vlan>), dropping the request
	else if [logstash][msgparser][id] == "msgParserId428" {
		dissect {
			mapping => { "message" => "Received a discovery request from AP %{macaddr} on an unsupported VLAN (%{vlan}), dropping the request" }
			id => "msgParserId428"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId429
	# line in RSA: Not enough disk space to store crash file from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId429" {
		dissect {
			mapping => { "message" => "Not enough disk space to store crash file from AP %{macaddr}" }
			id => "msgParserId429"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId430
	# line in RSA: Could not get configured DSCP map for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId430" {
		dissect {
			mapping => { "message" => "Could not get configured DSCP map for AP %{macaddr}" }
			id => "msgParserId430"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId431
	# line in RSA: Duplicate IP address detected for AP <hostname>, IP address of AP <hostip>, this is a duplicate of IP on another machine (MAC address <macaddr>)
	else if [logstash][msgparser][id] == "msgParserId431" {
		dissect {
			mapping => { "message" => "Duplicate IP address detected for AP %{hostname}, IP address of AP %{hostip}, this is a duplicate of IP on another machine (MAC address %{macaddr})" }
			id => "msgParserId431"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId432
	# line in RSA: Received a duplicate <info> from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId432" {
		dissect {
			mapping => { "message" => "Received a duplicate %{info} from AP %{macaddr}" }
			id => "msgParserId432"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId433
	# line in RSA: Adding client <smacaddr> to exclusion list due to IP Address conflict with AP <hostname>
	else if [logstash][msgparser][id] == "msgParserId433" {
		dissect {
			mapping => { "message" => "Adding client %{smacaddr} to exclusion list due to IP Address conflict with AP %{hostname}" }
			id => "msgParserId433"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId434
	# line in RSA: Did not receive heartbeat reply; AP: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId434" {
		dissect {
			mapping => { "message" => "Did not receive heartbeat reply; AP: %{macaddr}" }
			id => "msgParserId434"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId435
	# line in RSA: Encryption of <info> failed; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId435" {
		dissect {
			mapping => { "message" => "Encryption of %{info} failed; AP %{macaddr}" }
			id => "msgParserId435"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId436
	# line in RSA: Unable to encrypt payload to AP <macaddr> with public key
	else if [logstash][msgparser][id] == "msgParserId436" {
		dissect {
			mapping => { "message" => "Unable to encrypt payload to AP %{macaddr} with public key" }
			id => "msgParserId436"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId437
	# line in RSA: Unable to encrypt payload to AP <macaddr> with the private key
	else if [logstash][msgparser][id] == "msgParserId437" {
		dissect {
			mapping => { "message" => "Unable to encrypt payload to AP %{macaddr} with the private key" }
			id => "msgParserId437"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId438
	# line in RSA: Unable to open <info> file for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId438" {
		dissect {
			mapping => { "message" => "Unable to open %{info} file for AP %{macaddr}" }
			id => "msgParserId438"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId439
	# line in RSA: Unable to obtain LWAPP parameters, error opening file <filename>
	else if [logstash][msgparser][id] == "msgParserId439" {
		dissect {
			mapping => { "message" => "Unable to obtain LWAPP parameters, error opening file %{filename}" }
			id => "msgParserId439"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId440
	# line in RSA: <info> My Info <macaddr>
	else if [logstash][msgparser][id] == "msgParserId440" {
		dissect {
			mapping => { "message" => "%{info} My Info %{macaddr}" }
			id => "msgParserId440"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId441
	# line in RSA: Internal file error while processing image data payload message from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId441" {
		dissect {
			mapping => { "message" => "Internal file error while processing image data payload message from AP %{macaddr}" }
			id => "msgParserId441"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId442
	# line in RSA: File could not be opened to store <info> information from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId442" {
		dissect {
			mapping => { "message" => "File could not be opened to store %{info} information from AP %{macaddr}" }
			id => "msgParserId442"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId443
	# line in RSA: Unable to write <info> information from AP <macaddr> into local file
	else if [logstash][msgparser][id] == "msgParserId443" {
		dissect {
			mapping => { "message" => "Unable to write %{info} information from AP %{macaddr} into local file" }
			id => "msgParserId443"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId444
	# line in RSA: Unable to encapsulate LWAPP header for <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId444" {
		dissect {
			mapping => { "message" => "Unable to encapsulate LWAPP header for %{info}; AP %{macaddr}" }
			id => "msgParserId444"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId445
	# line in RSA: Received LWAPP packet with unsupported bit field <info> from <macaddr> to <smacaddr>, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId445" {
		dissect {
			mapping => { "message" => "Received LWAPP packet with unsupported bit field %{info} from %{macaddr} to %{smacaddr}, dropping the packet" }
			id => "msgParserId445"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId446
	# line in RSA: LWAPP header translation failed, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId446" {
		dissect {
			mapping => { "message" => "LWAPP header translation failed, dropping the packet" }
			id => "msgParserId446"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId447
	# line in RSA: Failed parsing LWAPP
	else if [logstash][msgparser][id] == "msgParserId447" {
		dissect {
			mapping => { "message" => "Failed parsing LWAPP" }
			id => "msgParserId447"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId448
	# line in RSA: LWAPP header parsing failed, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId448" {
		dissect {
			mapping => { "message" => "LWAPP header parsing failed, dropping the packet" }
			id => "msgParserId448"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId449
	# line in RSA: Received invalid H-REAP operation for AP <macaddr> while processing RADIUS configuration payload <info>
	else if [logstash][msgparser][id] == "msgParserId449" {
		dissect {
			mapping => { "message" => "Received invalid H-REAP operation for AP %{macaddr} while processing RADIUS configuration payload %{info}" }
			id => "msgParserId449"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId450
	# line in RSA: Received invalid RADIUS port number (AP <macaddr>) while processing RADIUS configuration payload
	else if [logstash][msgparser][id] == "msgParserId450" {
		dissect {
			mapping => { "message" => "Received invalid RADIUS port number (AP %{macaddr}) while processing RADIUS configuration payload" }
			id => "msgParserId450"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId451
	# line in RSA: Refusing <fld1> from AP <macaddr> - controller image upgrade is in process
	else if [logstash][msgparser][id] == "msgParserId451" {
		dissect {
			mapping => { "message" => "Refusing %{fld1} from AP %{macaddr} - controller image upgrade is in process" }
			id => "msgParserId451"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId452
	# line in RSA: Refusing image download request from AP <macaddr> - max downloads (<info>) in progress
	else if [logstash][msgparser][id] == "msgParserId452" {
		dissect {
			mapping => { "message" => "Refusing image download request from AP %{macaddr} - max downloads (%{info}) in progress" }
			id => "msgParserId452"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId453
	# line in RSA: Refusing image download request from AP <macaddr> - unable to open image file <filename>
	else if [logstash][msgparser][id] == "msgParserId453" {
		dissect {
			mapping => { "message" => "Refusing image download request from AP %{macaddr} - unable to open image file %{filename}" }
			id => "msgParserId453"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId454
	# line in RSA: Refusing image download request from AP <macaddr> - unable to open MD5 file <filename>
	else if [logstash][msgparser][id] == "msgParserId454" {
		dissect {
			mapping => { "message" => "Refusing image download request from AP %{macaddr} - unable to open MD5 file %{filename}" }
			id => "msgParserId454"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId455
	# line in RSA: Invalid index <info> per port AP load information
	else if [logstash][msgparser][id] == "msgParserId455" {
		dissect {
			mapping => { "message" => "Invalid index %{info} per port AP load information" }
			id => "msgParserId455"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId456
	# line in RSA: Received invalid association identifier (<info>) for station <macaddr> on a REAP AP
	else if [logstash][msgparser][id] == "msgParserId456" {
		dissect {
			mapping => { "message" => "Received invalid association identifier (%{info}) for station %{macaddr} on a REAP AP" }
			id => "msgParserId456"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId457
	# line in RSA: Association identifier <fld1> for client <smacaddr> is already in use by <info>
	else if [logstash][msgparser][id] == "msgParserId457" {
		dissect {
			mapping => { "message" => "Association identifier %{fld1} for client %{smacaddr} is already in use by %{info}" }
			id => "msgParserId457"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId458
	# line in RSA: Invalid delimiter (<info>) in AP authorization list
	else if [logstash][msgparser][id] == "msgParserId458" {
		dissect {
			mapping => { "message" => "Invalid delimiter (%{info}) in AP authorization list" }
			id => "msgParserId458"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId459
	# line in RSA: Invalid sniffer server IP address (<saddr>), disabling sniffing on AP <hostname>, slot <portname>
	else if [logstash][msgparser][id] == "msgParserId459" {
		dissect {
			mapping => { "message" => "Invalid sniffer server IP address (%{saddr}), disabling sniffing on AP %{hostname}, slot %{portname}" }
			id => "msgParserId459"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId460
	# line in RSA: Invalid <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId460" {
		dissect {
			mapping => { "message" => "Invalid %{info}; AP %{macaddr}" }
			id => "msgParserId460"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId461
	# line in RSA: <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId461" {
		dissect {
			mapping => { "message" => "%{info}; AP %{macaddr}" }
			id => "msgParserId461"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId462
	# line in RSA: <info>; AP: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId462" {
		dissect {
			mapping => { "message" => "%{info}; AP: %{macaddr}" }
			id => "msgParserId462"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId463
	# line in RSA: Received an unsupported radio (<event_source>), <info>
	else if [logstash][msgparser][id] == "msgParserId463" {
		dissect {
			mapping => { "message" => "Received an unsupported radio (%{event_source}), %{info}" }
			id => "msgParserId463"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId464
	# line in RSA: Received invalid radio type (<event_source>) for AP <hostname> on slot <portname> , could not verify power level for the AP
	else if [logstash][msgparser][id] == "msgParserId464" {
		dissect {
			mapping => { "message" => "Received invalid radio type (%{event_source}) for AP %{hostname} on slot %{portname} , could not verify power level for the AP" }
			id => "msgParserId464"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId465
	# line in RSA: Received invalid session identifier in <hostip> from AP <macaddr> <info>
	else if [logstash][msgparser][id] == "msgParserId465" {
		dissect {
			mapping => { "message" => "Received invalid session identifier in %{hostip} from AP %{macaddr} %{info}" }
			id => "msgParserId465"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "LWAPP-3-INVALID_SLOT" {
		# MESSAGE LWAPP-3-INVALID_SLOT
		# line in RSA: Invalid slot identifier (<portname>) - <info>; AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Invalid slot identifier (%{portname}) - %{info}; AP %{macaddr}" }
				id => "message-LWAPP-3-INVALID_SLOT"
				add_field => {
					"[event][id]" => "LWAPP-3-INVALID_SLOT"
					"[rsa][message][id1]" => "LWAPP-3-INVALID_SLOT"
					"[event][categoryid]" => "1603030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LWAPP-3-INVALID_SLOT:01
		# line in RSA: <event_description>Could not allocate association identifier; AP<macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}Could not allocate association identifier; AP%{macaddr}" }
				id => "message-LWAPP-3-INVALID_SLOT:01"
				add_field => {
				"reason" => "Could not allocate association identifier"
					"[event][id]" => "LWAPP-3-INVALID_SLOT:01"
					"[rsa][message][id1]" => "LWAPP-3-INVALID_SLOT:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId467
	# line in RSA: Invalid slot identifier (<portname>) - <info>: AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId467" {
		dissect {
			mapping => { "message" => "Invalid slot identifier (%{portname}) - %{info}: AP %{macaddr}" }
			id => "msgParserId467"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId468
	# line in RSA: Invalid WLAN identifier (<wlan>) obtained while building MFP config payload
	else if [logstash][msgparser][id] == "msgParserId468" {
		dissect {
			mapping => { "message" => "Invalid WLAN identifier (%{wlan}) obtained while building MFP config payload" }
			id => "msgParserId468"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId469
	# line in RSA: Could not plumb APs (<macaddr>) IP address (<hostip>), <info>) and VLAN (<vlan>) to fast path
	else if [logstash][msgparser][id] == "msgParserId469" {
		dissect {
			mapping => { "message" => "Could not plumb APs (%{macaddr}) IP address (%{hostip}), %{info}) and VLAN (%{vlan}) to fast path" }
			id => "msgParserId469"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId470
	# line in RSA: IP protocol (<protocol>) in the received packet - from AP <macaddr> is not UDP, LWAPP packets are only UDP, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId470" {
		dissect {
			mapping => { "message" => "IP protocol (%{protocol}) in the received packet - from AP %{macaddr} is not UDP, LWAPP packets are only UDP, dropping the packet" }
			id => "msgParserId470"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId471
	# line in RSA: Could not get IP address of AP manager interface, dropping join request from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId471" {
		dissect {
			mapping => { "message" => "Could not get IP address of AP manager interface, dropping join request from AP %{macaddr}" }
			id => "msgParserId471"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId472
	# line in RSA: Received a join request from AP <macaddr> for someone else (<saddr>), dropping the packet
	else if [logstash][msgparser][id] == "msgParserId472" {
		dissect {
			mapping => { "message" => "Received a join request from AP %{macaddr} for someone else (%{saddr}), dropping the packet" }
			id => "msgParserId472"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId473
	# line in RSA: Could not allocate an entry in the database for AP <macaddr> - dropping the join request (# of APs joined = <info>)
	else if [logstash][msgparser][id] == "msgParserId473" {
		dissect {
			mapping => { "message" => "Could not allocate an entry in the database for AP %{macaddr} - dropping the join request (# of APs joined = %{info})" }
			id => "msgParserId473"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId474
	# line in RSA: Disconnecting AP <hostname> since a higher priority AP with priority <info>
	else if [logstash][msgparser][id] == "msgParserId474" {
		dissect {
			mapping => { "message" => "Disconnecting AP %{hostname} since a higher priority AP with priority %{info}" }
			id => "msgParserId474"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId475
	# line in RSA: Received a join request on an invalid interface (<interface>) from AP <macaddr>, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId475" {
		dissect {
			mapping => { "message" => "Received a join request on an invalid interface (%{interface}) from AP %{macaddr}, dropping the packet" }
			id => "msgParserId475"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId476
	# line in RSA: Invalid <info> in LWAPP join request from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId476" {
		dissect {
			mapping => { "message" => "Invalid %{info} in LWAPP join request from AP %{macaddr}" }
			id => "msgParserId476"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId477
	# line in RSA: Invalid <info> in join request from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId477" {
		dissect {
			mapping => { "message" => "Invalid %{info} in join request from AP %{macaddr}" }
			id => "msgParserId477"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId478
	# line in RSA: Join request from AP (<macaddr>) has invalid number of slots (<portname>) , dropping the packet
	else if [logstash][msgparser][id] == "msgParserId478" {
		dissect {
			mapping => { "message" => "Join request from AP (%{macaddr}) has invalid number of slots (%{portname}) , dropping the packet" }
			id => "msgParserId478"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId479
	# line in RSA: Received a join request from AP <macaddr> <info> - invalid destination MAC address, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId479" {
		dissect {
			mapping => { "message" => "Received a join request from AP %{macaddr} %{info} - invalid destination MAC address, dropping the packet" }
			id => "msgParserId479"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId480
	# line in RSA: Controller is also configured as the master, AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId480" {
		dissect {
			mapping => { "message" => "Controller is also configured as the master, AP %{macaddr}" }
			id => "msgParserId480"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId481
	# line in RSA: Received a join request from AP <macaddr> - <info>, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId481" {
		dissect {
			mapping => { "message" => "Received a join request from AP %{macaddr} - %{info}, dropping the packet" }
			id => "msgParserId481"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId482
	# line in RSA: Received a join request from AP <macaddr>, <info>, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId482" {
		dissect {
			mapping => { "message" => "Received a join request from AP %{macaddr}, %{info}, dropping the packet" }
			id => "msgParserId482"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId483
	# line in RSA: Reached max limit (<info>) on the number of APs that can download image, dropping join request
	else if [logstash][msgparser][id] == "msgParserId483" {
		dissect {
			mapping => { "message" => "Reached max limit (%{info}) on the number of APs that can download image, dropping join request" }
			id => "msgParserId483"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId484
	# line in RSA: Reached max limit (<info>) on the number of APs that can join the controller, dropping join request
	else if [logstash][msgparser][id] == "msgParserId484" {
		dissect {
			mapping => { "message" => "Reached max limit (%{info}) on the number of APs that can join the controller, dropping join request" }
			id => "msgParserId484"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId485
	# line in RSA: {The system has received|Received} a join request from an unsupported AP <macaddr> <info>, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId485" {
		grok {
			match => { "message" => "^(The[\s]+system[\s]+has[\s]+received|Received)[\s]+a[\s]+join[\s]+request[\s]+from[\s]+an[\s]+unsupported[\s]+AP[\s]+(?<macaddr>[^\s]*)[\s]+(?<info>[^,]*),[\s]+dropping[\s]+the[\s]+packet$" }
			id => "msgParserId485"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId486
	# line in RSA: Unable to obtain public key from the certificate of AP<macaddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId486" {
		dissect {
			mapping => { "message" => "Unable to obtain public key from the certificate of AP%{macaddr}, %{info}" }
			id => "msgParserId486"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId487
	# line in RSA: Invalid public key type in certificate for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId487" {
		dissect {
			mapping => { "message" => "Invalid public key type in certificate for AP %{macaddr}" }
			id => "msgParserId487"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId488
	# line in RSA: {The system is unable|Unable} to free public key for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId488" {
		grok {
			match => { "message" => "^(The[\s]+system[\s]+is[\s]+unable|Unable)[\s]+to[\s]+free[\s]+public[\s]+key[\s]+for[\s]+AP[\s]+(?<macaddr>.*)$" }
			id => "msgParserId488"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId489
	# line in RSA: Received an L3 LWAPP packet in L2 LWAPP mode, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId489" {
		dissect {
			mapping => { "message" => "Received an L3 LWAPP packet in L2 LWAPP mode, dropping the packet" }
			id => "msgParserId489"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId490
	# line in RSA: Link aggregation configuration is in transition
	else if [logstash][msgparser][id] == "msgParserId490" {
		dissect {
			mapping => { "message" => "Link aggregation configuration is in transition" }
			id => "msgParserId490"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId491
	# line in RSA: List is corrupted - <info>
	else if [logstash][msgparser][id] == "msgParserId491" {
		dissect {
			mapping => { "message" => "List is corrupted - %{info}" }
			id => "msgParserId491"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId492
	# line in RSA: List is corrupted - <info>)
	else if [logstash][msgparser][id] == "msgParserId492" {
		dissect {
			mapping => { "message" => "List is corrupted - %{info})" }
			id => "msgParserId492"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId493
	# line in RSA: Skipping duplicate insertion - <info>
	else if [logstash][msgparser][id] == "msgParserId493" {
		dissect {
			mapping => { "message" => "Skipping duplicate insertion - %{info}" }
			id => "msgParserId493"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId494
	# line in RSA: Entry <fld1> not in the list - <info>
	else if [logstash][msgparser][id] == "msgParserId494" {
		dissect {
			mapping => { "message" => "Entry %{fld1} not in the list - %{info}" }
			id => "msgParserId494"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId495
	# line in RSA: Unable to delete AP entry, index (<info>) is greater than maximum allowed
	else if [logstash][msgparser][id] == "msgParserId495" {
		dissect {
			mapping => { "message" => "Unable to delete AP entry, index (%{info}) is greater than maximum allowed" }
			id => "msgParserId495"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId496
	# line in RSA: Unable to delete AP entry, entry not allocated
	else if [logstash][msgparser][id] == "msgParserId496" {
		dissect {
			mapping => { "message" => "Unable to delete AP entry, entry not allocated" }
			id => "msgParserId496"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId497
	# line in RSA: Reached max limit (<info>) on the association ID for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId497" {
		dissect {
			mapping => { "message" => "Reached max limit (%{info}) on the association ID for AP %{macaddr}" }
			id => "msgParserId497"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId498
	# line in RSA: Reached max limit on the association ID for AP (max association ID <info>)
	else if [logstash][msgparser][id] == "msgParserId498" {
		dissect {
			mapping => { "message" => "Reached max limit on the association ID for AP (max association ID %{info})" }
			id => "msgParserId498"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId499
	# line in RSA: No more system buffers, could not receive LWAPP packet
	else if [logstash][msgparser][id] == "msgParserId499" {
		dissect {
			mapping => { "message" => "No more system buffers, could not receive LWAPP packet" }
			id => "msgParserId499"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId500
	# line in RSA: Failed to obtain multicast appliance configuration for interface <interface>, <info>
	else if [logstash][msgparser][id] == "msgParserId500" {
		dissect {
			mapping => { "message" => "Failed to obtain multicast appliance configuration for interface %{interface}, %{info}" }
			id => "msgParserId500"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId501
	# line in RSA: Unable to allocate memory <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId501" {
		dissect {
			mapping => { "message" => "Unable to allocate memory %{info}; AP %{macaddr}" }
			id => "msgParserId501"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId502
	# line in RSA: Unable to allocate memory for LWAPP message
	else if [logstash][msgparser][id] == "msgParserId502" {
		dissect {
			mapping => { "message" => "Unable to allocate memory for LWAPP message" }
			id => "msgParserId502"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId503
	# line in RSA: Unable to allocate memory <info>
	else if [logstash][msgparser][id] == "msgParserId503" {
		dissect {
			mapping => { "message" => "Unable to allocate memory %{info}" }
			id => "msgParserId503"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId504
	# line in RSA: Unable to allocate memory <info> (AP <macaddr>)
	else if [logstash][msgparser][id] == "msgParserId504" {
		dissect {
			mapping => { "message" => "Unable to allocate memory %{info} (AP %{macaddr})" }
			id => "msgParserId504"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId505
	# line in RSA: MFP report count (<info>) is too big in message; AP: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId505" {
		dissect {
			mapping => { "message" => "MFP report count (%{info}) is too big in message; AP: %{macaddr}" }
			id => "msgParserId505"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId506
	# line in RSA: Ignoring MFP message <info> in message from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId506" {
		dissect {
			mapping => { "message" => "Ignoring MFP message %{info} in message from AP %{macaddr}" }
			id => "msgParserId506"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId507
	# line in RSA: Received MIC countermeasure, WLAN <wlan>, slot <portname> AP <hostname> client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId507" {
		dissect {
			mapping => { "message" => "Received MIC countermeasure, WLAN %{wlan}, slot %{portname} AP %{hostname} client %{smacaddr}" }
			id => "msgParserId507"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId508
	# line in RSA: Failed to migrate to regulatory domain requested for AP (name <hostname>, model <product>, MAC <macaddr> ,serial number <info>)
	else if [logstash][msgparser][id] == "msgParserId508" {
		dissect {
			mapping => { "message" => "Failed to migrate to regulatory domain requested for AP (name %{hostname}, model %{product}, MAC %{macaddr} ,serial number %{info})" }
			id => "msgParserId508"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId509
	# line in RSA: Setting mirroring mode failed
	else if [logstash][msgparser][id] == "msgParserId509" {
		dissect {
			mapping => { "message" => "Setting mirroring mode failed" }
			id => "msgParserId509"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId510
	# line in RSA: LWAPP message queue has not been created
	else if [logstash][msgparser][id] == "msgParserId510" {
		dissect {
			mapping => { "message" => "LWAPP message queue has not been created" }
			id => "msgParserId510"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId511
	# line in RSA: Could not receive message from LWAPP queue
	else if [logstash][msgparser][id] == "msgParserId511" {
		dissect {
			mapping => { "message" => "Could not receive message from LWAPP queue" }
			id => "msgParserId511"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId512
	# line in RSA: Unable to send <info> message to LWAPP; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId512" {
		dissect {
			mapping => { "message" => "Unable to send %{info} message to LWAPP; AP %{macaddr}" }
			id => "msgParserId512"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId513
	# line in RSA: Unable to send <info> message to LWAPP
	else if [logstash][msgparser][id] == "msgParserId513" {
		dissect {
			mapping => { "message" => "Unable to send %{info} message to LWAPP" }
			id => "msgParserId513"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId514
	# line in RSA: MESH Child <macaddr> has changed route or disconnected from <info>.
	else if [logstash][msgparser][id] == "msgParserId514" {
		dissect {
			mapping => { "message" => "MESH Child %{macaddr} has changed route or disconnected from %{info}." }
			id => "msgParserId514"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId515
	# line in RSA: Parent changed excessively. AP <hostname> changed parent <info>.
	else if [logstash][msgparser][id] == "msgParserId515" {
		dissect {
			mapping => { "message" => "Parent changed excessively. AP %{hostname} changed parent %{info}." }
			id => "msgParserId515"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId516
	# line in RSA: Unknown Mesh Neighbor Event from the AP <hostname>.
	else if [logstash][msgparser][id] == "msgParserId516" {
		dissect {
			mapping => { "message" => "Unknown Mesh Neighbor Event from the AP %{hostname}." }
			id => "msgParserId516"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId517
	# line in RSA: Did not specify the MAC address for Mesh Neigh Request <info>config
	else if [logstash][msgparser][id] == "msgParserId517" {
		dissect {
			mapping => { "message" => "Did not specify the MAC address for Mesh Neigh Request %{info}config" }
			id => "msgParserId517"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId518
	# line in RSA: <info>() : Could not generate nonce
	else if [logstash][msgparser][id] == "msgParserId518" {
		dissect {
			mapping => { "message" => "%{info}() : Could not generate nonce" }
			id => "msgParserId518"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId519
	# line in RSA: 1: msgLen <info>
	else if [logstash][msgparser][id] == "msgParserId519" {
		dissect {
			mapping => { "message" => "1: msgLen %{info}" }
			id => "msgParserId519"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId520
	# line in RSA: 2: <info>
	else if [logstash][msgparser][id] == "msgParserId520" {
		dissect {
			mapping => { "message" => "2: %{info}" }
			id => "msgParserId520"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId521
	# line in RSA: 1: <info>
	else if [logstash][msgparser][id] == "msgParserId521" {
		dissect {
			mapping => { "message" => "1: %{info}" }
			id => "msgParserId521"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId522
	# line in RSA: Unable to parse LWAPP headers from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId522" {
		dissect {
			mapping => { "message" => "Unable to parse LWAPP headers from AP %{macaddr}" }
			id => "msgParserId522"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId523
	# line in RSA: spamMeshSecbhStatsPayloadDecode: <info>
	else if [logstash][msgparser][id] == "msgParserId523" {
		dissect {
			mapping => { "message" => "spamMeshSecbhStatsPayloadDecode: %{info}" }
			id => "msgParserId523"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId524
	# line in RSA: MESH_NODE_UPDATE_PAYLOAD: <info>
	else if [logstash][msgparser][id] == "msgParserId524" {
		dissect {
			mapping => { "message" => "MESH_NODE_UPDATE_PAYLOAD: %{info}" }
			id => "msgParserId524"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId525
	# line in RSA: spamDecodeMeshNodeUpdate: <info>
	else if [logstash][msgparser][id] == "msgParserId525" {
		dissect {
			mapping => { "message" => "spamDecodeMeshNodeUpdate: %{info}" }
			id => "msgParserId525"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId526
	# line in RSA: spamSendLinktestRequest: refusing to send request when previous request is pending <info>
	else if [logstash][msgparser][id] == "msgParserId526" {
		dissect {
			mapping => { "message" => "spamSendLinktestRequest: refusing to send request when previous request is pending %{info}" }
			id => "msgParserId526"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId527
	# line in RSA: spamDecodeLinktestResponse invalid <info>
	else if [logstash][msgparser][id] == "msgParserId527" {
		dissect {
			mapping => { "message" => "spamDecodeLinktestResponse invalid %{info}" }
			id => "msgParserId527"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId528
	# line in RSA: spamDecodeLinktestResponse <info>
	else if [logstash][msgparser][id] == "msgParserId528" {
		dissect {
			mapping => { "message" => "spamDecodeLinktestResponse %{info}" }
			id => "msgParserId528"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId529
	# line in RSA: Out of range linktest ID (<info>) specified
	else if [logstash][msgparser][id] == "msgParserId529" {
		dissect {
			mapping => { "message" => "Out of range linktest ID (%{info}) specified" }
			id => "msgParserId529"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId530
	# line in RSA: Attempt to obtain results from free linktest ID (<info>)
	else if [logstash][msgparser][id] == "msgParserId530" {
		dissect {
			mapping => { "message" => "Attempt to obtain results from free linktest ID (%{info})" }
			id => "msgParserId530"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId531
	# line in RSA: invalid linktestId <info>
	else if [logstash][msgparser][id] == "msgParserId531" {
		dissect {
			mapping => { "message" => "invalid linktestId %{info}" }
			id => "msgParserId531"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId532
	# line in RSA: apfApLinktestFree: attempt to free linktestId=<info> which is already free
	else if [logstash][msgparser][id] == "msgParserId532" {
		dissect {
			mapping => { "message" => "apfApLinktestFree: attempt to free linktestId=%{info} which is already free" }
			id => "msgParserId532"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId533
	# line in RSA: FREEING LinkTest <info>
	else if [logstash][msgparser][id] == "msgParserId533" {
		dissect {
			mapping => { "message" => "FREEING LinkTest %{info}" }
			id => "msgParserId533"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId534
	# line in RSA: aplinktest_test: apfApLinktest returned failure
	else if [logstash][msgparser][id] == "msgParserId534" {
		dissect {
			mapping => { "message" => "aplinktest_test: apfApLinktest returned failure" }
			id => "msgParserId534"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId535
	# line in RSA: aplinktest_test: apfApLinktest returned success, ltid <info>
	else if [logstash][msgparser][id] == "msgParserId535" {
		dissect {
			mapping => { "message" => "aplinktest_test: apfApLinktest returned success, ltid %{info}" }
			id => "msgParserId535"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId536
	# line in RSA: AP <macaddr> associated. Last AP rebooting was because RAP was using radio backhaul as uplink for 15 minutes.
	else if [logstash][msgparser][id] == "msgParserId536" {
		dissect {
			mapping => { "message" => "AP %{macaddr} associated. Last AP rebooting was because RAP was using radio backhaul as uplink for 15 minutes." }
			id => "msgParserId536"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId537
	# line in RSA: LWAPP Join Request Country Code invalid for Bridge AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId537" {
		dissect {
			mapping => { "message" => "LWAPP Join Request Country Code invalid for Bridge AP %{macaddr}" }
			id => "msgParserId537"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId538
	# line in RSA: LWAPP Join Request Bridge Authentication failed for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId538" {
		dissect {
			mapping => { "message" => "LWAPP Join Request Bridge Authentication failed for AP %{macaddr}" }
			id => "msgParserId538"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId539
	# line in RSA: Mesh APs not supported in multi-country mode. Rejected AP: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId539" {
		dissect {
			mapping => { "message" => "Mesh APs not supported in multi-country mode. Rejected AP: %{macaddr}" }
			id => "msgParserId539"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId540
	# line in RSA: Not creating SSID <ssid> on Bridge AP <macaddr> because wlan0 is not supported
	else if [logstash][msgparser][id] == "msgParserId540" {
		dissect {
			mapping => { "message" => "Not creating SSID %{ssid} on Bridge AP %{macaddr} because wlan0 is not supported" }
			id => "msgParserId540"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId541
	# line in RSA: Unable to allocate buffer for mesh link para message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId541" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for mesh link para message to AP %{macaddr}" }
			id => "msgParserId541"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId542
	# line in RSA: Unable to allocate buffer for AP BH rate message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId542" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for AP BH rate message to AP %{macaddr}" }
			id => "msgParserId542"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId543
	# line in RSA: Unable to allocate buffer for AP BH dev message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId543" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for AP BH dev message to AP %{macaddr}" }
			id => "msgParserId543"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId544
	# line in RSA: Unable to allocate buffer for AP Bridge State message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId544" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for AP Bridge State message to AP %{macaddr}" }
			id => "msgParserId544"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId545
	# line in RSA: Unable to allocate buffer for AP Bridge Groupname message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId545" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for AP Bridge Groupname message to AP %{macaddr}" }
			id => "msgParserId545"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId546
	# line in RSA: Unable to allocate buffer for AP Public Safety message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId546" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for AP Public Safety message to AP %{macaddr}" }
			id => "msgParserId546"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId547
	# line in RSA: Unable to allocate buffer for Mesh Neigh Request message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId547" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for Mesh Neigh Request message to AP %{macaddr}" }
			id => "msgParserId547"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId548
	# line in RSA: Unable to allocate buffer for Mesh Linktest Data Request message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId548" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for Mesh Linktest Data Request message to AP %{macaddr}" }
			id => "msgParserId548"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId549
	# line in RSA: Unable to allocate buffer for Mesh Path Request message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId549" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for Mesh Path Request message to AP %{macaddr}" }
			id => "msgParserId549"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId550
	# line in RSA: Unable to allocate buffer for Mesh Stats Request message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId550" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for Mesh Stats Request message to AP %{macaddr}" }
			id => "msgParserId550"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId551
	# line in RSA: Received Mesh stats response from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId551" {
		dissect {
			mapping => { "message" => "Received Mesh stats response from unknown AP %{macaddr}" }
			id => "msgParserId551"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId552
	# line in RSA: Security processing of Mesh Stats Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId552" {
		dissect {
			mapping => { "message" => "Security processing of Mesh Stats Response failed from AP %{macaddr}" }
			id => "msgParserId552"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId553
	# line in RSA: Processing of Mesh Stats Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId553" {
		dissect {
			mapping => { "message" => "Processing of Mesh Stats Response failed from AP %{macaddr}" }
			id => "msgParserId553"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId554
	# line in RSA: Unable to allocate buffer for Mesh Security Stats Request message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId554" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for Mesh Security Stats Request message to AP %{macaddr}" }
			id => "msgParserId554"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId555
	# line in RSA: Received Mesh Security Stats response from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId555" {
		dissect {
			mapping => { "message" => "Received Mesh Security Stats response from unknown AP %{macaddr}" }
			id => "msgParserId555"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId556
	# line in RSA: Processing of Mesh Security Stats Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId556" {
		dissect {
			mapping => { "message" => "Processing of Mesh Security Stats Response failed from AP %{macaddr}" }
			id => "msgParserId556"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId557
	# line in RSA: Received Mesh Adj response from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId557" {
		dissect {
			mapping => { "message" => "Received Mesh Adj response from unknown AP %{macaddr}" }
			id => "msgParserId557"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId558
	# line in RSA: Security processing of Mesh Adj Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId558" {
		dissect {
			mapping => { "message" => "Security processing of Mesh Adj Response failed from AP %{macaddr}" }
			id => "msgParserId558"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId559
	# line in RSA: Processing of Mesh Adj Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId559" {
		dissect {
			mapping => { "message" => "Processing of Mesh Adj Response failed from AP %{macaddr}" }
			id => "msgParserId559"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId560
	# line in RSA: Received Mesh Neigh response from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId560" {
		dissect {
			mapping => { "message" => "Received Mesh Neigh response from unknown AP %{macaddr}" }
			id => "msgParserId560"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId561
	# line in RSA: Security processing of Mesh Neigh Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId561" {
		dissect {
			mapping => { "message" => "Security processing of Mesh Neigh Response failed from AP %{macaddr}" }
			id => "msgParserId561"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId562
	# line in RSA: Processing of Mesh Neigh Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId562" {
		dissect {
			mapping => { "message" => "Processing of Mesh Neigh Response failed from AP %{macaddr}" }
			id => "msgParserId562"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId563
	# line in RSA: Unable to allocate buffer for Mesh Linkrate Request message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId563" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for Mesh Linkrate Request message to AP %{macaddr}" }
			id => "msgParserId563"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId564
	# line in RSA: Received Mesh Linkrate response from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId564" {
		dissect {
			mapping => { "message" => "Received Mesh Linkrate response from unknown AP %{macaddr}" }
			id => "msgParserId564"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId565
	# line in RSA: Security processing of Mesh Linkrate Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId565" {
		dissect {
			mapping => { "message" => "Security processing of Mesh Linkrate Response failed from AP %{macaddr}" }
			id => "msgParserId565"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId566
	# line in RSA: Processing of Mesh Linkrate Response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId566" {
		dissect {
			mapping => { "message" => "Processing of Mesh Linkrate Response failed from AP %{macaddr}" }
			id => "msgParserId566"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId567
	# line in RSA: Received station stats update from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId567" {
		dissect {
			mapping => { "message" => "Received station stats update from unknown AP %{macaddr}" }
			id => "msgParserId567"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId568
	# line in RSA: Received mesh node update from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId568" {
		dissect {
			mapping => { "message" => "Received mesh node update from unknown AP %{macaddr}" }
			id => "msgParserId568"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId569
	# line in RSA: Processing of mesh node update failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId569" {
		dissect {
			mapping => { "message" => "Processing of mesh node update failed from AP %{macaddr}" }
			id => "msgParserId569"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId570
	# line in RSA: Received mesh env. update from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId570" {
		dissect {
			mapping => { "message" => "Received mesh env. update from unknown AP %{macaddr}" }
			id => "msgParserId570"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId571
	# line in RSA: Processing of mesh env. update failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId571" {
		dissect {
			mapping => { "message" => "Processing of mesh env. update failed from AP %{macaddr}" }
			id => "msgParserId571"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId572
	# line in RSA: Failed to update CAC module with parent address: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId572" {
		dissect {
			mapping => { "message" => "Failed to update CAC module with parent address: %{macaddr}" }
			id => "msgParserId572"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId573
	# line in RSA: Received mesh neighs update from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId573" {
		dissect {
			mapping => { "message" => "Received mesh neighs update from unknown AP %{macaddr}" }
			id => "msgParserId573"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId574
	# line in RSA: Processing of mesh neighs update failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId574" {
		dissect {
			mapping => { "message" => "Processing of mesh neighs update failed from AP %{macaddr}" }
			id => "msgParserId574"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId575
	# line in RSA: Unable to allocate buffer for Linktest Request message to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId575" {
		dissect {
			mapping => { "message" => "Unable to allocate buffer for Linktest Request message to AP %{macaddr}" }
			id => "msgParserId575"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId576
	# line in RSA: spamDecodeLinktestResponse LINKTEST_CFG_PAYLOAD(<info>): linktest ID from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId576" {
		dissect {
			mapping => { "message" => "spamDecodeLinktestResponse LINKTEST_CFG_PAYLOAD(%{info}): linktest ID from AP %{macaddr}" }
			id => "msgParserId576"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId577
	# line in RSA: spamDecodeLinktestResponse (ltid:<info>) unexpected LINKTEST_CFG_PAYLOAD from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId577" {
		dissect {
			mapping => { "message" => "spamDecodeLinktestResponse (ltid:%{info}) unexpected LINKTEST_CFG_PAYLOAD from AP %{macaddr}" }
			id => "msgParserId577"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId578
	# line in RSA: spamDecodeLinktestResponse <info> from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId578" {
		dissect {
			mapping => { "message" => "spamDecodeLinktestResponse %{info} from AP %{macaddr}" }
			id => "msgParserId578"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId579
	# line in RSA: spamDecodeLinktestResponse (ltid:<info>) unexpected LINKTEST_RESULTS_PAYLOAD from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId579" {
		dissect {
			mapping => { "message" => "spamDecodeLinktestResponse (ltid:%{info}) unexpected LINKTEST_RESULTS_PAYLOAD from AP %{macaddr}" }
			id => "msgParserId579"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId580
	# line in RSA: spamDecodeLinktestResponse unrecognized payload <info> from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId580" {
		dissect {
			mapping => { "message" => "spamDecodeLinktestResponse unrecognized payload %{info} from AP %{macaddr}" }
			id => "msgParserId580"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId581
	# line in RSA: Linktest requested for unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId581" {
		dissect {
			mapping => { "message" => "Linktest requested for unknown AP %{macaddr}" }
			id => "msgParserId581"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId582
	# line in RSA: Linktest already running on AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId582" {
		dissect {
			mapping => { "message" => "Linktest already running on AP %{macaddr}" }
			id => "msgParserId582"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId583
	# line in RSA: link test id is already in use: <info>
	else if [logstash][msgparser][id] == "msgParserId583" {
		dissect {
			mapping => { "message" => "link test id is already in use: %{info}" }
			id => "msgParserId583"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId584
	# line in RSA: Too many linktests running, cannot manage AP <macaddr> <info>
	else if [logstash][msgparser][id] == "msgParserId584" {
		dissect {
			mapping => { "message" => "Too many linktests running, cannot manage AP %{macaddr} %{info}" }
			id => "msgParserId584"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId585
	# line in RSA: Received linktest response from unknown AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId585" {
		dissect {
			mapping => { "message" => "Received linktest response from unknown AP %{macaddr}" }
			id => "msgParserId585"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId586
	# line in RSA: Processing of linktest response failed from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId586" {
		dissect {
			mapping => { "message" => "Processing of linktest response failed from AP %{macaddr}" }
			id => "msgParserId586"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId587
	# line in RSA: Invalid NPU index <info>
	else if [logstash][msgparser][id] == "msgParserId587" {
		dissect {
			mapping => { "message" => "Invalid NPU index %{info}" }
			id => "msgParserId587"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId588
	# line in RSA: All NPU indices have been used (max <info>)
	else if [logstash][msgparser][id] == "msgParserId588" {
		dissect {
			mapping => { "message" => "All NPU indices have been used (max %{info})" }
			id => "msgParserId588"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId589
	# line in RSA: Could not allocate NPU index for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId589" {
		dissect {
			mapping => { "message" => "Could not allocate NPU index for AP %{macaddr}" }
			id => "msgParserId589"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId590
	# line in RSA: Failed to add NPU entry for AP <macaddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId590" {
		dissect {
			mapping => { "message" => "Failed to add NPU entry for AP %{macaddr}, %{info}" }
			id => "msgParserId590"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId591
	# line in RSA: Received invalid OFDM channel (<info>), unable to set the channel
	else if [logstash][msgparser][id] == "msgParserId591" {
		dissect {
			mapping => { "message" => "Received invalid OFDM channel (%{info}), unable to set the channel" }
			id => "msgParserId591"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId592
	# line in RSA: Override SSID <ssid> does not exist on the controller
	else if [logstash][msgparser][id] == "msgParserId592" {
		dissect {
			mapping => { "message" => "Override SSID %{ssid} does not exist on the controller" }
			id => "msgParserId592"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId593
	# line in RSA: LWAPP header parsing failed for packet from AP <macaddr>, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId593" {
		dissect {
			mapping => { "message" => "LWAPP header parsing failed for packet from AP %{macaddr}, dropping the packet" }
			id => "msgParserId593"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId594
	# line in RSA: Unable to parse LWAPP headers for <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId594" {
		dissect {
			mapping => { "message" => "Unable to parse LWAPP headers for %{info}; AP %{macaddr}" }
			id => "msgParserId594"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId595
	# line in RSA: <info> - AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId595" {
		dissect {
			mapping => { "message" => "%{info} - AP %{macaddr}" }
			id => "msgParserId595"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "LWAPP-3-PAYLOAD_MISSING" {
		# MESSAGE LWAPP-3-PAYLOAD_MISSING
		# line in RSA: <info> -
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info} -" }
				id => "message-LWAPP-3-PAYLOAD_MISSING"
				add_field => {
					"[event][id]" => "LWAPP-3-PAYLOAD_MISSING"
					"[rsa][message][id1]" => "LWAPP-3-PAYLOAD_MISSING"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LWAPP-3-PAYLOAD_MISSING:01
		# line in RSA: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}" }
				id => "message-LWAPP-3-PAYLOAD_MISSING:01"
				add_field => {
					"[event][id]" => "LWAPP-3-PAYLOAD_MISSING:01"
					"[rsa][message][id1]" => "LWAPP-3-PAYLOAD_MISSING:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId597
	# line in RSA:  <fld7> return error for interface <fld6>-- <reason>
	else if [logstash][msgparser][id] == "msgParserId597" {
		dissect {
			mapping => { "message" => "%{fld7} return error for interface %{fld6}-- %{reason}" }
			id => "msgParserId597"
			add_field => {
				"action" => "return error for interface"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId598
	# line in RSA:  AP <saddr> associated. Last Controller Initiated AP reboot reason : <reason>
	else if [logstash][msgparser][id] == "msgParserId598" {
		dissect {
			mapping => { "message" => "AP %{saddr} associated. Last Controller Initiated AP reboot reason : %{reason}" }
			id => "msgParserId598"
			add_field => {
				"action" => "Last Controller Initiated AP reboot"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId599
	# line in RSA: Failed to obtain multicast port map for interface <interface>, using default index (<info>)
	else if [logstash][msgparser][id] == "msgParserId599" {
		dissect {
			mapping => { "message" => "Failed to obtain multicast port map for interface %{interface}, using default index (%{info})" }
			id => "msgParserId599"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId600
	# line in RSA: Could not find profile name for WLAN <wlan> with SSID <ssid>; AP: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId600" {
		dissect {
			mapping => { "message" => "Could not find profile name for WLAN %{wlan} with SSID %{ssid}; AP: %{macaddr}" }
			id => "msgParserId600"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId601
	# line in RSA: Could not find profile name for WLAN with SSID <ssid>
	else if [logstash][msgparser][id] == "msgParserId601" {
		dissect {
			mapping => { "message" => "Could not find profile name for WLAN with SSID %{ssid}" }
			id => "msgParserId601"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId602
	# line in RSA: Radio (<event_source>) crashed and generated a core dump on AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId602" {
		dissect {
			mapping => { "message" => "Radio (%{event_source}) crashed and generated a core dump on AP %{macaddr}" }
			id => "msgParserId602"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId603
	# line in RSA:  <info> failure on radio slot <event_description> on AP <hostname>
	else if [logstash][msgparser][id] == "msgParserId603" {
		dissect {
			mapping => { "message" => "%{info} failure on radio slot %{event_description} on AP %{hostname}" }
			id => "msgParserId603"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId604
	# line in RSA: Unknown AP radio failed alarm (<event_description>]) from the AP <hostname>
	else if [logstash][msgparser][id] == "msgParserId604" {
		dissect {
			mapping => { "message" => "Unknown AP radio failed alarm (%{event_description}]) from the AP %{hostname}" }
			id => "msgParserId604"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId605
	# line in RSA:  AP <hostname> <info> failure on radio slot <event_description>
	else if [logstash][msgparser][id] == "msgParserId605" {
		dissect {
			mapping => { "message" => "AP %{hostname} %{info} failure on radio slot %{event_description}" }
			id => "msgParserId605"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId606
	# line in RSA: Could not send join reply, AP authorization failed; AP:<macaddr>
	else if [logstash][msgparser][id] == "msgParserId606" {
		dissect {
			mapping => { "message" => "Could not send join reply, AP authorization failed; AP:%{macaddr}" }
			id => "msgParserId606"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId607
	# line in RSA: Received invalid RADIUS port number for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId607" {
		dissect {
			mapping => { "message" => "Received invalid RADIUS port number for AP %{macaddr}" }
			id => "msgParserId607"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId608
	# line in RSA: MAC filtering request dropped as shared secret for RADIUS was not found
	else if [logstash][msgparser][id] == "msgParserId608" {
		dissect {
			mapping => { "message" => "MAC filtering request dropped as shared secret for RADIUS was not found" }
			id => "msgParserId608"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId609
	# line in RSA: Received invalid RADIUS shared secret; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId609" {
		dissect {
			mapping => { "message" => "Received invalid RADIUS shared secret; AP %{macaddr}" }
			id => "msgParserId609"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId610
	# line in RSA: Regulatory domain of the AP <macaddr> does not match the country code (<event_source>)
	else if [logstash][msgparser][id] == "msgParserId610" {
		dissect {
			mapping => { "message" => "Regulatory domain of the AP %{macaddr} does not match the country code (%{event_source})" }
			id => "msgParserId610"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId611
	# line in RSA: AP <macaddr> is disabled - default country code is <event_source>
	else if [logstash][msgparser][id] == "msgParserId611" {
		dissect {
			mapping => { "message" => "AP %{macaddr} is disabled - default country code is %{event_source}" }
			id => "msgParserId611"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId612
	# line in RSA: Regulatory domain for AP <macaddr> is not updated for all slots. <portname>)
	else if [logstash][msgparser][id] == "msgParserId612" {
		dissect {
			mapping => { "message" => "Regulatory domain for AP %{macaddr} is not updated for all slots. %{portname})" }
			id => "msgParserId612"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId613
	# line in RSA: Invalid regulatory domain (<domain>) sent by AP <macaddr> (slot: <portname> <info>)
	else if [logstash][msgparser][id] == "msgParserId613" {
		dissect {
			mapping => { "message" => "Invalid regulatory domain (%{domain}) sent by AP %{macaddr} (slot: %{portname} %{info})" }
			id => "msgParserId613"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "LWAPP-3-RD_ERR4" {
		# MESSAGE LWAPP-3-RD_ERR4
		# line in RSA: Invalid regulatory domain <domain> for AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Invalid regulatory domain %{domain} for AP %{macaddr}" }
				id => "message-LWAPP-3-RD_ERR4"
				add_field => {
					"[event][id]" => "LWAPP-3-RD_ERR4"
					"[rsa][message][id1]" => "LWAPP-3-RD_ERR4"
					"[event][categoryid]" => "1703000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE LWAPP-3-RD_ERR4:01
		# line in RSA: The system detects an invalid regulatory domain <domain> for AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The system detects an invalid regulatory domain %{domain} for AP %{macaddr}" }
				id => "message-LWAPP-3-RD_ERR4:01"
				add_field => {
					"[event][id]" => "LWAPP-3-RD_ERR4:01"
					"[rsa][message][id1]" => "LWAPP-3-RD_ERR4:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId615
	# line in RSA: APs (<macaddr> - slot <portname> <info>) regulatory domain is not set, this is not allowed in country <event_source>
	else if [logstash][msgparser][id] == "msgParserId615" {
		dissect {
			mapping => { "message" => "APs (%{macaddr} - slot %{portname} %{info}) regulatory domain is not set, this is not allowed in country %{event_source}" }
			id => "msgParserId615"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId616
	# line in RSA: APs (<macaddr>) regulatory domain (<domain>) is not supported in country (<event_source>), slot <fld1> (<portname>) <info>
	else if [logstash][msgparser][id] == "msgParserId616" {
		dissect {
			mapping => { "message" => "APs (%{macaddr}) regulatory domain (%{domain}) is not supported in country (%{event_source}), slot %{fld1} (%{portname}) %{info}" }
			id => "msgParserId616"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId617
	# line in RSA:  { The system detects an invalid | Invalid } country code (<event_source>) for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId617" {
		grok {
			match => { "message" => "^[\s]*([\s]*The[\s]+system[\s]+detects[\s]+an[\s]+invalid[\s]+|[\s]*Invalid[\s]+)[\s]+country[\s]+code[\s]+\((?<event_source>[^\)]*)\)[\s]+for[\s]+AP[\s]+(?<macaddr>.*)$" }
			id => "msgParserId617"
			add_field => {
				"event_description" => "invalid country code for AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId618
	# line in RSA: Country code (<event_source>) not configured for AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId618" {
		dissect {
			mapping => { "message" => "Country code (%{event_source}) not configured for AP %{macaddr}" }
			id => "msgParserId618"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId619
	# line in RSA: APs <macaddr> country code changed from (<info>) to (<event_source>)
	else if [logstash][msgparser][id] == "msgParserId619" {
		dissect {
			mapping => { "message" => "APs %{macaddr} country code changed from (%{info}) to (%{event_source})" }
			id => "msgParserId619"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId620
	# line in RSA:   AP <macaddr> joined to the controller currently experienced a { reboot | reset } earlier - <info>
	else if [logstash][msgparser][id] == "msgParserId620" {
		grok {
			match => { "message" => "^[\s]*AP[\s]+(?<macaddr>[^\s]*)[\s]+joined[\s]+to[\s]+the[\s]+controller[\s]+currently[\s]+experienced[\s]+a[\s]+([\s]*reboot[\s]+|[\s]*reset[\s]+)[\s]+earlier[\s]+\-[\s]+(?<info>.*)$" }
			id => "msgParserId620"
			add_field => {
				"event_description" => "AP joined to the controller currently experienced a reboot or reset earlier"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId621
	# line in RSA: Controller initiated {reset|reboot} of AP <macaddr> that has currently joined the controller - <info>
	else if [logstash][msgparser][id] == "msgParserId621" {
		grok {
			match => { "message" => "^Controller[\s]+initiated[\s]+(reset|reboot)[\s]+of[\s]+AP[\s]+(?<macaddr>[^\s]*)[\s]+that[\s]+has[\s]+currently[\s]+joined[\s]+the[\s]+controller[\s]+\-[\s]+(?<info>.*)$" }
			id => "msgParserId621"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId622
	# line in RSA: Could not process LWAPP packet
	else if [logstash][msgparser][id] == "msgParserId622" {
		dissect {
			mapping => { "message" => "Could not process LWAPP packet" }
			id => "msgParserId622"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId623
	# line in RSA: Did not receive an expected rekey message from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId623" {
		dissect {
			mapping => { "message" => "Did not receive an expected rekey message from AP %{macaddr}" }
			id => "msgParserId623"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId624
	# line in RSA: {The system has received|Received} replay error on slot<portname>, WLAN ID<wlan>,<info>from AP<macaddr>
	else if [logstash][msgparser][id] == "msgParserId624" {
		grok {
			match => { "message" => "^(The[\s]+system[\s]+has[\s]+received|Received)[\s]+replay[\s]+error[\s]+on[\s]+slot(?<portname>[^,]*),[\s]+WLAN[\s]+ID(?<wlan>[^,]*),(?<info>[^f]*)from[\s]+AP(?<macaddr>.*)$" }
			id => "msgParserId624"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId625
	# line in RSA: Could not send rogue report for <smacaddr> from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId625" {
		dissect {
			mapping => { "message" => "Could not send rogue report for %{smacaddr} from AP %{macaddr}" }
			id => "msgParserId625"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId626
	# line in RSA:  Received an unexpected LWAPP packet from AP <saddr>
	else if [logstash][msgparser][id] == "msgParserId626" {
		dissect {
			mapping => { "message" => "Received an unexpected LWAPP packet from AP %{saddr}" }
			id => "msgParserId626"
			add_field => {
				"action" => "Received an unexpected LWAPP packet from AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId627
	# line in RSA:  Received LWAPP packet with invalid sequence number (<info>) - from AP <saddr>
	else if [logstash][msgparser][id] == "msgParserId627" {
		dissect {
			mapping => { "message" => "Received LWAPP packet with invalid sequence number (%{info}) - from AP %{saddr}" }
			id => "msgParserId627"
			add_field => {
				"action" => "Received LWAPP packet with invalid sequence number"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId628
	# line in RSA: Received invalid add mobile action (<action>) from AP <macaddr> <info>
	else if [logstash][msgparser][id] == "msgParserId628" {
		dissect {
			mapping => { "message" => "Received invalid add mobile action (%{action}) from AP %{macaddr} %{info}" }
			id => "msgParserId628"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId629
	# line in RSA: <info> ; AP: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId629" {
		dissect {
			mapping => { "message" => "%{info} ; AP: %{macaddr}" }
			id => "msgParserId629"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId630
	# line in RSA: <info> from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId630" {
		dissect {
			mapping => { "message" => "%{info} from AP %{macaddr}" }
			id => "msgParserId630"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId631
	# line in RSA: Not advertising SSID <ssid> on REAP AP <macaddr> because L3 security is enabled
	else if [logstash][msgparser][id] == "msgParserId631" {
		dissect {
			mapping => { "message" => "Not advertising SSID %{ssid} on REAP AP %{macaddr} because L3 security is enabled" }
			id => "msgParserId631"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId632
	# line in RSA: <info>, could not encode signature
	else if [logstash][msgparser][id] == "msgParserId632" {
		dissect {
			mapping => { "message" => "%{info}, could not encode signature" }
			id => "msgParserId632"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId633
	# line in RSA: <info> from AP <macaddr>.
	else if [logstash][msgparser][id] == "msgParserId633" {
		dissect {
			mapping => { "message" => "%{info} from AP %{macaddr}." }
			id => "msgParserId633"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId634
	# line in RSA: Unable to re-enable signature processing on AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId634" {
		dissect {
			mapping => { "message" => "Unable to re-enable signature processing on AP %{macaddr}" }
			id => "msgParserId634"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId635
	# line in RSA: Could not gain exclusive access to the signature database
	else if [logstash][msgparser][id] == "msgParserId635" {
		dissect {
			mapping => { "message" => "Could not gain exclusive access to the signature database" }
			id => "msgParserId635"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId636
	# line in RSA: All signatures are disabled in the <info>.
	else if [logstash][msgparser][id] == "msgParserId636" {
		dissect {
			mapping => { "message" => "All signatures are disabled in the %{info}." }
			id => "msgParserId636"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId637
	# line in RSA: Unable to send toggle signature request to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId637" {
		dissect {
			mapping => { "message" => "Unable to send toggle signature request to AP %{macaddr}" }
			id => "msgParserId637"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId638
	# line in RSA: Unable to disable signature processing on AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId638" {
		dissect {
			mapping => { "message" => "Unable to disable signature processing on AP %{macaddr}" }
			id => "msgParserId638"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId639
	# line in RSA: Error sending new signatures to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId639" {
		dissect {
			mapping => { "message" => "Error sending new signatures to AP %{macaddr}" }
			id => "msgParserId639"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId640
	# line in RSA:  AP <serial_number> : Alarm ON, <reason>, most offending mac= <saddr>
	else if [logstash][msgparser][id] == "msgParserId640" {
		dissect {
			mapping => { "message" => "AP %{serial_number} : Alarm ON, %{reason}, most offending mac= %{saddr}" }
			id => "msgParserId640"
			add_field => {
				"action" => "AP Alarm ON"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId641
	# line in RSA:  AP <serial_number> : Alarm ON, <reason>, src mac= <saddr>
	else if [logstash][msgparser][id] == "msgParserId641" {
		dissect {
			mapping => { "message" => "AP %{serial_number} : Alarm ON, %{reason}, src mac= %{saddr}" }
			id => "msgParserId641"
			add_field => {
				"action" => "AP Alarm ON"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId642
	# line in RSA: Signature information; AP <macaddr>, <info>, slot <portname>, channel <event_source>, most offending MAC <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId642" {
		dissect {
			mapping => { "message" => "Signature information; AP %{macaddr}, %{info}, slot %{portname}, channel %{event_source}, most offending MAC %{smacaddr}" }
			id => "msgParserId642"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId643
	# line in RSA: AP (<hostname>) has no radio cards
	else if [logstash][msgparser][id] == "msgParserId643" {
		dissect {
			mapping => { "message" => "AP (%{hostname}) has no radio cards" }
			id => "msgParserId643"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId644
	# line in RSA: Error <info>
	else if [logstash][msgparser][id] == "msgParserId644" {
		dissect {
			mapping => { "message" => "Error %{info}" }
			id => "msgParserId644"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId645
	# line in RSA: Could not determine the # of APs supported from the model string (<info>)
	else if [logstash][msgparser][id] == "msgParserId645" {
		dissect {
			mapping => { "message" => "Could not determine the # of APs supported from the model string (%{info})" }
			id => "msgParserId645"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId646
	# line in RSA: Could not read from the LWAPP socket
	else if [logstash][msgparser][id] == "msgParserId646" {
		dissect {
			mapping => { "message" => "Could not read from the LWAPP socket" }
			id => "msgParserId646"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId647
	# line in RSA: Could not read from LWAPP socket, <info>
	else if [logstash][msgparser][id] == "msgParserId647" {
		dissect {
			mapping => { "message" => "Could not read from LWAPP socket, %{info}" }
			id => "msgParserId647"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId648
	# line in RSA: Not creating SSID <ssid> on AP <macaddr> because WEP 128 bit encryption is not supported on the AP
	else if [logstash][msgparser][id] == "msgParserId648" {
		dissect {
			mapping => { "message" => "Not creating SSID %{ssid} on AP %{macaddr} because WEP 128 bit encryption is not supported on the AP" }
			id => "msgParserId648"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId649
	# line in RSA: Not creating SSID <ssid> on AP <macaddr> because diagnostics channel is enabled
	else if [logstash][msgparser][id] == "msgParserId649" {
		dissect {
			mapping => { "message" => "Not creating SSID %{ssid} on AP %{macaddr} because diagnostics channel is enabled" }
			id => "msgParserId649"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId650
	# line in RSA:  Configured static IP Address is not valid for AP <saddr>
	else if [logstash][msgparser][id] == "msgParserId650" {
		dissect {
			mapping => { "message" => "Configured static IP Address is not valid for AP %{saddr}" }
			id => "msgParserId650"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId651
	# line in RSA: Unable to retrieve current time when processing <info> from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId651" {
		dissect {
			mapping => { "message" => "Unable to retrieve current time when processing %{info} from AP %{macaddr}" }
			id => "msgParserId651"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId652
	# line in RSA: Keeping connection from AP <macaddr> <info>
	else if [logstash][msgparser][id] == "msgParserId652" {
		dissect {
			mapping => { "message" => "Keeping connection from AP %{macaddr} %{info}" }
			id => "msgParserId652"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId653
	# line in RSA: Unable to retrieve time information to send AP timesync config packet
	else if [logstash][msgparser][id] == "msgParserId653" {
		dissect {
			mapping => { "message" => "Unable to retrieve time information to send AP timesync config packet" }
			id => "msgParserId653"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId654
	# line in RSA: <info> AP: <macaddr>
	else if [logstash][msgparser][id] == "msgParserId654" {
		dissect {
			mapping => { "message" => "%{info} AP: %{macaddr}" }
			id => "msgParserId654"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId655
	# line in RSA: Failed to free <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId655" {
		dissect {
			mapping => { "message" => "Failed to free %{info}; AP %{macaddr}" }
			id => "msgParserId655"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId656
	# line in RSA: Failed to start <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId656" {
		dissect {
			mapping => { "message" => "Failed to start %{info}; AP %{macaddr}" }
			id => "msgParserId656"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId657
	# line in RSA:  Could not transmit LWAPP packet, <reason>
	else if [logstash][msgparser][id] == "msgParserId657" {
		dissect {
			mapping => { "message" => "Could not transmit LWAPP packet, %{reason}" }
			id => "msgParserId657"
			add_field => {
				"action" => "Could not transmit LWAPP packet"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId658
	# line in RSA:  Transmission of LWAPP message failed for AP <saddr>
	else if [logstash][msgparser][id] == "msgParserId658" {
		dissect {
			mapping => { "message" => "Transmission of LWAPP message failed for AP %{saddr}" }
			id => "msgParserId658"
			add_field => {
				"action" => "Transmission of LWAPP message failed for AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId659
	# line in RSA:   Max retransmissions for LWAPP control message reached on AP <saddr> <info>)
	else if [logstash][msgparser][id] == "msgParserId659" {
		dissect {
			mapping => { "message" => "Max retransmissions for LWAPP control message reached on AP %{saddr} %{info})" }
			id => "msgParserId659"
			add_field => {
				"action" => "Max retransmissions for LWAPP control message reached on AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId660
	# line in RSA: Unable to retrieve APs (<macaddr>) reachability information (VLAN identifier, port number, etc) to <info>
	else if [logstash][msgparser][id] == "msgParserId660" {
		dissect {
			mapping => { "message" => "Unable to retrieve APs (%{macaddr}) reachability information (VLAN identifier, port number, etc) to %{info}" }
			id => "msgParserId660"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId661
	# line in RSA: Failed to transmit <info> to AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId661" {
		dissect {
			mapping => { "message" => "Failed to transmit %{info} to AP %{macaddr}" }
			id => "msgParserId661"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId662
	# line in RSA: Could not send LWAPP control packet, <info> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId662" {
		dissect {
			mapping => { "message" => "Could not send LWAPP control packet, %{info} on interface %{interface}" }
			id => "msgParserId662"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId663
	# line in RSA: Could not transmit LWAPP control packet <info>
	else if [logstash][msgparser][id] == "msgParserId663" {
		dissect {
			mapping => { "message" => "Could not transmit LWAPP control packet %{info}" }
			id => "msgParserId663"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId664
	# line in RSA: Unable to determine MTU for interface <interface>
	else if [logstash][msgparser][id] == "msgParserId664" {
		dissect {
			mapping => { "message" => "Unable to determine MTU for interface %{interface}" }
			id => "msgParserId664"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId665
	# line in RSA: Received <info>) in the packet from AP <macaddr>, dropping the packet
	else if [logstash][msgparser][id] == "msgParserId665" {
		dissect {
			mapping => { "message" => "Received %{info}) in the packet from AP %{macaddr}, dropping the packet" }
			id => "msgParserId665"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId666
	# line in RSA: Refusing image download request from unsupported AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId666" {
		dissect {
			mapping => { "message" => "Refusing image download request from unsupported AP %{macaddr}" }
			id => "msgParserId666"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId667
	# line in RSA: Received an <info>: AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId667" {
		dissect {
			mapping => { "message" => "Received an %{info}: AP %{macaddr}" }
			id => "msgParserId667"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId668
	# line in RSA: Received an <info>
	else if [logstash][msgparser][id] == "msgParserId668" {
		dissect {
			mapping => { "message" => "Received an %{info}" }
			id => "msgParserId668"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId669
	# line in RSA: Received an <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId669" {
		dissect {
			mapping => { "message" => "Received an %{info}; AP %{macaddr}" }
			id => "msgParserId669"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId670
	# line in RSA: Validation of <info> - AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId670" {
		dissect {
			mapping => { "message" => "Validation of %{info} - AP %{macaddr}" }
			id => "msgParserId670"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId671
	# line in RSA: Invalid vendor identifier in vendor specific payload from AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId671" {
		dissect {
			mapping => { "message" => "Invalid vendor identifier in vendor specific payload from AP %{macaddr}" }
			id => "msgParserId671"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId672
	# line in RSA: Failed decoding vendor specific payload
	else if [logstash][msgparser][id] == "msgParserId672" {
		dissect {
			mapping => { "message" => "Failed decoding vendor specific payload" }
			id => "msgParserId672"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId673
	# line in RSA: Unable to find WLAN <wlan> - <info>; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId673" {
		dissect {
			mapping => { "message" => "Unable to find WLAN %{wlan} - %{info}; AP %{macaddr}" }
			id => "msgParserId673"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId674
	# line in RSA: Unable to find WLAN <wlan> to be deleted; AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId674" {
		dissect {
			mapping => { "message" => "Unable to find WLAN %{wlan} to be deleted; AP %{macaddr}" }
			id => "msgParserId674"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId675
	# line in RSA: Unable to add WLAN on AP <macaddr> - max limit reached
	else if [logstash][msgparser][id] == "msgParserId675" {
		dissect {
			mapping => { "message" => "Unable to add WLAN on AP %{macaddr} - max limit reached" }
			id => "msgParserId675"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId676
	# line in RSA: Unable to find WLAN <wlan> to be updated on AP <macaddr>
	else if [logstash][msgparser][id] == "msgParserId676" {
		dissect {
			mapping => { "message" => "Unable to find WLAN %{wlan} to be updated on AP %{macaddr}" }
			id => "msgParserId676"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId677
	# line in RSA:  All Export-Anchors are down on WLAN <fld6>
	else if [logstash][msgparser][id] == "msgParserId677" {
		dissect {
			mapping => { "message" => "All Export-Anchors are down on WLAN %{fld6}" }
			id => "msgParserId677"
			add_field => {
				"action" => "All Export-Anchors are down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId678
	# line in RSA:  Received an invalid packet from <saddr>.Source member:<paddr>. source member unknown.
	else if [logstash][msgparser][id] == "msgParserId678" {
		dissect {
			mapping => { "message" => "Received an invalid packet from %{saddr}.Source member:%{paddr}. source member unknown." }
			id => "msgParserId678"
			add_field => {
				"action" => "Received an invalid packet"
				"reason" => "source member unknown"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId679
	# line in RSA:  Control path to mobility member <saddr> is DOWN.
	else if [logstash][msgparser][id] == "msgParserId679" {
		dissect {
			mapping => { "message" => "Control path to mobility member %{saddr} is DOWN." }
			id => "msgParserId679"
			add_field => {
				"event_description" => "Control path to mobility member is DOWN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId680
	# line in RSA:  Failed to delete PMK cache entry for station <paddr> with request from {switch|controller} <saddr>
	else if [logstash][msgparser][id] == "msgParserId680" {
		grok {
			match => { "message" => "^[\s]*Failed[\s]+to[\s]+delete[\s]+PMK[\s]+cache[\s]+entry[\s]+for[\s]+station[\s]+(?<paddr>[^\s]*)[\s]+with[\s]+request[\s]+from[\s]+(switch|controller)[\s]+(?<saddr>.*)$" }
			id => "msgParserId680"
			add_field => {
				"action" => "Failed to delete PMK cache entry for station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId681
	# line in RSA:  { Control | Data } path to mobility member <saddr>is DOWN.
	else if [logstash][msgparser][id] == "msgParserId681" {
		grok {
			match => { "message" => "^[\s]*([\s]*Control[\s]+|[\s]*Data[\s]+)[\s]+path[\s]+to[\s]+mobility[\s]+member[\s]+(?<saddr>[^i]*)is[\s]+DOWN\.$" }
			id => "msgParserId681"
			add_field => {
				"action" => "path to mobility member is DOWN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId682
	# line in RSA:  { Control | Data } path to mobility member <saddr>is UP.
	else if [logstash][msgparser][id] == "msgParserId682" {
		grok {
			match => { "message" => "^[\s]*([\s]*Control[\s]+|[\s]*Data[\s]+)[\s]+path[\s]+to[\s]+mobility[\s]+member[\s]+(?<saddr>[^i]*)is[\s]+UP\.$" }
			id => "msgParserId682"
			add_field => {
				"action" => "path to mobility member is DOWN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId683
	# line in RSA:  Failed to send a message to the message queue object: <obj_name>.<reason>
	else if [logstash][msgparser][id] == "msgParserId683" {
		dissect {
			mapping => { "message" => "Failed to send a message to the message queue object: %{obj_name}.%{reason}" }
			id => "msgParserId683"
			add_field => {
				"event_description" => "Failed to send a message to the message queue object"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId684
	# line in RSA:  Failed to acquire a mutual exclusion object. invalid(NULL) pointer passed.
	else if [logstash][msgparser][id] == "msgParserId684" {
		dissect {
			mapping => { "message" => "Failed to acquire a mutual exclusion object. invalid(NULL) pointer passed." }
			id => "msgParserId684"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId685
	# line in RSA:  Detected forward time shift. Last: <change_old>. --> Now:<change_new>.
	else if [logstash][msgparser][id] == "msgParserId685" {
		dissect {
			mapping => { "message" => "Detected forward time shift. Last: %{change_old}. --> Now:%{change_new}." }
			id => "msgParserId685"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId686
	# line in RSA:  Timer <product> ('<group>') found to be destroyed/<reason>.
	else if [logstash][msgparser][id] == "msgParserId686" {
		dissect {
			mapping => { "message" => "Timer %{product} ('%{group}') found to be destroyed/%{reason}." }
			id => "msgParserId686"
			add_field => {
				"action" => "Timer found to be destroyed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId687
	# line in RSA: Failed to retrive timer.
	else if [logstash][msgparser][id] == "msgParserId687" {
		dissect {
			mapping => { "message" => "Failed to retrive timer." }
			id => "msgParserId687"
			add_field => {
				"action" => "Failed to retrive timer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId688
	# line in RSA:  Unable to allow user <username> into the system - <reason>
	else if [logstash][msgparser][id] == "msgParserId688" {
		dissect {
			mapping => { "message" => "Unable to allow user %{username} into the system - %{reason}" }
			id => "msgParserId688"
			add_field => {
				"action" => "Unable to allow user into the system"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId689
	# line in RSA:  { Web authentication failure for station | <result>, web authentication failed for the station } <saddr>
	else if [logstash][msgparser][id] == "msgParserId689" {
		grok {
			match => { "message" => "^[\s]*([\s]*Web[\s]+authentication[\s]+failure[\s]+for[\s]+station[\s]+|[\s]*(?<result>[^,]*),[\s]+web[\s]+authentication[\s]+failed[\s]+for[\s]+the[\s]+station[\s]+)[\s]+(?<saddr>.*)$" }
			id => "msgParserId689"
			add_field => {
				"action" => "Web authentication failure for station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId690
	# line in RSA: poePortResync returned FAILURE.
	else if [logstash][msgparser][id] == "msgParserId690" {
		dissect {
			mapping => { "message" => "poePortResync returned FAILURE." }
			id => "msgParserId690"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId691
	# line in RSA:  Unable to find AP <macaddr> entry in the database, <reason>
	else if [logstash][msgparser][id] == "msgParserId691" {
		dissect {
			mapping => { "message" => "Unable to find AP %{macaddr} entry in the database, %{reason}" }
			id => "msgParserId691"
			add_field => {
				"event_description" => "Unable to find AP entry in the database"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId692
	# line in RSA:   <product>: <protocol>: Invalid 802.11A Rate Information
	else if [logstash][msgparser][id] == "msgParserId692" {
		dissect {
			mapping => { "message" => "%{product}: %{protocol}: Invalid 802.11A Rate Information" }
			id => "msgParserId692"
			add_field => {
				"action" => "Invalid 802.11A Rate Information"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "RRM-3-RRM_LOGMSG" {
		# MESSAGE RRM-3-RRM_LOGMSG
		# line in RSA:   <product>: <protocol>: Unsupported tx power level selected on AP <saddr>(<ntype>) to ( <reason>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{product}: %{protocol}: Unsupported tx power level selected on AP %{saddr}(%{ntype}) to ( %{reason})" }
				id => "message-RRM-3-RRM_LOGMSG"
				add_field => {
				"action" => "Unsupported tx power level selected on AP"
					"[event][id]" => "RRM-3-RRM_LOGMSG"
					"[rsa][message][id1]" => "RRM-3-RRM_LOGMSG"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE RRM-3-RRM_LOGMSG:01
		# line in RSA: <product>: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{product}: %{info}" }
				id => "message-RRM-3-RRM_LOGMSG:01"
				add_field => {
					"[event][id]" => "RRM-3-RRM_LOGMSG:01"
					"[rsa][message][id1]" => "RRM-3-RRM_LOGMSG:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId695
	# line in RSA:  Received a packet without a requested ip!.
	else if [logstash][msgparser][id] == "msgParserId695" {
		dissect {
			mapping => { "message" => "Received a packet without a requested ip!." }
			id => "msgParserId695"
			add_field => {
				"event_description" => "Received a packet without a requested ip"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId696
	# line in RSA:  Failed to get DHCP response on interface '<interface>'. <reason>.
	else if [logstash][msgparser][id] == "msgParserId696" {
		dissect {
			mapping => { "message" => "Failed to get DHCP response on interface '%{interface}'. %{reason}." }
			id => "msgParserId696"
			add_field => {
				"action" => "Failed to get DHCP response on interface"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId697
	# line in RSA: Failed to get the Interface number of the Gigabit Ethernet Port
	else if [logstash][msgparser][id] == "msgParserId697" {
		dissect {
			mapping => { "message" => "Failed to get the Interface number of the Gigabit Ethernet Port" }
			id => "msgParserId697"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId698
	# line in RSA:  Interface <interface> source MAC address is not found.
	else if [logstash][msgparser][id] == "msgParserId698" {
		dissect {
			mapping => { "message" => "Interface %{interface} source MAC address is not found." }
			id => "msgParserId698"
			add_field => {
				"event_description" => "Interface source MAC address not found"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId699
	# line in RSA:   Intf <fld6> source MAC address is not found.
	else if [logstash][msgparser][id] == "msgParserId699" {
		dissect {
			mapping => { "message" => "Intf %{fld6} source MAC address is not found." }
			id => "msgParserId699"
			add_field => {
				"action" => "source MAC address is not found"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId700
	# line in RSA:   Physical port <fld1> is down
	else if [logstash][msgparser][id] == "msgParserId700" {
		dissect {
			mapping => { "message" => "Physical port %{fld1} is down" }
			id => "msgParserId700"
			add_field => {
				"action" => "Physical port is down"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId701
	# line in RSA:  Interface <interface> source MAC address is not found. Using the system MAC <macaddr> instead.
	else if [logstash][msgparser][id] == "msgParserId701" {
		dissect {
			mapping => { "message" => "Interface %{interface} source MAC address is not found. Using the system MAC %{macaddr} instead." }
			id => "msgParserId701"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId702
	# line in RSA:  <protocol>: Failed to create avl tree
	else if [logstash][msgparser][id] == "msgParserId702" {
		dissect {
			mapping => { "message" => "%{protocol}: Failed to create avl tree" }
			id => "msgParserId702"
			add_field => {
				"action" => "Failed to create avl tree"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId703
	# line in RSA: Failed to get <process> for AP <macaddr>, API return code: <info>.
	else if [logstash][msgparser][id] == "msgParserId703" {
		dissect {
			mapping => { "message" => "Failed to get %{process} for AP %{macaddr}, API return code: %{info}." }
			id => "msgParserId703"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId704
	# line in RSA:  Setting hardware time to <reason>
	else if [logstash][msgparser][id] == "msgParserId704" {
		dissect {
			mapping => { "message" => "Setting hardware time to %{reason}" }
			id => "msgParserId704"
			add_field => {
				"action" => "Setting hardware time"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SPECTRUM-3-CA_LOGMSG" {
		# MESSAGE SPECTRUM-3-CA_LOGMSG:02
		# line in RSA:  SPECTRUM LOG: Encoding IDRs message failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SPECTRUM LOG: Encoding IDRs message failed" }
				id => "message-SPECTRUM-3-CA_LOGMSG:02"
				add_field => {
				"event_description" => "Encoding IDRs message failed"
					"[event][id]" => "SPECTRUM-3-CA_LOGMSG:02"
					"[rsa][message][id1]" => "SPECTRUM-3-CA_LOGMSG:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SPECTRUM-3-CA_LOGMSG:01
		# line in RSA:  SPECTRUM LOG:  <action> NMSP Transmit Failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SPECTRUM LOG:  %{action} NMSP Transmit Failure" }
				id => "message-SPECTRUM-3-CA_LOGMSG:01"
				add_field => {
				"event_description" => "NMSP Transmit Failure"
					"[event][id]" => "SPECTRUM-3-CA_LOGMSG:01"
					"[rsa][message][id1]" => "SPECTRUM-3-CA_LOGMSG:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SPECTRUM-3-CA_LOGMSG
		# line in RSA:  <event_source>: <event_type>: unable to retrieve channel list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source}: %{event_type}: unable to retrieve channel list" }
				id => "message-SPECTRUM-3-CA_LOGMSG"
				add_field => {
				"event_description" => "unable to retrieve channel list"
					"[event][id]" => "SPECTRUM-3-CA_LOGMSG"
					"[rsa][message][id1]" => "SPECTRUM-3-CA_LOGMSG"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId708
	# line in RSA:  TFTP Timeout <reason>.
	else if [logstash][msgparser][id] == "msgParserId708" {
		dissect {
			mapping => { "message" => "TFTP Timeout %{reason}." }
			id => "msgParserId708"
			add_field => {
				"action" => "TFTP Timeout"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId709
	# line in RSA:  Server error <ntype>: message is: "<action>".
	else if [logstash][msgparser][id] == "msgParserId709" {
		dissect {
			mapping => { "message" => "Server error %{ntype}: message is: \"%{action}\"." }
			id => "msgParserId709"
			add_field => {
				"reason" => "Server error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId710
	# line in RSA:  TFTP Timeout <reason>.<info>.
	else if [logstash][msgparser][id] == "msgParserId710" {
		dissect {
			mapping => { "message" => "TFTP Timeout %{reason}.%{info}." }
			id => "msgParserId710"
			add_field => {
				"event_description" => "TFTP Timeout"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId711
	# line in RSA:  Send block #<ntype>, got ACK for #<fld6>.
	else if [logstash][msgparser][id] == "msgParserId711" {
		dissect {
			mapping => { "message" => "Send block #%{ntype}, got ACK for #%{fld6}." }
			id => "msgParserId711"
			add_field => {
				"action" => "Send block - ACK mismatch"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId712
	# line in RSA: Could not send the LWAPP Add Mobile command to the AP <macaddr> associated to Rogue AP <smacaddr>. <info>
	else if [logstash][msgparser][id] == "msgParserId712" {
		dissect {
			mapping => { "message" => "Could not send the LWAPP Add Mobile command to the AP %{macaddr} associated to Rogue AP %{smacaddr}. %{info}" }
			id => "msgParserId712"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId713
	# line in RSA: Could not send the LWAPP Authenticate Mobile command to rogue AP <macaddr> for mobile <smacaddr>. <info>
	else if [logstash][msgparser][id] == "msgParserId713" {
		dissect {
			mapping => { "message" => "Could not send the LWAPP Authenticate Mobile command to rogue AP %{macaddr} for mobile %{smacaddr}. %{info}" }
			id => "msgParserId713"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId714
	# line in RSA: Announce collision for mobile <smacaddr>, deleting.
	else if [logstash][msgparser][id] == "msgParserId714" {
		dissect {
			mapping => { "message" => "Announce collision for mobile %{smacaddr}, deleting." }
			id => "msgParserId714"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId715
	# line in RSA:  Unable to properly enter state <code> AP <macaddr>.
	else if [logstash][msgparser][id] == "msgParserId715" {
		dissect {
			mapping => { "message" => "Unable to properly enter state %{code} AP %{macaddr}." }
			id => "msgParserId715"
			add_field => {
				"event_description" => "Unable to properly enter state"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId716
	# line in RSA:  Unable to properly exit state <code> AP <macaddr>.
	else if [logstash][msgparser][id] == "msgParserId716" {
		dissect {
			mapping => { "message" => "Unable to properly exit state %{code} AP %{macaddr}." }
			id => "msgParserId716"
			add_field => {
				"event_description" => "Unable to properly exit state"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId717
	# line in RSA: Unable to delete username <c_user_name> for mobile <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId717" {
		dissect {
			mapping => { "message" => "Unable to delete username %{c_user_name} for mobile %{smacaddr}" }
			id => "msgParserId717"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId718
	# line in RSA:  Unable to create wired guest client entry for <smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId718" {
		dissect {
			mapping => { "message" => "Unable to create wired guest client entry for %{smacaddr}." }
			id => "msgParserId718"
			add_field => {
				"event_description" => "Unable to create wired guest client entry for AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId719
	# line in RSA:  ARP entry overwrite, <reason> with MAC-ID  <smacaddr> and IP Address <saddr>, <info>
	else if [logstash][msgparser][id] == "msgParserId719" {
		dissect {
			mapping => { "message" => "ARP entry overwrite, %{reason} with MAC-ID  %{smacaddr} and IP Address %{saddr}, %{info}" }
			id => "msgParserId719"
			add_field => {
				"event_description" => "ARP entry overwrite"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId720
	# line in RSA: Could not send <context> reply to <macaddr>. <info>
	else if [logstash][msgparser][id] == "msgParserId720" {
		dissect {
			mapping => { "message" => "Could not send %{context} reply to %{macaddr}. %{info}" }
			id => "msgParserId720"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId721
	# line in RSA: Unable to delete an ARP entry for <paddr> from the operating system. <info>
	else if [logstash][msgparser][id] == "msgParserId721" {
		dissect {
			mapping => { "message" => "Unable to delete an ARP entry for %{paddr} from the operating system. %{info}" }
			id => "msgParserId721"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId722
	# line in RSA:  STA(Target MAC Address) [<macaddr>, <hostip>] ARP (<action>) received with invalid SPA(Source IP Address) <saddr>/TPA(Destination IP Address) <daddr>
	else if [logstash][msgparser][id] == "msgParserId722" {
		dissect {
			mapping => { "message" => "STA(Target MAC Address) [%{macaddr}, %{hostip}] ARP (%{action}) received with invalid SPA(Source IP Address) %{saddr}/TPA(Destination IP Address) %{daddr}" }
			id => "msgParserId722"
			add_field => {
				"event_description" => "ARP received with invalid SPA IP Address"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId723
	# line in RSA:  <smacaddr> <saddr> Unable to delete ARP mappingIP belongs to <dmacaddr>
	else if [logstash][msgparser][id] == "msgParserId723" {
		dissect {
			mapping => { "message" => "%{smacaddr} %{saddr} Unable to delete ARP mappingIP belongs to %{dmacaddr}" }
			id => "msgParserId723"
			add_field => {
				"event_description" => "Unable to delete ARP mappingIP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId724
	# line in RSA: Failed to complete DTLS handshake with peer <paddr>
	else if [logstash][msgparser][id] == "msgParserId724" {
		dissect {
			mapping => { "message" => "Failed to complete DTLS handshake with peer %{paddr}" }
			id => "msgParserId724"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId725
	# line in RSA:  DTLS connection established to <daddr>
	else if [logstash][msgparser][id] == "msgParserId725" {
		dissect {
			mapping => { "message" => "DTLS connection established to %{daddr}" }
			id => "msgParserId725"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId726
	# line in RSA:  DTLS peer <daddr> has closed connection.
	else if [logstash][msgparser][id] == "msgParserId726" {
		dissect {
			mapping => { "message" => "DTLS peer %{daddr} has closed connection." }
			id => "msgParserId726"
			add_field => {
				"event_description" => "DTLS peer has closed connection"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId727
	# line in RSA:  Record ignored - <reason>.
	else if [logstash][msgparser][id] == "msgParserId727" {
		dissect {
			mapping => { "message" => "Record ignored - %{reason}." }
			id => "msgParserId727"
			add_field => {
				"event_description" => "Record ignored"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId728
	# line in RSA:  Duplicate record received - <reason>.
	else if [logstash][msgparser][id] == "msgParserId728" {
		dissect {
			mapping => { "message" => "Duplicate record received - %{reason}." }
			id => "msgParserId728"
			add_field => {
				"event_description" => "Duplicate record received"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId729
	# line in RSA: All export anchors are down. Cannot anchor the client. <macaddr>
	else if [logstash][msgparser][id] == "msgParserId729" {
		dissect {
			mapping => { "message" => "All export anchors are down. Cannot anchor the client. %{macaddr}" }
			id => "msgParserId729"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId730
	# line in RSA:  All Export-Anchors are down on Guest LAN <wlan>
	else if [logstash][msgparser][id] == "msgParserId730" {
		dissect {
			mapping => { "message" => "All Export-Anchors are down on Guest LAN %{wlan}" }
			id => "msgParserId730"
			add_field => {
				"event_description" => "All Export-Anchors are down on Guest LAN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId731
	# line in RSA: Unable to allow user <c_user_name> into the system. <info>
	else if [logstash][msgparser][id] == "msgParserId731" {
		dissect {
			mapping => { "message" => "Unable to allow user %{c_user_name} into the system. %{info}" }
			id => "msgParserId731"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId732
	# line in RSA:  Port <sport> Admin Mode is Disable!
	else if [logstash][msgparser][id] == "msgParserId732" {
		dissect {
			mapping => { "message" => "Port %{sport} Admin Mode is Disable!" }
			id => "msgParserId732"
			add_field => {
				"event_description" => "Port Admin Mode Disable"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId733
	# line in RSA:  Port <network_port> Admin Mode is Enabled (retry-<dclass_counter1>)!
	else if [logstash][msgparser][id] == "msgParserId733" {
		dissect {
			mapping => { "message" => "Port %{network_port} Admin Mode is Enabled (retry-%{dclass_counter1})!" }
			id => "msgParserId733"
			add_field => {
				"event_description" => "Port Admin Mode Enabled"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId734
	# line in RSA:  Form submission failed for file: <filename>
	else if [logstash][msgparser][id] == "msgParserId734" {
		dissect {
			mapping => { "message" => "Form submission failed for file: %{filename}" }
			id => "msgParserId734"
			add_field => {
				"event_description" => "Form submission failed for file"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId735
	# line in RSA: Unable to create wired guest client entry for <smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId735" {
		dissect {
			mapping => { "message" => "Unable to create wired guest client entry for %{smacaddr}." }
			id => "msgParserId735"
			add_field => {
				"event_description" => "Unable to create wired guest client entry"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId736
	# line in RSA: AP ip address is not valid. Discarding packet to AP.
	else if [logstash][msgparser][id] == "msgParserId736" {
		dissect {
			mapping => { "message" => "AP ip address is not valid. Discarding packet to AP." }
			id => "msgParserId736"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId737
	# line in RSA:  WGB and wired client have same MAC <macaddr> in IAPP Delete wired client message, <reason>.
	else if [logstash][msgparser][id] == "msgParserId737" {
		dissect {
			mapping => { "message" => "WGB and wired client have same MAC %{macaddr} in IAPP Delete wired client message, %{reason}." }
			id => "msgParserId737"
			add_field => {
				"event_description" => "WGB and wired client have same MAC in IAPP in IAPP Delete wired client message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId738
	# line in RSA:  Failed to process an association request from <smacaddr>. WLAN:<wlan>, SSID:<ssid>. <reason>.
	else if [logstash][msgparser][id] == "msgParserId738" {
		dissect {
			mapping => { "message" => "Failed to process an association request from %{smacaddr}. WLAN:%{wlan}, SSID:%{ssid}. %{reason}." }
			id => "msgParserId738"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId739
	# line in RSA:  Could not process 802.11 Action. <reason> Mobile:<smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId739" {
		dissect {
			mapping => { "message" => "Could not process 802.11 Action. %{reason} Mobile:%{smacaddr}." }
			id => "msgParserId739"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId740
	# line in RSA:  Could not Register IP Add on MSCB. {<reason>address:<macaddr> [<fld1> |<reason> Address:<macaddr> | <reason>address:<macaddr> }
	else if [logstash][msgparser][id] == "msgParserId740" {
		grok {
			match => { "message" => "^[\s]*Could[\s]+not[\s]+Register[\s]+IP[\s]+Add[\s]+on[\s]+MSCB\.[\s]+((?<reason>[^a]*)address:(?<macaddr>[^\s]*)[\s]+\[(?<fld1>[^\s]*)[\s]+|(?<reason>[^\s]*)[\s]+Address:(?<macaddr>[^\s]*)[\s]+|[\s]*(?<reason>[^a]*)address:(?<macaddr>[^\s]*)[\s]+)$" }
			id => "msgParserId740"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId741
	# line in RSA:  Failed to add the rogue AP <macaddr>. <reason>
	else if [logstash][msgparser][id] == "msgParserId741" {
		dissect {
			mapping => { "message" => "Failed to add the rogue AP %{macaddr}. %{reason}" }
			id => "msgParserId741"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId742
	# line in RSA:  Could not update rogue AP <macaddr> with rogue client <smacaddr> information. <reason>
	else if [logstash][msgparser][id] == "msgParserId742" {
		dissect {
			mapping => { "message" => "Could not update rogue AP %{macaddr} with rogue client %{smacaddr} information. %{reason}" }
			id => "msgParserId742"
			add_field => {
				"event_description" => "Could not update rogue AP with rogue client information"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId743
	# line in RSA:  There is no PMK cache entry for client<smacaddr>. Can't do preauth
	else if [logstash][msgparser][id] == "msgParserId743" {
		dissect {
			mapping => { "message" => "There is no PMK cache entry for client%{smacaddr}. Can't do preauth" }
			id => "msgParserId743"
			add_field => {
				"event_description" => "Can't do preauth"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId744
	# line in RSA:  Error updating Association ID for REAP AP Client<smacaddr> - <info>
	else if [logstash][msgparser][id] == "msgParserId744" {
		dissect {
			mapping => { "message" => "Error updating Association ID for REAP AP Client%{smacaddr} - %{info}" }
			id => "msgParserId744"
			add_field => {
				"event_description" => "Error updating Association ID"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId745
	# line in RSA:  Unable to create username <username> for mobile<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId745" {
		dissect {
			mapping => { "message" => "Unable to create username %{username} for mobile%{smacaddr}" }
			id => "msgParserId745"
			add_field => {
				"event_description" => "Unable to create username"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId746
	# line in RSA:  Client deletion failed. Clt mac:<macaddr> Channel Change Occured. Spectrum Mgmt bit set.
	else if [logstash][msgparser][id] == "msgParserId746" {
		dissect {
			mapping => { "message" => "Client deletion failed. Clt mac:%{macaddr} Channel Change Occured. Spectrum Mgmt bit set." }
			id => "msgParserId746"
			add_field => {
				"event_description" => "Client deletion failed due to Channel change and Spectrum mgmt bit set."
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId747
	# line in RSA:  Could not process RADIUS association response. Found mobile in this state after receiving AAA Response.State: <fld1> <macaddr>
	else if [logstash][msgparser][id] == "msgParserId747" {
		dissect {
			mapping => { "message" => "Could not process RADIUS association response. Found mobile in this state after receiving AAA Response.State: %{fld1} %{macaddr}" }
			id => "msgParserId747"
			add_field => {
				"event_description" => "Could not process RADIUS association response"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId748
	# line in RSA:  <fld1>:  DTLS connection not found forAP <access_point>, Controller: <fld2> send packet
	else if [logstash][msgparser][id] == "msgParserId748" {
		dissect {
			mapping => { "message" => "%{fld1}:  DTLS connection not found forAP %{access_point}, Controller: %{fld2} send packet" }
			id => "msgParserId748"
			add_field => {
				"event_description" => "DTLS connection not found forAP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId749
	# line in RSA: AP with same name <access_point> exist. Using default name <info> for this AP.
	else if [logstash][msgparser][id] == "msgParserId749" {
		dissect {
			mapping => { "message" => "AP with same name %{access_point} exist. Using default name %{info} for this AP." }
			id => "msgParserId749"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId750
	# line in RSA:  { The system detects an invalid AP event | Invalid AP event } (<event_type>) and state (<event_state>) combination
	else if [logstash][msgparser][id] == "msgParserId750" {
		grok {
			match => { "message" => "^[\s]*([\s]*The[\s]+system[\s]+detects[\s]+an[\s]+invalid[\s]+AP[\s]+event[\s]+|[\s]*Invalid[\s]+AP[\s]+event[\s]+)[\s]+\((?<event_type>[^\)]*)\)[\s]+and[\s]+state[\s]+\((?<event_state>[^\)]*)\)[\s]+combination$" }
			id => "msgParserId750"
			add_field => {
				"event_description" => "invalid AP event and state combination"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId751
	# line in RSA:  IP protocol (1) in the received packet - from AP <smacaddr> is not UDP, { <info>, <reason> | <reason> }
	else if [logstash][msgparser][id] == "msgParserId751" {
		grok {
			match => { "message" => "^[\s]*IP[\s]+protocol[\s]+\(1\)[\s]+in[\s]+the[\s]+received[\s]+packet[\s]+\-[\s]+from[\s]+AP[\s]+(?<smacaddr>[^\s]*)[\s]+is[\s]+not[\s]+UDP,[\s]+([\s]*(?<info>[^,]*),[\s]+(?<reason>[^\s]*)[\s]+|[\s]*(?<reason>[^\s]*)[\s]+)$" }
			id => "msgParserId751"
			add_field => {
				"event_description" => "IP protocol in received packet from AP is not UDP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId752
	# line in RSA:  Unable to store capwap fragment from <smacaddr>.
	else if [logstash][msgparser][id] == "msgParserId752" {
		dissect {
			mapping => { "message" => "Unable to store capwap fragment from %{smacaddr}." }
			id => "msgParserId752"
			add_field => {
				"event_description" => "Unable to store capwap fragment from AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId753
	# line in RSA: Post decode processing failed for <fld1> from AP <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId753" {
		dissect {
			mapping => { "message" => "Post decode processing failed for %{fld1} from AP %{smacaddr}" }
			id => "msgParserId753"
			add_field => {
				"event_description" => "Post decode processing failed from AP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId754
	# line in RSA:  The system could not release exclusive access of AP entry for <macaddr> in the database
	else if [logstash][msgparser][id] == "msgParserId754" {
		dissect {
			mapping => { "message" => "The system could not release exclusive access of AP entry for %{macaddr} in the database" }
			id => "msgParserId754"
			add_field => {
				"event_description" => "system could not release exclusive access of AP entry for mac in databasei"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId755
	# line in RSA: <macaddr>:  DTLS connection closed forAP <access_point>, Controller: <fld1>(<fld2>) {Echo Timer Expiry|AP Message Timeout}
	else if [logstash][msgparser][id] == "msgParserId755" {
		grok {
			match => { "message" => "^(?<macaddr>[^:]*):[\s]+DTLS[\s]+connection[\s]+closed[\s]+forAP[\s]+(?<access_point>[^,]*),[\s]+Controller:[\s]+(?<fld1>[^\(]*)\((?<fld2>[^\)]*)\)[\s]+(Echo[\s]+Timer[\s]+Expiry|AP[\s]+Message[\s]+Timeout)$" }
			id => "msgParserId755"
			add_field => {
				"event_description" => "DTLS connection closed "
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId756
	# line in RSA: The system is unable to alloc AP entry in database for <fld1>
	else if [logstash][msgparser][id] == "msgParserId756" {
		dissect {
			mapping => { "message" => "The system is unable to alloc AP entry in database for %{fld1}" }
			id => "msgParserId756"
			add_field => {
				"event_description" => "The system is unable to alloc AP entry"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId757
	# line in RSA: Max retransmissions reached on AP(<access_point>),message (<fld1>  ),number of pending messages(<fld2>)
	else if [logstash][msgparser][id] == "msgParserId757" {
		dissect {
			mapping => { "message" => "Max retransmissions reached on AP(%{access_point}),message (%{fld1}  ),number of pending messages(%{fld2})" }
			id => "msgParserId757"
			add_field => {
				"event_description" => "Max retransmissions reached on AP"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId758
	# line in RSA:  Unable to add an ARP entry for <daddr> to the network processor. <reason>
	else if [logstash][msgparser][id] == "msgParserId758" {
		dissect {
			mapping => { "message" => "Unable to add an ARP entry for %{daddr} to the network processor. %{reason}" }
			id => "msgParserId758"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId759
	# line in RSA:  Information not added to the debugging database for AP:<macaddr>, <reason>
	else if [logstash][msgparser][id] == "msgParserId759" {
		dissect {
			mapping => { "message" => "Information not added to the debugging database for AP:%{macaddr}, %{reason}" }
			id => "msgParserId759"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId760
	# line in RSA:  WLAN <wlan> is ready to service clients as an anchor, <hostip> has come up
	else if [logstash][msgparser][id] == "msgParserId760" {
		dissect {
			mapping => { "message" => "WLAN %{wlan} is ready to service clients as an anchor, %{hostip} has come up" }
			id => "msgParserId760"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId761
	# line in RSA:  <fld1> TryLock - <fld2> - TaskID <operation_id> ('<process>') <event_description>
	else if [logstash][msgparser][id] == "msgParserId761" {
		dissect {
			mapping => { "message" => "%{fld1} TryLock - %{fld2} - TaskID %{operation_id} ('%{process}') %{event_description}" }
			id => "msgParserId761"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId762
	# line in RSA:  Task osapi_ping_rx requesting 3 second timer. <info>.<reason>.
	else if [logstash][msgparser][id] == "msgParserId762" {
		dissect {
			mapping => { "message" => "Task osapi_ping_rx requesting 3 second timer. %{info}.%{reason}." }
			id => "msgParserId762"
			add_field => {
				"event_description" => "Task osapi_ping_rx requesting 3 second timer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId763
	# line in RSA:  Reaper cleaning up exited task '<process>' (<fld1>)
	else if [logstash][msgparser][id] == "msgParserId763" {
		dissect {
			mapping => { "message" => "Reaper cleaning up exited task '%{process}' (%{fld1})" }
			id => "msgParserId763"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId764
	# line in RSA:  Failed to release a mutual exclusion object. { mutex unlock failed, <reason>. | <reason>. }
	else if [logstash][msgparser][id] == "msgParserId764" {
		grok {
			match => { "message" => "^[\s]*Failed[\s]+to[\s]+release[\s]+a[\s]+mutual[\s]+exclusion[\s]+object\.[\s]+([\s]*mutex[\s]+unlock[\s]+failed,[\s]+(?<reason>[^\.]*)\.[\s]+|[\s]*(?<reason>[^\.]*)\.[\s]+)$" }
			id => "msgParserId764"
			add_field => {
				"event_description" => "mutex unlock failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId765
	# line in RSA: File : <filename> does not exist.(errno <code>)
	else if [logstash][msgparser][id] == "msgParserId765" {
		dissect {
			mapping => { "message" => "File : %{filename} does not exist.(errno %{code})" }
			id => "msgParserId765"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId766
	# line in RSA:  Internal error, <info>
	else if [logstash][msgparser][id] == "msgParserId766" {
		dissect {
			mapping => { "message" => "Internal error, %{info}" }
			id => "msgParserId766"
			add_field => {
				"event_description" => "Internal error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId767
	# line in RSA:  Entry changed <info>
	else if [logstash][msgparser][id] == "msgParserId767" {
		dissect {
			mapping => { "message" => "Entry changed %{info}" }
			id => "msgParserId767"
			add_field => {
				"event_description" => "Entry changed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId768
	# line in RSA:  Entry created <info>
	else if [logstash][msgparser][id] == "msgParserId768" {
		dissect {
			mapping => { "message" => "Entry created %{info}" }
			id => "msgParserId768"
			add_field => {
				"event_description" => "Entry created"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId769
	# line in RSA:  Entry deleted <info>
	else if [logstash][msgparser][id] == "msgParserId769" {
		dissect {
			mapping => { "message" => "Entry deleted %{info}" }
			id => "msgParserId769"
			add_field => {
				"event_description" => "Entry deleted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId770
	# line in RSA:  Failed to process <bytes> bytes on protocol socket <protocol_detail>
	else if [logstash][msgparser][id] == "msgParserId770" {
		dissect {
			mapping => { "message" => "Failed to process %{bytes} bytes on protocol socket %{protocol_detail}" }
			id => "msgParserId770"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId771
	# line in RSA:  <severity> (<process>): The rule is not in the active configuration. <reason>
	else if [logstash][msgparser][id] == "msgParserId771" {
		dissect {
			mapping => { "message" => "%{severity} (%{process}): The rule is not in the active configuration. %{reason}" }
			id => "msgParserId771"
			add_field => {
				"event_description" => "The rule is not in the active configuration"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId772
	# line in RSA:  Unable to delete rule that has been marked with <fld1>
	else if [logstash][msgparser][id] == "msgParserId772" {
		dissect {
			mapping => { "message" => "Unable to delete rule that has been marked with %{fld1}" }
			id => "msgParserId772"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId773
	# line in RSA:  Setting up application gateway <gateway> on port <network_port>
	else if [logstash][msgparser][id] == "msgParserId773" {
		dissect {
			mapping => { "message" => "Setting up application gateway %{gateway} on port %{network_port}" }
			id => "msgParserId773"
			add_field => {
				"event_description" => "Setting up application gateway on port"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId774
	# line in RSA:  sysnet unable to process packet with encap type <protocol_detail>
	else if [logstash][msgparser][id] == "msgParserId774" {
		dissect {
			mapping => { "message" => "sysnet unable to process packet with encap type %{protocol_detail}" }
			id => "msgParserId774"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SYSTEM-3-SYSAPI_ERR" {
		# MESSAGE SYSTEM-3-SYSAPI_ERR
		# line in RSA:   System Error :  Msg '<disposition>' of Airespace Tables failed, Id = <id> error value = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System Error :  Msg '%{disposition}' of Airespace Tables failed, Id = %{id} error value = %{fld1}" }
				id => "message-SYSTEM-3-SYSAPI_ERR"
				add_field => {
				"event_description" => "Msg of Airespace Tables failed"
					"[event][id]" => "SYSTEM-3-SYSAPI_ERR"
					"[rsa][message][id1]" => "SYSTEM-3-SYSAPI_ERR"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SYSTEM-3-SYSAPI_ERR:01
		# line in RSA:  System Error :  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "System Error :  %{info}" }
				id => "message-SYSTEM-3-SYSAPI_ERR:01"
				add_field => {
				"event_description" => "System Error"
					"[event][id]" => "SYSTEM-3-SYSAPI_ERR:01"
					"[rsa][message][id1]" => "SYSTEM-3-SYSAPI_ERR:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "WPS-4-SIG_ALARM_OFF" {
		# MESSAGE WPS-4-SIG_ALARM_OFF
		# line in RSA:  AP <macaddr> : Alarm <disposition>, standard sig <event_type> probe resp <event_state>, track=<fld1> preced=<fld2> hits=<number> slot=<portname> channel=<wifi_channel>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AP %{macaddr} : Alarm %{disposition}, standard sig %{event_type} probe resp %{event_state}, track=%{fld1} preced=%{fld2} hits=%{number} slot=%{portname} channel=%{wifi_channel}" }
				id => "message-WPS-4-SIG_ALARM_OFF"
				add_field => {
					"[event][id]" => "WPS-4-SIG_ALARM_OFF"
					"[rsa][message][id1]" => "WPS-4-SIG_ALARM_OFF"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WPS-4-SIG_ALARM_OFF:01
		# line in RSA:  AP <macaddr> : Alarm <disposition>, standard sig <event_type>, track=<fld1> preced=<fld2> hits=<number> slot=<portname> channel=<wifi_channel>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AP %{macaddr} : Alarm %{disposition}, standard sig %{event_type}, track=%{fld1} preced=%{fld2} hits=%{number} slot=%{portname} channel=%{wifi_channel}" }
				id => "message-WPS-4-SIG_ALARM_OFF:01"
				add_field => {
					"[event][id]" => "WPS-4-SIG_ALARM_OFF:01"
					"[rsa][message][id1]" => "WPS-4-SIG_ALARM_OFF:01"
					"[event][categoryid]" => "1609000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId779
	# line in RSA:  <event_description>, source mac= <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId779" {
		dissect {
			mapping => { "message" => "%{event_description}, source mac= %{smacaddr}" }
			id => "msgParserId779"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId780
	# line in RSA:  Error on call to sysapiRegistryGet routine with key <param>.
	else if [logstash][msgparser][id] == "msgParserId780" {
		dissect {
			mapping => { "message" => "Error on call to sysapiRegistryGet routine with key %{param}." }
			id => "msgParserId780"
			add_field => {
				"event_description" => "Error on call to sysapiRegistryGet routine"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId781
	# line in RSA:  Error on call to sysapiRegistryGet routine with key<param>.
	else if [logstash][msgparser][id] == "msgParserId781" {
		dissect {
			mapping => { "message" => "Error on call to sysapiRegistryGet routine with key%{param}." }
			id => "msgParserId781"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId782
	# line in RSA:  Failed to delete the file : <filename>. <reason>
	else if [logstash][msgparser][id] == "msgParserId782" {
		dissect {
			mapping => { "message" => "Failed to delete the file : %{filename}. %{reason}" }
			id => "msgParserId782"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId783
	# line in RSA:   Guest user logged in with user account (<username>) MAC address <smacaddr>, IP address <hostip>
	else if [logstash][msgparser][id] == "msgParserId783" {
		dissect {
			mapping => { "message" => "Guest user logged in with user account (%{username}) MAC address %{smacaddr}, IP address %{hostip}" }
			id => "msgParserId783"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "Guest user logged int"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId784
	# line in RSA:  Guest user logged out with user account (<username>) MAC address <smacaddr>, IP address <hostip>
	else if [logstash][msgparser][id] == "msgParserId784" {
		dissect {
			mapping => { "message" => "Guest user logged out with user account (%{username}) MAC address %{smacaddr}, IP address %{hostip}" }
			id => "msgParserId784"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "Guest user logged out"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId785
	# line in RSA:  <reason>Received an invalid Authenticated Key Mgmt WPA OUI code from mobile. Mobile:<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId785" {
		dissect {
			mapping => { "message" => "%{reason}Received an invalid Authenticated Key Mgmt WPA OUI code from mobile. Mobile:%{smacaddr}" }
			id => "msgParserId785"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId786
	# line in RSA:  { Could not Process 802.11 MAC mgmt Data from <smacaddr> to <dmacaddr> - | Could not Process 802.11 MAC mgmt Data. } <reason> - <info>.
	else if [logstash][msgparser][id] == "msgParserId786" {
		grok {
			match => { "message" => "^[\s]*([\s]*Could[\s]+not[\s]+Process[\s]+802\.11[\s]+MAC[\s]+mgmt[\s]+Data[\s]+from[\s]+(?<smacaddr>[^\s]*)[\s]+to[\s]+(?<dmacaddr>[^\s]*)[\s]+\-[\s]+|[\s]*Could[\s]+not[\s]+Process[\s]+802\.11[\s]+MAC[\s]+mgmt[\s]+Data\.[\s]+)[\s]+(?<reason>[^\s]*)[\s]+\-[\s]+(?<info>[^\.]*)\.$" }
			id => "msgParserId786"
			add_field => {
				"event_description" => "Could not Process 802.11 MAC mgmt Data"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId787
	# line in RSA: Not registering IP address <saddr> with netmask <smask> for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId787" {
		dissect {
			mapping => { "message" => "Not registering IP address %{saddr} with netmask %{smask} for client %{smacaddr}" }
			id => "msgParserId787"
			add_field => {
				"event_description" => "Not registering IP address"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "MM-3-MEMORY_READ_ERROR" {
		# MESSAGE MM-3-MEMORY_READ_ERROR:01
		# line in RSA:  Mobility mip memory corrupted, <reason>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Mobility mip memory corrupted, %{reason}. %{info}" }
				id => "message-MM-3-MEMORY_READ_ERROR:01"
				add_field => {
				"event_description" => "Mobility mip memory corrupted"
					"[event][id]" => "MM-3-MEMORY_READ_ERROR:01"
					"[rsa][message][id1]" => "MM-3-MEMORY_READ_ERROR:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE MM-3-MEMORY_READ_ERROR
		# line in RSA:  Error reading mobility memory, possible race condition. Encountered memory error, Please report the error if you experience a crash.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error reading mobility memory, possible race condition. Encountered memory error, Please report the error if you experience a crash." }
				id => "message-MM-3-MEMORY_READ_ERROR"
				add_field => {
					"[event][id]" => "MM-3-MEMORY_READ_ERROR"
					"[rsa][message][id1]" => "MM-3-MEMORY_READ_ERROR"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId790
	# line in RSA: L2TP Error. Session <saddr> failed to open
	else if [logstash][msgparser][id] == "msgParserId790" {
		dissect {
			mapping => { "message" => "L2TP Error. Session %{saddr} failed to open" }
			id => "msgParserId790"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId791
	# line in RSA: L2TP session open terminated for <saddr>
	else if [logstash][msgparser][id] == "msgParserId791" {
		dissect {
			mapping => { "message" => "L2TP session open terminated for %{saddr}" }
			id => "msgParserId791"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ERROR" {
		# MESSAGE ERROR:22
		# line in RSA:  <severity>] <agent> <process_id>: Intf <interface> source MAC address is not found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Intf %{interface} source MAC address is not found" }
				id => "message-ERROR:22"
				add_field => {
				"event_description" => "Interface source MAC address is not found"
					"[event][id]" => "ERROR:22"
					"[rsa][message][id1]" => "ERROR:22"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:21
		# line in RSA:  <severity>] <agent> <process_id>: Multicast Rx queue is full
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Multicast Rx queue is full" }
				id => "message-ERROR:21"
				add_field => {
				"event_description" => "Multicast Rx queue is full"
					"[event][id]" => "ERROR:21"
					"[rsa][message][id1]" => "ERROR:21"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:20
		# line in RSA:  <severity>] <agent> <process_id>: rldpStartAssociation returned failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: rldpStartAssociation returned failure" }
				id => "message-ERROR:20"
				add_field => {
				"event_description" => "rldpStartAssociation returned failure"
					"[event][id]" => "ERROR:20"
					"[rsa][message][id1]" => "ERROR:20"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:19
		# line in RSA:  <severity>] powerSupply.c { 240 | 246 }: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<severity>[^\]]*)\][\s]+powerSupply\.c[\s]+([\s]*240[\s]+|[\s]*246[\s]+):[\s]+(?<event_description>.*)$" }
				id => "message-ERROR:19"
				add_field => {
				"application" => "powerSupply.c"
					"[event][id]" => "ERROR:19"
					"[rsa][message][id1]" => "ERROR:19"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:18
		# line in RSA:  <severity>] sntp_main.c 268: : <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] sntp_main.c 268: : %{event_description}" }
				id => "message-ERROR:18"
				add_field => {
				"application" => "sntp_main.c"
				"process_id" => "268"
					"[event][id]" => "ERROR:18"
					"[rsa][message][id1]" => "ERROR:18"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:17
		# line in RSA:  <severity>] <agent> <process_id>: Received Echo Request from unknown AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received Echo Request from unknown AP %{macaddr}" }
				id => "message-ERROR:17"
				add_field => {
				"event_description" => "Received Echo Request from unknown AP"
					"[event][id]" => "ERROR:17"
					"[rsa][message][id1]" => "ERROR:17"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:16
		# line in RSA:  <severity>] <agent> <process_id>: Decreasing the sendNonce before resending <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Decreasing the sendNonce before resending %{macaddr}" }
				id => "message-ERROR:16"
				add_field => {
				"event_description" => "Decreasing the sendNonce before resending"
					"[event][id]" => "ERROR:16"
					"[rsa][message][id1]" => "ERROR:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:15
		# line in RSA:  <severity>] <agent> <process_id>: AP <macaddr>: Regulatory Domain check Completely FAILED <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: AP %{macaddr}: Regulatory Domain check Completely FAILED %{reason}" }
				id => "message-ERROR:15"
				add_field => {
				"event_description" => "Regulatory Domain check Completely FAILED"
					"[event][id]" => "ERROR:15"
					"[rsa][message][id1]" => "ERROR:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:14
		# line in RSA:  <severity>] <agent> <process_id>: AP <macaddr> <obj_name> (<obj_type>) does not match with country (<reason>)  <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: AP %{macaddr} %{obj_name} (%{obj_type}) does not match with country (%{reason})  %{info}" }
				id => "message-ERROR:14"
				add_field => {
				"event_description" => "AP Regulatory Domain does not match with country"
					"[event][id]" => "ERROR:14"
					"[rsa][message][id1]" => "ERROR:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:13
		# line in RSA:  <severity>] <agent> <process_id>: Security processing of Airewave Director Data failed from AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Security processing of Airewave Director Data failed from AP %{macaddr}" }
				id => "message-ERROR:13"
				add_field => {
				"event_description" => "Security processing of Airewave Director Data failed from AP"
					"[event][id]" => "ERROR:13"
					"[rsa][message][id1]" => "ERROR:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:12
		# line in RSA:  <severity>] <agent> <process_id>: Mobility Group member not known: <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Mobility Group member not known: %{hostip}" }
				id => "message-ERROR:12"
				add_field => {
				"event_description" => "Mobility Group member not known"
					"[event][id]" => "ERROR:12"
					"[rsa][message][id1]" => "ERROR:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:11
		# line in RSA:  <severity>] <agent> <process_id>: Received Airewave Director Data from unknown AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received Airewave Director Data from unknown AP %{macaddr}" }
				id => "message-ERROR:11"
				add_field => {
				"event_description" => "Received Airewave Director Data from unknown AP"
					"[event][id]" => "ERROR:11"
					"[rsa][message][id1]" => "ERROR:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:10
		# line in RSA:  <severity>] <agent> <process_id>: mscb not found for STA <macaddr> - <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: mscb not found for STA %{macaddr} - %{reason}" }
				id => "message-ERROR:10"
				add_field => {
				"event_description" => "mscb not found for STA"
					"[event][id]" => "ERROR:10"
					"[rsa][message][id1]" => "ERROR:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:09
		# line in RSA:  <severity>] <agent> <process_id>: <service>: Unsupported tx power level selected on AP <macaddr>(<fld1>) to (<info>) 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{service}: Unsupported tx power level selected on AP %{macaddr}(%{fld1}) to (%{info})" }
				id => "message-ERROR:09"
				add_field => {
				"event_description" => "Unsupported tx power level selected on AP"
					"[event][id]" => "ERROR:09"
					"[rsa][message][id1]" => "ERROR:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:08
		# line in RSA:  <severity>] <agent> <process_id>: Security processing Statistics Info failed from AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Security processing Statistics Info failed from AP %{macaddr}" }
				id => "message-ERROR:08"
				add_field => {
				"event_description" => "Security processing Statistics Info failed from AP"
					"[event][id]" => "ERROR:08"
					"[rsa][message][id1]" => "ERROR:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:07
		# line in RSA:  <severity>] <agent> <process_id>: <service>(): servPort dhcpstate failed 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{service}(): servPort dhcpstate failed" }
				id => "message-ERROR:07"
				add_field => {
				"event_description" => "servPort dhcpstate failed"
					"[event][id]" => "ERROR:07"
					"[rsa][message][id1]" => "ERROR:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:06
		# line in RSA:  <severity>] <agent> <process_id>: Unable to send Delete-Mobile request to unknown AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to send Delete-Mobile request to unknown AP %{macaddr}" }
				id => "message-ERROR:06"
				add_field => {
				"event_description" => "Unable to send Delete-Mobile request to unknown AP"
					"[event][id]" => "ERROR:06"
					"[rsa][message][id1]" => "ERROR:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:05
		# line in RSA:  <severity>] <agent> <process_id>: Did not receive hearbeat reply from AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Did not receive hearbeat reply from AP %{macaddr}" }
				id => "message-ERROR:05"
				add_field => {
				"event_description" => "Did not receive hearbeat reply from AP"
					"[event][id]" => "ERROR:05"
					"[rsa][message][id1]" => "ERROR:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:04
		# line in RSA:  <severity>] <agent> <process_id>: AP <macaddr> associated. { <info>, reason: <reason> | <info> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<severity>[^\]]*)\][\s]+(?<agent>[^\s]*)[\s]+(?<process_id>[^:]*):[\s]+AP[\s]+(?<macaddr>[^\s]*)[\s]+associated\.[\s]+([\s]*(?<info>[^,]*),[\s]+reason:[\s]+(?<reason>[^\s]*)[\s]+|[\s]*(?<info>[^\s]*)[\s]+)$" }
				id => "message-ERROR:04"
				add_field => {
				"event_description" => "AP associated"
					"[event][id]" => "ERROR:04"
					"[rsa][message][id1]" => "ERROR:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:03
		# line in RSA:  <severity>] <agent> <process_id>: Max retransmissions reached on AP  <macaddr> (<info>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Max retransmissions reached on AP  %{macaddr} (%{info})" }
				id => "message-ERROR:03"
				add_field => {
				"event_description" => "Max retransmissions reached on AP"
					"[event][id]" => "ERROR:03"
					"[rsa][message][id1]" => "ERROR:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:02
		# line in RSA:  <severity>] <agent> <process_id>: Received replay error(<info>) from AP  <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received replay error(%{info}) from AP  %{macaddr}" }
				id => "message-ERROR:02"
				add_field => {
				"event_description" => "Received replay error from AP"
					"[event][id]" => "ERROR:02"
					"[rsa][message][id1]" => "ERROR:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE ERROR:01
		# line in RSA:  <severity>] <agent> <process_id>: TFTP Timeout <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: TFTP Timeout %{reason}" }
				id => "message-ERROR:01"
				add_field => {
				"event_description" => "TFTP Timeout"
					"[event][id]" => "ERROR:01"
					"[rsa][message][id1]" => "ERROR:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "SECURITY" {
		# MESSAGE SECURITY:42
		# line in RSA: <severity>] <agent> <process_id>: STA <space> [<macaddr>, <fld2>] ARP (op <fld3>) received with invalid SPA <saddr>/TPA <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: STA %{space} [%{macaddr}, %{fld2}] ARP (op %{fld3}) received with invalid SPA %{saddr}/TPA %{daddr}" }
				id => "message-SECURITY:42"
				add_field => {
				"action" => "STA ARP received with invalid SPA"
					"[event][id]" => "SECURITY:42"
					"[rsa][message][id1]" => "SECURITY:42"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:41
		# line in RSA:  <severity>] <agent> <process_id>: <smacaddr> <saddr> DHCP_REQD (7) MSCB still in init state -  <reason>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{smacaddr} %{saddr} DHCP_REQD (7) MSCB still in init state -  %{reason}, %{info}" }
				id => "message-SECURITY:41"
				add_field => {
				"event_description" => "DHCP_REQD (7) MSCB still in init state"
					"[event][id]" => "SECURITY:41"
					"[rsa][message][id1]" => "SECURITY:41"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:40
		# line in RSA:  <severity>] <agent> <process_id>: Could not update rogue AP <macaddr> with rogue client <smacaddr> information
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Could not update rogue AP %{macaddr} with rogue client %{smacaddr} information" }
				id => "message-SECURITY:40"
				add_field => {
				"event_description" => "Could not update rogue AP with rogue client informationstation"
					"[event][id]" => "SECURITY:40"
					"[rsa][message][id1]" => "SECURITY:40"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:39
		# line in RSA:  <severity>] <agent> <process_id>: station <smacaddr> not using RSN (<obj_type>) on WLAN (<wlan>) requiring RSN 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: station %{smacaddr} not using RSN (%{obj_type}) on WLAN (%{wlan}) requiring RSN" }
				id => "message-SECURITY:39"
				add_field => {
				"event_description" => "station not using RSN on WLAN requiring RSN"
					"[event][id]" => "SECURITY:39"
					"[rsa][message][id1]" => "SECURITY:39"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:38
		# line in RSA:  <severity>] <agent> <process_id>: Big Nav attack detected on AP <device> slot = <portname> chan = <event_source>, errors = <number>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Big Nav attack detected on AP %{device} slot = %{portname} chan = %{event_source}, errors = %{number}" }
				id => "message-SECURITY:38"
				add_field => {
				"event_description" => "Big Nav attack detected on AP"
					"[event][id]" => "SECURITY:38"
					"[rsa][message][id1]" => "SECURITY:38"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:37
		# line in RSA:  <severity>] <agent> <process_id>: AAA Response Received with invalid proxy state <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: AAA Response Received with invalid proxy state %{macaddr}" }
				id => "message-SECURITY:37"
				add_field => {
				"event_description" => "AAA Response Received with invalid proxy state"
					"[event][id]" => "SECURITY:37"
					"[rsa][message][id1]" => "SECURITY:37"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:36
		# line in RSA:  <severity>] <agent> <process_id>: EAPOL Key message with invalid authenticator replay counter (<change_new>, <change_old>) from mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: EAPOL Key message with invalid authenticator replay counter (%{change_new}, %{change_old}) from mobile %{smacaddr}" }
				id => "message-SECURITY:36"
				add_field => {
				"event_description" => "EAPOL Key message with invalid authenticator replay counter from mobile"
					"[event][id]" => "SECURITY:36"
					"[rsa][message][id1]" => "SECURITY:36"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:35
		# line in RSA:  <severity>] <agent> <process_id>: Unable to find mobile station control block.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to find mobile station control block." }
				id => "message-SECURITY:35"
				add_field => {
				"event_description" => "Unable to find mobile station control block"
					"[event][id]" => "SECURITY:35"
					"[rsa][message][id1]" => "SECURITY:35"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:34
		# line in RSA:  <severity>] <agent> <process_id>: Invalid authentication sequence number
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Invalid authentication sequence number" }
				id => "message-SECURITY:34"
				add_field => {
				"event_description" => "Invalid authentication sequence number"
					"[event][id]" => "SECURITY:34"
					"[rsa][message][id1]" => "SECURITY:34"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:33
		# line in RSA:  <severity>] <agent> <process_id>: Unable to find rogue AP client <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to find rogue AP client %{smacaddr}" }
				id => "message-SECURITY:33"
				add_field => {
				"event_description" => "Unable to find rogue AP client"
					"[event][id]" => "SECURITY:33"
					"[rsa][message][id1]" => "SECURITY:33"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:32
		# line in RSA:  <severity>] <agent> <process_id>: Received an invalid Information Element 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received an invalid Information Element" }
				id => "message-SECURITY:32"
				add_field => {
				"event_description" => "Received an invalid Information Element"
					"[event][id]" => "SECURITY:32"
					"[rsa][message][id1]" => "SECURITY:32"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:31
		# line in RSA:  <severity>] <agent> <process_id>: Received Mobility response for mobile <smacaddr> as anchor while in the wrong state.  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received Mobility response for mobile %{smacaddr} as anchor while in the wrong state." }
				id => "message-SECURITY:31"
				add_field => {
				"event_description" => "Received Mobility response for mobile as anchor while in the wrong state"
					"[event][id]" => "SECURITY:31"
					"[rsa][message][id1]" => "SECURITY:31"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:30
		# line in RSA:  <severity>] <agent> <process_id>: <action> Can not associate with <macaddr> Rogue AP 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{action} Can not associate with %{macaddr} Rogue AP" }
				id => "message-SECURITY:30"
				add_field => {
				"event_description" => "Can not associate with Rogue AP"
					"[event][id]" => "SECURITY:30"
					"[rsa][message][id1]" => "SECURITY:30"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:29
		# line in RSA:  <severity>] <agent> <process_id>: Local Anchor failed for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Local Anchor failed for mobile %{smacaddr}" }
				id => "message-SECURITY:29"
				add_field => {
				"event_description" => "Local Anchor failed for mobile"
					"[event][id]" => "SECURITY:29"
					"[rsa][message][id1]" => "SECURITY:29"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:28
		# line in RSA:  <severity>] <agent> <process_id>: Error processing 802.11i IE from station <macaddr> (error=<code>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Error processing 802.11i IE from station %{macaddr} (error=%{code})" }
				id => "message-SECURITY:28"
				add_field => {
				"event_description" => "Error processing 802.11i IE from station"
					"[event][id]" => "SECURITY:28"
					"[rsa][message][id1]" => "SECURITY:28"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:27
		# line in RSA:  <severity>] <agent> <process_id>: Adding <macaddr> to exclusion list <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Adding %{macaddr} to exclusion list %{reason}" }
				id => "message-SECURITY:27"
				add_field => {
				"event_description" => "Adding mobile to exclusion list"
					"[event][id]" => "SECURITY:27"
					"[rsa][message][id1]" => "SECURITY:27"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:26
		# line in RSA:  <severity>] <agent> <process_id>: Failed transmission of Accounting-Start to <saddr>/<sport> for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Failed transmission of Accounting-Start to %{saddr}/%{sport} for mobile %{smacaddr}" }
				id => "message-SECURITY:26"
				add_field => {
				"event_description" => "Failed transmission of Accounting-Start to host for mobile"
					"[event][id]" => "SECURITY:26"
					"[rsa][message][id1]" => "SECURITY:26"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:25
		# line in RSA:  <severity>] <agent> <process_id>: Disconnecting mobile <smacaddr> <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Disconnecting mobile %{smacaddr} %{reason}" }
				id => "message-SECURITY:25"
				add_field => {
				"event_description" => "Disconnecting mobile"
					"[event][id]" => "SECURITY:25"
					"[rsa][message][id1]" => "SECURITY:25"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:24
		# line in RSA:  <severity>] <agent> <process_id>: Unable to find a valid PMK for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to find a valid PMK for mobile %{smacaddr}" }
				id => "message-SECURITY:24"
				add_field => {
				"event_description" => "Unable to find a valid PMK for mobile"
					"[event][id]" => "SECURITY:24"
					"[rsa][message][id1]" => "SECURITY:24"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:23
		# line in RSA:  <severity>] <agent> <process_id>: Unable to create AAA message for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to create AAA message for mobile %{smacaddr}" }
				id => "message-SECURITY:23"
				add_field => {
				"event_description" => "Unable to create AAA message for mobile"
					"[event][id]" => "SECURITY:23"
					"[rsa][message][id1]" => "SECURITY:23"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:22
		# line in RSA:  <severity>] <agent> <process_id>: Received an empty EAP message from mobile {<smacaddr> ((<fld1>), <fld2>) |<smacaddr>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<severity>[^\]]*)\][\s]+(?<agent>[^\s]*)[\s]+(?<process_id>[^:]*):[\s]+Received[\s]+an[\s]+empty[\s]+EAP[\s]+message[\s]+from[\s]+mobile[\s]+((?<smacaddr>[^\s]*)[\s]+\(\((?<fld1>[^\)]*)\),[\s]+(?<fld2>[^\)]*)\)[\s]+|(?<smacaddr>.*))$" }
				id => "message-SECURITY:22"
				add_field => {
				"event_description" => "Received an empty EAP message from mobile"
					"[event][id]" => "SECURITY:22"
					"[rsa][message][id1]" => "SECURITY:22"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:21
		# line in RSA:  <severity>] <agent> <process_id>: Web authentication failure for station <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Web authentication failure for station %{macaddr}" }
				id => "message-SECURITY:21"
				add_field => {
				"event_description" => "Web authentication failure for station"
					"[event][id]" => "SECURITY:21"
					"[rsa][message][id1]" => "SECURITY:21"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:20
		# line in RSA:  <severity>] <agent> <process_id>: 802.1X control block NULL for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: 802.1X control block NULL for mobile %{smacaddr}" }
				id => "message-SECURITY:20"
				add_field => {
				"event_description" => "802.1X control block NULL for mobile"
					"[event][id]" => "SECURITY:20"
					"[rsa][message][id1]" => "SECURITY:20"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:19
		# line in RSA:  <severity>] <agent> <process_id>: Received EAPOL-key <obj_type> with invalid MIC from mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received EAPOL-key %{obj_type} with invalid MIC from mobile %{smacaddr}" }
				id => "message-SECURITY:19"
				add_field => {
				"event_description" => "Received EAPOL-key with invalid MIC from mobile"
					"[event][id]" => "SECURITY:19"
					"[rsa][message][id1]" => "SECURITY:19"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:18
		# line in RSA:  <severity>] <agent> <process_id>: Unable to keep rogue <macaddr> in contained state - <reason>. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to keep rogue %{macaddr} in contained state - %{reason}." }
				id => "message-SECURITY:18"
				add_field => {
				"event_description" => "Unable to keep rogue in contained state"
					"[event][id]" => "SECURITY:18"
					"[rsa][message][id1]" => "SECURITY:18"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:17
		# line in RSA:  <severity>] <agent> <process_id>: EAPOL-key <obj_type> with invalid secure bit (set) received from mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: EAPOL-key %{obj_type} with invalid secure bit (set) received from mobile %{smacaddr}" }
				id => "message-SECURITY:17"
				add_field => {
				"event_description" => "EAPOL-key M2 with invalid secure bit (set) received from mobile"
					"[event][id]" => "SECURITY:17"
					"[rsa][message][id1]" => "SECURITY:17"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:16
		# line in RSA:  <severity>] <agent> <process_id>: <reason> Authentication Aborted
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{reason} Authentication Aborted" }
				id => "message-SECURITY:16"
				add_field => {
				"event_description" => "Authentication Aborted"
					"[event][id]" => "SECURITY:16"
					"[rsa][message][id1]" => "SECURITY:16"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:15
		# line in RSA:  <severity>] <agent> <process_id>: Unable to delete username <username> for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to delete username %{username} for mobile %{smacaddr}" }
				id => "message-SECURITY:15"
				add_field => {
				"event_description" => "Unable to delete username for mobile"
					"[event][id]" => "SECURITY:15"
					"[rsa][message][id1]" => "SECURITY:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:14
		# line in RSA:  <severity>] <agent> <process_id>: Max AAA failure on mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Max AAA failure on mobile %{smacaddr}" }
				id => "message-SECURITY:14"
				add_field => {
				"event_description" => "Max AAA failure on mobile"
					"[event][id]" => "SECURITY:14"
					"[rsa][message][id1]" => "SECURITY:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:13
		# line in RSA:  <severity>] <agent> <process_id>: Unable to add AP info <info> to rogue AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to add AP info %{info} to rogue AP %{macaddr}" }
				id => "message-SECURITY:13"
				add_field => {
				"event_description" => "Unable to add AP info to rogue AP"
					"[event][id]" => "SECURITY:13"
					"[rsa][message][id1]" => "SECURITY:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:12
		# line in RSA:  <severity>] <agent> <process_id>: Unable to add Rogue AP Lrad entry
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to add Rogue AP Lrad entry" }
				id => "message-SECURITY:12"
				add_field => {
				"event_description" => "Unable to add Rogue AP Lrad entry"
					"[event][id]" => "SECURITY:12"
					"[rsa][message][id1]" => "SECURITY:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:11
		# line in RSA:  <severity>] <agent> <process_id>: Unable to update dynamic broadcast key to mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to update dynamic broadcast key to mobile %{smacaddr}" }
				id => "message-SECURITY:11"
				add_field => {
				"event_description" => "Unable to update dynamic broadcast key to mobile"
					"[event][id]" => "SECURITY:11"
					"[rsa][message][id1]" => "SECURITY:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:10
		# line in RSA:  <severity>] <agent> <process_id>: Unable to send WPA key to mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to send WPA key to mobile %{smacaddr}" }
				id => "message-SECURITY:10"
				add_field => {
				"event_description" => "Unable to send WPA key to mobile"
					"[event][id]" => "SECURITY:10"
					"[rsa][message][id1]" => "SECURITY:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:09
		# line in RSA:  <severity>] <agent> <process_id>: Failure sending WPA EAPOL-Key due to <reason> to mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Failure sending WPA EAPOL-Key due to %{reason} to mobile %{smacaddr}" }
				id => "message-SECURITY:09"
				add_field => {
				"event_description" => "Failure sending WPA EAPOL-Key to mobile"
					"[event][id]" => "SECURITY:09"
					"[rsa][message][id1]" => "SECURITY:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:08
		# line in RSA:  <severity>] <agent> <process_id>: MSCB(<macaddr>) still in init state
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: MSCB(%{macaddr}) still in init state" }
				id => "message-SECURITY:08"
				add_field => {
				"event_description" => "MSCB still in init state"
					"[event][id]" => "SECURITY:08"
					"[rsa][message][id1]" => "SECURITY:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:07
		# line in RSA:  <severity>] <agent> <process_id>: Changing orphan packet IP address for station <macaddr> from <change_old> ---> <change_new>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Changing orphan packet IP address for station %{macaddr} from %{change_old} ---> %{change_new}" }
				id => "message-SECURITY:07"
				add_field => {
				"event_description" => "Changing orphan packet IP address for station"
					"[event][id]" => "SECURITY:07"
					"[rsa][message][id1]" => "SECURITY:07"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:06
		# line in RSA:  <severity>] <agent> <process_id>: Reached Max EAP-Identity Request retries (<number>) for STA <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Reached Max EAP-Identity Request retries (%{number}) for STA %{macaddr}" }
				id => "message-SECURITY:06"
				add_field => {
				"event_description" => "Reached Max EAP-Identity Request retries for STA"
					"[event][id]" => "SECURITY:06"
					"[rsa][message][id1]" => "SECURITY:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:05
		# line in RSA:  <severity>] <agent> <process_id>: MAX <obj_type> retransmissions reached for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: MAX %{obj_type} retransmissions reached for mobile %{smacaddr}" }
				id => "message-SECURITY:05"
				add_field => {
				"event_description" => "MAX retransmissions reached for mobile"
					"[event][id]" => "SECURITY:05"
					"[rsa][message][id1]" => "SECURITY:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:04
		# line in RSA:  <severity>] <agent> <process_id>: Authentication succeeded for <obj_type> user '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Authentication succeeded for %{obj_type} user '%{username}'" }
				id => "message-SECURITY:04"
				add_field => {
				"event_description" => "Authentication succeeded for user"
					"[event][id]" => "SECURITY:04"
					"[rsa][message][id1]" => "SECURITY:04"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:03
		# line in RSA:  <severity>] <agent> <process_id>: Authentication failed for <obj_type> user '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Authentication failed for %{obj_type} user '%{username}'" }
				id => "message-SECURITY:03"
				add_field => {
				"event_description" => "Authentication failed for user"
					"[event][id]" => "SECURITY:03"
					"[rsa][message][id1]" => "SECURITY:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:02
		# line in RSA:  <severity>] <agent> <process_id>: Excessive failed login attempts from the network.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Excessive failed login attempts from the network." }
				id => "message-SECURITY:02"
				add_field => {
				"event_description" => "Excessive failed login attempts from the network"
					"[event][id]" => "SECURITY:02"
					"[rsa][message][id1]" => "SECURITY:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SECURITY:01
		# line in RSA:  <severity>] <agent> <process_id>: STA [<macaddr>] <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: STA [%{macaddr}] %{event_description}" }
				id => "message-SECURITY:01"
				add_field => {
					"[event][id]" => "SECURITY:01"
					"[rsa][message][id1]" => "SECURITY:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "VERBOSE" {
		# MESSAGE VERBOSE:06
		# line in RSA:  <severity>] <agent> <process_id>: Radius overrides disabled, <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Radius overrides disabled, %{reason}" }
				id => "message-VERBOSE:06"
				add_field => {
				"event_description" => "Radius overrides disabled"
					"[event][id]" => "VERBOSE:06"
					"[rsa][message][id1]" => "VERBOSE:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE VERBOSE:05
		# line in RSA:  <severity>] <agent> <process_id>: <service>: sending <obj_type> to <hostname>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{service}: sending %{obj_type} to %{hostname}" }
				id => "message-VERBOSE:05"
				add_field => {
				"event_description" => "sending response to host"
					"[event][id]" => "VERBOSE:05"
					"[rsa][message][id1]" => "VERBOSE:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE VERBOSE:04
		# line in RSA:  <severity>] <agent> <process_id>: Dropping packet from <hostip> (<reason>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Dropping packet from %{hostip} (%{reason})" }
				id => "message-VERBOSE:04"
				add_field => {
				"event_description" => "Dropping packet from host"
					"[event][id]" => "VERBOSE:04"
					"[rsa][message][id1]" => "VERBOSE:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE VERBOSE:03
		# line in RSA:  <severity>] <agent> <process_id>: Received an invalid Multicast or Unicast OUI type for mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received an invalid Multicast or Unicast OUI type for mobile %{smacaddr}" }
				id => "message-VERBOSE:03"
				add_field => {
				"event_description" => "Received an invalid Multicast or Unicast OUI type for mobile"
					"[event][id]" => "VERBOSE:03"
					"[rsa][message][id1]" => "VERBOSE:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE VERBOSE:02
		# line in RSA:  <severity>] <agent> <process_id>: Received an unsupported Multicast 802.11i OUI code from mobile <smacaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received an unsupported Multicast 802.11i OUI code from mobile %{smacaddr}" }
				id => "message-VERBOSE:02"
				add_field => {
				"event_description" => "Received an unsupported Multicast 802.11i code from mobile"
					"[event][id]" => "VERBOSE:02"
					"[rsa][message][id1]" => "VERBOSE:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE VERBOSE:01
		# line in RSA:  <severity>] <agent> <process_id>: nimMcastApplianceGetPortMap return error for interface <interface> -- <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: nimMcastApplianceGetPortMap return error for interface %{interface} -- %{reason}" }
				id => "message-VERBOSE:01"
				add_field => {
				"event_description" => "nimMcastApplianceGetPortMap return error for interface"
					"[event][id]" => "VERBOSE:01"
					"[rsa][message][id1]" => "VERBOSE:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "WARNING" {
		# MESSAGE WARNING:17
		# line in RSA:  <severity>] <agent> <process_id>: Unable to match response with request using id <id> from server <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to match response with request using id %{id} from server %{hostip}" }
				id => "message-WARNING:17"
				add_field => {
				"event_description" => "Unable to match response with request using id from server"
					"[event][id]" => "WARNING:17"
					"[rsa][message][id1]" => "WARNING:17"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:16
		# line in RSA:  <severity>] <agent> <process_id>: <service> Requested address (<saddr>) outside of scope
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{service} Requested address (%{saddr}) outside of scope" }
				id => "message-WARNING:16"
				add_field => {
				"event_description" => "Requested address outside of scope"
					"[event][id]" => "WARNING:16"
					"[rsa][message][id1]" => "WARNING:16"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:15
		# line in RSA:  <severity>] <agent> <process_id>: <service>: <obj_type>: Recieved a REQUEST w/o a lease
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{service}: %{obj_type}: Recieved a REQUEST w/o a lease" }
				id => "message-WARNING:15"
				add_field => {
				"event_description" => "Recieved a REQUEST w/o a lease"
					"[event][id]" => "WARNING:15"
					"[rsa][message][id1]" => "WARNING:15"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:14
		# line in RSA:  <severity>] <agent> <process_id>: Received a packet without a requested ip
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received a packet without a requested ip" }
				id => "message-WARNING:14"
				add_field => {
				"event_description" => "Received a packet without a requested ip"
					"[event][id]" => "WARNING:14"
					"[rsa][message][id1]" => "WARNING:14"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:13
		# line in RSA:  <severity>] <agent> <process_id>: 802.11 MAC mgmt msg from an unknown LRAD: <bssid>(bssid)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: 802.11 MAC mgmt msg from an unknown LRAD: %{bssid}(bssid)" }
				id => "message-WARNING:13"
				add_field => {
				"event_description" => "802.11 MAC mgmt msg from an unknown LRAD"
					"[event][id]" => "WARNING:13"
					"[rsa][message][id1]" => "WARNING:13"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:12
		# line in RSA:  <severity>] <agent> <process_id>: <service>: received a message with an invalid supported rate
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{service}: received a message with an invalid supported rate" }
				id => "message-WARNING:12"
				add_field => {
				"event_description" => "service received a message with an invalid supported rate"
					"[event][id]" => "WARNING:12"
					"[rsa][message][id1]" => "WARNING:12"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:11
		# line in RSA:  <severity>] <agent> <process_id>: No DHCP response (or error) for rogue <smacaddr> on AP <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: No DHCP response (or error) for rogue %{smacaddr} on AP %{macaddr}" }
				id => "message-WARNING:11"
				add_field => {
				"event_description" => "No DHCP response (or error) for rogue on AP"
					"[event][id]" => "WARNING:11"
					"[rsa][message][id1]" => "WARNING:11"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:10
		# line in RSA:  <severity>] <agent> <process_id>: <smacaddr> <saddr> Unable to delete ARP mappingIP <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{smacaddr} %{saddr} Unable to delete ARP mappingIP %{reason}" }
				id => "message-WARNING:10"
				add_field => {
				"event_description" => "Unable to delete ARP mappingIP"
					"[event][id]" => "WARNING:10"
					"[rsa][message][id1]" => "WARNING:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:09
		# line in RSA:  <severity>] <agent> <process_id>: Unable to update foreign AP location.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Unable to update foreign AP location." }
				id => "message-WARNING:09"
				add_field => {
				"event_description" => "Unable to update foreign AP location"
					"[event][id]" => "WARNING:09"
					"[rsa][message][id1]" => "WARNING:09"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:08
		# line in RSA:  <severity>] <agent> <process_id>: DHCP server check failure, <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: DHCP server check failure, %{reason}" }
				id => "message-WARNING:08"
				add_field => {
				"event_description" => "DHCP server check failure"
					"[event][id]" => "WARNING:08"
					"[rsa][message][id1]" => "WARNING:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:07
		# line in RSA:  <severity>] <agent> <process_id>: Received a association for an unknown SSID '<ssid>'(<info>) from <macaddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Received a association for an unknown SSID '%{ssid}'(%{info}) from %{macaddr}" }
				id => "message-WARNING:07"
				add_field => {
				"event_description" => "Received a association for an unknown SSID from AP"
					"[event][id]" => "WARNING:07"
					"[rsa][message][id1]" => "WARNING:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:06
		# line in RSA:  <severity>] <agent> <process_id>: Invalid toDs/fromDs bit set - <reason>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: Invalid toDs/fromDs bit set - %{reason}" }
				id => "message-WARNING:06"
				add_field => {
				"event_description" => "Invalid toDs/fromDs bit set"
					"[event][id]" => "WARNING:06"
					"[rsa][message][id1]" => "WARNING:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:05
		# line in RSA:  <severity>] <agent> <process_id>: RADIUS server <hostip>:<network_port> deactivated in global list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: RADIUS server %{hostip}:%{network_port} deactivated in global list" }
				id => "message-WARNING:05"
				add_field => {
				"event_description" => "RADIUS server deactivated in global list"
					"[event][id]" => "WARNING:05"
					"[rsa][message][id1]" => "WARNING:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:04
		# line in RSA:  <severity>] <agent> <process_id>: RADIUS server <hostip>:<network_port> failed to respond to request (ID <id>) for STA <macaddr>/ user '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: RADIUS server %{hostip}:%{network_port} failed to respond to request (ID %{id}) for STA %{macaddr}/ user '%{username}'" }
				id => "message-WARNING:04"
				add_field => {
				"event_description" => "RADIUS server failed to respond to request for STA"
					"[event][id]" => "WARNING:04"
					"[rsa][message][id1]" => "WARNING:04"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:03
		# line in RSA:  <severity>] <agent> <process_id>: <fld9>(): Non-Doberman platform 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{fld9}(): Non-Doberman platform" }
				id => "message-WARNING:03"
				add_field => {
				"event_description" => "Non-Doberman platform"
					"[event][id]" => "WARNING:03"
					"[rsa][message][id1]" => "WARNING:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:02
		# line in RSA:  <severity>] <agent> <process_id>: AP <macaddr> : Alarm <event_state>, <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: AP %{macaddr} : Alarm %{event_state}, %{info}" }
				id => "message-WARNING:02"
				add_field => {
				"event_description" => "AP Alarm status"
					"[event][id]" => "WARNING:02"
					"[rsa][message][id1]" => "WARNING:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE WARNING:01
		# line in RSA:  <severity>] <agent> <process_id>: <reason>, there is a loop in the network
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{severity}] %{agent} %{process_id}: %{reason}, there is a loop in the network" }
				id => "message-WARNING:01"
				add_field => {
				"event_description" => "there is a loop in the network"
					"[event][id]" => "WARNING:01"
					"[rsa][message][id1]" => "WARNING:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId879
	# line in RSA: APMacAddrTrapVariable={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APPortNumberTrapVariable=<fport> 
	else if [logstash][msgparser][id] == "msgParserId879" {
		grok {
			match => { "message" => "^APMacAddrTrapVariable=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APPortNumberTrapVariable=(?<fport>[^\s]*)[\s]+$" }
			id => "msgParserId879"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId880
	# line in RSA: APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid>,APIfType=<fld7>,ClearTrapVariable={ "<service>" | <service> }
	else if [logstash][msgparser][id] == "msgParserId880" {
		grok {
			match => { "message" => "^APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^,]*),APIfType=(?<fld7>[^,]*),ClearTrapVariable=([\s]*\"(?<service>[^\"]*)\"[\s]+|[\s]*(?<service>[^\s]*)[\s]+)$" }
			id => "msgParserId880"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId881
	# line in RSA: APMacAddrTrapVariable={"NULL"|"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"},APNameTrapVariable="<group>",APSlotIdTrapVariable=<connectionid>,APCoverageThresholdTrapVariable=<ntype>,APCoverageFailedClients=<fld8>,APCoverageTotalClients=<duration>,ClientMacAddr={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},ClientRssi=<fld10>,ClientSnr=<vlan>
	else if [logstash][msgparser][id] == "msgParserId881" {
		grok {
			match => { "message" => "^APMacAddrTrapVariable=(\"NULL\"|\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"),APNameTrapVariable=\"(?<group>[^\"]*)\",APSlotIdTrapVariable=(?<connectionid>[^,]*),APCoverageThresholdTrapVariable=(?<ntype>[^,]*),APCoverageFailedClients=(?<fld8>[^,]*),APCoverageTotalClients=(?<duration>[^,]*),ClientMacAddr=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),ClientRssi=(?<fld10>[^,]*),ClientSnr=(?<vlan>.*)$" }
			id => "msgParserId881"
			add_field => {
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId882
	# line in RSA: APMacAddrTrapVariable={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APSlotIdTrapVariable=<connectionid>,APChannelNumberTrapVariable=<fld8>,InterferenceEnergyBeforeChannelUpdate=<rulename>,InterferenceEnergyAfterChannelUpdate=<fld10>
	else if [logstash][msgparser][id] == "msgParserId882" {
		grok {
			match => { "message" => "^APMacAddrTrapVariable=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APSlotIdTrapVariable=(?<connectionid>[^,]*),APChannelNumberTrapVariable=(?<fld8>[^,]*),InterferenceEnergyBeforeChannelUpdate=(?<rulename>[^,]*),InterferenceEnergyAfterChannelUpdate=(?<fld10>.*)$" }
			id => "msgParserId882"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId883
	# line in RSA: APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid>,APIfPhyTxPowerLevel=<fld7>
	else if [logstash][msgparser][id] == "msgParserId883" {
		grok {
			match => { "message" => "^APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^,]*),APIfPhyTxPowerLevel=(?<fld7>.*)$" }
			id => "msgParserId883"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId884
	# line in RSA: APMacAddrTrapVariable={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"} 
	else if [logstash][msgparser][id] == "msgParserId884" {
		grok {
			match => { "message" => "^APMacAddrTrapVariable=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\")[\s]+$" }
			id => "msgParserId884"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId885
	# line in RSA: APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid>,APAdminStatus=<ntype>,APIfAdminStatus=<inout> 
	else if [logstash][msgparser][id] == "msgParserId885" {
		grok {
			match => { "message" => "^APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^,]*),APAdminStatus=(?<ntype>[^,]*),APIfAdminStatus=(?<inout>[^\s]*)[\s]+$" }
			id => "msgParserId885"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId886
	# line in RSA: ImpersonatedAPMacAddr={"NULL"|"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"},APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid>,APIfType=<fld7>
	else if [logstash][msgparser][id] == "msgParserId886" {
		grok {
			match => { "message" => "^ImpersonatedAPMacAddr=(\"NULL\"|\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"),APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^,]*),APIfType=(?<fld7>.*)$" }
			id => "msgParserId886"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId887
	# line in RSA: APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid> 
	else if [logstash][msgparser][id] == "msgParserId887" {
		grok {
			match => { "message" => "^APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^\s]*)[\s]+$" }
			id => "msgParserId887"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId888
	# line in RSA: StationAPMacAddr={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},StationAPIfSlotId=<connectionid>,UserIpAddress=<saddr>,StationMacAddress={"NULL"|"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"} 
	else if [logstash][msgparser][id] == "msgParserId888" {
		grok {
			match => { "message" => "^StationAPMacAddr=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),StationAPIfSlotId=(?<connectionid>[^,]*),UserIpAddress=(?<saddr>[^,]*),StationMacAddress=(\"NULL\"|\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\")[\s]+$" }
			id => "msgParserId888"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId889
	# line in RSA: StationAPMacAddr={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},StationAPIfSlotId=<connectionid>,StationReasonCode=<action>,StationMacAddress={"NULL"|"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"} 
	else if [logstash][msgparser][id] == "msgParserId889" {
		grok {
			match => { "message" => "^StationAPMacAddr=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),StationAPIfSlotId=(?<connectionid>[^,]*),StationReasonCode=(?<action>[^,]*),StationMacAddress=(\"NULL\"|\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\")[\s]+$" }
			id => "msgParserId889"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId890
	# line in RSA: AuthFailUserType=<ntype>,AuthFailUserName=<username>
	else if [logstash][msgparser][id] == "msgParserId890" {
		dissect {
			mapping => { "message" => "AuthFailUserType=%{ntype},AuthFailUserName=%{username}" }
			id => "msgParserId890"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId891
	# line in RSA: message="<msg>" 
	else if [logstash][msgparser][id] == "msgParserId891" {
		dissect {
			mapping => { "message" => "message=\"%{msg}\"" }
			id => "msgParserId891"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId892
	# line in RSA: DuplicateIpReportedByAP=<fld8>,APMacAddrTrapVariable={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},DuplicateIpTrapVariable=<saddr>,RogueAPDot11MacAddress={"NULL"|"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"},DuplicateIpTrapClear=<ntype>
	else if [logstash][msgparser][id] == "msgParserId892" {
		grok {
			match => { "message" => "^DuplicateIpReportedByAP=(?<fld8>[^,]*),APMacAddrTrapVariable=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),DuplicateIpTrapVariable=(?<saddr>[^,]*),RogueAPDot11MacAddress=(\"NULL\"|\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"),DuplicateIpTrapClear=(?<ntype>.*)$" }
			id => "msgParserId892"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId893
	# line in RSA: APMacAddrTrapVariable={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},MaxRogueCount=<connectionid> 
	else if [logstash][msgparser][id] == "msgParserId893" {
		grok {
			match => { "message" => "^APMacAddrTrapVariable=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),MaxRogueCount=(?<connectionid>[^\s]*)[\s]+$" }
			id => "msgParserId893"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "RADARCHANNELCLEARED" {
		# MESSAGE RADARCHANNELCLEARED
		# line in RSA: APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid>,APIfPhyChannelNumber=<fld8>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^,]*),APIfPhyChannelNumber=(?<fld8>.*)$" }
				id => "message-RADARCHANNELCLEARED"
				add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
					"[event][id]" => "RADARCHANNELCLEARED"
					"[rsa][message][id1]" => "RADARCHANNELCLEARED"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE RADARCHANNELCLEARED:01
		# line in RSA: message="<msg>" 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "message=\"%{msg}\"" }
				id => "message-RADARCHANNELCLEARED:01"
				add_field => {
					"[event][id]" => "RADARCHANNELCLEARED:01"
					"[rsa][message][id1]" => "RADARCHANNELCLEARED:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId895
	# line in RSA: APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid>,APIfPhyChannelNumber=<fld8> 
	else if [logstash][msgparser][id] == "msgParserId895" {
		grok {
			match => { "message" => "^APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^,]*),APIfPhyChannelNumber=(?<fld8>[^\s]*)[\s]+$" }
			id => "msgParserId895"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId896
	# line in RSA: RogueAPDot11MacAddress="<macaddr>",{ RogueAPAirespaceAPMacAddress | RogueAPCISCOWLCAPMacAddress }=<smacaddr>,{ RogueAPAirespaceAPSlotId | RogueAPCISCOWLCAPSlotId }=<connectionid>,RogueAPSsid="<fld7>",RogueAPChannelNumber=<fld8>,{ RogueAPAirespaceAPRSSI | RogueAPCISCOWLCAPRSSI }=-<duration>,{ RogueAPAirespaceAPSNR | RogueAPCISCOWLCAPSNR }=<inout>,RogueAPOnWiredNetwork=<vlan>,RogueAdhocMode=<rulename>,RogueAPRadioType=<ntype>,{ RogueAPAirespaceAPName | RogueAPCISCOWLCAPName }="<group>" 
	else if [logstash][msgparser][id] == "msgParserId896" {
		grok {
			match => { "message" => "^RogueAPDot11MacAddress=\"(?<macaddr>[^\"]*)\",([\s]*RogueAPAirespaceAPMacAddress[\s]+|[\s]*RogueAPCISCOWLCAPMacAddress[\s]+)=(?<smacaddr>[^,]*),([\s]*RogueAPAirespaceAPSlotId[\s]+|[\s]*RogueAPCISCOWLCAPSlotId[\s]+)=(?<connectionid>[^,]*),RogueAPSsid=\"(?<fld7>[^\"]*)\",RogueAPChannelNumber=(?<fld8>[^,]*),([\s]*RogueAPAirespaceAPRSSI[\s]+|[\s]*RogueAPCISCOWLCAPRSSI[\s]+)=\-(?<duration>[^,]*),([\s]*RogueAPAirespaceAPSNR[\s]+|[\s]*RogueAPCISCOWLCAPSNR[\s]+)=(?<inout>[^,]*),RogueAPOnWiredNetwork=(?<vlan>[^,]*),RogueAdhocMode=(?<rulename>[^,]*),RogueAPRadioType=(?<ntype>[^,]*),([\s]*RogueAPAirespaceAPName[\s]+|[\s]*RogueAPCISCOWLCAPName[\s]+)=\"(?<group>[^\"]*)\"[\s]+$" }
			id => "msgParserId896"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId897
	# line in RSA: APDot3MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APIfSlotId=<connectionid>,APName="<group>",APIfType=<fld7>,SignatureType=<ntype>,SignatureName="<rulename>",SignatureDescription="<context>",ClearTrapVariable={"<service>"|<service>},SignatureAttackPreced=<fld8>,SignatureAttackFrequency=<duration>,SignatureAttackChannel=<vlan>,SignatureAttackerMacAddress={"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"|"NULL"}
	else if [logstash][msgparser][id] == "msgParserId897" {
		grok {
			match => { "message" => "^APDot3MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APIfSlotId=(?<connectionid>[^,]*),APName=\"(?<group>[^\"]*)\",APIfType=(?<fld7>[^,]*),SignatureType=(?<ntype>[^,]*),SignatureName=\"(?<rulename>[^\"]*)\",SignatureDescription=\"(?<context>[^\"]*)\",ClearTrapVariable=(\"(?<service>[^\"]*)\"|(?<service>[^,]*)),SignatureAttackPreced=(?<fld8>[^,]*),SignatureAttackFrequency=(?<duration>[^,]*),SignatureAttackChannel=(?<vlan>[^,]*),SignatureAttackerMacAddress=(\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"|\"NULL\")$" }
			id => "msgParserId897"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "STATIONBLACKLISTED" {
		# MESSAGE STATIONBLACKLISTED
		# line in RSA: APDot11MacAddress={"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"|"NULL"},APAirespaceAPSlotId=<connectionid>,BlacklistingReasonCode=<action>,ClientMacAddr={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^APDot11MacAddress=(\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"|\"NULL\"),APAirespaceAPSlotId=(?<connectionid>[^,]*),BlacklistingReasonCode=(?<action>[^,]*),ClientMacAddr=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\")$" }
				id => "message-STATIONBLACKLISTED"
				add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
					"[event][id]" => "STATIONBLACKLISTED"
					"[rsa][message][id1]" => "STATIONBLACKLISTED"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE STATIONBLACKLISTED:01
		# line in RSA: APMacAddrTrapVariable={"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"|"NULL"},APSlotIdTrapVariable=<connectionid>,NavDosAttackSourceMacAddr={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^APMacAddrTrapVariable=(\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"|\"NULL\"),APSlotIdTrapVariable=(?<connectionid>[^,]*),NavDosAttackSourceMacAddr=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\")$" }
				id => "message-STATIONBLACKLISTED:01"
				add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
					"[event][id]" => "STATIONBLACKLISTED:01"
					"[rsa][message][id1]" => "STATIONBLACKLISTED:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId900
	# line in RSA: UserIpAddress=<saddr>,UserName="<c_user_name>"
	else if [logstash][msgparser][id] == "msgParserId900" {
		dissect {
			mapping => { "message" => "UserIpAddress=%{saddr},UserName=\"%{c_user_name}\"" }
			id => "msgParserId900"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId901
	# line in RSA: ClientMacAddr={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},APDot11MacAddress={"NULL"|"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"},APAirespaceAPSlotId=<connectionid>
	else if [logstash][msgparser][id] == "msgParserId901" {
		grok {
			match => { "message" => "^ClientMacAddr=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),APDot11MacAddress=(\"NULL\"|\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"),APAirespaceAPSlotId=(?<connectionid>.*)$" }
			id => "msgParserId901"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId904
	# line in RSA:  Qos <event_description>. Profile Name Too Long or No Profile Name Given
	else if [logstash][msgparser][id] == "msgParserId904" {
		dissect {
			mapping => { "message" => "Qos %{event_description}. Profile Name Too Long or No Profile Name Given" }
			id => "msgParserId904"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId906
	# line in RSA:  Setting hardware time to <change_new>
	else if [logstash][msgparser][id] == "msgParserId906" {
		dissect {
			mapping => { "message" => "Setting hardware time to %{change_new}" }
			id => "msgParserId906"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId907
	# line in RSA:  Tacacs server is not available for authentication, accounting and/or authorization 
	else if [logstash][msgparser][id] == "msgParserId907" {
		dissect {
			mapping => { "message" => "Tacacs server is not available for authentication, accounting and/or authorization" }
			id => "msgParserId907"
			add_field => {
				"application" => "%{hserver}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId908
	# line in RSA:  Sem priority before trylock root=<fld1>, word={{<fld2> }
	else if [logstash][msgparser][id] == "msgParserId908" {
		grok {
			match => { "message" => "^[\s]*Sem[\s]+priority[\s]+before[\s]+trylock[\s]+root=(?<fld1>[^,]*),[\s]+word=\{(?<fld2>[^\s]*)[\s]+\}$" }
			id => "msgParserId908"
			add_field => {
				"application" => "%{hserver}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId909
	# line in RSA:  Sem priority after getting lock root=<fld1>, word={{<fld2> }
	else if [logstash][msgparser][id] == "msgParserId909" {
		grok {
			match => { "message" => "^[\s]*Sem[\s]+priority[\s]+after[\s]+getting[\s]+lock[\s]+root=(?<fld1>[^,]*),[\s]+word=\{(?<fld2>[^\s]*)[\s]+\}$" }
			id => "msgParserId909"
			add_field => {
				"application" => "%{hserver}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId910
	# line in RSA:  Message queue SPAM-Q  is nearing full. Capacity <fld1> Messages <fld2> 
	else if [logstash][msgparser][id] == "msgParserId910" {
		dissect {
			mapping => { "message" => "Message queue SPAM-Q  is nearing full. Capacity %{fld1} Messages %{fld2}" }
			id => "msgParserId910"
			add_field => {
				"application" => "%{hserver}"
				"event_description" => "Message queue SPAM-Q  is nearing full."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId911
	# line in RSA:  Message Type <fld1> Occurrences <fld2> 
	else if [logstash][msgparser][id] == "msgParserId911" {
		dissect {
			mapping => { "message" => "Message Type %{fld1} Occurrences %{fld2}" }
			id => "msgParserId911"
			add_field => {
				"application" => "%{hserver}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId912
	# line in RSA:  Recv ARP Request with source IP as <saddr>. <info>
	else if [logstash][msgparser][id] == "msgParserId912" {
		dissect {
			mapping => { "message" => "Recv ARP Request with source IP as %{saddr}. %{info}" }
			id => "msgParserId912"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId913
	# line in RSA:  Failed to delete PMK cache entry for station <macaddr> with request from controller <saddr>
	else if [logstash][msgparser][id] == "msgParserId913" {
		dissect {
			mapping => { "message" => "Failed to delete PMK cache entry for station %{macaddr} with request from controller %{saddr}" }
			id => "msgParserId913"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId914
	# line in RSA:  Max EAP identity request retries (<fld11>) exceeded for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId914" {
		dissect {
			mapping => { "message" => "Max EAP identity request retries (%{fld11}) exceeded for client %{smacaddr}" }
			id => "msgParserId914"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId915
	# line in RSA:  Max EAP retransmissions exceeded for client <smacaddr>
	else if [logstash][msgparser][id] == "msgParserId915" {
		dissect {
			mapping => { "message" => "Max EAP retransmissions exceeded for client %{smacaddr}" }
			id => "msgParserId915"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId916
	# line in RSA:  Invalid request not GET on client socket <info>
	else if [logstash][msgparser][id] == "msgParserId916" {
		dissect {
			mapping => { "message" => "Invalid request not GET on client socket %{info}" }
			id => "msgParserId916"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId917
	# line in RSA:  Hits the <fld1> watermark. <info>
	else if [logstash][msgparser][id] == "msgParserId917" {
		dissect {
			mapping => { "message" => "Hits the %{fld1} watermark. %{info}" }
			id => "msgParserId917"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId918
	# line in RSA:  Unable to find Mobile <smacaddr> entry in the database, <info>
	else if [logstash][msgparser][id] == "msgParserId918" {
		dissect {
			mapping => { "message" => "Unable to find Mobile %{smacaddr} entry in the database, %{info}" }
			id => "msgParserId918"
			add_field => {
				"event_description" => "Unable to find Mobile entry in the database"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId919
	# line in RSA:  Maximum retransmission exceeded for client (<smacaddr> )data sync block:<fld1>. Retry after <duration> secs.
	else if [logstash][msgparser][id] == "msgParserId919" {
		dissect {
			mapping => { "message" => "Maximum retransmission exceeded for client (%{smacaddr} )data sync block:%{fld1}. Retry after %{duration} secs." }
			id => "msgParserId919"
			add_field => {
				"event_description" => " Maximum retransmission exceeded for client "
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId920
	# line in RSA: Remapping interface ID for STA <smacaddr> from <fld1> to <fld2> (<fld3>)
	else if [logstash][msgparser][id] == "msgParserId920" {
		dissect {
			mapping => { "message" => "Remapping interface ID for STA %{smacaddr} from %{fld1} to %{fld2} (%{fld3})" }
			id => "msgParserId920"
			add_field => {
				"event_description" => "Remapping interface ID for STA"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId921
	# line in RSA: Different username  <username> exist in mscb for mobile <smacaddr>. New username <fld23> 
	else if [logstash][msgparser][id] == "msgParserId921" {
		dissect {
			mapping => { "message" => "Different username  %{username} exist in mscb for mobile %{smacaddr}. New username %{fld23}" }
			id => "msgParserId921"
			add_field => {
				"event_description" => "Different username exist in mscb"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "DATAPLANE-4-DP_MSG" {
		# MESSAGE DATAPLANE-4-DP_MSG
		# line in RSA: <version>[<fld11>]!!! WRONG STATE Downstream Pkt for FOREIGN  <fld21> MobilityState 1 !!!!!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version}[%{fld11}]!!! WRONG STATE Downstream Pkt for FOREIGN  %{fld21} MobilityState 1 !!!!!" }
				id => "message-DATAPLANE-4-DP_MSG"
				add_field => {
				"event_description" => "WRONG STATE Downstream Pkt"
					"[event][id]" => "DATAPLANE-4-DP_MSG"
					"[rsa][message][id1]" => "DATAPLANE-4-DP_MSG"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE DATAPLANE-4-DP_MSG:01
		# line in RSA: <version>[<fld1>]Failed to add IPv6 address<saddr_v6>, scbdb not found vlan<vlan>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{version}[%{fld1}]Failed to add IPv6 address%{saddr_v6}, scbdb not found vlan%{vlan}" }
				id => "message-DATAPLANE-4-DP_MSG:01"
				add_field => {
				"event_description" => "Failed to add IPv6 address"
					"[event][id]" => "DATAPLANE-4-DP_MSG:01"
					"[rsa][message][id1]" => "DATAPLANE-4-DP_MSG:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId923
	# line in RSA: Ping response from <saddr> is invalid. Incorrect checksum. 
	else if [logstash][msgparser][id] == "msgParserId923" {
		dissect {
			mapping => { "message" => "Ping response from %{saddr} is invalid. Incorrect checksum." }
			id => "msgParserId923"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId924
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId924" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId924"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId925
	# line in RSA:  read error on server socket, errno=<result>
	else if [logstash][msgparser][id] == "msgParserId925" {
		dissect {
			mapping => { "message" => "read error on server socket, errno=%{result}" }
			id => "msgParserId925"
			add_field => {
				"event_description" => "Read error on server socket"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId926
	# line in RSA: RogueAPDot11MacAddress={"NULL"|"<fld1> <fld2> <fld3> <fld4> <fld5> <fld6>"},RogueAPAirespaceAPMacAddress={"NULL"|"<fld11> <fld12> <fld13> <fld14> <fld15> <fld16>"},RogueAPAirespaceAPSlotId=<connectionid>,RogueAPRadioType=<ntype>,RogueAPAirespaceAPName="<group>" 
	else if [logstash][msgparser][id] == "msgParserId926" {
		grok {
			match => { "message" => "^RogueAPDot11MacAddress=(\"NULL\"|\"(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\s]*)[\s]+(?<fld6>[^\"]*)\"),RogueAPAirespaceAPMacAddress=(\"NULL\"|\"(?<fld11>[^\s]*)[\s]+(?<fld12>[^\s]*)[\s]+(?<fld13>[^\s]*)[\s]+(?<fld14>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\"]*)\"),RogueAPAirespaceAPSlotId=(?<connectionid>[^,]*),RogueAPRadioType=(?<ntype>[^,]*),RogueAPAirespaceAPName=\"(?<group>[^\"]*)\"[\s]+$" }
			id => "msgParserId926"
			add_field => {
				"macaddr" => "%{fld1}:%{fld2}:%{fld3}:%{fld4}:%{fld5}:%{fld6}"
				"smacaddr" => "%{fld11}:%{fld12}:%{fld13}:%{fld14}:%{fld15}:%{fld16}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId927
	# line in RSA: The system detects an invalid AP(<macaddr>) event (<event_type>) and state (<event_state>) combination
	else if [logstash][msgparser][id] == "msgParserId927" {
		dissect {
			mapping => { "message" => "The system detects an invalid AP(%{macaddr}) event (%{event_type}) and state (%{event_state}) combination" }
			id => "msgParserId927"
			add_field => {
				"event_description" => "invalid AP event and state combination"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId928
	# line in RSA: Recv Ethernet over IP ping from<saddr>in different Group
	else if [logstash][msgparser][id] == "msgParserId928" {
		dissect {
			mapping => { "message" => "Recv Ethernet over IP ping from%{saddr}in different Group" }
			id => "msgParserId928"
			add_field => {
				"event_description" => "Received Ethernet over IP ping from address that was not in a different group"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId929
	# line in RSA: Unable to add an ARP entry for<saddr>to the operating system.<result>
	else if [logstash][msgparser][id] == "msgParserId929" {
		dissect {
			mapping => { "message" => "Unable to add an ARP entry for%{saddr}to the operating system.%{result}" }
			id => "msgParserId929"
			add_field => {
				"event_description" => "Unable to add an ARP entry for IP to the operating system."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId930
	# line in RSA: Unable to delete an ARP entry for<saddr>from the operating system.<result>
	else if [logstash][msgparser][id] == "msgParserId930" {
		dissect {
			mapping => { "message" => "Unable to delete an ARP entry for%{saddr}from the operating system.%{result}" }
			id => "msgParserId930"
			add_field => {
				"event_description" => "Unable to delete an ARP entry for IP from the operating system."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId931
	# line in RSA: No Entry in Mobility DB for MAC:{<macaddr>[<info>]|<macaddr>}
	else if [logstash][msgparser][id] == "msgParserId931" {
		grok {
			match => { "message" => "^No[\s]+Entry[\s]+in[\s]+Mobility[\s]+DB[\s]+for[\s]+MAC:((?<macaddr>[^\[]*)\[(?<info>[^\]]*)\]|(?<macaddr>.*))$" }
			id => "msgParserId931"
			add_field => {
				"event_description" => "No Entry in Mobility DB for MAC"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId932
	# line in RSA: Username entry (<username>) is deleted for mobile<dmacaddr>
	else if [logstash][msgparser][id] == "msgParserId932" {
		dissect {
			mapping => { "message" => "Username entry (%{username}) is deleted for mobile%{dmacaddr}" }
			id => "msgParserId932"
			add_field => {
				"event_description" => "Username entry is deleted for mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId933
	# line in RSA: Could not process the RSN and WARP IEs.<result>:<smacaddr>, SSID:<ssid>,AP:<macaddr>.
	else if [logstash][msgparser][id] == "msgParserId933" {
		dissect {
			mapping => { "message" => "Could not process the RSN and WARP IEs.%{result}:%{smacaddr}, SSID:%{ssid},AP:%{macaddr}." }
			id => "msgParserId933"
			add_field => {
				"action" => "Could not process the RSN and WARP IE's"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId934
	# line in RSA: Unable to contain rogue<macaddr>-<result>.<info>
	else if [logstash][msgparser][id] == "msgParserId934" {
		dissect {
			mapping => { "message" => "Unable to contain rogue%{macaddr}-%{result}.%{info}" }
			id => "msgParserId934"
			add_field => {
				"event_description" => "Unable to contain rogue"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId936
	# line in RSA: All retries for packet Export Anchor Request to<saddr>failed.
	else if [logstash][msgparser][id] == "msgParserId936" {
		dissect {
			mapping => { "message" => "All retries for packet Export Anchor Request to%{saddr}failed." }
			id => "msgParserId936"
			add_field => {
				"action" => "All retries for packet Export Anchor Request to IP failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId937
	# line in RSA: <macaddr>: Failed to create DTLS connection for AP<saddr>(<sport>).
	else if [logstash][msgparser][id] == "msgParserId937" {
		dissect {
			mapping => { "message" => "%{macaddr}: Failed to create DTLS connection for AP%{saddr}(%{sport})." }
			id => "msgParserId937"
			add_field => {
				"event_description" => "Failed to create DTLS connection"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId938
	# line in RSA: Unable to find an ACL by name "<fld7>".
	else if [logstash][msgparser][id] == "msgParserId938" {
		dissect {
			mapping => { "message" => "Unable to find an ACL by name \"%{fld7}\"." }
			id => "msgParserId938"
			add_field => {
				"action" => "Unable to find an ACL by name"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId939
	# line in RSA: The select system call failed.Error Code:<resultcode>
	else if [logstash][msgparser][id] == "msgParserId939" {
		dissect {
			mapping => { "message" => "The select system call failed.Error Code:%{resultcode}" }
			id => "msgParserId939"
			add_field => {
				"event_description" => "The select system call failed."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId940
	# line in RSA: Too many bad or lost packets.
	else if [logstash][msgparser][id] == "msgParserId940" {
		dissect {
			mapping => { "message" => "Too many bad or lost packets." }
			id => "msgParserId940"
			add_field => {
				"event_description" => "Too many bad or lost packets."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId941
	# line in RSA: No acceptable packets received.
	else if [logstash][msgparser][id] == "msgParserId941" {
		dissect {
			mapping => { "message" => "No acceptable packets received." }
			id => "msgParserId941"
			add_field => {
				"event_description" => "No acceptable packets received."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId942
	# line in RSA: Invalid credentials entered, web authentication failed for the station<macaddr>
	else if [logstash][msgparser][id] == "msgParserId942" {
		dissect {
			mapping => { "message" => "Invalid credentials entered, web authentication failed for the station%{macaddr}" }
			id => "msgParserId942"
			add_field => {
				"event_description" => "Invalid credentials entered, web authentication failed for the station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId943
	# line in RSA: Network device with mac addr<macaddr>using IP address of local interface '<interface>'.<saddr>- Received ARP Request on interface<fld1>with vlan ID<vlan>. <result>
	else if [logstash][msgparser][id] == "msgParserId943" {
		dissect {
			mapping => { "message" => "Network device with mac addr%{macaddr}using IP address of local interface '%{interface}'.%{saddr}- Received ARP Request on interface%{fld1}with vlan ID%{vlan}. %{result}" }
			id => "msgParserId943"
			add_field => {
				"event_description" => "IP conflict detected"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId944
	# line in RSA: Ignoring Primary discovery request received on non-management interface (<interface>) from AP<macaddr>
	else if [logstash][msgparser][id] == "msgParserId944" {
		dissect {
			mapping => { "message" => "Ignoring Primary discovery request received on non-management interface (%{interface}) from AP%{macaddr}" }
			id => "msgParserId944"
			add_field => {
				"event_description" => "Ignoring Primary discovery request received on non-management interface"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId946
	# line in RSA: Did not send Gratuitous ARP to defend IP address (<saddr>) of local interface '<interface>'.
	else if [logstash][msgparser][id] == "msgParserId946" {
		dissect {
			mapping => { "message" => "Did not send Gratuitous ARP to defend IP address (%{saddr}) of local interface '%{interface}'." }
			id => "msgParserId946"
			add_field => {
				"event_description" => "Did not send Gratuitous ARP to defend IP address"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId948
	# line in RSA: Rogue client MAC address:<smacaddr>connected to Rogue AP<macaddr>is <action>
	else if [logstash][msgparser][id] == "msgParserId948" {
		dissect {
			mapping => { "message" => "Rogue client MAC address:%{smacaddr}connected to Rogue AP%{macaddr}is %{action}" }
			id => "msgParserId948"
			add_field => {
				"event_description" => "Rogue client MAC address connected to Rogue AP is is auto contained"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId949
	# line in RSA: Subnet mismatches while registering IP address<saddr>with netmask<smask>for client<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId949" {
		dissect {
			mapping => { "message" => "Subnet mismatches while registering IP address%{saddr}with netmask%{smask}for client%{smacaddr}" }
			id => "msgParserId949"
			add_field => {
				"event_description" => "Subnet mismatches while registering IP address"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId953
	# line in RSA: Certificate verification failed. Peer IP:<saddr>
	else if [logstash][msgparser][id] == "msgParserId953" {
		dissect {
			mapping => { "message" => "Certificate verification failed. Peer IP:%{saddr}" }
			id => "msgParserId953"
			add_field => {
				"event_description" => "Certificate verification failed."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId954
	# line in RSA: Remote client closed connection (bytes read=<bytes>, errno=<resultcode>).
	else if [logstash][msgparser][id] == "msgParserId954" {
		dissect {
			mapping => { "message" => "Remote client closed connection (bytes read=%{bytes}, errno=%{resultcode})." }
			id => "msgParserId954"
			add_field => {
				"event_description" => "Remote client closed connection"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId956
	# line in RSA: Interface Identifier incorrectly populated for interface {<interface>.[<info>]|<interface>.}
	else if [logstash][msgparser][id] == "msgParserId956" {
		grok {
			match => { "message" => "^Interface[\s]+Identifier[\s]+incorrectly[\s]+populated[\s]+for[\s]+interface[\s]+((?<interface>[^\.]*)\.\[(?<info>[^\]]*)\]|(?<interface>[^\.]*)\.)$" }
			id => "msgParserId956"
			add_field => {
				"event_description" => "Interface Identifier incorrectly populated for interface"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId957
	# line in RSA: Refusing image download request from Unsupported AP<macaddr>- unable to open image file<filename>
	else if [logstash][msgparser][id] == "msgParserId957" {
		dissect {
			mapping => { "message" => "Refusing image download request from Unsupported AP%{macaddr}- unable to open image file%{filename}" }
			id => "msgParserId957"
			add_field => {
				"event_description" => "Refusing image download request from Unsupported AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId958
	# line in RSA: The system has failed to encode Image data request (<result>) to AP<macaddr>
	else if [logstash][msgparser][id] == "msgParserId958" {
		dissect {
			mapping => { "message" => "The system has failed to encode Image data request (%{result}) to AP%{macaddr}" }
			id => "msgParserId958"
			add_field => {
				"event_description" => "The system has failed to encode Image data request"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId945
	# line in RSA: Ignoring discovery request received on a wrong VLAN (<vlan>) on interface (<interface>) from AP<macaddr>
	else if [logstash][msgparser][id] == "msgParserId945" {
		dissect {
			mapping => { "message" => "Ignoring discovery request received on a wrong VLAN (%{vlan}) on interface (%{interface}) from AP%{macaddr}" }
			id => "msgParserId945"
			add_field => {
				"event_description" => "Ignoring discovery request received on a wrong VLAN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId959
	# line in RSA: The client<sinterface>could not join AP :<macaddr>for slot<portname>, Reason:<result>
	else if [logstash][msgparser][id] == "msgParserId959" {
		dissect {
			mapping => { "message" => "The client%{sinterface}could not join AP :%{macaddr}for slot%{portname}, Reason:%{result}" }
			id => "msgParserId959"
			add_field => {
				"event_description" => "The client could not join AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId960
	# line in RSA: Registering IP on mscb failed for station<macaddr>
	else if [logstash][msgparser][id] == "msgParserId960" {
		dissect {
			mapping => { "message" => "Registering IP on mscb failed for station%{macaddr}" }
			id => "msgParserId960"
			add_field => {
				"event_description" => "Registering IP on mscb failed for station"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId961
	# line in RSA: Mobility packet dropped. packet sent to or received from self.
	else if [logstash][msgparser][id] == "msgParserId961" {
		dissect {
			mapping => { "message" => "Mobility packet dropped. packet sent to or received from self." }
			id => "msgParserId961"
			add_field => {
				"event_description" => "Mobility packet dropped."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId962
	# line in RSA: ARP table stores invalid vlan id<vlan>, for the IP Addr<saddr>. Expected vlan id for this ip address is<fld2>
	else if [logstash][msgparser][id] == "msgParserId962" {
		dissect {
			mapping => { "message" => "ARP table stores invalid vlan id%{vlan}, for the IP Addr%{saddr}. Expected vlan id for this ip address is%{fld2}" }
			id => "msgParserId962"
			add_field => {
				"event_description" => "ARP table stores invalid vlan id for an IP Addr"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId963
	# line in RSA: Rogue client MAC address:<macaddr>has been deteted as valid client by MSE
	else if [logstash][msgparser][id] == "msgParserId963" {
		dissect {
			mapping => { "message" => "Rogue client MAC address:%{macaddr}has been deteted as valid client by MSE" }
			id => "msgParserId963"
			add_field => {
				"event_description" => "Rogue client MAC address has been deteted as valid client by MSE"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId964
	# line in RSA: {client is again in (export) anchor/foreign relation with peer :<saddr>|All retries for Handoff End is done. peer :<saddr>}. Mobilty Role :<user_role>. No more retires for HandoffEnd. Client :<smacaddr>Last Wait time<fld1>.
	else if [logstash][msgparser][id] == "msgParserId964" {
		grok {
			match => { "message" => "^(client[\s]+is[\s]+again[\s]+in[\s]+\(export\)[\s]+anchor/foreign[\s]+relation[\s]+with[\s]+peer[\s]+:(?<saddr>[^\.]*)|All[\s]+retries[\s]+for[\s]+Handoff[\s]+End[\s]+is[\s]+done\.[\s]+peer[\s]+:(?<saddr>[^\.]*))\.[\s]+Mobilty[\s]+Role[\s]+:(?<user_role>[^\.]*)\.[\s]+No[\s]+more[\s]+retires[\s]+for[\s]+HandoffEnd\.[\s]+Client[\s]+:(?<smacaddr>[^L]*)Last[\s]+Wait[\s]+time(?<fld1>[^\.]*)\.$" }
			id => "msgParserId964"
			add_field => {
				"event_description" => "client is again in (export) anchor/foreign relation with peer.No more retires for HandoffEnd."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId965
	# line in RSA: client mac =<smacaddr>, ipv6 address<saddr_v6>,vlan=<vlan>numIpv6Addr =<fld1>, orphan=<fld2>failed to learn address.
	else if [logstash][msgparser][id] == "msgParserId965" {
		dissect {
			mapping => { "message" => "client mac =%{smacaddr}, ipv6 address%{saddr_v6},vlan=%{vlan}numIpv6Addr =%{fld1}, orphan=%{fld2}failed to learn address." }
			id => "msgParserId965"
			add_field => {
				"event_description" => "failed to learn address."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId966
	# line in RSA: Announce collision for mobile <smacaddr>, deleting.
	else if [logstash][msgparser][id] == "msgParserId966" {
		dissect {
			mapping => { "message" => "Announce collision for mobile %{smacaddr}, deleting." }
			id => "msgParserId966"
			add_field => {
				"event_description" => "Announce collision for mobile  ,deleting."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId967
	# line in RSA: ARP input q exceeds limit. Current val =<fld1>
	else if [logstash][msgparser][id] == "msgParserId967" {
		dissect {
			mapping => { "message" => "ARP input q exceeds limit. Current val =%{fld1}" }
			id => "msgParserId967"
			add_field => {
				"event_description" => "ARP input q exceeds limit."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId968
	# line in RSA: Handoff end received from mismatched peer (peer Ip:<daddr>, anchor Ip:<saddr>, Role:<user_role>) for mobile<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId968" {
		dissect {
			mapping => { "message" => "Handoff end received from mismatched peer (peer Ip:%{daddr}, anchor Ip:%{saddr}, Role:%{user_role}) for mobile%{smacaddr}" }
			id => "msgParserId968"
			add_field => {
				"event_description" => "Handoff end received from mismatched peer"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId969
	# line in RSA: The system has failed to transmit image data request to AP<macaddr>
	else if [logstash][msgparser][id] == "msgParserId969" {
		dissect {
			mapping => { "message" => "The system has failed to transmit image data request to AP%{macaddr}" }
			id => "msgParserId969"
			add_field => {
				"event_description" => "The system has failed to transmit image data request to AP"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId970
	# line in RSA: Using default settings for{Pairwise|Authentication}Cipher Suite for mobile<macaddr>
	else if [logstash][msgparser][id] == "msgParserId970" {
		grok {
			match => { "message" => "^Using[\s]+default[\s]+settings[\s]+for(Pairwise|Authentication)Cipher[\s]+Suite[\s]+for[\s]+mobile(?<macaddr>.*)$" }
			id => "msgParserId970"
			add_field => {
				"event_description" => "Using default settings for Cipher Suite for mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId971
	# line in RSA: Received Mobility response for mobile<macaddr>as anchor while in the wrong state.
	else if [logstash][msgparser][id] == "msgParserId971" {
		dissect {
			mapping => { "message" => "Received Mobility response for mobile%{macaddr}as anchor while in the wrong state." }
			id => "msgParserId971"
			add_field => {
				"event_description" => "Received Mobility response for mobile"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId972
	# line in RSA: Moved AP<macaddr>to auto-contained state.
	else if [logstash][msgparser][id] == "msgParserId972" {
		dissect {
			mapping => { "message" => "Moved AP%{macaddr}to auto-contained state." }
			id => "msgParserId972"
			add_field => {
				"event_description" => "Moved AP to auto-contained state."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId973
	# line in RSA: Unable to send handoff End send  to<saddr>
	else if [logstash][msgparser][id] == "msgParserId973" {
		dissect {
			mapping => { "message" => "Unable to send handoff End send  to%{saddr}" }
			id => "msgParserId973"
			add_field => {
				"event_description" => "Unable to send handoff End send"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId974
	# line in RSA: AAA override not enabled for WLAN<wlan>hence dropping<fld1>for Client<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId974" {
		dissect {
			mapping => { "message" => "AAA override not enabled for WLAN%{wlan}hence dropping%{fld1}for Client%{smacaddr}" }
			id => "msgParserId974"
			add_field => {
				"event_description" => "AAA override not enabled for WLAN"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId975
	# line in RSA: Failed to receive data on the socket after <fld1> seconds.
	else if [logstash][msgparser][id] == "msgParserId975" {
		dissect {
			mapping => { "message" => "Failed to receive data on the socket after %{fld1} seconds." }
			id => "msgParserId975"
			add_field => {
				"event_description" => "Failed to receive data on the socket."
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId978
	# line in RSA: Unable to delete username<username>for mobile<smacaddr>
	else if [logstash][msgparser][id] == "msgParserId978" {
		dissect {
			mapping => { "message" => "Unable to delete username%{username}for mobile%{smacaddr}" }
			id => "msgParserId978"
			add_field => {
				"event_description" => "Unable to delete username"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId979
	# line in RSA: The sytem is unable to find AP<macaddr>entry in the database, <reason>
	else if [logstash][msgparser][id] == "msgParserId979" {
		dissect {
			mapping => { "message" => "The sytem is unable to find AP%{macaddr}entry in the database, %{reason}" }
			id => "msgParserId979"
			add_field => {
				"event_description" => "Unable to find AP entry in the database"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId980
	# line in RSA: Controller is connecting to Tacacs server IP:<daddr>
	else if [logstash][msgparser][id] == "msgParserId980" {
		dissect {
			mapping => { "message" => "Controller is connecting to Tacacs server IP:%{daddr}" }
			id => "msgParserId980"
			add_field => {
				"event_description" => "Controller is connecting to Tacacs server"
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId982
	# line in RSA: <info>. mbuf = <fld1>, tail = <fld2>, head =<fld3>, i = <fld4>, free = <fld5>
	else if [logstash][msgparser][id] == "msgParserId982" {
		dissect {
			mapping => { "message" => "%{info}. mbuf = %{fld1}, tail = %{fld2}, head =%{fld3}, i = %{fld4}, free = %{fld5}" }
			id => "msgParserId982"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId983
	# line in RSA: APAdminStatus=<ntype>,APAirespaceAPSlotId=<connectionid>,APChannelNumberTrapVariable=<fld8>,APCoverageFailedClients=<fld1>,APCoverageThresholdTrapVariable=<ntype>,APCoverageTotalClients=<duration>,APDot11MacAddress=<smacaddr>,APDot3MacAddress=<macaddr>,APIfAdminStatus=<inout>,APIfPhyChannelNumber=<fld8>,APIfPhyTxPowerLevel=<fld5>,APIfSlotId=<connectionid>,APIfType=<fld7>,APMacAddrTrapVariable=<macaddr>,APName=<group>,APNameTrapVariable=<group>,APPortNumberTrapVariable=<fport>,APSlotIdTrapVariable=<connectionid>,AuthFailUserName=<username>,AuthFailUserType=<ntype>,BlacklistingReasonCode=<action>,ClearTrapVariable=<service>,ClientMacAddr=<macaddr>,ClientRssi=<fld5>,ClientSnr=<vlan>,DuplicateIpReportedByAP=<fld8>,DuplicateIpTrapClear=<ntype>,DuplicateIpTrapVariable=<saddr>,ImpersonatedAPMacAddr=<smacaddr>,InterferenceEnergyAfterChannelUpdate=<fld5>,InterferenceEnergyBeforeChannelUpdate=<rulename>,MaxRogueCount=<connectionid>,RogueAPAirespaceAPMacAddress=<smacaddr>,RogueAPAirespaceAPName=<group>,RogueAPAirespaceAPRSSI=<duration>,RogueAPAirespaceAPSNR=<inout>,RogueAPAirespaceAPSlotId=<connectionid>,RogueAPChannelNumber=<fld8>,RogueAPDot11MacAddress=<macaddr>,RogueAPOnWiredNetwork=<vlan>,RogueAPRadioType=<ntype>,RogueAPSsid=<fld7>,RogueAdhocMode=<rulename>,SignatureAttackChannel=<vlan>,SignatureAttackFrequency=<duration>,SignatureAttackPreced=<fld8>,SignatureAttackerMacAddress=<smacaddr>,SignatureDescription=<context>,SignatureName=<rulename>,SignatureType=<ntype>,StationAPIfSlotId=<connectionid>,StationAPMacAddr=<macaddr>,StationMacAddress=<smacaddr>,StationReasonCode=<action>,UserIpAddress=<saddr>,UserName=<c_user_name>,message=<msg>
	else if [logstash][msgparser][id] == "msgParserId983" {
		dissect {
			mapping => { "message" => "APAdminStatus=%{ntype},APAirespaceAPSlotId=%{connectionid},APChannelNumberTrapVariable=%{fld8},APCoverageFailedClients=%{fld1},APCoverageThresholdTrapVariable=%{ntype},APCoverageTotalClients=%{duration},APDot11MacAddress=%{smacaddr},APDot3MacAddress=%{macaddr},APIfAdminStatus=%{inout},APIfPhyChannelNumber=%{fld8},APIfPhyTxPowerLevel=%{fld5},APIfSlotId=%{connectionid},APIfType=%{fld7},APMacAddrTrapVariable=%{macaddr},APName=%{group},APNameTrapVariable=%{group},APPortNumberTrapVariable=%{fport},APSlotIdTrapVariable=%{connectionid},AuthFailUserName=%{username},AuthFailUserType=%{ntype},BlacklistingReasonCode=%{action},ClearTrapVariable=%{service},ClientMacAddr=%{macaddr},ClientRssi=%{fld5},ClientSnr=%{vlan},DuplicateIpReportedByAP=%{fld8},DuplicateIpTrapClear=%{ntype},DuplicateIpTrapVariable=%{saddr},ImpersonatedAPMacAddr=%{smacaddr},InterferenceEnergyAfterChannelUpdate=%{fld5},InterferenceEnergyBeforeChannelUpdate=%{rulename},MaxRogueCount=%{connectionid},RogueAPAirespaceAPMacAddress=%{smacaddr},RogueAPAirespaceAPName=%{group},RogueAPAirespaceAPRSSI=%{duration},RogueAPAirespaceAPSNR=%{inout},RogueAPAirespaceAPSlotId=%{connectionid},RogueAPChannelNumber=%{fld8},RogueAPDot11MacAddress=%{macaddr},RogueAPOnWiredNetwork=%{vlan},RogueAPRadioType=%{ntype},RogueAPSsid=%{fld7},RogueAdhocMode=%{rulename},SignatureAttackChannel=%{vlan},SignatureAttackFrequency=%{duration},SignatureAttackPreced=%{fld8},SignatureAttackerMacAddress=%{smacaddr},SignatureDescription=%{context},SignatureName=%{rulename},SignatureType=%{ntype},StationAPIfSlotId=%{connectionid},StationAPMacAddr=%{macaddr},StationMacAddress=%{smacaddr},StationReasonCode=%{action},UserIpAddress=%{saddr},UserName=%{c_user_name},message=%{msg}" }
			id => "msgParserId983"
			add_field => {
				"vid" => "%{event_type}"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_ciscowlcmsg.json"
#			template_name => "ciscowlc_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

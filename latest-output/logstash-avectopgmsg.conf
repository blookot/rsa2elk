# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "avectopg"
			"[observer][name]" => "Avecto Privilege Guard"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %NICWIN-<hlevel>-{<Hmessageid>:|<Hmessageid>Privilege Guard Service:}<msgIdPart1>,<Hfld1>,<Hday> <Hdatetime>,<msgIdPart2>,Avecto Privilege Guard Service,<Hevent_user>,<Hfld2>,<Hevent_computer>,<Hcategory>,<Hfld3>,<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%NICWIN\-(?<hlevel>[^\-]*)\-((?<Hmessageid>[^:]*):|(?<Hmessageid>[^P]*)Privilege[\s]+Guard[\s]+Service:)(?<msgIdPart1>[^,]*),(?<Hfld1>[^,]*),(?<Hday>[^\s]*)[\s]+(?<Hdatetime>[^,]*),(?<msgIdPart2>[^,]*),Avecto[\s]+Privilege[\s]+Guard[\s]+Service,(?<Hevent_user>[^,]*),(?<Hfld2>[^,]*),(?<Hevent_computer>[^,]*),(?<Hcategory>[^,]*),(?<Hfld3>[^,]*),(?<message>.*)$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_Avecto"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-avectopgmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_description> Command Line: <fld2> Process Id: <process_id> Parent Process Id: <parent_pid> Policy: <policyname> Application Group: <group> Reason: <result> File Name: <filename> Hash: <fld5> Certificate: <fld6> Description: <fld7> Application Type: <fld8> Product Name: <product> Product Code: <fld10> Upgrade Code: <fld11> Product Version: <fld12> File Version: <fld13> Application Group Description:<fld14> Policy Description: <fld15> Token Assignment Id: <fld16> Token Assignment Is Shell: <fld17> Token Id: <fld18> Message Id: <fld19> Token: <fld20> Token Description:<fld21> Message Name: <fld22> Message Description: <fld23> Unique Process ID: <fld24> Policy ID: <fld25> Application Group ID: <fld26> User SID: <fld27> User Name: <username> User Domain SID: <fld28> User Domain Name: <fld29>User Domain Name NetBIOS: <fld30> Host SID: <fld31> Host Name: <hostname> Host Name NetBIOS: <fld32> Host Domain SID: <fld33> Host Domain Name: <domain> <info>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_description} Command Line: %{fld2} Process Id: %{process_id} Parent Process Id: %{parent_pid} Policy: %{policyname} Application Group: %{group} Reason: %{result} File Name: %{filename} Hash: %{fld5} Certificate: %{fld6} Description: %{fld7} Application Type: %{fld8} Product Name: %{product} Product Code: %{fld10} Upgrade Code: %{fld11} Product Version: %{fld12} File Version: %{fld13} Application Group Description:%{fld14} Policy Description: %{fld15} Token Assignment Id: %{fld16} Token Assignment Is Shell: %{fld17} Token Id: %{fld18} Message Id: %{fld19} Token: %{fld20} Token Description:%{fld21} Message Name: %{fld22} Message Description: %{fld23} Unique Process ID: %{fld24} Policy ID: %{fld25} Application Group ID: %{fld26} User SID: %{fld27} User Name: %{username} User Domain SID: %{fld28} User Domain Name: %{fld29}User Domain Name NetBIOS: %{fld30} Host SID: %{fld31} Host Name: %{hostname} Host Name NetBIOS: %{fld32} Host Domain SID: %{fld33} Host Domain Name: %{domain} %{info}" }
			id => "msgParserId0"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Avecto Privilege Guard Service"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <event_description> Command Line: <fld2> Process Id: <process_id> Parent Process Id: <parent_pid> Policy: <policyname> Application Group: <group> Reason: <result> File Name: <filename> Hash: <fld5> Certificate: <fld6> Description: <fld7> Application Type: <fld8> Product Name: <product> Product Code: <fld10> Upgrade Code: <fld11> Product Version: <fld12> File Version: <fld13> Application Group Description:<fld14> Policy Description: <fld15> Token Assignment Id: <fld16> Token Assignment Is Shell: <fld17> Token Id: <fld18> Message Id: <fld19> Token: <fld20> Token Description:<fld21> Message Name: <fld22> Message Description: <fld23> Unique Process ID: <fld24> Policy ID: <fld25> Application Group ID: <fld26> User SID: <fld27> User Name: <username> User Domain SID: <fld28> User Domain Name: <fld29>User Domain Name NetBIOS: <fld30> Host SID: <fld31> Host Name: <hostname> Host Name NetBIOS: <fld32> Host Domain SID: <fld33> Host Domain Name: <domain> <info>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{event_description} Command Line: %{fld2} Process Id: %{process_id} Parent Process Id: %{parent_pid} Policy: %{policyname} Application Group: %{group} Reason: %{result} File Name: %{filename} Hash: %{fld5} Certificate: %{fld6} Description: %{fld7} Application Type: %{fld8} Product Name: %{product} Product Code: %{fld10} Upgrade Code: %{fld11} Product Version: %{fld12} File Version: %{fld13} Application Group Description:%{fld14} Policy Description: %{fld15} Token Assignment Id: %{fld16} Token Assignment Is Shell: %{fld17} Token Id: %{fld18} Message Id: %{fld19} Token: %{fld20} Token Description:%{fld21} Message Name: %{fld22} Message Description: %{fld23} Unique Process ID: %{fld24} Policy ID: %{fld25} Application Group ID: %{fld26} User SID: %{fld27} User Name: %{username} User Domain SID: %{fld28} User Domain Name: %{fld29}User Domain Name NetBIOS: %{fld30} Host SID: %{fld31} Host Name: %{hostname} Host Name NetBIOS: %{fld32} Host Domain SID: %{fld33} Host Domain Name: %{domain} %{info}" }
			id => "msgParserId1"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Avecto Privilege Guard Service"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <event_description> Command Line: <fld2> Process Id: <process_id> Parent Process Id: <parent_pid> Policy: <policyname> Application Group: <group> File Name: <filename> Hash: <fld5> Certificate: <fld6> Description: <fld7> Application Type: <fld8> Product Name: <product> Product Code: <fld10> Upgrade Code: <fld11> Product Version: <fld12> File Version: <fld13> Application Group Description:<fld14> Policy Description: <fld15> Token Assignment Id: <fld16> Token Assignment Is Shell: <fld17> Token Id: <fld18> Message Id: <fld19> Token: <fld20> Token Description:<fld21> Message Name: <fld22> Message Description: <fld23> Unique Process ID: <fld24> Policy ID: <fld25> Application Group ID: <fld26> User SID: <fld27> User Name: <username> User Domain SID: <fld28> User Domain Name: <fld29>User Domain Name NetBIOS: <fld30> Host SID: <fld31> Host Name: <hostname> Host Name NetBIOS: <fld32> Host Domain SID: <fld33> Host Domain Name: <domain> <info>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{event_description} Command Line: %{fld2} Process Id: %{process_id} Parent Process Id: %{parent_pid} Policy: %{policyname} Application Group: %{group} File Name: %{filename} Hash: %{fld5} Certificate: %{fld6} Description: %{fld7} Application Type: %{fld8} Product Name: %{product} Product Code: %{fld10} Upgrade Code: %{fld11} Product Version: %{fld12} File Version: %{fld13} Application Group Description:%{fld14} Policy Description: %{fld15} Token Assignment Id: %{fld16} Token Assignment Is Shell: %{fld17} Token Id: %{fld18} Message Id: %{fld19} Token: %{fld20} Token Description:%{fld21} Message Name: %{fld22} Message Description: %{fld23} Unique Process ID: %{fld24} Policy ID: %{fld25} Application Group ID: %{fld26} User SID: %{fld27} User Name: %{username} User Domain SID: %{fld28} User Domain Name: %{fld29}User Domain Name NetBIOS: %{fld30} Host SID: %{fld31} Host Name: %{hostname} Host Name NetBIOS: %{fld32} Host Domain SID: %{fld33} Host Domain Name: %{domain} %{info}" }
			id => "msgParserId2"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Avecto Privilege Guard Service"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <event_description> Command Line: <fld2> Process Id: <process_id> Parent Process Id: <parent_pid> Policy: <policyname> Application Group: <group> Reason: <result> File Name: <filename> Hash: <fld5> Certificate: <fld6> Description: <fld7> Application Type: <fld8> Product Name: <product> Product Code: <fld10> Upgrade Code: <fld11> Product Version: <fld12> File Version: <fld13> Application Group Description:<fld14> Policy Description: <fld15> Token Assignment Id: <fld16> Token Assignment Is Shell: <fld17> Token Id: <fld18> Message Id: <fld19> Token: <fld20> Token Description:<fld21> Message Name: <fld22> Message Description: <fld23> Unique Process ID: <fld24> Policy ID: <fld25> Application Group ID: <fld26> User SID: <fld27> User Name: <username> User Domain SID: <fld28> User Domain Name: <fld29>User Domain Name NetBIOS: <fld30> Host SID: <fld31> Host Name: <hostname> Host Name NetBIOS: <fld32> <info>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{event_description} Command Line: %{fld2} Process Id: %{process_id} Parent Process Id: %{parent_pid} Policy: %{policyname} Application Group: %{group} Reason: %{result} File Name: %{filename} Hash: %{fld5} Certificate: %{fld6} Description: %{fld7} Application Type: %{fld8} Product Name: %{product} Product Code: %{fld10} Upgrade Code: %{fld11} Product Version: %{fld12} File Version: %{fld13} Application Group Description:%{fld14} Policy Description: %{fld15} Token Assignment Id: %{fld16} Token Assignment Is Shell: %{fld17} Token Id: %{fld18} Message Id: %{fld19} Token: %{fld20} Token Description:%{fld21} Message Name: %{fld22} Message Description: %{fld23} Unique Process ID: %{fld24} Policy ID: %{fld25} Application Group ID: %{fld26} User SID: %{fld27} User Name: %{username} User Domain SID: %{fld28} User Domain Name: %{fld29}User Domain Name NetBIOS: %{fld30} Host SID: %{fld31} Host Name: %{hostname} Host Name NetBIOS: %{fld32} %{info}" }
			id => "msgParserId3"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Avecto Privilege Guard Service"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <event_description>  File Name: <filename>  <info>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{event_description}  File Name: %{filename}  %{info}" }
			id => "msgParserId4"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Avecto Privilege Guard Service"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <event_description> Logon Session ID: <fld2> Administrator: <fld3> Power User: <fld4> Policy: <policyname> Policy Description: <fld5> Policy ID: <fld6> User SID: <fld7> User Name: <username> User Domain SID: <fld8> User Domain Name: <fld9> User Domain Name NetBIOS: <fld10> Host SID: <fld11> Host Name: <hostname> Host Name NetBIOS: <fld12> Host Domain SID: <fld13> Host Domain Name: <domain> Host Domain Name NetBIOS: <fld14> Event ID: <fld15> Logon Time: <fld16> UI Language: <fld17> Locale: <fld18> Time Zone: <timezone>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{event_description} Logon Session ID: %{fld2} Administrator: %{fld3} Power User: %{fld4} Policy: %{policyname} Policy Description: %{fld5} Policy ID: %{fld6} User SID: %{fld7} User Name: %{username} User Domain SID: %{fld8} User Domain Name: %{fld9} User Domain Name NetBIOS: %{fld10} Host SID: %{fld11} Host Name: %{hostname} Host Name NetBIOS: %{fld12} Host Domain SID: %{fld13} Host Domain Name: %{domain} Host Domain Name NetBIOS: %{fld14} Event ID: %{fld15} Logon Time: %{fld16} UI Language: %{fld17} Locale: %{fld18} Time Zone: %{timezone}" }
			id => "msgParserId5"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Avecto Privilege Guard Service"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-avectopgmsg.json"
#			template_name => "avectopg_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "riverbedsteelhead"
			"[observer][name]" => "Riverbed Steelhead"
			"[observer][type]" => "Router"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <messageid>(<hfld1>)[<hfld2>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^\(]*)\((?<hfld1>[^\)]*)\)\[(?<hfld2>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <messageid>[<hfld2>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %STEELHEAD enterprises.17163.1.1.4.0.<messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%STEELHEAD[\s]+enterprises\.17163\.1\.1\.4\.0\.(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hmonth> <hdate> <htime> <hhostname> <messageid>[<hfld2>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hfld2>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-riverbedsteelheadmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:    <id>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId0"
			add_field => {
				"event_description" => "A procCrash trap signifies that a process managed by PM has crashed and left a core file"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId1"
			add_field => {
				"event_description" => "A procExit trap signifies that a process managed by PM has exited unexpectedly, but not left a core file"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId2"
			add_field => {
				"event_description" => "The average CPU utilization in the past minute has gone above the acceptable threshold"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId3"
			add_field => {
				"event_description" => "The system has been paging excessively"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA:   <id>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId4"
			add_field => {
				"event_description" => "This alarm is deprecated"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId5"
			add_field => {
				"event_description" => "Detected a peer with a mismatched software version"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId6"
			add_field => {
				"event_description" => "The appliance has entered bypass (failthru) mode"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId7"
			add_field => {
				"event_description" => "An error has been generated by the RAID array"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId8"
			add_field => {
				"event_description" => "The data store is corrupted"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId9"
			add_field => {
				"event_description" => "Admission control memory alarm has been triggered"
				"disposition" => "Admission Control"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId10"
			add_field => {
				"event_description" => "Admission control connections alarm has been triggered"
				"disposition" => "Admission Control"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId11"
			add_field => {
				"event_description" => "The service is halted due to a software error"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId12"
			add_field => {
				"event_description" => "There has been a service error. Please consult the log file"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "A scheduled job has failed during execution"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId14
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId14"
			add_field => {
				"event_description" => "A user has entered configuration mode"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId15"
			add_field => {
				"event_description" => "A user has exited configuration mode"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId16"
			add_field => {
				"event_description" => "An interface on the appliance has lost its link"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId17"
			add_field => {
				"event_description" => "NFS v2/v4 alarm notification"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId18
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId18"
			add_field => {
				"event_description" => "A power supply on the appliance has failed"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId19"
			add_field => {
				"event_description" => "Asymmetric routes have been detected, certain connections might not have been optimized because of this"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId20"
			add_field => {
				"event_description" => "A fan has failed on this appliance"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId21"
			add_field => {
				"event_description" => "A memory error has been detected on the appliance"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId22"
			add_field => {
				"event_description" => "An IPMI event has been detected on the appliance. Please check the details in the alarm report on the Web UI"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId23"
			add_field => {
				"event_description" => "A change has been made to the system configuration"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId24"
			add_field => {
				"event_description" => "The datastore has wrapped around"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId25
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId25"
			add_field => {
				"event_description" => "The system temperature has exceeded the threshold"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId26
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId26"
			add_field => {
				"event_description" => "The system temperature has reached a critical stage"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId27"
			add_field => {
				"event_description" => "Unable to establish connection with the specified neighbor"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId28"
			add_field => {
				"event_description" => "Connection lost since end of stream was received from the specified neighbor"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId29
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId29"
			add_field => {
				"event_description" => "Connection lost due to an error communicating with the specified neighbor"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId30
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId30"
			add_field => {
				"event_description" => "Connection lost due to lack of keep-alives from the specified neighbor"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId31
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId31" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId31"
			add_field => {
				"event_description" => "Connection lost due to lack of ACKs from the specified neighbor"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId32
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId32" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId32"
			add_field => {
				"event_description" => "Timeout reading info from the specified neighbor"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId33
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId33" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId33"
			add_field => {
				"event_description" => "Connection forwarding latency with the specified neighbor has exceeded the threshold"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId34
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId34"
			add_field => {
				"event_description" => "There is an error in the automatic reenrollment of the SSL peering certificate"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId35"
			add_field => {
				"event_description" => "CRL polling fails"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId36"
			add_field => {
				"event_description" => "Data store sync has failed"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId37
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId37"
			add_field => {
				"event_description" => "SSL acceleration and the secure data store cannot be used until the secure vault has been unlocked"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId38
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId38"
			add_field => {
				"event_description" => "If you wish to use a nondefault password for the secure vault, the password must be rekeyed"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId39"
			add_field => {
				"event_description" => "An error was detected while initializing the secure vault"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId40"
			add_field => {
				"event_description" => "The current appliance configuration has been saved"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId41"
			add_field => {
				"event_description" => "A TCP dump has been started"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId42
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId42"
			add_field => {
				"event_description" => "A TCP dump has been scheduled"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId43
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId43"
			add_field => {
				"event_description" => "A new user has been created"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId44
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId44"
			add_field => {
				"event_description" => "Disk error has been detected"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId45
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId45"
			add_field => {
				"event_description" => "Accumulated SSD write cycles passed predefined level"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId46
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId46" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId46"
			add_field => {
				"event_description" => "A user has just logged-in via CLI"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId47
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId47" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId47"
			add_field => {
				"event_description" => "A CLI user has just logged-out"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId48
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId48" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId48"
			add_field => {
				"event_description" => "A user has just logged-in via the Web UI"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId49"
			add_field => {
				"event_description" => "A user has just logged-out via the Web UI"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId50
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId50"
			add_field => {
				"event_description" => "Trap Test"
				"disposition" => "Healthy"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId51"
			add_field => {
				"event_description" => "Optimization service is experiencing high CPU utilization"
				"disposition" => "Admission Control"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId52"
			add_field => {
				"event_description" => "Optimization service is experiencing high TCP memory pressure"
				"disposition" => "Admission Control"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId53
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId53" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId53"
			add_field => {
				"event_description" => "One or more system partitions is full or almost full"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId54
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId54" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId54"
			add_field => {
				"event_description" => "An attempt to join a domain failed"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId55
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId55"
			add_field => {
				"event_description" => "Some x509 certificates may be expiring"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId56
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId56" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId56"
			add_field => {
				"event_description" => "The main Steelhead license has expired, been removed, or become invalid"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId57
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId57" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId57"
			add_field => {
				"event_description" => "Hardware error detected"
				"disposition" => "Either Critical or Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId58
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId58" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId58"
			add_field => {
				"event_description" => "Error is found in System Detail Report"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId59
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId59" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId59"
			add_field => {
				"event_description" => "New MAPI connections will be passed through due to high connection count"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId60
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId60"
			add_field => {
				"event_description" => "Serial cascade misconfiguration has been detected"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId61
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId61"
			add_field => {
				"event_description" => "Flash hardware error detected"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId62
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId62"
			add_field => {
				"event_description" => "LAN-WAN loop detected. System will not optimize new connections until this error is cleared"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId63
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId63"
			add_field => {
				"event_description" => "Optimization service currently not optimizing any connections"
				"disposition" => "Critical"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId64
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId64" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId64"
			add_field => {
				"event_description" => "Upgrade failed and the system is running the previous image"
				"disposition" => "Needs attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId65
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId65" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId65"
			add_field => {
				"event_description" => "One or more licensed features will expire within the next two weeks"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId66
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId66" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId66"
			add_field => {
				"event_description" => "One or more licensed features have expired"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId67
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId67" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId67"
			add_field => {
				"event_description" => "A cluster Steelhead has been reported as disconnected"
				"disposition" => "Degraded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId68
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId68" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId68"
			add_field => {
				"event_description" => "Domain authentication alert"
				"disposition" => "Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId69
	# line in RSA:    <id>
	else if [logstash][msgparser][id] == "msgParserId69" {
		dissect {
			mapping => { "message" => "%{id}" }
			id => "msgParserId69"
			add_field => {
				"event_description" => "Storage profile switch failed"
				"disposition" => "Either Critical or Needs Attention"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "alarmd" {
		# MESSAGE alarmd:01
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>]: <change_attribute> {triggering | clearing}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<application>[^\.]*)\.(?<severity>[^\]]*)\]:[\s]+(?<change_attribute>[^\s]*)[\s]+(triggering[\s]+|[\s]*clearing)$" }
				id => "message-alarmd:01"
				add_field => {
					"[event][id]" => "alarmd:01"
					"[rsa][message][id1]" => "alarmd:01"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE alarmd:02
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>]: <change_attribute> changed to '<change_new>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: %{change_attribute} changed to '%{change_new}'" }
				id => "message-alarmd:02"
				add_field => {
					"[event][id]" => "alarmd:02"
					"[rsa][message][id1]" => "alarmd:02"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "httpd" {
		# MESSAGE httpd:01
		# line in RSA:  <agent>: [<fld10> <fld11>] [<severity>] Graceful restart requested, doing restart
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld10} %{fld11}] [%{severity}] Graceful restart requested, doing restart" }
				id => "message-httpd:01"
				add_field => {
					"[event][id]" => "httpd:01"
					"[rsa][message][id1]" => "httpd:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE httpd:02
		# line in RSA:  <agent>: [<fld10> <fld11>] [<severity>] Apache configured <fld1> resuming normal operations
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}: [%{fld10} %{fld11}] [%{severity}] Apache configured %{fld1} resuming normal operations" }
				id => "message-httpd:02"
				add_field => {
					"[event][id]" => "httpd:02"
					"[rsa][message][id1]" => "httpd:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId74
	# line in RSA: last: message repeated <fld1> times
	else if [logstash][msgparser][id] == "msgParserId74" {
		dissect {
			mapping => { "message" => "last: message repeated %{fld1} times" }
			id => "msgParserId74"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "mgmtd" {
		# MESSAGE mgmtd:01
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>]: Configuration changed by user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: Configuration changed by user %{username}" }
				id => "message-mgmtd:01"
				add_field => {
					"[event][id]" => "mgmtd:01"
					"[rsa][message][id1]" => "mgmtd:01"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mgmtd:02
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>]: Configuration saved to database initial
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: Configuration saved to database initial" }
				id => "message-mgmtd:02"
				add_field => {
					"[event][id]" => "mgmtd:02"
					"[rsa][message][id1]" => "mgmtd:02"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "sport" {
		# MESSAGE sport:01
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Connection limit achieved. Total Connections <dclass_counter1>,Branched Warmed Connections <dclass_counter2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Connection limit achieved. Total Connections %{dclass_counter1},Branched Warmed Connections %{dclass_counter2}" }
				id => "message-sport:01"
				add_field => {
					"[event][id]" => "sport:01"
					"[rsa][message][id1]" => "sport:01"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:02
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Pausing intercept: Connection limit achieved;
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Pausing intercept: Connection limit achieved;" }
				id => "message-sport:02"
				add_field => {
					"[event][id]" => "sport:02"
					"[rsa][message][id1]" => "sport:02"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:03
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Memory Usage: <dclass_counter1> Current Connections: <dclass_counter2> TCP Memory Usage: <dclass_counter3>;
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Memory Usage: %{dclass_counter1} Current Connections: %{dclass_counter2} TCP Memory Usage: %{dclass_counter3};" }
				id => "message-sport:03"
				add_field => {
					"[event][id]" => "sport:03"
					"[rsa][message][id1]" => "sport:03"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:04
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Resetting state for oob splice: laddr=<saddr>:<sport> raddr=<daddr>:<dport> cflag=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Resetting state for oob splice: laddr=%{saddr}:%{sport} raddr=%{daddr}:%{dport} cflag=%{fld5}" }
				id => "message-sport:04"
				add_field => {
					"[event][id]" => "sport:04"
					"[rsa][message][id1]" => "sport:04"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:05
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Destroying pool to peer: <hostip>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Destroying pool to peer: %{hostip}" }
				id => "message-sport:05"
				add_field => {
					"[event][id]" => "sport:05"
					"[rsa][message][id1]" => "sport:05"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:06
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Received disconnect cause="<result>" laddr=<saddr>:<sport> raddr=<daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Received disconnect cause=\"%{result}\" laddr=%{saddr}:%{sport} raddr=%{daddr}:%{dport}" }
				id => "message-sport:06"
				add_field => {
					"[event][id]" => "sport:06"
					"[rsa][message][id1]" => "sport:06"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:07
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Connect result for client <daddr>:<dport> server <saddr>:<sport> cfe <fld1> sfe <fld2>: <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Connect result for client %{daddr}:%{dport} server %{saddr}:%{sport} cfe %{fld1} sfe %{fld2}: %{disposition}" }
				id => "message-sport:07"
				add_field => {
					"[event][id]" => "sport:07"
					"[rsa][message][id1]" => "sport:07"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:08
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> Lost OOB Splice between laddr=<saddr>:<sport> and raddr=<daddr>:<dport> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} Lost OOB Splice between laddr=%{saddr}:%{sport} and raddr=%{daddr}:%{dport}" }
				id => "message-sport:08"
				add_field => {
					"[event][id]" => "sport:08"
					"[rsa][message][id1]" => "sport:08"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:09
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> {{<daddr>:<dport> <saddr>:<sport>} Err while reading: Connection reset by peer
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<application>[^\.]*)\.(?<severity>[^\]]*)\][\s]+(?<fld3>[^\s]*)[\s]+\{(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+(?<saddr>[^:]*):(?<sport>[^\}]*)\}[\s]+Err[\s]+while[\s]+reading:[\s]+Connection[\s]+reset[\s]+by[\s]+peer$" }
				id => "message-sport:09"
				add_field => {
					"[event][id]" => "sport:09"
					"[rsa][message][id1]" => "sport:09"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:10
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> {{<fld4> <fld5>} (clnt: <daddr>:<dport> peer: <hostip>:<network_port> serv: <saddr>:<sport>) Error connecting to peer OOB
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<application>[^\.]*)\.(?<severity>[^\]]*)\][\s]+(?<fld3>[^\s]*)[\s]+\{(?<fld4>[^\s]*)[\s]+(?<fld5>[^\}]*)\}[\s]+\(clnt:[\s]+(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+peer:[\s]+(?<hostip>[^:]*):(?<network_port>[^\s]*)[\s]+serv:[\s]+(?<saddr>[^:]*):(?<sport>[^\)]*)\)[\s]+Error[\s]+connecting[\s]+to[\s]+peer[\s]+OOB$" }
				id => "message-sport:10"
				add_field => {
					"[event][id]" => "sport:10"
					"[rsa][message][id1]" => "sport:10"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:11
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> {{<daddr>:<dport> <saddr>:<sport>} Dropconn, reason = <resultcode>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<application>[^\.]*)\.(?<severity>[^\]]*)\][\s]+(?<fld3>[^\s]*)[\s]+\{(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+(?<saddr>[^:]*):(?<sport>[^\}]*)\}[\s]+Dropconn,[\s]+reason[\s]+=[\s]+(?<resultcode>.*)$" }
				id => "message-sport:11"
				add_field => {
					"[event][id]" => "sport:11"
					"[rsa][message][id1]" => "sport:11"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:12
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> <fld4> <fld5> (clnt: <daddr>:<dport> peer: <hostip>:<network_port> serv: <saddr>:<sport>) No outer channel created for this splice
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}] %{fld3} %{fld4} %{fld5} (clnt: %{daddr}:%{dport} peer: %{hostip}:%{network_port} serv: %{saddr}:%{sport}) No outer channel created for this splice" }
				id => "message-sport:12"
				add_field => {
					"[event][id]" => "sport:12"
					"[rsa][message][id1]" => "sport:12"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE sport:13
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> {{<daddr>:<dport> <saddr>:<sport>} No replication credentials for <hostname>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<application>[^\.]*)\.(?<severity>[^\]]*)\][\s]+(?<fld3>[^\s]*)[\s]+\{(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+(?<saddr>[^:]*):(?<sport>[^\}]*)\}[\s]+No[\s]+replication[\s]+credentials[\s]+for[\s]+(?<hostname>.*)$" }
				id => "message-sport:13"
				add_field => {
				"event_description" => "No replication credentials"
					"[event][id]" => "sport:13"
					"[rsa][message][id1]" => "sport:13"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sport:14
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> {{<daddr>:<dport> <saddr>:<sport>} Error getting key for server <domain>/<hostname>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<application>[^\.]*)\.(?<severity>[^\]]*)\][\s]+(?<fld3>[^\s]*)[\s]+\{(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+(?<saddr>[^:]*):(?<sport>[^\}]*)\}[\s]+Error[\s]+getting[\s]+key[\s]+for[\s]+server[\s]+(?<domain>[^/]*)/(?<hostname>.*)$" }
				id => "message-sport:14"
				add_field => {
				"event_description" => "Error getting key for server"
					"[event][id]" => "sport:14"
					"[rsa][message][id1]" => "sport:14"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE sport:15
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>] <fld3> {{<daddr>:<dport> <saddr>:<sport>} Unable to obtain usk: The replication credentials could not be found. (<result>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<agent>[^\[]*)\[(?<process_id>[^\]]*)\]:[\s]+\[(?<application>[^\.]*)\.(?<severity>[^\]]*)\][\s]+(?<fld3>[^\s]*)[\s]+\{(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+(?<saddr>[^:]*):(?<sport>[^\}]*)\}[\s]+Unable[\s]+to[\s]+obtain[\s]+usk:[\s]+The[\s]+replication[\s]+credentials[\s]+could[\s]+not[\s]+be[\s]+found\.[\s]+\((?<result>[^\)]*)\)$" }
				id => "message-sport:15"
				add_field => {
				"event_description" => "Unable to obtain usk: The replication credentials could not be found"
					"[event][id]" => "sport:15"
					"[rsa][message][id1]" => "sport:15"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "webasd" {
		# MESSAGE webasd:01
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>]: <fld1>: Attempt to Authenticate <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: %{fld1}: Attempt to Authenticate %{username}" }
				id => "message-webasd:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
					"[event][id]" => "webasd:01"
					"[rsa][message][id1]" => "webasd:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE webasd:02
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>]: <fld1>: User <username> logged in from <saddr>, session count: <dclass_counter1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: %{fld1}: User %{username} logged in from %{saddr}, session count: %{dclass_counter1}." }
				id => "message-webasd:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "webasd:02"
					"[rsa][message][id1]" => "webasd:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE webasd:03
		# line in RSA:  <agent>[<process_id>]: [<application>.<severity>]: <fld1>: Invalidating active session for <username>, logged in from <saddr>, idle since <fld10> <fld11>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: %{fld1}: Invalidating active session for %{username}, logged in from %{saddr}, idle since %{fld10} %{fld11}" }
				id => "message-webasd:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
					"[event][id]" => "webasd:03"
					"[rsa][message][id1]" => "webasd:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE webasd:04
		# line in RSA:   <agent>[<process_id>]: [<application>.<severity>]: <fld1>: Expiring invalidated session for <username>, logged in from <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: %{fld1}: Expiring invalidated session for %{username}, logged in from %{saddr}" }
				id => "message-webasd:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "webasd:04"
					"[rsa][message][id1]" => "webasd:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE webasd:05
		# line in RSA:   <agent>[<process_id>]: [<application>.<severity>]: <fld1>: <fld2>: Deleting expired session for <username>, logged in from <saddr>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: %{fld1}: %{fld2}: Deleting expired session for %{username}, logged in from %{saddr}." }
				id => "message-webasd:05"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
					"[event][id]" => "webasd:05"
					"[rsa][message][id1]" => "webasd:05"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE webasd:06
		# line in RSA:   <agent>[<process_id>]: [<application>.<severity>]: <fld1>: User <username> with the given password is not recognized: <info>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}[%{process_id}]: [%{application}.%{severity}]: %{fld1}: User %{username} with the given password is not recognized: %{info}." }
				id => "message-webasd:06"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
					"[event][id]" => "webasd:06"
					"[rsa][message][id1]" => "webasd:06"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE webasd:07
		# line in RSA:  <agent>(<application>)[<process_id>]: authentication failure; logname=<fld1> uid=<uid> euid=<fld3> tty=<fld8> ruser=<c_username> rhost=<shost> user=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{agent}(%{application})[%{process_id}]: authentication failure; logname=%{fld1} uid=%{uid} euid=%{fld3} tty=%{fld8} ruser=%{c_username} rhost=%{shost} user=%{username}" }
				id => "message-webasd:07"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "authentication failure"
					"[event][id]" => "webasd:07"
					"[rsa][message][id1]" => "webasd:07"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-riverbedsteelheadmsg.json"
#			template_name => "riverbedsteelhead_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

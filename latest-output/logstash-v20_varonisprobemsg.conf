# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "varonisprobe"
			"[observer][name]" => "Varonis DatAdvantage Probe"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %VARONISDA: <hhost>^^<hdatetime>^^<hfld1>^^<hfld2>^^<messageid>^^<!payload:hhost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%VARONISDA:[\s]+(?<message>(?<hhost>[^\^]*)\^\^(?<hdatetime>[^\^]*)\^\^(?<hfld1>[^\^]*)\^\^(?<hfld2>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1>: Varonis alert: <hfld2><!payload:hfld2>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	# HEADER 0003
	# line in RSA: <hfld1>: This is a test <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^:]*):[\s]+This[\s]+is[\s]+a[\s]+test[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "Varonis-Test"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_varonisprobemsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Varonis-Alert" {
		# MESSAGE Varonis-Alert
		# line in RSA: <fld1> was triggered at <fld2>   Alert details:<fld30> Rule ID: <rule>  Rule Name: <rulename>  Severity: <severity>  Alert Time: <fld3>    Event details (last event for threshold alert):<fld31> Event Time:<fld5>  Acting Object:<username>  File Server/Domain:<dhost>  Path:<directory>  Affected Object:<filename>  Event Type:<event_type>  IP Address/Host:<saddr>  Additional Data:<info>  Attachment Name:<fld18>  Client Access Type:<fld10>  Mail Date:<fld11>  Mail Item Type:<fld12>  Mail Recipients:<fld13>  Mail Source:<fld14>  Mailbox Access Type:<fld15>    Threshold details:<fld16>   Threshold:<trigger_val>  First Event Time:<fld19>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} was triggered at %{fld2}   Alert details:%{fld30} Rule ID: %{rule}  Rule Name: %{rulename}  Severity: %{severity}  Alert Time: %{fld3}    Event details (last event for threshold alert):%{fld31} Event Time:%{fld5}  Acting Object:%{username}  File Server/Domain:%{dhost}  Path:%{directory}  Affected Object:%{filename}  Event Type:%{event_type}  IP Address/Host:%{saddr}  Additional Data:%{info}  Attachment Name:%{fld18}  Client Access Type:%{fld10}  Mail Date:%{fld11}  Mail Item Type:%{fld12}  Mail Recipients:%{fld13}  Mail Source:%{fld14}  Mailbox Access Type:%{fld15}    Threshold details:%{fld16}   Threshold:%{trigger_val}  First Event Time:%{fld19}" }
				id => "message-Varonis-Alert"
				add_field => {
					"[event][id]" => "Varonis-Alert"
					"[rsa][message][id1]" => "Varonis-Alert"
					"[event][categoryid]" => "1001030000"
					"[logstash][fullDateTimeString]" => "%{fld5}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s a" ] }
			}
		}
		# MESSAGE Varonis-Alert:01
		# line in RSA: <fld1> was triggered at <fld2>   Alert details:<fld30> Rule ID: <rule>  Rule Name: <rulename>  Severity: <severity>  Alert Time: <fld3>    Event details (last event for threshold alert):<fld31> Event Time:<fld5>  Acting Object:<username>  File Server/Domain:<dhost>  Path:<directory>  Affected Object:<filename>  Event Type:<event_type>  IP Address/Host:<saddr>  Additional Data:<info>  Attachment Name:<fld18>  Client Access Type:<fld10>  Mail Date:<fld11>  Mail Item Type:<fld12>  Mail Recipients:<fld13>  Mail Source:<fld14>  Mailbox Access Type:<fld15>    Threshold details:<fld16>   Threshold:<trigger_val>  Changed Permissions: <fld22>  Permissions Before Change: <fld23>  Permissions After Change: <fld19>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} was triggered at %{fld2}   Alert details:%{fld30} Rule ID: %{rule}  Rule Name: %{rulename}  Severity: %{severity}  Alert Time: %{fld3}    Event details (last event for threshold alert):%{fld31} Event Time:%{fld5}  Acting Object:%{username}  File Server/Domain:%{dhost}  Path:%{directory}  Affected Object:%{filename}  Event Type:%{event_type}  IP Address/Host:%{saddr}  Additional Data:%{info}  Attachment Name:%{fld18}  Client Access Type:%{fld10}  Mail Date:%{fld11}  Mail Item Type:%{fld12}  Mail Recipients:%{fld13}  Mail Source:%{fld14}  Mailbox Access Type:%{fld15}    Threshold details:%{fld16}   Threshold:%{trigger_val}  Changed Permissions: %{fld22}  Permissions Before Change: %{fld23}  Permissions After Change: %{fld19}" }
				id => "message-Varonis-Alert:01"
				add_field => {
					"[event][id]" => "Varonis-Alert:01"
					"[rsa][message][id1]" => "Varonis-Alert:01"
					"[event][categoryid]" => "1001030000"
					"[logstash][fullDateTimeString]" => "%{fld5}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s a" ] }
			}
		}
		# MESSAGE Varonis-Alert:02
		# line in RSA: <fld1> was triggered at <fld2> Alert details:<fld30> Rule ID:<rule> Rule Name: <rulename> Rule Storyline:<fld31> Rule Description: <fld47> Severity:<severity> Alert Time: <fld3> Event details (last event for threshold alert):<fld32> Event Time: <fld5> Acting Object: <username> Acting Object SAM Account Name: <fld33> File Server/Domain: <dhost> Path:<directory> Affected Object:<obj_name> Event Type:<event_type> Event Status: <disposition> Device IP address: <saddr> Device hostname: <shost> Additional Data:<info> Attachment Name:<fld34> Client Access Type:<fld35> Mail Date:<fld36> Mail Item Type:<fld37> Mail Recipients:<fld38> Mail Source:<fld39> Mailbox Access Type:<fld40> Threshold details:<fld41> Threshold:<trigger_val> Trustee:<fld43> Changed Permissions: <fld44> Permissions Before Change: <fld45> Permissions After Change: <fld46>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} was triggered at %{fld2} Alert details:%{fld30} Rule ID:%{rule} Rule Name: %{rulename} Rule Storyline:%{fld31} Rule Description: %{fld47} Severity:%{severity} Alert Time: %{fld3} Event details (last event for threshold alert):%{fld32} Event Time: %{fld5} Acting Object: %{username} Acting Object SAM Account Name: %{fld33} File Server/Domain: %{dhost} Path:%{directory} Affected Object:%{obj_name} Event Type:%{event_type} Event Status: %{disposition} Device IP address: %{saddr} Device hostname: %{shost} Additional Data:%{info} Attachment Name:%{fld34} Client Access Type:%{fld35} Mail Date:%{fld36} Mail Item Type:%{fld37} Mail Recipients:%{fld38} Mail Source:%{fld39} Mailbox Access Type:%{fld40} Threshold details:%{fld41} Threshold:%{trigger_val} Trustee:%{fld43} Changed Permissions: %{fld44} Permissions Before Change: %{fld45} Permissions After Change: %{fld46}" }
				id => "message-Varonis-Alert:02"
				add_field => {
					"[event][id]" => "Varonis-Alert:02"
					"[rsa][message][id1]" => "Varonis-Alert:02"
					"[event][categoryid]" => "1001030000"
					"[logstash][fullDateTimeString]" => "%{fld5}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy H:m:s a" ] }
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld50> syslog message sent from <fld51>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld50} syslog message sent from %{fld51}" }
			id => "msgParserId3"
			add_field => {
				"event_description" => "Test syslog message"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: <hostname>^^<fld1>^^<fld2>^^<username>^^<action>^^<directory>^^<filename>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{hostname}^^%{fld1}^^%{fld2}^^%{username}^^%{action}^^%{directory}^^%{filename}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_varonisprobemsg.json"
#			template_name => "varonisprobe_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

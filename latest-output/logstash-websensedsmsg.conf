# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "websenseds"
			"[observer][name]" => "Websense Data Security"
			"[observer][type]" => "DLP"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hevent_time_string> <hhostname> CEF:0|Websense|Data Security|<hversion>|<hevent_type>|<hevent_description>|<hseverity>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hevent_time_string} %{hhostname} CEF:0|Websense|Data Security|%{hversion}|%{hevent_type}|%{hevent_description}|%{hseverity}|%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "websense_ds"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: CEF:0|{Websense|Forcepoint}|{ Data Security | TRITON AP-DATA | Forcepoint DLP }|<hversion>|<hevent_type>|<hevent_description>|<hseverity>|<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^CEF:0\|(Websense|Forcepoint)\|([\s]*Data[\s]+Security[\s]+|[\s]*TRITON[\s]+AP\-DATA[\s]+|[\s]*Forcepoint[\s]+DLP[\s]+)\|(?<hversion>[^\|]*)\|(?<hevent_type>[^\|]*)\|(?<hevent_description>[^\|]*)\|(?<hseverity>[^\|]*)\|(?<message>.*)$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "websense_ds"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-websensedsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: act=<action> duser=<username> fname=<filename> msg=<msg> suser=<c_username> cat=<category> sourceServiceName=<service> analyzedBy=<cs_analyzedby> loginName=<cs_loginname> sourceIp=<saddr> severityType=<severity> sourceHost=<shost> productVersion=<fld1> maxMatches=<fld2> timeStamp=<event_time> destinationHosts=<dhost> Ticket=<info>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "act=%{action} duser=%{username} fname=%{filename} msg=%{msg} suser=%{c_username} cat=%{category} sourceServiceName=%{service} analyzedBy=%{cs_analyzedby} loginName=%{cs_loginname} sourceIp=%{saddr} severityType=%{severity} sourceHost=%{shost} productVersion=%{fld1} maxMatches=%{fld2} timeStamp=%{event_time} destinationHosts=%{dhost} Ticket=%{info}" }
			id => "msgParserId0"
			add_field => {
				"hostname" => "%{hhostname}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{hevent_type}"
				"event_description" => "%{hevent_description}"
				"severity" => "%{hseverity}"
				"event_time_str" => "%{hevent_time_str}"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1502010000" => "Policies.Rules.Rejects"
			"1502020000" => "Policies.Rules.Successful"
		}
		fallback => "Other.Default"
		override => true
	}
}
filter {
	translate {
		field => "[action]"
		destination => "[event_cat]"
		dictionary => {
			"Permitted" => "1502020000"
			"Blocked" => "1502010000"
		}
		fallback => "1901000000"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-websensedsmsg.json"
#			template_name => "websenseds_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

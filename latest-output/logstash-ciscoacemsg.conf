# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ciscoace"
			"[observer][name]" => "Cisco ACE"
			"[observer][type]" => "Application Delivery"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: : <hfld1> <hfld2> <hfld3> <hfld4> <hfld5> %ACE-<hfld10>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => ": %{hfld1} %{hfld2} %{hfld3} %{hfld4} %{hfld5} %ACE-%{hfld10}-%{messageid}: %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> <hfld2> <hfld3> <hfld4> <hfld5>: %ACE-LB_<hfld7>-<hseverity>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4} %{hfld5}: %ACE-LB_%{hfld7}-%{hseverity}-%{messageid}: %{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld1> <hfld2> <hfld3> <hfld4> <hfld5>: %ACE-<hseverity>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4} %{hfld5}: %ACE-%{hseverity}-%{messageid}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hfld1> <hfld2> <hfld3> <hfld4> <hfld5> %ACE-<hseverity>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4} %{hfld5} %ACE-%{hseverity}-%{messageid}: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-ciscoacemsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  Deny <protocol> reverse path check from <saddr> to <daddr> on interface <interface>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "Deny %{protocol} reverse path check from %{saddr} to %{daddr} on interface %{interface}" }
			id => "msgParserId0"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Deny protocol reverse path check"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "106023" {
		# MESSAGE 106023:01
		# line in RSA:  Deny protocol <protocol> src <sinterface>:<saddr> dst <dinterface>:<daddr> by access-group <space> "<policyname>" <space> [<fld3>]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deny protocol %{protocol} src %{sinterface}:%{saddr} dst %{dinterface}:%{daddr} by access-group %{space} \"%{policyname}\" %{space} [%{fld3}]" }
				id => "message-106023:01"
				add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Deny protocol"
					"[event][id]" => "106023:01"
					"[rsa][message][id1]" => "106023:01"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 106023:02
		# line in RSA:  Deny <protocol> src { <sinterface>:<saddr>/<sport> | <sinterface>:<saddr> } dst { <dinterface>:<daddr>/<dport> |  <dinterface>:<daddr> } by { access-group | access group } "<policyname>" <space> [<fld3>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Deny[\s]+(?<protocol>[^\s]*)[\s]+src[\s]+([\s]*(?<sinterface>[^:]*):(?<saddr>[^/]*)/(?<sport>[^\s]*)[\s]+|[\s]*(?<sinterface>[^:]*):(?<saddr>[^\s]*)[\s]+)[\s]+dst[\s]+([\s]*(?<dinterface>[^:]*):(?<daddr>[^/]*)/(?<dport>[^\s]*)[\s]+|[\s]*(?<dinterface>[^:]*):(?<daddr>[^\s]*)[\s]+)[\s]+by[\s]+([\s]*access\-group[\s]+|[\s]*access[\s]+group[\s]+)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<space>[^\s]*)[\s]+\[(?<fld3>[^\]]*)\]$" }
				id => "message-106023:02"
				add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Deny protocol"
					"[event][id]" => "106023:02"
					"[rsa][message][id1]" => "106023:02"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA:  User '<username>' <action>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "User '%{username}' %{action}" }
			id => "msgParserId3"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "User executed command."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:  Orderly reload started at <fld14> by <username>. Reload reason: <result>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "Orderly reload started at %{fld14} by %{username}. Reload reason: %{result}" }
			id => "msgParserId4"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: Orderly reload started by user."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA:  Health probe failed for server <saddr> on port <sport>, <result>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "Health probe failed for server %{saddr} on port %{sport}, %{result}" }
			id => "msgParserId5"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Health probe failed on server."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA:  <protocol> health probe failed for server <saddr>, <result>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{protocol} health probe failed for server %{saddr}, %{result}" }
			id => "msgParserId6"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Health probe failed on server."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA:  Health probe failed for server <saddr> on port <sport>, <result>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "Health probe failed for server %{saddr} on port %{sport}, %{result}" }
			id => "msgParserId7"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Health probe failed for server."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA:  <protocol> health probe failed for server <saddr>, <result> 
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{protocol} health probe failed for server %{saddr}, %{result}" }
			id => "msgParserId8"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Health probe failed on server."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA:  Could not probe server<saddr>on port<sport> for <result>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "Could not probe server%{saddr}on port%{sport} for %{result}" }
			id => "msgParserId9"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Could not probe server."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA:  Built TCP connection <fld1> for <sinterface>:<saddr>/<sport> (<fld5>/<fld6>) to <dinterface>:<daddr>/<dport> (<fld10>/<fld11>)
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "Built TCP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} (%{fld5}/%{fld6}) to %{dinterface}:%{daddr}/%{dport} (%{fld10}/%{fld11})" }
			id => "msgParserId10"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Built TCP connection."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "302023" {
		# MESSAGE 302023:01
		# line in RSA:  Teardown TCP connection <fld1> for <sinterface>:<saddr>/<sport> (<fld5>/<fld6>) to <dinterface>:<daddr>/<dport> (<fld10>/<fld11>) duration <fld12> bytes <bytes> <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown TCP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} (%{fld5}/%{fld6}) to %{dinterface}:%{daddr}/%{dport} (%{fld10}/%{fld11}) duration %{fld12} bytes %{bytes} %{result}" }
				id => "message-302023:01"
				add_field => {
				"severity" => "%{hseverity}"
				"hostname" => "%{hfld5}"
				"event_description" => "Teardown TCP connection."
					"[event][id]" => "302023:01"
					"[rsa][message][id1]" => "302023:01"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 302023
		# line in RSA:  Teardown TCP connection <fld1> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <fld10> bytes <bytes> <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Teardown TCP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{fld10} bytes %{bytes} %{result}" }
				id => "message-302023"
				add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Teardown TCP connection."
					"[event][id]" => "302023"
					"[rsa][message][id1]" => "302023"
					"[event][categoryid]" => "1801000000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA:  Built UDP connection <fld1> for <sinterface>:<saddr>/<sport> (<fld5>/<fld6>) to <dinterface>:<daddr>/<dport> (<fld10>/<fld11>)
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "Built UDP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} (%{fld5}/%{fld6}) to %{dinterface}:%{daddr}/%{dport} (%{fld10}/%{fld11})" }
			id => "msgParserId13"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Built UDP connection."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA:  Teardown UDP connection <fld1> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <fld10> bytes <bytes> <result>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "Teardown UDP connection %{fld1} for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{fld10} bytes %{bytes} %{result}" }
			id => "msgParserId14"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Teardown UDP connection."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA:  Built ICMP connection for faddr <fld2>/<fld3> gaddr <fld4>/<fld5> laddr <fld6>/<fld7>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "Built ICMP connection for faddr %{fld2}/%{fld3} gaddr %{fld4}/%{fld5} laddr %{fld6}/%{fld7}" }
			id => "msgParserId15"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Built ICMP connection."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA:  Teardown ICMP connection for faddr <fld2>/<fld3> gaddr <fld4>/<fld5> laddr <fld6>/<fld7>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "Teardown ICMP connection for faddr %{fld2}/%{fld3} gaddr %{fld4}/%{fld5} laddr %{fld6}/%{fld7}" }
			id => "msgParserId16"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Teardown ICMP connection."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA:  Built <protocol> connection <fld1> for <sinterface>:<saddr>/<sport> (<fld5>/<fld6>) to <dinterface>:<daddr>/<dport> (<fld10>/<fld11>)
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "Built %{protocol} connection %{fld1} for %{sinterface}:%{saddr}/%{sport} (%{fld5}/%{fld6}) to %{dinterface}:%{daddr}/%{dport} (%{fld10}/%{fld11})" }
			id => "msgParserId17"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Built connection"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA:  Built dynamic tcp translation from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "Built dynamic tcp translation from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport}" }
			id => "msgParserId18"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Built translation"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA:  Teardown <protocol> connection <fld1> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <fld10> bytes <bytes> <result>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "Teardown %{protocol} connection %{fld1} for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{fld10} bytes %{bytes} %{result}" }
			id => "msgParserId19"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Teardown connection"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA:  Teardown <protocol> connection <fld1> for <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <fld10> bytes <bytes>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "Teardown %{protocol} connection %{fld1} for %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{fld10} bytes %{bytes}" }
			id => "msgParserId20"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Teardown connection."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA:  Teardown dynamic tcp translation from <sinterface>:<saddr>/<sport> to <dinterface>:<daddr>/<dport> duration <fld10> 
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "Teardown dynamic tcp translation from %{sinterface}:%{saddr}/%{sport} to %{dinterface}:%{daddr}/%{dport} duration %{fld10}" }
			id => "msgParserId21"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Teardown"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA:  Denied ICMP type=<fld1>, from laddr <saddr> on interface <sinterface> to <daddr>: <result>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "Denied ICMP type=%{fld1}, from laddr %{saddr} on interface %{sinterface} to %{daddr}: %{result}" }
			id => "msgParserId22"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Denied ICMP."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA:  IDS:<fld3> IP Option Bad Option List from <saddr> to <daddr> on interface <interface>
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "IDS:%{fld3} IP Option Bad Option List from %{saddr} to %{daddr} on interface %{interface}" }
			id => "msgParserId23"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "IDS:IP Bad option list."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA:  MSS mismatch from<saddr>/<sport>(<fld1>) to<daddr>/<dport>(<fld2>) on interface<interface>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "MSS mismatch from%{saddr}/%{sport}(%{fld1}) to%{daddr}/%{dport}(%{fld2}) on interface%{interface}" }
			id => "msgParserId24"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "MSS mismatch"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "405001" {
		# MESSAGE 405001:01
		# line in RSA:  Received ARP RESPONSE collision from <saddr> <smacaddr> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received ARP RESPONSE collision from %{saddr} %{smacaddr} on interface %{interface}" }
				id => "message-405001:01"
				add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Recieved ARP Response collision."
					"[event][id]" => "405001:01"
					"[rsa][message][id1]" => "405001:01"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 405001:02
		# line in RSA:  Received ARP REQUEST collision from <saddr> <smacaddr> on interface <interface>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received ARP REQUEST collision from %{saddr} %{smacaddr} on interface %{interface}" }
				id => "message-405001:02"
				add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Recieved ARP Request collision."
					"[event][id]" => "405001:02"
					"[rsa][message][id1]" => "405001:02"
					"[event][categoryid]" => "1802000000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA:  Line protocol on Interface <interface>, changed state to up
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "Line protocol on Interface %{interface}, changed state to up" }
			id => "msgParserId27"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Line protocol changed to state up."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA:  Line protocol on Interface <interface>, changed state to down
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "Line protocol on Interface %{interface}, changed state to down" }
			id => "msgParserId28"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Line protocol changed state to down."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA:  Interface <interface> changed state to administratively up
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "Interface %{interface} changed state to administratively up" }
			id => "msgParserId29"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Interface changed to administratively up."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA:  Interface <interface> changed state to administratively down
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "Interface %{interface} changed state to administratively down" }
			id => "msgParserId30"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Interface state changed to administratively down."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA:  Deletion failed for <info>
	else if [logstash][msgparser][id] == "msgParserId31" {
		dissect {
			mapping => { "message" => "Deletion failed for %{info}" }
			id => "msgParserId31"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Deletion failed for variable."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId32
	# line in RSA:  Serverfarm (<group_object>) is now back in service in policy_map { (<fld18>) --> class_map (<fld19>). | (<fld18>). }  <dclass_counter1_string> = <dclass_counter1>, <dclass_counter2_string> = <dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId32" {
		grok {
			match => { "message" => "^[\s]*Serverfarm[\s]+\((?<group_object>[^\)]*)\)[\s]+is[\s]+now[\s]+back[\s]+in[\s]+service[\s]+in[\s]+policy_map[\s]+([\s]*\((?<fld18>[^\)]*)\)[\s]+\-\->[\s]+class_map[\s]+\((?<fld19>[^\)]*)\)\.[\s]+|[\s]*\((?<fld18>[^\)]*)\)\.[\s]+)[\s]+(?<dclass_counter1_string>[^\s]*)[\s]+=[\s]+(?<dclass_counter1>[^,]*),[\s]+(?<dclass_counter2_string>[^\s]*)[\s]+=[\s]+(?<dclass_counter2>.*)$" }
			id => "msgParserId32"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Serverfarm is now back in service"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId33
	# line in RSA:  Serverfarm (<group_object>) failed in policy_map (<fld18>) --> class_map (<fld19>) without backup.<dclass_counter1_string>=<dclass_counter1>,<dclass_counter2_string>=<dclass_counter2>
	else if [logstash][msgparser][id] == "msgParserId33" {
		dissect {
			mapping => { "message" => "Serverfarm (%{group_object}) failed in policy_map (%{fld18}) --> class_map (%{fld19}) without backup.%{dclass_counter1_string}=%{dclass_counter1},%{dclass_counter2_string}=%{dclass_counter2}" }
			id => "msgParserId33"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Serverfarm failed "
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId34
	# line in RSA:  Health probe <fld1> detected <node> (interface <fld3>) in serverfarm { (<group_object>) | <group_object> } <action>
	else if [logstash][msgparser][id] == "msgParserId34" {
		grok {
			match => { "message" => "^[\s]*Health[\s]+probe[\s]+(?<fld1>[^\s]*)[\s]+detected[\s]+(?<node>[^\s]*)[\s]+\(interface[\s]+(?<fld3>[^\)]*)\)[\s]+in[\s]+serverfarm[\s]+([\s]*\((?<group_object>[^\)]*)\)[\s]+|[\s]*(?<group_object>[^\s]*)[\s]+)[\s]+(?<action>.*)$" }
			id => "msgParserId34"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Health probe detected."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId35
	# line in RSA:  Health probe <fld1> detected <node> (interface <interface>) in serverfarm { (<group_object>) | <group_object> } <action>
	else if [logstash][msgparser][id] == "msgParserId35" {
		grok {
			match => { "message" => "^[\s]*Health[\s]+probe[\s]+(?<fld1>[^\s]*)[\s]+detected[\s]+(?<node>[^\s]*)[\s]+\(interface[\s]+(?<interface>[^\)]*)\)[\s]+in[\s]+serverfarm[\s]+([\s]*\((?<group_object>[^\)]*)\)[\s]+|[\s]*(?<group_object>[^\s]*)[\s]+)[\s]+(?<action>.*)$" }
			id => "msgParserId35"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Health probe detected."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId36
	# line in RSA:  Real Server <node> in serverfarm { (<group_object>) | <group_object> } <action> 
	else if [logstash][msgparser][id] == "msgParserId36" {
		grok {
			match => { "message" => "^[\s]*Real[\s]+Server[\s]+(?<node>[^\s]*)[\s]+in[\s]+serverfarm[\s]+([\s]*\((?<group_object>[^\)]*)\)[\s]+|[\s]*(?<group_object>[^\s]*)[\s]+)[\s]+(?<action>[^\s]*)[\s]+$" }
			id => "msgParserId36"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Server changes state."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId37
	# line in RSA:  Health probe <fld1> detected <node> (interface <interface>) <action>
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "Health probe %{fld1} detected %{node} (interface %{interface}) %{action}" }
			id => "msgParserId37"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Health probe Server changes state."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId38
	# line in RSA:  Health probe <fld1> detected <node> (interface <interface>) <action>
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "Health probe %{fld1} detected %{node} (interface %{interface}) %{action}" }
			id => "msgParserId38"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Denied ICMP."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId39
	# line in RSA:  Real Server <node> <action>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "Real Server %{node} %{action}" }
			id => "msgParserId39"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Server changed state."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId40
	# line in RSA:  VIP in class: '<fld1>' changed state from <change_old> to <change_new>
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "VIP in class: '%{fld1}' changed state from %{change_old} to %{change_new}" }
			id => "msgParserId40"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Denied ICMP."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId41
	# line in RSA:  <vlan> available for configuring an interface
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "%{vlan} available for configuring an interface" }
			id => "msgParserId41"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "VLAN available for configuring an interface."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId42
	# line in RSA:  HA: <node> is not reachable. Error: <result>
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "HA: %{node} is not reachable. Error: %{result}" }
			id => "msgParserId42"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: Peer not reachable."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA:  HA: Two actives have been detected for <group_object>.
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "HA: Two actives have been detected for %{group_object}." }
			id => "msgParserId43"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: Two actives have been detected."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId44
	# line in RSA:  HA: FT <fld3> changed state to <info>
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "HA: FT %{fld3} changed state to %{info}" }
			id => "msgParserId44"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: FT group changed state."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId45
	# line in RSA:  HA: <node> is UP and reachable.
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "HA: %{node} is UP and reachable." }
			id => "msgParserId45"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: Peer is UP and reachable."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId46
	# line in RSA:  HA: Configuration Replication status for <context> - <disposition>
	else if [logstash][msgparser][id] == "msgParserId46" {
		dissect {
			mapping => { "message" => "HA: Configuration Replication status for %{context} - %{disposition}" }
			id => "msgParserId46"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: Configuration Replication status for context."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId47
	# line in RSA:  HA: FT Track <interface> is <disposition>.
	else if [logstash][msgparser][id] == "msgParserId47" {
		dissect {
			mapping => { "message" => "HA: FT Track %{interface} is %{disposition}." }
			id => "msgParserId47"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: FT Track Interface is UP."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId48
	# line in RSA:  HA: FT Track <interface> is <disposition>.
	else if [logstash][msgparser][id] == "msgParserId48" {
		dissect {
			mapping => { "message" => "HA: FT Track %{interface} is %{disposition}." }
			id => "msgParserId48"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: FT Track interface status."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId49
	# line in RSA:  HA: Started alternate ping to IP address <daddr>
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "HA: Started alternate ping to IP address %{daddr}" }
			id => "msgParserId49"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: Started alternate ping to destination IP address."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId50
	# line in RSA:  HA: <node> is compatible. <info>
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "HA: %{node} is compatible. %{info}" }
			id => "msgParserId50"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: Peer software license information."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId51
	# line in RSA:  Added <fld19> sticky entries from <context>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "Added %{fld19} sticky entries from %{context}" }
			id => "msgParserId51"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "Added sticky entries from Context ID."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId52
	# line in RSA:  HA state for <context> changed from '<change_old>' to '<change_new>' State '<disposition>'
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "HA state for %{context} changed from '%{change_old}' to '%{change_new}' State '%{disposition}'" }
			id => "msgParserId52"
			add_field => {
				"hostname" => "%{hfld5}"
				"severity" => "%{hseverity}"
				"event_description" => "HA: HA state for FtGroup changed."
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2} %{hfld3} %{hfld4}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-ciscoacemsg.json"
#			template_name => "ciscoace_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

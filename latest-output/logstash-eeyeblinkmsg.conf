# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "eeyeblink"
			"[observer][name]" => "eEye Blink"
			"[observer][type]" => "Intrusion"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %BLINK enterprises.20730.1.<hfld1>^<hhostip>^<hdate>enterprises.20730.1.<hfld2>^BLINK-<msgIdPart1>-<msgIdPart2>^Blink^<!payload:hhostip>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%BLINK[\s]+enterprises\.20730\.1\.(?<hfld1>[^\^]*)\^(?<message>(?<hhostip>[^\^]*)\^(?<hdate>[^e]*)enterprises\.20730\.1\.(?<hfld2>[^\^]*)\^BLINK\-(?<msgIdPart1>[^\-]*)\-(?<msgIdPart2>[^\^]*)\^Blink\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "BLINK-%{msgIdPart1}-%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %BLINK enterprises.20730.1.<hfld1>^<hhostip>^<hdate>enterprises.20730.1.<hfld2>^<msgIdPart1>-<msgIdPart2>-<msgIdPart3>^Blink^<!payload:hhostip>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%BLINK[\s]+enterprises\.20730\.1\.(?<hfld1>[^\^]*)\^(?<message>(?<hhostip>[^\^]*)\^(?<hdate>[^e]*)enterprises\.20730\.1\.(?<hfld2>[^\^]*)\^(?<msgIdPart1>[^\-]*)\-(?<msgIdPart2>[^\-]*)\-(?<msgIdPart3>[^\^]*)\^Blink\^(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}-%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-eeyeblinkmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^<fld5>  
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{rulename}^%{fld4}^Alert^%{result}^%{fld5}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^<info>^public^enterprises.<fld5> 
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{rulename}^%{fld4}^Alert^%{result}^%{info}^public^enterprises.%{fld5}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<obj_type>^<rulename>^<fld4>^Alert^<result>^Action^<action>^Attacker^<saddr>^Victim IP^<daddr>^Protocol^<protocol>^Log File^<filename>^Log Index^<dclass_counter1>^<info>^public^enterprises.<fld5> 
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{obj_type}^%{rulename}^%{fld4}^Alert^%{result}^Action^%{action}^Attacker^%{saddr}^Victim IP^%{daddr}^Protocol^%{protocol}^Log File^%{filename}^Log Index^%{dclass_counter1}^%{info}^public^enterprises.%{fld5}" }
			id => "msgParserId2"
			add_field => {
				"signame" => "%{rule}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<obj_type>^<rulename>^<fld4>^Alert^<result>^Action^<action>^Attacker^<saddr>^Victim IP^<daddr>^Protocol^<protocol>^Type^<event_type>^<fld5> 
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{obj_type}^%{rulename}^%{fld4}^Alert^%{result}^Action^%{action}^Attacker^%{saddr}^Victim IP^%{daddr}^Protocol^%{protocol}^Type^%{event_type}^%{fld5}" }
			id => "msgParserId3"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"signame" => "%{rule}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<obj_type>^<rulename>^<fld4>^Alert^<result>^{Action^<action>^Attacker^<saddr>^Victim IP^<daddr>^Protocol^<protocol>^Type^<event_type>^<info>^public^enterprises.<fld5>|<info>^public^enterprises.<fld5>} 
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^[\s]*(?<hostip>[^\^]*)\^(?<fld1>[^\^]*)\^(?<fld2>[^\^]*)\^(?<rule>[^\^]*)\^(?<application>[^\^]*)\^(?<version>[^\^]*)\^(?<fld3>[^\^]*)\^(?<category>[^\^]*)\^(?<event_description>[^\^]*)\^(?<risk_num>[^\^]*)\^(?<obj_type>[^\^]*)\^(?<rulename>[^\^]*)\^(?<fld4>[^\^]*)\^Alert\^(?<result>[^\^]*)\^(Action\^(?<action>[^\^]*)\^Attacker\^(?<saddr>[^\^]*)\^Victim[\s]+IP\^(?<daddr>[^\^]*)\^Protocol\^(?<protocol>[^\^]*)\^Type\^(?<event_type>[^\^]*)\^(?<info>[^\^]*)\^public\^enterprises\.(?<fld5>[^\s]*)|(?<info>[^\^]*)\^public\^enterprises\.(?<fld5>[^\s]*))[\s]+$" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
				"signame" => "%{rule}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^<info>^public^enterprises.<fld5> 
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{rulename}^%{fld4}^Alert^%{result}^%{info}^public^enterprises.%{fld5}" }
			id => "msgParserId5"
			add_field => {
				"signame" => "%{rule}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^{Action^<action>^Attacker^<saddr>^Attacker Port^<sport>^Victim IP^<daddr>^Victim Port^<dport>^Protocol^<protocol>^<info>^public^enterprises.<fld5>|<info>^public^enterprises.<fld5>} 
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^[\s]*(?<hostip>[^\^]*)\^(?<fld1>[^\^]*)\^(?<fld2>[^\^]*)\^(?<rule>[^\^]*)\^(?<application>[^\^]*)\^(?<version>[^\^]*)\^(?<fld3>[^\^]*)\^(?<category>[^\^]*)\^(?<event_description>[^\^]*)\^(?<risk_num>[^\^]*)\^(?<rulename>[^\^]*)\^(?<fld4>[^\^]*)\^Alert\^(?<result>[^\^]*)\^(Action\^(?<action>[^\^]*)\^Attacker\^(?<saddr>[^\^]*)\^Attacker[\s]+Port\^(?<sport>[^\^]*)\^Victim[\s]+IP\^(?<daddr>[^\^]*)\^Victim[\s]+Port\^(?<dport>[^\^]*)\^Protocol\^(?<protocol>[^\^]*)\^(?<info>[^\^]*)\^public\^enterprises\.(?<fld5>[^\s]*)|(?<info>[^\^]*)\^public\^enterprises\.(?<fld5>[^\s]*))[\s]+$" }
			id => "msgParserId6"
			add_field => {
				"signame" => "%{rule}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "BLINK-AFW-12" {
		# MESSAGE BLINK-AFW-12
		# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^Protocol^<fld10>^Protocol^<protocol>^Type^<event_type>^Process Path^<fld23>^Process Name^<process>^Local Port^<sport>^Remote Port^<dport>^Remote IP^<daddr>^Request^<disposition>^<info>^public^enterprises.<fld5>  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{rulename}^%{fld4}^Alert^%{result}^Protocol^%{fld10}^Protocol^%{protocol}^Type^%{event_type}^Process Path^%{fld23}^Process Name^%{process}^Local Port^%{sport}^Remote Port^%{dport}^Remote IP^%{daddr}^Request^%{disposition}^%{info}^public^enterprises.%{fld5}" }
				id => "message-BLINK-AFW-12"
				add_field => {
				"signame" => "%{rule}"
					"[event][id]" => "BLINK-AFW-12"
					"[rsa][message][id1]" => "BLINK-AFW-12"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE BLINK-AFW-12:01
		# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^Protocol^<fld10>^Protocol^<protocol>^Type^<event_type>^Process Path^<fld23>^Process Name^<process>^Local Port^<sport>^Request^<disposition>^<info>^public^enterprises.<fld5>  
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{rulename}^%{fld4}^Alert^%{result}^Protocol^%{fld10}^Protocol^%{protocol}^Type^%{event_type}^Process Path^%{fld23}^Process Name^%{process}^Local Port^%{sport}^Request^%{disposition}^%{info}^public^enterprises.%{fld5}" }
				id => "message-BLINK-AFW-12:01"
				add_field => {
				"signame" => "%{rule}"
					"[event][id]" => "BLINK-AFW-12:01"
					"[rsa][message][id1]" => "BLINK-AFW-12:01"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^Protocol^<fld6>^Protocol^<protocol>^Local IP^<saddr>^Local Port^<sport>^Remote IP^<daddr>^Remote Port^<dport>^Request^<disposition>^<fld5> 
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{hostip}^%{fld1}^%{fld2}^%{rule}^%{application}^%{version}^%{fld3}^%{category}^%{event_description}^%{risk_num}^%{rulename}^%{fld4}^Alert^%{result}^Protocol^%{fld6}^Protocol^%{protocol}^Local IP^%{saddr}^Local Port^%{sport}^Remote IP^%{daddr}^Remote Port^%{dport}^Request^%{disposition}^%{fld5}" }
			id => "msgParserId9"
			add_field => {
				"signame" => "%{rule}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA:  <hostip>^<fld1>^<fld2>^<rule>^<application>^<version>^<fld3>^<category>^<event_description>^<risk_num>^<rulename>^<fld4>^Alert^<result>^{Protocol^<fld6>^Protocol^<protocol>^Local IP^<saddr>^Local Port^<sport>^Remote IP^<daddr>^Remote Port^<dport>^Request^<disposition>^<info>^public^enterprises.<fld5>|<info>^public^enterprises.<fld5>} 
	else if [logstash][msgparser][id] == "msgParserId10" {
		grok {
			match => { "message" => "^[\s]*(?<hostip>[^\^]*)\^(?<fld1>[^\^]*)\^(?<fld2>[^\^]*)\^(?<rule>[^\^]*)\^(?<application>[^\^]*)\^(?<version>[^\^]*)\^(?<fld3>[^\^]*)\^(?<category>[^\^]*)\^(?<event_description>[^\^]*)\^(?<risk_num>[^\^]*)\^(?<rulename>[^\^]*)\^(?<fld4>[^\^]*)\^Alert\^(?<result>[^\^]*)\^(Protocol\^(?<fld6>[^\^]*)\^Protocol\^(?<protocol>[^\^]*)\^Local[\s]+IP\^(?<saddr>[^\^]*)\^Local[\s]+Port\^(?<sport>[^\^]*)\^Remote[\s]+IP\^(?<daddr>[^\^]*)\^Remote[\s]+Port\^(?<dport>[^\^]*)\^Request\^(?<disposition>[^\^]*)\^(?<info>[^\^]*)\^public\^enterprises\.(?<fld5>[^\s]*)|(?<info>[^\^]*)\^public\^enterprises\.(?<fld5>[^\s]*))[\s]+$" }
			id => "msgParserId10"
			add_field => {
				"signame" => "%{rule}"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[fld3]"
		destination => "[severity]"
		dictionary => {
			"0" => "Info"
			"1" => "Warning"
			"2" => "Error"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-eeyeblinkmsg.json"
#			template_name => "eeyeblink_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

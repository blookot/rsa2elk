# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "arubacppm"
			"[observer][name]" => "Aruba ClearPass Policy Manager"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass system event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday>,<hyear> <htime> <htimezone>,Source=<hsource>,Level=<hlevel>,Category=<msgIdPart1> <msgIdPart2> <msgIdPart3>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+system[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^,]*),(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Source=(?<message>(?<hsource>[^,]*),Level=(?<hlevel>[^,]*),Category=(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^,]*),(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass system event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday>,<hyear> <htime> <htimezone>,Source=<hsource>,Level=<hlevel>,Category=<msgIdPart1> <msgIdPart2>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+system[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^,]*),(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Source=(?<message>(?<hsource>[^,]*),Level=(?<hlevel>[^,]*),Category=(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^,]*),(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1002
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass system event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday> <hyear> <htime> <htimezone>,Component=<hsource>,Level=<hlevel>,Category=<msgIdPart1> <msgIdPart2>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+system[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Component=(?<message>(?<hsource>[^,]*),Level=(?<hlevel>[^,]*),Category=(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^,]*),(?<payload>.*))$" }
			id => "header-1002"
			add_field => {
				"[rsa][header][id]" => "1002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1003
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass system event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday> <hyear> <htime> <htimezone>,Component=<hsource>,Level=<hlevel>,Category=<messageid>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+system[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Component=(?<message>(?<hsource>[^,]*),Level=(?<hlevel>[^,]*),Category=(?<messageid>[^,]*),(?<payload>.*))$" }
			id => "header-1003"
			add_field => {
				"[rsa][header][id]" => "1003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass system event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday>,<hyear> <htime> <htimezone>,Source=<hsource>,Level=<hlevel>,Category=<messageid>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+system[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^,]*),(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Source=(?<message>(?<hsource>[^,]*),Level=(?<hlevel>[^,]*),Category=(?<messageid>[^,]*),(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass audit event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday>,<hyear> <htime> <htimezone>,Source=<hsource>,Category=<msgIdPart1> <msgIdPart2> <msgIdPart3>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+audit[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^,]*),(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Source=(?<message>(?<hsource>[^,]*),Category=(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\s]*)[\s]+(?<msgIdPart3>[^,]*),(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_%{msgIdPart3}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass audit event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday>,<hyear> <htime> <htimezone>,Source=<hsource>,Category=<msgIdPart1> <msgIdPart2>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+audit[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^,]*),(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Source=(?<message>(?<hsource>[^,]*),Category=(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^,]*),(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass audit event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday>,<hyear> <htime> <htimezone>,Source=<hsource>,Category=<messageid>,<!payload:hsource>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld5>[^\s]*)[\s]+(?<hfld6>[^,]*),[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+Aruba\-ClearPass[\s]+audit[\s]+event[\s]+(?<hfld2>[^\s]*)[\s]+(?<hfld3>[^\s]*)[\s]+(?<hfld4>[^\s]*)[\s]+Timestamp=(?<hmonth>[^\s]*)[\s]+(?<hday>[^,]*),(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<htimezone>[^,]*),Source=(?<message>(?<hsource>[^,]*),Category=(?<messageid>[^,]*),(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass Session Logs-logged in User <hfld8> <hfld9> <hfld7><!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld5} %{hfld6}, %{hfld1} %{hhostname} Aruba-ClearPass Session Logs-logged in User %{hfld8} %{hfld9} %{hfld7}%{message}" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "SESSION_LOG"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass Session Logs-WebAuth <hfld8> <hfld9> <hfld7><!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld5} %{hfld6}, %{hfld1} %{hhostname} Aruba-ClearPass Session Logs-WebAuth %{hfld8} %{hfld9} %{hfld7}%{message}" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "SESSION_LOG"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1004
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass system event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday> <hyear> <htime> <timezone>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld5} %{hfld6}, %{hfld1} %{hhostname} Aruba-ClearPass system event %{hfld2} %{hfld3} %{hfld4} Timestamp=%{hmonth} %{hday} %{hyear} %{htime} %{timezone},%{message}" }
			id => "header-1004"
			add_field => {
				"[rsa][header][id]" => "1004"
				"[rsa][message][id2]" => "SYSTEM_EVENT"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1005
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass audit event <hfld2> <hfld3> <hfld4> Timestamp=<hmonth> <hday> <hyear> <htime> <timezone>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld5} %{hfld6}, %{hfld1} %{hhostname} Aruba-ClearPass audit event %{hfld2} %{hfld3} %{hfld4} Timestamp=%{hmonth} %{hday} %{hyear} %{htime} %{timezone},%{message}" }
			id => "header-1005"
			add_field => {
				"[rsa][header][id]" => "1005"
				"[rsa][message][id2]" => "AUDIT_EVENT"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass <messageid> <hfld2> <hfld3> <hfld4> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld5} %{hfld6}, %{hfld1} %{hhostname} Aruba-ClearPass %{messageid} %{hfld2} %{hfld3} %{hfld4} %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <hfld5> <hfld6>, <hfld1> <hhostname> Aruba-ClearPass <messageid>-<hfld2> <hfld3> <hfld4> <hfld7> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hfld5} %{hfld6}, %{hfld1} %{hhostname} Aruba-ClearPass %{messageid}-%{hfld2} %{hfld3} %{hfld4} %{hfld7} %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-arubacppmmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Session_Logs" {
		# MESSAGE Session_Logs
		# line in RSA:  auth_method=<authmethod>,auth_source=<fld1>,access_device_ip=<saddr>,access_device_port=<sport>,end_host_id=<fld2>,monitor_mode=<fld3>,roles=<user_role>,audit_posture_token=<fld4>,enforcement_profiles=<profile>,acct_session_id=<fld5>,nas_ip_address=<fld6>,nas_port=<fld7>,nas_port_type=<fld8>,calling_station_id=<fld9>,called_station_id=<fld10>,framed_ip_address=<fld11>,accounting_service_type=<fld12>,account_authentication_type=<fld12>,account_delay_time=<fld13>,account_input_octets=<fld14>,account_output_octets=<fld15>,account_input_packets=<fld16>,account_output_packets=<fld17>,account_session_time=<fld18>,termination_cause=<result>,user_session_id=<fld19>,flags=<fld20>,remote_ip=<fld21>,command_privelege_level=<fld22>,authentication_type=<fld23>,tacacs_protocol_authentication_method=<fld24>,tacacs_protocol_authentication_service=<fld25>,client_ip=<daddr>,client_port=<dport>,authentication_action=<fld26>,session_id=<fld27>,protocol=<protocol>,username=<username>,service_name=<service>,login_status=<disposition>,system_posture_status=<fld28>,request_timestamp=<fld29>,error_code=<resultcode>,alert_message=<event_description>,id=<id>,process_id=<process_id>,cpu_usage=<fld20>,res_mem_usage=<fld21>,virt_mem_usage=<fld22>,timestamp=<event_time_string>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "auth_method=%{authmethod},auth_source=%{fld1},access_device_ip=%{saddr},access_device_port=%{sport},end_host_id=%{fld2},monitor_mode=%{fld3},roles=%{user_role},audit_posture_token=%{fld4},enforcement_profiles=%{profile},acct_session_id=%{fld5},nas_ip_address=%{fld6},nas_port=%{fld7},nas_port_type=%{fld8},calling_station_id=%{fld9},called_station_id=%{fld10},framed_ip_address=%{fld11},accounting_service_type=%{fld12},account_authentication_type=%{fld12},account_delay_time=%{fld13},account_input_octets=%{fld14},account_output_octets=%{fld15},account_input_packets=%{fld16},account_output_packets=%{fld17},account_session_time=%{fld18},termination_cause=%{result},user_session_id=%{fld19},flags=%{fld20},remote_ip=%{fld21},command_privelege_level=%{fld22},authentication_type=%{fld23},tacacs_protocol_authentication_method=%{fld24},tacacs_protocol_authentication_service=%{fld25},client_ip=%{daddr},client_port=%{dport},authentication_action=%{fld26},session_id=%{fld27},protocol=%{protocol},username=%{username},service_name=%{service},login_status=%{disposition},system_posture_status=%{fld28},request_timestamp=%{fld29},error_code=%{resultcode},alert_message=%{event_description},id=%{id},process_id=%{process_id},cpu_usage=%{fld20},res_mem_usage=%{fld21},virt_mem_usage=%{fld22},timestamp=%{event_time_string}" }
				id => "message-Session_Logs"
				add_field => {
				"ec_theme" => "AccessControl"
					"[event][id]" => "Session_Logs"
					"[rsa][message][id1]" => "Session_Logs"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld29}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE Session_Logs:01
		# line in RSA:  Common.Alerts=<event_description>,Common.Alerts-Present=<fld15>,Common.Audit-Posture-Token=<fld4>,Common.Auth-Type=<fld23>,Common.Connection-Status=<fld14>,Common.Enforcement-Profiles=<profile>,Common.Error-Code=<resultcode>,Common.Host-MAC-Address=<smacaddr>,Common.Login-Status=<disposition>,Common.Monitor-Mode=<fld3>,Common.NAS-IP-Address=<saddr>,Common.NAS-Port=<sport>,Common.Request-Id=<fld13>,Common.Request-Timestamp=<fld29>,Common.Roles=<user_role>,Common.Service=<service>,Common.Source=<event_source>,Common.System-Posture-Token=<fld28>,Common.Username=<username>,RADIUS.Acct-Authentic=<fld12>,RADIUS.Acct-Called-Station-Id=<fld10>,RADIUS.Acct-Calling-Station-Id=<fld9>,RADIUS.Acct-Delay-Time=<fld13>,RADIUS.Acct-Framed-IP-Address=<fld11>,RADIUS.Acct-Input-Octets=<fld14>,RADIUS.Acct-Input-Pkts=<fld16>,RADIUS.Acct-NAS-IP-Address=<saddr>,RADIUS.Acct-NAS-Port=<sport>,RADIUS.Acct-NAS-Port-Type=<fld11>,RADIUS.Acct-Output-Octets=<fld15>,RADIUS.Acct-Output-Pkts=<fld17>,RADIUS.Acct-Service-Name=<service>,RADIUS.Acct-Session-Id=<fld5>,RADIUS.Acct-Session-Time=<fld18>,RADIUS.Acct-Status-Type=<fld22>,RADIUS.Acct-Termination-Cause=<result>,RADIUS.Acct-Timestamp=<fld29>,RADIUS.Acct-Username=<username>,RADIUS.Auth-Method=<authmethod>,RADIUS.Auth-Source=<fld1>,TACACS.Acct-Flags=<fld20>,TACACS.Acct-Session-Id=<fld5>,TACACS.Authen-Action=<fld26>,TACACS.Authen-Method=<authmethod>,TACACS.Authen-Service=<fld25>,TACACS.Authen-Type=<fld23>,TACACS.Auth-Source=<fld1>,TACACS.Enforcement-Profiles=<profile>,TACACS.Privilege-Level=<fld22>,TACACS.Remote-Address=<daddr>,TACACS.Request-Type=<fld10>,WEBAUTH.Auth-Source=<fld1>,WEBAUTH.Enforcement-Profiles=<profile>,WEBAUTH.Host-IP-Address=<saddr>,WEBAUTH.NAS-Port-Index=<fld7>,WEBAUTH.NAS-Port-Name=<fld8>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Common.Alerts=%{event_description},Common.Alerts-Present=%{fld15},Common.Audit-Posture-Token=%{fld4},Common.Auth-Type=%{fld23},Common.Connection-Status=%{fld14},Common.Enforcement-Profiles=%{profile},Common.Error-Code=%{resultcode},Common.Host-MAC-Address=%{smacaddr},Common.Login-Status=%{disposition},Common.Monitor-Mode=%{fld3},Common.NAS-IP-Address=%{saddr},Common.NAS-Port=%{sport},Common.Request-Id=%{fld13},Common.Request-Timestamp=%{fld29},Common.Roles=%{user_role},Common.Service=%{service},Common.Source=%{event_source},Common.System-Posture-Token=%{fld28},Common.Username=%{username},RADIUS.Acct-Authentic=%{fld12},RADIUS.Acct-Called-Station-Id=%{fld10},RADIUS.Acct-Calling-Station-Id=%{fld9},RADIUS.Acct-Delay-Time=%{fld13},RADIUS.Acct-Framed-IP-Address=%{fld11},RADIUS.Acct-Input-Octets=%{fld14},RADIUS.Acct-Input-Pkts=%{fld16},RADIUS.Acct-NAS-IP-Address=%{saddr},RADIUS.Acct-NAS-Port=%{sport},RADIUS.Acct-NAS-Port-Type=%{fld11},RADIUS.Acct-Output-Octets=%{fld15},RADIUS.Acct-Output-Pkts=%{fld17},RADIUS.Acct-Service-Name=%{service},RADIUS.Acct-Session-Id=%{fld5},RADIUS.Acct-Session-Time=%{fld18},RADIUS.Acct-Status-Type=%{fld22},RADIUS.Acct-Termination-Cause=%{result},RADIUS.Acct-Timestamp=%{fld29},RADIUS.Acct-Username=%{username},RADIUS.Auth-Method=%{authmethod},RADIUS.Auth-Source=%{fld1},TACACS.Acct-Flags=%{fld20},TACACS.Acct-Session-Id=%{fld5},TACACS.Authen-Action=%{fld26},TACACS.Authen-Method=%{authmethod},TACACS.Authen-Service=%{fld25},TACACS.Authen-Type=%{fld23},TACACS.Auth-Source=%{fld1},TACACS.Enforcement-Profiles=%{profile},TACACS.Privilege-Level=%{fld22},TACACS.Remote-Address=%{daddr},TACACS.Request-Type=%{fld10},WEBAUTH.Auth-Source=%{fld1},WEBAUTH.Enforcement-Profiles=%{profile},WEBAUTH.Host-IP-Address=%{saddr},WEBAUTH.NAS-Port-Index=%{fld7},WEBAUTH.NAS-Port-Name=%{fld8}" }
				id => "message-Session_Logs:01"
				add_field => {
				"ec_theme" => "AccessControl"
					"[event][id]" => "Session_Logs:01"
					"[rsa][message][id1]" => "Session_Logs:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{fld29}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=%{event_description}" }
			id => "msgParserId2"
			add_field => {
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=%{event_description}" }
			id => "msgParserId3"
			add_field => {
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,{ Description=<event_description> status=<resultcode>, error=<info> | Description=<event_description> error=<info> | Description=<event_description>}
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^[\s]*(?<event_source>[^,]*),Level=(?<severity>[^,]*),Category=(?<event_type>[^,]*),Action=(?<action>[^,]*),([\s]*Description=(?<event_description>[^\s]*)[\s]+status=(?<resultcode>[^,]*),[\s]+error=(?<info>[^\s]*)[\s]+|[\s]*Description=(?<event_description>[^\s]*)[\s]+error=(?<info>[^\s]*)[\s]+|[\s]*Description=(?<event_description>.*))$" }
			id => "msgParserId4"
			add_field => {
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Logged_in" {
		# MESSAGE Logged_in:02
		# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=User:<username>\nRole:<user_role>\nAuthentication Source:<authmethod>\nSession ID:<sessionid>\nClient IP Address:<daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=User:%{username}\nRole:%{user_role}\nAuthentication Source:%{authmethod}\nSession ID:%{sessionid}\nClient IP Address:%{daddr}" }
				id => "message-Logged_in:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Logged_in:02"
					"[rsa][message][id1]" => "Logged_in:02"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE Logged_in:01
		# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=User:<username>\nGroup:<group>\nClient IP Address:<daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=User:%{username}\nGroup:%{group}\nClient IP Address:%{daddr}" }
				id => "message-Logged_in:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Logged_in:01"
					"[rsa][message][id1]" => "Logged_in:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE Logged_in
		# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=%{event_description}" }
				id => "message-Logged_in"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "Logged_in"
					"[rsa][message][id1]" => "Logged_in"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=%{event_description}" }
			id => "msgParserId8"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=%{event_description}" }
			id => "msgParserId9"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Session_destroyed" {
		# MESSAGE Session_destroyed:01
		# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=Session ID:<sessionid>\nClient IP Address:<daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=Session ID:%{sessionid}\nClient IP Address:%{daddr}" }
				id => "message-Session_destroyed:01"
				add_field => {
					"[event][id]" => "Session_destroyed:01"
					"[rsa][message][id1]" => "Session_destroyed:01"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
		# MESSAGE Session_destroyed
		# line in RSA:  <event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=%{event_description}" }
				id => "message-Session_destroyed"
				add_field => {
					"[event][id]" => "Session_destroyed"
					"[rsa][message][id1]" => "Session_destroyed"
					"[event][categoryid]" => "1607000000"
					"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA:  <saddr>,Category=<event_type>,Action=<action>,User=<username>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{saddr},Category=%{event_type},Action=%{action},User=%{username}" }
			id => "msgParserId12"
			add_field => {
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA:  <saddr>,Category=<event_type>,Action=<action>,User=<username>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{saddr},Category=%{event_type},Action=%{action},User=%{username}" }
			id => "msgParserId13"
			add_field => {
				"ec_theme" => "Authentication"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: EntityName=<fld8>,Category=<event_type>,Action=<action>,User=<username>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "EntityName=%{fld8},Category=%{event_type},Action=%{action},User=%{username}" }
			id => "msgParserId14"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: Component=<event_source>,Level=<severity>,Category=<event_type>,Action=<action>,Description=<event_description>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "Component=%{event_source},Level=%{severity},Category=%{event_type},Action=%{action},Description=%{event_description}" }
			id => "msgParserId15"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hmonth} %{hday} %{hyear} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA:  CN=<fld1>,Common.Host-MAC-Address=<smacaddr>,Common.NAS-IP-Address=<stransaddr>,Common.Request-Timestamp=<fld3>,Common.Roles=<user_role>,Common.Service=<service>,Common.Username=<username>,RADIUS.Acct-Framed-IP-Address=<fld4>,Common.Enforcement-Profiles=<fld5>,Common.System-Posture-Token=<fld6>,RADIUS.Auth-Method=<authmethod>,WEBAUTH.Host-IP-Address=<saddr> 
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "CN=%{fld1},Common.Host-MAC-Address=%{smacaddr},Common.NAS-IP-Address=%{stransaddr},Common.Request-Timestamp=%{fld3},Common.Roles=%{user_role},Common.Service=%{service},Common.Username=%{username},RADIUS.Acct-Framed-IP-Address=%{fld4},Common.Enforcement-Profiles=%{fld5},Common.System-Posture-Token=%{fld6},RADIUS.Auth-Method=%{authmethod},WEBAUTH.Host-IP-Address=%{saddr}" }
			id => "msgParserId16"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA:  Auth.Username=<username>,Auth.Host-MAC-Address=<macaddr>,Auth.NAS-IP-Address=<saddr>,Auth.Service=<service>,CppmErrorCode.Error-Code-Details=<result>,CppmAlert.Alerts=<info>  
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "Auth.Username=%{username},Auth.Host-MAC-Address=%{macaddr},Auth.NAS-IP-Address=%{saddr},Auth.Service=%{service},CppmErrorCode.Error-Code-Details=%{result},CppmAlert.Alerts=%{info}" }
			id => "msgParserId17"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld5} %{hfld6}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA:  Auth.Username=<username>Auth.Host-MAC-Address=<macaddr>Auth.Service=<service>Auth.Roles=<user_role>Auth.NAS-IP-Address=<saddr>Auth.Protocol=<protocol>Auth.Login-Status=<disposition>Auth.Source=<authmethod>CppmErrorCode.Error-Code-Details=<result>CppmAlert.Alerts=<info>Radius.Username=<username>Radius.Calling-Station-Id=<macaddr>Radius.NAS-IP-Address=<saddr>Radius.Start-Time=<starttime>Radius.Duration=<duration_string>Radius.Input-bytes=<rbytes>Radius.Output-bytes=<sbytes>Tacacs.Username=<username>Tacacs.Authen-Service=<service>Tacacs.NAS-IP-Address=<saddr>Tacacs.Auth-Source=<authmethod>Tacacs.Roles=<user_role>Auth.Error-Code=<error>Endpoint.IP-Address=<hostip>Endpoint.MAC-Address=<macaddr>Endpoint.MAC-Vendor=<fld1>Endpoint.Device-Category=<fld2>Endpoint.Device-Family=<fld3>Endpoint.Device-Name=<device>Endpoint.Conflict=<fld4>Endpoint.Status=<disposition>Endpoint.Added-At=<fld5>Endpoint.Updated-At=<fld6>Guest.Username=<username>Guest.MAC-Address=<macaddr>Guest.Visitor-Name=<fld7>Guest.Visitor-Company=<fld8>Guest.Enabled=<fld9>Guest.Created-At=<fld10>Guest.Starts-At=<starttime>Guest.Expires-At=<expiration_time>OnboardEnrollment.Username=<username>OnboardEnrollment.Device-Name=<device>OnboardEnrollment.MAC-Address=<macaddr>OnboardEnrollment.Device-Product=<product>OnboardEnrollment.Device-Version=<version>OnboardEnrollment.Added-At=<fld11>OnboardEnrollment.Updated-At=<fld12>OnboardCert.Username=<username>OnboardCert.Mac-Address=<macaddr>OnboardCert.Subject=<cert_subject>OnboardCert.Issuer=<fld13>OnboardCert.Valid-From=<fld14>OnboardCert.Valid-To=<fld15>OnboardCert.Revoked-At=<fld16>OnboardCert.Updated-At=<fld17>OnboardOCSP.Remote-Address=<daddr>OnboardOCSP.Response-StatusName=<disposition>OnboardOCSP.Timestamp=<fld18>CppmNode.CPPM-Node=<hostip>CppmSystemEvent.Source=<process_src>CppmSystemEvent.Category=<category>CppmSystemEvent.Action=<action>CppmSystemEvent.Timestamp=<fld19>CppmSystemEvent.Description=<event_description>CppmConfigAudit.Name=<c_username>CppmConfigAudit.Action=<action>CppmConfigAudit.Category=<category>CppmConfigAudit.Updated-By=<username>CppmConfigAudit.Updated-At=<fld20>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "Auth.Username=%{username}Auth.Host-MAC-Address=%{macaddr}Auth.Service=%{service}Auth.Roles=%{user_role}Auth.NAS-IP-Address=%{saddr}Auth.Protocol=%{protocol}Auth.Login-Status=%{disposition}Auth.Source=%{authmethod}CppmErrorCode.Error-Code-Details=%{result}CppmAlert.Alerts=%{info}Radius.Username=%{username}Radius.Calling-Station-Id=%{macaddr}Radius.NAS-IP-Address=%{saddr}Radius.Start-Time=%{starttime}Radius.Duration=%{duration_string}Radius.Input-bytes=%{rbytes}Radius.Output-bytes=%{sbytes}Tacacs.Username=%{username}Tacacs.Authen-Service=%{service}Tacacs.NAS-IP-Address=%{saddr}Tacacs.Auth-Source=%{authmethod}Tacacs.Roles=%{user_role}Auth.Error-Code=%{error}Endpoint.IP-Address=%{hostip}Endpoint.MAC-Address=%{macaddr}Endpoint.MAC-Vendor=%{fld1}Endpoint.Device-Category=%{fld2}Endpoint.Device-Family=%{fld3}Endpoint.Device-Name=%{device}Endpoint.Conflict=%{fld4}Endpoint.Status=%{disposition}Endpoint.Added-At=%{fld5}Endpoint.Updated-At=%{fld6}Guest.Username=%{username}Guest.MAC-Address=%{macaddr}Guest.Visitor-Name=%{fld7}Guest.Visitor-Company=%{fld8}Guest.Enabled=%{fld9}Guest.Created-At=%{fld10}Guest.Starts-At=%{starttime}Guest.Expires-At=%{expiration_time}OnboardEnrollment.Username=%{username}OnboardEnrollment.Device-Name=%{device}OnboardEnrollment.MAC-Address=%{macaddr}OnboardEnrollment.Device-Product=%{product}OnboardEnrollment.Device-Version=%{version}OnboardEnrollment.Added-At=%{fld11}OnboardEnrollment.Updated-At=%{fld12}OnboardCert.Username=%{username}OnboardCert.Mac-Address=%{macaddr}OnboardCert.Subject=%{cert_subject}OnboardCert.Issuer=%{fld13}OnboardCert.Valid-From=%{fld14}OnboardCert.Valid-To=%{fld15}OnboardCert.Revoked-At=%{fld16}OnboardCert.Updated-At=%{fld17}OnboardOCSP.Remote-Address=%{daddr}OnboardOCSP.Response-StatusName=%{disposition}OnboardOCSP.Timestamp=%{fld18}CppmNode.CPPM-Node=%{hostip}CppmSystemEvent.Source=%{process_src}CppmSystemEvent.Category=%{category}CppmSystemEvent.Action=%{action}CppmSystemEvent.Timestamp=%{fld19}CppmSystemEvent.Description=%{event_description}CppmConfigAudit.Name=%{c_username}CppmConfigAudit.Action=%{action}CppmConfigAudit.Category=%{category}CppmConfigAudit.Updated-By=%{username}CppmConfigAudit.Updated-At=%{fld20}" }
			id => "msgParserId18"
			add_field => {
				"hostname" => "%{hhostname}"
				"[logstash][fullDateTimeString]" => "%{hfld5} %{hfld6}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_type]"
		destination => "[ec_theme]"
		dictionary => {
			"Authentication" => "Authentication"
			"Add License" => "Configuration"
			"configuration" => "Configuration"
			"Fingerprints_Updates" => "Configuration"
			"Hotfixes_Updates" => "Configuration"
			"Logged in" => "Authentication"
			"Logged out" => "Authentication"
			"Logged failed" => "Authentication"
			"Setup" => "Configuration"
			"Start" => "Configuration"
			"Stop" => "Configuration"
			"System" => "Configuration"
			"AV/AS Updates" => "Configuration"
			"External Syslog Server" => "Configuration"
			"Enforcement Policy" => "Configuration"
			"Network Device" => "Configuration"
			"Policy_Simulation" => "Configuration"
			"Radius Enforcement Service" => "Configuration"
			"Role Mapping Policy" => "Configuration"
			"Syslog Export Data" => "Configuration"
			"Web-based Authentication Service" => "Authentication"
			"ClearPass Onboard" => "Configuration"
			"Guest User" => "Configuration"
			"Endpoint" => "Configuration"
			"WebService Error" => "Configuration"
			"Certificate" => "Configuration"
			"Licensing" => "Configuration"
		}
		fallback => ""
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-arubacppmmsg.json"
#			template_name => "arubacppm_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ibmwebspheredp"
			"[observer][name]" => "IBM WebSphere DataPower"
			"[observer][type]" => "System"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>][<hfld4>] <messageid>(<hfld5>): trans(<hfld6>)[<hfld7>]: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\]\[(?<hfld4>[^\]]*)\][\s]+(?<messageid>[^\(]*)\((?<hfld5>[^\)]*)\):[\s]+trans\((?<hfld6>[^\)]*)\)\[(?<hfld7>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>] <messageid>(<hfld4>): trans(<hfld5>)[<hfld6>]: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\][\s]+(?<messageid>[^\(]*)\((?<hfld4>[^\)]*)\):[\s]+trans\((?<hfld5>[^\)]*)\)\[(?<hfld6>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>] <messageid>(<hfld4>)[<hfld5>]: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\][\s]+(?<messageid>[^\(]*)\((?<hfld4>[^\)]*)\)\[(?<hfld5>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>][<hfld4>] <messageid> <hfld5>(<hfld6>): trans(<hfld7>): <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\]\[(?<hfld4>[^\]]*)\][\s]+(?<messageid>[^\s]*)[\s]+(?<hfld5>[^\(]*)\((?<hfld6>[^\)]*)\):[\s]+trans\((?<hfld7>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>][<hfld4>] <messageid>(<hfld5>): <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\]\[(?<hfld4>[^\]]*)\][\s]+(?<messageid>[^\(]*)\((?<hfld5>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>] <messageid> <hfld4>(<hfld5>): trans(<hfld6>): <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\][\s]+(?<messageid>[^\s]*)[\s]+(?<hfld4>[^\(]*)\((?<hfld5>[^\)]*)\):[\s]+trans\((?<hfld6>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>] <messageid>(<hfld4>): <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\][\s]+(?<messageid>[^\(]*)\((?<hfld4>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>][<hfld4>] [<hfld5>]: <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\]\[(?<hfld4>[^\]]*)\][\s]+\[(?<hfld5>[^\]]*)\]:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>] [<hfld4>]: <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\][\s]+\[(?<hfld4>[^\]]*)\]:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>] <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\][\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: <month> <day> <time> <hfld1> [<msgIdPart1>][<msgIdPart2>] <hfld41> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<msgIdPart1>[^\]]*)\]\[(?<msgIdPart2>[^\]]*)\][\s]+(?<hfld41>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{msgIdPart1}-%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 00013
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>][<hfld4>][<hfld8>] <messageid>(<hfld5>): trans(<hfld6>)[<hfld7>]: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\]\[(?<hfld4>[^\]]*)\]\[(?<hfld8>[^\]]*)\][\s]+(?<messageid>[^\(]*)\((?<hfld5>[^\)]*)\):[\s]+trans\((?<hfld6>[^\)]*)\)\[(?<hfld7>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-00013"
			add_field => {
				"[rsa][header][id]" => "00013"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0014
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>][<hfld4>][<hfld5>] <messageid>(<hfld6>): trans(<hfld7>): <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\]\[(?<hfld4>[^\]]*)\]\[(?<hfld5>[^\]]*)\][\s]+(?<messageid>[^\(]*)\((?<hfld6>[^\)]*)\):[\s]+trans\((?<hfld7>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0015
	# line in RSA: <month> <day> <time> <hfld1> [<hfld2>][<hfld3>][<hfld4>][<hfld5>] <msgIdPart1> <msgIdPart2>(<hfld6>): <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+\[(?<hfld2>[^\]]*)\]\[(?<hfld3>[^\]]*)\]\[(?<hfld4>[^\]]*)\]\[(?<hfld5>[^\]]*)\][\s]+(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\(]*)\((?<hfld6>[^\)]*)\):[\s]+(?<payload>.*))$" }
			id => "header-0015"
			add_field => {
				"[rsa][header][id]" => "0015"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-ibmwebspheredpmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "action" {
		# MESSAGE action
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): Configured.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Configured\.$" }
				id => "message-action"
				add_field => {
				"event_description" => "Configured"
					"[event][id]" => "action"
					"[rsa][message][id1]" => "action"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE action:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): action <fld1> - Configuration deleted.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+action[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+Configuration[\s]+deleted\.$" }
				id => "message-action:01"
				add_field => {
				"event_description" => "Deleted"
					"[event][id]" => "action:01"
					"[rsa][message][id1]" => "action:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "b2bgw" {
		# MESSAGE b2bgw
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){[error]: | : | [<hostip>]: } Connect to URL '<url>' timed out
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)(\[error\]:[\s]+|[\s]*:[\s]+|[\s]*\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+Connect[\s]+to[\s]+URL[\s]+'(?<url>[^']*)'[\s]+timed[\s]+out$" }
				id => "message-b2bgw"
				add_field => {
				"event_description" => "Connection timed out"
					"[event][id]" => "b2bgw"
					"[rsa][message][id1]" => "b2bgw"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE b2bgw:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){[error]: | : | [<hostip>]: } Backside header ('<fld1>') failed to parse due to: <result> URL: <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)(\[error\]:[\s]+|[\s]*:[\s]+|[\s]*\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+Backside[\s]+header[\s]+\('(?<fld1>[^']*)'\)[\s]+failed[\s]+to[\s]+parse[\s]+due[\s]+to:[\s]+(?<result>[^\s]*)[\s]+URL:[\s]+(?<url>.*)$" }
				id => "message-b2bgw:01"
				add_field => {
				"event_description" => "Backside header failed to parse"
					"[event][id]" => "b2bgw:01"
					"[rsa][message][id1]" => "b2bgw:01"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE b2bgw:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){[error]: | : | [<hostip>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)(\[error\]:[\s]+|[\s]*:[\s]+|[\s]*\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-b2bgw:02"
				add_field => {
					"[event][id]" => "b2bgw:02"
					"[rsa][message][id1]" => "b2bgw:02"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "certificate" {
		# MESSAGE certificate
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): Configured.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Configured\.$" }
				id => "message-certificate"
				add_field => {
				"event_description" => "Certificate configured"
					"[event][id]" => "certificate"
					"[rsa][message][id1]" => "certificate"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE certificate:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): certificate <cert_subject> - Configuration deleted.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+certificate[\s]+(?<cert_subject>[^\s]*)[\s]+\-[\s]+Configuration[\s]+deleted\.$" }
				id => "message-certificate:01"
				add_field => {
				"event_description" => "Configuration deleted"
					"[event][id]" => "certificate:01"
					"[rsa][message][id1]" => "certificate:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE certificate:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): '<cert_subject>' deleted, may be due to modification/update
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+'(?<cert_subject>[^']*)'[\s]+deleted,[\s]+may[\s]+be[\s]+due[\s]+to[\s]+modification/update$" }
				id => "message-certificate:02"
				add_field => {
				"event_description" => "Certificate deleted"
					"[event][id]" => "certificate:02"
					"[rsa][message][id1]" => "certificate:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE certificate:03
		# line in RSA: <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): Cannot be deleted. In use by:  <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Cannot[\s]+be[\s]+deleted\.[\s]+In[\s]+use[\s]+by:[\s]+(?<fld1>.*)$" }
				id => "message-certificate:03"
				add_field => {
					"[event][id]" => "certificate:03"
					"[rsa][message][id1]" => "certificate:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA:  <hostname> [<event_type>][<severity>] <service> <event_description>.
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{hostname} [%{event_type}][%{severity}] %{service} %{event_description}." }
			id => "msgParserId10"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "domain" {
		# MESSAGE domain
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): Executing configuration for '<fld1>' 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+Executing[\s]+configuration[\s]+for[\s]+'(?<fld1>[^']*)'[\s]+$" }
				id => "message-domain"
				add_field => {
				"event_description" => "Domain configuration changed"
					"[event][id]" => "domain"
					"[rsa][message][id1]" => "domain"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE domain:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): Domain configuration has been { saved | modified } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+Domain[\s]+configuration[\s]+has[\s]+been[\s]+([\s]*saved[\s]+|[\s]*modified[\s]+)[\s]+$" }
				id => "message-domain:01"
				add_field => {
				"event_description" => "Domain configuration changed"
					"[event][id]" => "domain:01"
					"[rsa][message][id1]" => "domain:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE domain:02
		# line in RSA: <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): Domain '<fld1>' is not visible - functionality may be restricted. 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+Domain[\s]+'(?<fld1>[^']*)'[\s]+is[\s]+not[\s]+visible[\s]+\-[\s]+functionality[\s]+may[\s]+be[\s]+restricted\.[\s]+$" }
				id => "message-domain:02"
				add_field => {
					"[event][id]" => "domain:02"
					"[rsa][message][id1]" => "domain:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "logging" {
		# MESSAGE logging
		# line in RSA:  <hostname> [<domain>][<event_type>][<severity>] logging target(<info>): trans(<operation_id>): { Connection error(<resultcode>) at | Connect to URL | Error occurred (<fld1> when connecting to URL } ' { http | dpsmtp } ://<daddr>:<dport>/<fld2>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+logging[\s]+target\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+([\s]*Connection[\s]+error\((?<resultcode>[^\)]*)\)[\s]+at[\s]+|[\s]*Connect[\s]+to[\s]+URL[\s]+|[\s]*Error[\s]+occurred[\s]+\((?<fld1>[^\s]*)[\s]+when[\s]+connecting[\s]+to[\s]+URL[\s]+)[\s]+'[\s]+([\s]*http[\s]+|[\s]*dpsmtp[\s]+)[\s]+://(?<daddr>[^:]*):(?<dport>[^/]*)/(?<fld2>[^']*)'$" }
				id => "message-logging"
				add_field => {
				"event_description" => "Logging target connection error"
					"[event][id]" => "logging"
					"[rsa][message][id1]" => "logging"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE logging:01
		# line in RSA:  <hostname> [<event_type>][<severity>] logging target(<info>): trans(<operation_id>): { Connection error(<resultcode>) at | Connect to URL | Error occurred (<fld1>) when connecting to URL } ' { http | dpsmtp } ://<daddr>:<dport>/<fld2>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+logging[\s]+target\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+([\s]*Connection[\s]+error\((?<resultcode>[^\)]*)\)[\s]+at[\s]+|[\s]*Connect[\s]+to[\s]+URL[\s]+|[\s]*Error[\s]+occurred[\s]+\((?<fld1>[^\)]*)\)[\s]+when[\s]+connecting[\s]+to[\s]+URL[\s]+)[\s]+'[\s]+([\s]*http[\s]+|[\s]*dpsmtp[\s]+)[\s]+://(?<daddr>[^:]*):(?<dport>[^/]*)/(?<fld2>[^']*)'$" }
				id => "message-logging:01"
				add_field => {
				"event_description" => "Logging target connection error"
					"[event][id]" => "logging:01"
					"[rsa][message][id1]" => "logging:01"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE logging:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } logging target(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+logging[\s]+target\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-logging:02"
				add_field => {
					"[event][id]" => "logging:02"
					"[rsa][message][id1]" => "logging:02"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE logging:03
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } logging category(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+logging[\s]+category\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-logging:03"
				add_field => {
					"[event][id]" => "logging:03"
					"[rsa][message][id1]" => "logging:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "mpgw" {
		# MESSAGE mpgw
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){ [error]: | : } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)([\s]*\[error\]:[\s]+|[\s]*:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-mpgw"
				add_field => {
					"[event][id]" => "mpgw"
					"[rsa][message][id1]" => "mpgw"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mpgw:01
		# line in RSA: <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): Multistep Probe enabled
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+Multistep[\s]+Probe[\s]+enabled$" }
				id => "message-mpgw:01"
				add_field => {
				"event_description" => " Multistep Probe enabled"
					"[event][id]" => "mpgw:01"
					"[rsa][message][id1]" => "mpgw:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mpgw:04
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: ldap authentication succeeded with (<authmethod>, username='<fld3>' password='<fld4>'policy-name='<policyname>' mAdminState='<fld5>' LoginForm='<fld6>' UseSSLForLogin='<fld8>' EnableMigration='<fld9>' SSLPort='<sport>' ErrorPage='<fld10>' LogoutPage='<fld11>' DefaultURL='<fld12>' FormsLocation='<fld13>' LocalLoginForm='store:///LoginPage.htm' LocalErrorPage='<fld14>' LocalLogoutPage='<fld15>' UsernameField='<username>' PasswordField='<fld16>' RedirectField='<fld17>' FormProcessingURL='<fld18>' InactivityTimeout='<fld19>' SessionLifetime='<fld20>' RedirectURLType='<fld21>' CustomURL='<fld22>' FormSupportType='<fld23>' FormSupportScript='<fld24>' target='<url>' )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<fld7>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+ldap[\s]+authentication[\s]+succeeded[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+username='(?<fld3>[^']*)'[\s]+password='(?<fld4>[^']*)'policy\-name='(?<policyname>[^']*)'[\s]+mAdminState='(?<fld5>[^']*)'[\s]+LoginForm='(?<fld6>[^']*)'[\s]+UseSSLForLogin='(?<fld8>[^']*)'[\s]+EnableMigration='(?<fld9>[^']*)'[\s]+SSLPort='(?<sport>[^']*)'[\s]+ErrorPage='(?<fld10>[^']*)'[\s]+LogoutPage='(?<fld11>[^']*)'[\s]+DefaultURL='(?<fld12>[^']*)'[\s]+FormsLocation='(?<fld13>[^']*)'[\s]+LocalLoginForm='store:///LoginPage\.htm'[\s]+LocalErrorPage='(?<fld14>[^']*)'[\s]+LocalLogoutPage='(?<fld15>[^']*)'[\s]+UsernameField='(?<username>[^']*)'[\s]+PasswordField='(?<fld16>[^']*)'[\s]+RedirectField='(?<fld17>[^']*)'[\s]+FormProcessingURL='(?<fld18>[^']*)'[\s]+InactivityTimeout='(?<fld19>[^']*)'[\s]+SessionLifetime='(?<fld20>[^']*)'[\s]+RedirectURLType='(?<fld21>[^']*)'[\s]+CustomURL='(?<fld22>[^']*)'[\s]+FormSupportType='(?<fld23>[^']*)'[\s]+FormSupportScript='(?<fld24>[^']*)'[\s]+target='(?<url>[^']*)'[\s]+\)$" }
				id => "message-mpgw:04"
				add_field => {
				"event_description" => "authentication succeeded"
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "mpgw:04"
					"[rsa][message][id1]" => "mpgw:04"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE mpgw:05
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: ldap authentication failed with (<authmethod>, policy-name='<policyname>' mAdminState='<fld5>' LoginForm='<fld6>' UseSSLForLogin='<fld8>' EnableMigration='<fld9>' SSLPort='<sport>' ErrorPage='<fld10>' LogoutPage='<fld11>' DefaultURL='<fld12>' FormsLocation='<fld13>' LocalLoginForm='store:///LoginPage.htm' LocalErrorPage='<fld14>' LocalLogoutPage='<fld15>' UsernameField='<username>' PasswordField='<fld16>' RedirectField='<fld17>' FormProcessingURL='<fld18>' InactivityTimeout='<fld19>' SessionLifetime='<fld20>' RedirectURLType='<fld21>' CustomURL='<fld22>' FormSupportType='<fld23>' FormSupportScript='<fld24>' )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<fld7>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+ldap[\s]+authentication[\s]+failed[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+policy\-name='(?<policyname>[^']*)'[\s]+mAdminState='(?<fld5>[^']*)'[\s]+LoginForm='(?<fld6>[^']*)'[\s]+UseSSLForLogin='(?<fld8>[^']*)'[\s]+EnableMigration='(?<fld9>[^']*)'[\s]+SSLPort='(?<sport>[^']*)'[\s]+ErrorPage='(?<fld10>[^']*)'[\s]+LogoutPage='(?<fld11>[^']*)'[\s]+DefaultURL='(?<fld12>[^']*)'[\s]+FormsLocation='(?<fld13>[^']*)'[\s]+LocalLoginForm='store:///LoginPage\.htm'[\s]+LocalErrorPage='(?<fld14>[^']*)'[\s]+LocalLogoutPage='(?<fld15>[^']*)'[\s]+UsernameField='(?<username>[^']*)'[\s]+PasswordField='(?<fld16>[^']*)'[\s]+RedirectField='(?<fld17>[^']*)'[\s]+FormProcessingURL='(?<fld18>[^']*)'[\s]+InactivityTimeout='(?<fld19>[^']*)'[\s]+SessionLifetime='(?<fld20>[^']*)'[\s]+RedirectURLType='(?<fld21>[^']*)'[\s]+CustomURL='(?<fld22>[^']*)'[\s]+FormSupportType='(?<fld23>[^']*)'[\s]+FormSupportScript='(?<fld24>[^']*)'[\s]+\)$" }
				id => "message-mpgw:05"
				add_field => {
				"event_description" => "authentication failed"
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
					"[event][id]" => "mpgw:05"
					"[rsa][message][id1]" => "mpgw:05"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE mpgw:06
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Latency: <fld1> [<url>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Latency:[\s]+(?<fld1>[^\s]*)[\s]+\[(?<url>[^\]]*)\]$" }
				id => "message-mpgw:06"
				add_field => {
				"event_description" => "Latency statistics"
					"[event][id]" => "mpgw:06"
					"[rsa][message][id1]" => "mpgw:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE mpgw:07
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{fld2}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{fld7}][%{hostip}]: %{event_description}" }
				id => "message-mpgw:07"
				add_field => {
					"[event][id]" => "mpgw:07"
					"[rsa][message][id1]" => "mpgw:07"
					"[event][categoryid]" => "1603040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mpgw:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+(?<event_description>.*)$" }
				id => "message-mpgw:02"
				add_field => {
					"[event][id]" => "mpgw:02"
					"[rsa][message][id1]" => "mpgw:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE mpgw:03
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<daddr>] gtid(<fld1>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<daddr>[^\]]*)\][\s]+gtid\((?<fld1>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-mpgw:03"
				add_field => {
					"[event][id]" => "mpgw:03"
					"[rsa][message][id1]" => "mpgw:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId26
	# line in RSA:  <hostname> [<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[request]: RBM: { <event_description> - <result> | <result> }
	else if [logstash][msgparser][id] == "msgParserId26" {
		grok {
			match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[request\]:[\s]+RBM:[\s]+([\s]*(?<event_description>[^\s]*)[\s]+\-[\s]+(?<result>[^\s]*)[\s]+|[\s]*(?<result>[^\s]*)[\s]+)$" }
			id => "msgParserId26"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){[error]: | : | [<hostip>]: } <event_description>
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)(\[error\]:[\s]+|[\s]*:[\s]+|[\s]*\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
			id => "msgParserId5"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "source-http" {
		# MESSAGE source-http
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: No WS-Proxy service endpoints { matched | match } request { , <result>. | . }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+No[\s]+WS\-Proxy[\s]+service[\s]+endpoints[\s]+([\s]*matched[\s]+|[\s]*match[\s]+)[\s]+request[\s]+([\s]*,[\s]+(?<result>[^\.]*)\.[\s]+|[\s]*\.[\s]+)$" }
				id => "message-source-http"
				add_field => {
				"event_description" => "No WS-Proxy service endpoints match request"
					"[event][id]" => "source-http"
					"[rsa][message][id1]" => "source-http"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-http:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: WS-Proxy selected: '<fld1>'. Operation '<action>' matches all criteria.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+WS\-Proxy[\s]+selected:[\s]+'(?<fld1>[^']*)'\.[\s]+Operation[\s]+'(?<action>[^']*)'[\s]+matches[\s]+all[\s]+criteria\.$" }
				id => "message-source-http:01"
				add_field => {
				"event_description" => "WS-Proxy selected"
					"[event][id]" => "source-http:01"
					"[rsa][message][id1]" => "source-http:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-http:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Received <protocol>/<version> GET for <fld1> from <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Received[\s]+(?<protocol>[^/]*)/(?<version>[^\s]*)[\s]+GET[\s]+for[\s]+(?<fld1>[^\s]*)[\s]+from[\s]+(?<saddr>.*)$" }
				id => "message-source-http:02"
				add_field => {
				"event_description" => "Received HTTP GET"
					"[event][id]" => "source-http:02"
					"[rsa][message][id1]" => "source-http:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-http:03
		# line in RSA:  <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Received <protocol>/<version> { POST for | postfor } <web_root> from <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Received[\s]+(?<protocol>[^/]*)/(?<version>[^\s]*)[\s]+([\s]*POST[\s]+for[\s]+|[\s]*postfor[\s]+)[\s]+(?<web_root>[^\s]*)[\s]+from[\s]+(?<saddr>.*)$" }
				id => "message-source-http:03"
				add_field => {
				"event_description" => "Received HTTP POST"
					"[event][id]" => "source-http:03"
					"[rsa][message][id1]" => "source-http:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-http:04
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-source-http:04"
				add_field => {
					"[event][id]" => "source-http:04"
					"[rsa][message][id1]" => "source-http:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-http:06
		# line in RSA:  <hostname> [<domain>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<hostip>]: Request processing failed: <result>, from URL: <saddr>:<sport>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{hostip}]: Request processing failed: %{result}, from URL: %{saddr}:%{sport}." }
				id => "message-source-http:06"
				add_field => {
					"[event][id]" => "source-http:06"
					"[rsa][message][id1]" => "source-http:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-http:05
		# line in RSA:  <hostname> [<domain>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<hostip>]: Request processing failed: <result>, from URL: <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{hostip}]: Request processing failed: %{result}, from URL: %{saddr}:%{sport}" }
				id => "message-source-http:05"
				add_field => {
					"[event][id]" => "source-http:05"
					"[rsa][message][id1]" => "source-http:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "source-https" {
		# MESSAGE source-https:02
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Received <protocol>/<version> <web_method> for <web_root> from <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Received[\s]+(?<protocol>[^/]*)/(?<version>[^\s]*)[\s]+(?<web_method>[^\s]*)[\s]+for[\s]+(?<web_root>[^\s]*)[\s]+from[\s]+(?<saddr>.*)$" }
				id => "message-source-https:02"
				add_field => {
				"event_description" => "Received HTTP"
				"ec_activity" => "Receive"
					"[event][id]" => "source-https:02"
					"[rsa][message][id1]" => "source-https:02"
					"[event][categoryid]" => "1204000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE source-https
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+(?<event_description>.*)$" }
				id => "message-source-https"
				add_field => {
					"[event][id]" => "source-https"
					"[rsa][message][id1]" => "source-https"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-https:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-source-https:01"
				add_field => {
					"[event][id]" => "source-https:01"
					"[rsa][message][id1]" => "source-https:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "source-mq" {
		# MESSAGE source-mq
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): Request processing failed: <result>, from URL: <saddr>:<sport>.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Request[\s]+processing[\s]+failed:[\s]+(?<result>[^,]*),[\s]+from[\s]+URL:[\s]+(?<saddr>[^:]*):(?<sport>[^\.]*)\.$" }
				id => "message-source-mq"
				add_field => {
				"event_description" => "Request processing failed"
					"[event][id]" => "source-mq"
					"[rsa][message][id1]" => "source-mq"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-mq:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-source-mq:01"
				add_field => {
					"[event][id]" => "source-mq:01"
					"[rsa][message][id1]" => "source-mq:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "source-sftp-poller" {
		# MESSAGE source-sftp-poller
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): Could not allocate polling event for URL '<url>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Could[\s]+not[\s]+allocate[\s]+polling[\s]+event[\s]+for[\s]+URL[\s]+'(?<url>[^']*)'$" }
				id => "message-source-sftp-poller"
				add_field => {
				"event_description" => "Could not allocate polling event"
					"[event][id]" => "source-sftp-poller"
					"[rsa][message][id1]" => "source-sftp-poller"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-sftp-poller:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): Open failed for URL '<url>' file '<filename>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Open[\s]+failed[\s]+for[\s]+URL[\s]+'(?<url>[^']*)'[\s]+file[\s]+'(?<filename>[^']*)'$" }
				id => "message-source-sftp-poller:01"
				add_field => {
				"event_description" => "Open failed"
					"[event][id]" => "source-sftp-poller:01"
					"[rsa][message][id1]" => "source-sftp-poller:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE source-sftp-poller:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-source-sftp-poller:02"
				add_field => {
					"[event][id]" => "source-sftp-poller:02"
					"[rsa][message][id1]" => "source-sftp-poller:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "trans" {
		# MESSAGE trans
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): Host connection { failed to establish: <daddr>: tcp port <dport> | could not be established }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Host[\s]+connection[\s]+([\s]*failed[\s]+to[\s]+establish:[\s]+(?<daddr>[^:]*):[\s]+tcp[\s]+port[\s]+(?<dport>[^\s]*)[\s]+|[\s]*could[\s]+not[\s]+be[\s]+established[\s]+)$" }
				id => "message-trans"
				add_field => {
				"event_description" => "Cannot establish connection to host"
					"[event][id]" => "trans"
					"[rsa][message][id1]" => "trans"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): Created directory '<directory>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Created[\s]+directory[\s]+'(?<directory>[^']*)'$" }
				id => "message-trans:01"
				add_field => {
				"event_description" => "Created directory"
					"[event][id]" => "trans:01"
					"[rsa][message][id1]" => "trans:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): Installed battery is nearing end of life.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Installed[\s]+battery[\s]+is[\s]+nearing[\s]+end[\s]+of[\s]+life\.$" }
				id => "message-trans:02"
				add_field => {
				"event_description" => "Installed battery nearing end of life"
					"[event][id]" => "trans:02"
					"[rsa][message][id1]" => "trans:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:03
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>)[<hostip>]: Request processing failed: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Request[\s]+processing[\s]+failed:[\s]+(?<result>.*)$" }
				id => "message-trans:03"
				add_field => {
				"event_description" => "Request processing failed"
					"[event][id]" => "trans:03"
					"[rsa][message][id1]" => "trans:03"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:04
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>)[<hostip>]: HTTP response code <resultcode> for '<url>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+HTTP[\s]+response[\s]+code[\s]+(?<resultcode>[^\s]*)[\s]+for[\s]+'(?<url>[^']*)'$" }
				id => "message-trans:04"
				add_field => {
				"event_description" => "Response code to HTTP request"
					"[event][id]" => "trans:04"
					"[rsa][message][id1]" => "trans:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:05
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): certificate <cert_subject> - <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+certificate[\s]+(?<cert_subject>[^\s]*)[\s]+\-[\s]+(?<event_description>.*)$" }
				id => "message-trans:05"
				add_field => {
					"[event][id]" => "trans:05"
					"[rsa][message][id1]" => "trans:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:06
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): Statistics disabled
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Statistics[\s]+disabled$" }
				id => "message-trans:06"
				add_field => {
				"event_description" => "Statistics disabled"
					"[event][id]" => "trans:06"
					"[rsa][message][id1]" => "trans:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:07
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): TCP connection attempt refused from <saddr> to <daddr> port <dport>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+TCP[\s]+connection[\s]+attempt[\s]+refused[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+to[\s]+(?<daddr>[^\s]*)[\s]+port[\s]+(?<dport>.*)$" }
				id => "message-trans:07"
				add_field => {
				"event_description" => "TCP connection refused"
					"[event][id]" => "trans:07"
					"[rsa][message][id1]" => "trans:07"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:08
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): SFTP Client request failed for URL '<url>'. Reason: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+SFTP[\s]+Client[\s]+request[\s]+failed[\s]+for[\s]+URL[\s]+'(?<url>[^']*)'\.[\s]+Reason:[\s]+(?<result>.*)$" }
				id => "message-trans:08"
				add_field => {
				"event_description" => "SFTP Client request failed"
					"[event][id]" => "trans:08"
					"[rsa][message][id1]" => "trans:08"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:12
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): (<username>:<fld1>): (<action>)# <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+\((?<username>[^:]*):(?<fld1>[^\)]*)\):[\s]+\((?<action>[^\)]*)\)#[\s]+(?<event_description>.*)$" }
				id => "message-trans:12"
				add_field => {
					"[event][id]" => "trans:12"
					"[rsa][message][id1]" => "trans:12"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:13
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): (<username>:<fld1>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+\((?<username>[^:]*):(?<fld1>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-trans:13"
				add_field => {
					"[event][id]" => "trans:13"
					"[rsa][message][id1]" => "trans:13"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:09
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-trans:09"
				add_field => {
					"[event][id]" => "trans:09"
					"[rsa][message][id1]" => "trans:09"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:10
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>)[<hostip>]: error writing to connection: system error (<resultcode>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+error[\s]+writing[\s]+to[\s]+connection:[\s]+system[\s]+error[\s]+\((?<resultcode>[^\)]*)\)$" }
				id => "message-trans:10"
				add_field => {
				"event_description" => "error writing to connection"
					"[event][id]" => "trans:10"
					"[rsa][message][id1]" => "trans:10"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE trans:11
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } trans(<operation_id>)[<hostip>]: Error occured while writing to next processing stage.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Error[\s]+occured[\s]+while[\s]+writing[\s]+to[\s]+next[\s]+processing[\s]+stage\.$" }
				id => "message-trans:11"
				add_field => {
				"event_description" => "Error occured while writing to next processing stage."
					"[event][id]" => "trans:11"
					"[rsa][message][id1]" => "trans:11"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: '<url>' did match '<fld1>'
	else if [logstash][msgparser][id] == "msgParserId49" {
		grok {
			match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+'(?<url>[^']*)'[\s]+did[\s]+match[\s]+'(?<fld1>[^']*)'$" }
			id => "msgParserId49"
			add_field => {
				"event_description" => "Url match"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE User_Logout
		# line in RSA:  { <hostname> [<shost>][<event_type>][<severity>] [<daddr>]: | <hostname> [<event_type>][<severity>] [<daddr>]: } User '<username>' logged out from '<dhost>' 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*(?<hostname>[^\s]*)[\s]+\[(?<shost>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+\[(?<daddr>[^\]]*)\]:[\s]+|[\s]*(?<hostname>[^\s]*)[\s]+\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+\[(?<daddr>[^\]]*)\]:[\s]+)[\s]+User[\s]+'(?<username>[^']*)'[\s]+logged[\s]+out[\s]+from[\s]+'(?<dhost>[^']*)'[\s]+$" }
				id => "message-User_Logout"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "User Logout"
					"[event][id]" => "User_Logout"
					"[rsa][message][id1]" => "User_Logout"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE User_Login
		# line in RSA: <hostname> [<event_type>][<severity>] User '<username>' failed to log in. 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{event_type}][%{severity}] User '%{username}' failed to log in." }
				id => "message-User_Login"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"event_description" => "User Logout"
					"[event][id]" => "User_Login"
					"[rsa][message][id1]" => "User_Login"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "user" {
		# MESSAGE user
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<username>): [<daddr>]: User logged into '<dhost>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<username>[^\)]*)\):[\s]+\[(?<daddr>[^\]]*)\]:[\s]+User[\s]+logged[\s]+into[\s]+'(?<dhost>[^']*)'$" }
				id => "message-user"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Success"
				"event_description" => "User login"
					"[event][id]" => "user"
					"[rsa][message][id1]" => "user"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE user:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<username>): [<daddr>]: User logged out from '<dhost>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<username>[^\)]*)\):[\s]+\[(?<daddr>[^\]]*)\]:[\s]+User[\s]+logged[\s]+out[\s]+from[\s]+'(?<dhost>[^']*)'$" }
				id => "message-user:01"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_outcome" => "Success"
				"event_description" => "User log out"
					"[event][id]" => "user:01"
					"[rsa][message][id1]" => "user:01"
					"[event][categoryid]" => "1401070000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE user:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<username>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<username>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-user:02"
				add_field => {
					"[event][id]" => "user:02"
					"[rsa][message][id1]" => "user:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE user:03
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<username>): trans(<operation_id>)[<daddr>]: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<username>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<daddr>[^\]]*)\]:[\s]+(?<event_description>.*)$" }
				id => "message-user:03"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
					"[event][id]" => "user:03"
					"[rsa][message][id1]" => "user:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "valcred" {
		# MESSAGE valcred:04
		# line in RSA:  <hostname> { [<domain>][<fld3>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: certificate validation succeeded for '<fld1>' against '<fld2>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld3>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+certificate[\s]+validation[\s]+succeeded[\s]+for[\s]+'(?<fld1>[^']*)'[\s]+against[\s]+'(?<fld2>[^']*)'$" }
				id => "message-valcred:04"
				add_field => {
					"[event][id]" => "valcred:04"
					"[rsa][message][id1]" => "valcred:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE valcred:03
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: error writing to connection: system error (<resultcode>)
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+error[\s]+writing[\s]+to[\s]+connection:[\s]+system[\s]+error[\s]+\((?<resultcode>[^\)]*)\)$" }
				id => "message-valcred:03"
				add_field => {
					"[event][id]" => "valcred:03"
					"[rsa][message][id1]" => "valcred:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE valcred:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: certificate validation failed for '<fld1>': <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+certificate[\s]+validation[\s]+failed[\s]+for[\s]+'(?<fld1>[^']*)':[\s]+(?<result>.*)$" }
				id => "message-valcred:02"
				add_field => {
					"[event][id]" => "valcred:02"
					"[rsa][message][id1]" => "valcred:02"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE valcred:01
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: { SSLProxyProfile | SSL Proxy Profile } '<fld1>': connection error: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+([\s]*SSLProxyProfile[\s]+|[\s]*SSL[\s]+Proxy[\s]+Profile[\s]+)[\s]+'(?<fld1>[^']*)':[\s]+connection[\s]+error:[\s]+(?<result>.*)$" }
				id => "message-valcred:01"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_activity" => "Send"
				"ec_outcome" => "Error"
					"[event][id]" => "valcred:01"
					"[rsa][message][id1]" => "valcred:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE valcred
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-valcred"
				add_field => {
					"[event][id]" => "valcred"
					"[rsa][message][id1]" => "valcred"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "xmlfirewall" {
		# MESSAGE xmlfirewall:01
		# line in RSA:  <hostname> [<event_type>][<severity>] <service>(<info>): trans(<operation_id>): Service removed from port
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id}): Service removed from port" }
				id => "message-xmlfirewall:01"
				add_field => {
					"[event][id]" => "xmlfirewall:01"
					"[rsa][message][id1]" => "xmlfirewall:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE xmlfirewall:03
		# line in RSA:  <hostname> [<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[request]: Rejected by filter <fld1> of rule <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[request]: Rejected by filter %{fld1} of rule %{fld2}." }
				id => "message-xmlfirewall:03"
				add_field => {
					"[event][id]" => "xmlfirewall:03"
					"[rsa][message][id1]" => "xmlfirewall:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE xmlfirewall:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[request]: Data encryption succeeded
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[request\]:[\s]+Data[\s]+encryption[\s]+succeeded$" }
				id => "message-xmlfirewall:02"
				add_field => {
					"[event][id]" => "xmlfirewall:02"
					"[rsa][message][id1]" => "xmlfirewall:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE xmlfirewall
		# line in RSA:  <hostname> [<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld1>][<hostip>]: Missing or incomplete user credentials.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{fld1}][%{hostip}]: Missing or incomplete user credentials." }
				id => "message-xmlfirewall"
				add_field => {
					"[event][id]" => "xmlfirewall"
					"[rsa][message][id1]" => "xmlfirewall"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE xmlfirewall:04
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: certificate validation succeeded for '<username>' against '<fld3>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{fld2}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{fld7}][%{hostip}]: certificate validation succeeded for '%{username}' against '%{fld3}'" }
				id => "message-xmlfirewall:04"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_activity" => "Permit"
				"ec_outcome" => "Success"
				"event_description" => "certificate validation succeeded"
					"[event][id]" => "xmlfirewall:04"
					"[rsa][message][id1]" => "xmlfirewall:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xmlfirewall:05
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Latency: <fld1> [<url>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Latency:[\s]+(?<fld1>[^\s]*)[\s]+\[(?<url>[^\]]*)\]$" }
				id => "message-xmlfirewall:05"
				add_field => {
				"event_description" => "Latency statistics"
					"[event][id]" => "xmlfirewall:05"
					"[rsa][message][id1]" => "xmlfirewall:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xmlfirewall:06
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: saml-signature authentication succeeded with (<authmethod>, username='<fld3>' { saml2 | saml }:Issuer='<cert_issuer>' ds:DigestValue='<fld4>' ds:SignatureValue='<fld5>' { ds:X509IssuerName='<username>' ds:X509Certificate='<fld6> | ds:X509Certificate='<fld6> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<fld7>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+saml\-signature[\s]+authentication[\s]+succeeded[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+username='(?<fld3>[^']*)'[\s]+([\s]*saml2[\s]+|[\s]*saml[\s]+):Issuer='(?<cert_issuer>[^']*)'[\s]+ds:DigestValue='(?<fld4>[^']*)'[\s]+ds:SignatureValue='(?<fld5>[^']*)'[\s]+([\s]*ds:X509IssuerName='(?<username>[^']*)'[\s]+ds:X509Certificate='(?<fld6>[^\s]*)[\s]+|[\s]*ds:X509Certificate='(?<fld6>[^\s]*)[\s]+)$" }
				id => "message-xmlfirewall:06"
				add_field => {
				"event_description" => "authentication succeeded"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "xmlfirewall:06"
					"[rsa][message][id1]" => "xmlfirewall:06"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xmlfirewall:07
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: saml-signature authentication succeeded with (<authmethod>, username='<fld3>' { saml2 | saml }:Issuer='<cert_issuer>' DigestValue='<fld4>' SignatureValue='<fld5>' { X509IssuerName='<username>' X509Certificate='<fld6> | X509Certificate='<fld6> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<fld7>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+saml\-signature[\s]+authentication[\s]+succeeded[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+username='(?<fld3>[^']*)'[\s]+([\s]*saml2[\s]+|[\s]*saml[\s]+):Issuer='(?<cert_issuer>[^']*)'[\s]+DigestValue='(?<fld4>[^']*)'[\s]+SignatureValue='(?<fld5>[^']*)'[\s]+([\s]*X509IssuerName='(?<username>[^']*)'[\s]+X509Certificate='(?<fld6>[^\s]*)[\s]+|[\s]*X509Certificate='(?<fld6>[^\s]*)[\s]+)$" }
				id => "message-xmlfirewall:07"
				add_field => {
				"event_description" => "authentication succeeded"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "xmlfirewall:07"
					"[rsa][message][id1]" => "xmlfirewall:07"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xmlfirewall:08
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>){ [<fld7>][<hostip>] | [<hostip>] }: <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)([\s]*\[(?<fld7>[^\]]*)\]\[(?<hostip>[^\]]*)\][\s]+|[\s]*\[(?<hostip>[^\]]*)\][\s]+):[\s]+(?<event_description>.*)$" }
				id => "message-xmlfirewall:08"
				add_field => {
					"[event][id]" => "xmlfirewall:08"
					"[rsa][message][id1]" => "xmlfirewall:08"
					"[event][categoryid]" => "1603040000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId68
	# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): { trans(<operation_id>)[<hostip>] | trans(<operation_id>) }: Certificate { '<cert_subject>' | <cert_subject> } { is about to expire | is expired }
	else if [logstash][msgparser][id] == "msgParserId68" {
		grok {
			match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+([\s]*trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\][\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)[\s]+):[\s]+Certificate[\s]+([\s]*'(?<cert_subject>[^']*)'[\s]+|[\s]*(?<cert_subject>[^\s]*)[\s]+)[\s]+([\s]*is[\s]+about[\s]+to[\s]+expire[\s]+|[\s]*is[\s]+expired[\s]+)$" }
			id => "msgParserId68"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "web-application-firewall" {
		# MESSAGE web-application-firewall
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: HTTP response code <resultcode> for '<url>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+HTTP[\s]+response[\s]+code[\s]+(?<resultcode>[^\s]*)[\s]+for[\s]+'(?<url>[^']*)'$" }
				id => "message-web-application-firewall"
				add_field => {
				"event_description" => "Response code to HTTP request"
					"[event][id]" => "web-application-firewall"
					"[rsa][message][id1]" => "web-application-firewall"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE web-application-firewall:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: The one way exchange pattern will bypass the execution of the selected request rule
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+The[\s]+one[\s]+way[\s]+exchange[\s]+pattern[\s]+will[\s]+bypass[\s]+the[\s]+execution[\s]+of[\s]+the[\s]+selected[\s]+request[\s]+rule$" }
				id => "message-web-application-firewall:01"
				add_field => {
				"event_description" => "The one way exchange pattern will bypass the execution of the selected request rule"
					"[event][id]" => "web-application-firewall:01"
					"[rsa][message][id1]" => "web-application-firewall:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE web-application-firewall:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Latency: <fld1> [<url>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Latency:[\s]+(?<fld1>[^\s]*)[\s]+\[(?<url>[^\]]*)\]$" }
				id => "message-web-application-firewall:02"
				add_field => {
				"event_description" => "Latency statistics"
					"[event][id]" => "web-application-firewall:02"
					"[rsa][message][id1]" => "web-application-firewall:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE web-application-firewall:03
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Using Backside Server: <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Using[\s]+Backside[\s]+Server:[\s]+(?<url>.*)$" }
				id => "message-web-application-firewall:03"
				add_field => {
				"event_description" => "Using Backside Server"
					"[event][id]" => "web-application-firewall:03"
					"[rsa][message][id1]" => "web-application-firewall:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE web-application-firewall:04
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Application Firewall Processing Request/Response Profile <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Application[\s]+Firewall[\s]+Processing[\s]+Request/Response[\s]+Profile[\s]+(?<fld1>.*)$" }
				id => "message-web-application-firewall:04"
				add_field => {
				"event_description" => "Application Firewall Processing Request"
					"[event][id]" => "web-application-firewall:04"
					"[rsa][message][id1]" => "web-application-firewall:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE web-application-firewall:05
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[error][<hostip>]: No match from processing policy '<policyname>' for code '<resultcode>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[error\]\[(?<hostip>[^\]]*)\]:[\s]+No[\s]+match[\s]+from[\s]+processing[\s]+policy[\s]+'(?<policyname>[^']*)'[\s]+for[\s]+code[\s]+'(?<resultcode>[^']*)'$" }
				id => "message-web-application-firewall:05"
				add_field => {
				"event_description" => "Policy Mismatch"
					"[event][id]" => "web-application-firewall:05"
					"[rsa][message][id1]" => "web-application-firewall:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE web-application-firewall:06
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){ [error][<hostip>]: | [<hostip>]: } { Request validation failed: <event_description> | <event_description> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)([\s]*\[error\]\[(?<hostip>[^\]]*)\]:[\s]+|[\s]*\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+([\s]*Request[\s]+validation[\s]+failed:[\s]+(?<event_description>[^\s]*)[\s]+|[\s]*(?<event_description>[^\s]*)[\s]+)$" }
				id => "message-web-application-firewall:06"
				add_field => {
				"event_description" => "AAA Authorization failure"
					"[event][id]" => "web-application-firewall:06"
					"[rsa][message][id1]" => "web-application-firewall:06"
					"[event][categoryid]" => "1303000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "wsgw" {
		# MESSAGE wsgw
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: HTTP response code <resultcode> for '<url>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+HTTP[\s]+response[\s]+code[\s]+(?<resultcode>[^\s]*)[\s]+for[\s]+'(?<url>[^']*)'$" }
				id => "message-wsgw"
				add_field => {
				"event_description" => "HTTP response code"
					"[event][id]" => "wsgw"
					"[rsa][message][id1]" => "wsgw"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){ [request] | [response] } [<hostip>]: rule (<rulename>): selected via match '<fld1>' from processing policy '<policyname>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)([\s]*\[request\][\s]+|[\s]*\[response\][\s]+)[\s]+\[(?<hostip>[^\]]*)\]:[\s]+rule[\s]+\((?<rulename>[^\)]*)\):[\s]+selected[\s]+via[\s]+match[\s]+'(?<fld1>[^']*)'[\s]+from[\s]+processing[\s]+policy[\s]+'(?<policyname>[^']*)'$" }
				id => "message-wsgw:01"
				add_field => {
				"event_description" => "Rule Selected via match"
					"[event][id]" => "wsgw:01"
					"[rsa][message][id1]" => "wsgw:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:02
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>){ [request] | [response] }[<hostip>]: rule (<rulename>): #<listnum> { results: | validate: | xform: | header-rewrite: } <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)([\s]*\[request\][\s]+|[\s]*\[response\][\s]+)\[(?<hostip>[^\]]*)\]:[\s]+rule[\s]+\((?<rulename>[^\)]*)\):[\s]+#(?<listnum>[^\s]*)[\s]+([\s]*results:[\s]+|[\s]*validate:[\s]+|[\s]*xform:[\s]+|[\s]*header\-rewrite:[\s]+)[\s]+(?<result>.*)$" }
				id => "message-wsgw:02"
				add_field => {
				"event_description" => "Rule Results completed ok"
					"[event][id]" => "wsgw:02"
					"[rsa][message][id1]" => "wsgw:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:03
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[error][<hostip>]: No match from processing policy '<policyname>' for code '<resultcode>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[error\]\[(?<hostip>[^\]]*)\]:[\s]+No[\s]+match[\s]+from[\s]+processing[\s]+policy[\s]+'(?<policyname>[^']*)'[\s]+for[\s]+code[\s]+'(?<resultcode>[^']*)'$" }
				id => "message-wsgw:03"
				add_field => {
				"event_description" => "No match from processing policy"
					"[event][id]" => "wsgw:03"
					"[rsa][message][id1]" => "wsgw:03"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:04
		# line in RSA:  <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Latency: <fld1> [<url>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Latency:[\s]+(?<fld1>[^\s]*)[\s]+\[(?<url>[^\]]*)\]$" }
				id => "message-wsgw:04"
				add_field => {
				"event_description" => "Latency statistics"
					"[event][id]" => "wsgw:04"
					"[rsa][message][id1]" => "wsgw:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:05
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<hostip>]: Using Backside Server: <url>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+Using[\s]+Backside[\s]+Server:[\s]+(?<url>.*)$" }
				id => "message-wsgw:05"
				add_field => {
				"event_description" => "Using Backside Server"
					"[event][id]" => "wsgw:05"
					"[rsa][message][id1]" => "wsgw:05"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:06
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): Adding new wsdl '<filename>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+Adding[\s]+new[\s]+wsdl[\s]+'(?<filename>[^']*)'$" }
				id => "message-wsgw:06"
				add_field => {
				"event_description" => "Adding new wsdl"
					"[event][id]" => "wsgw:06"
					"[rsa][message][id1]" => "wsgw:06"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:08
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): Multistep Probe enabled
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+Multistep[\s]+Probe[\s]+enabled$" }
				id => "message-wsgw:08"
				add_field => {
				"event_description" => "Multistep Probe enabled"
					"[event][id]" => "wsgw:08"
					"[rsa][message][id1]" => "wsgw:08"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsgw:09
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): {trans(<operation_id>): | trans(<operation_id>)[<fld3>][<hostip>]: | trans(<operation_id>)[<hostip>]: } <fld9> authentication succeeded with (<authmethod>, username='<username>' password='<fld4>'{ configured-realm='<action>' | nonce='<fld10>' } )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+(trans\((?<operation_id>[^\)]*)\):[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<fld3>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+(?<fld9>[^\s]*)[\s]+authentication[\s]+succeeded[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+username='(?<username>[^']*)'[\s]+password='(?<fld4>[^']*)'([\s]*configured\-realm='(?<action>[^']*)'[\s]+|[\s]*nonce='(?<fld10>[^']*)'[\s]+)[\s]+\)$" }
				id => "message-wsgw:09"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "authentication succeeded"
					"[event][id]" => "wsgw:09"
					"[rsa][message][id1]" => "wsgw:09"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:10
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: saml-signature authentication succeeded with (<authmethod>, username='<fld3>' { saml2 | saml }:Issuer='<cert_issuer>' { ds:DigestValue | DigestValue }='<fld4>' { ds:SignatureValue | SignatureValue }='<fld5>' { ds:X509Certificate | X509Certificate }='<fld6>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<fld7>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+saml\-signature[\s]+authentication[\s]+succeeded[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+username='(?<fld3>[^']*)'[\s]+([\s]*saml2[\s]+|[\s]*saml[\s]+):Issuer='(?<cert_issuer>[^']*)'[\s]+([\s]*ds:DigestValue[\s]+|[\s]*DigestValue[\s]+)='(?<fld4>[^']*)'[\s]+([\s]*ds:SignatureValue[\s]+|[\s]*SignatureValue[\s]+)='(?<fld5>[^']*)'[\s]+([\s]*ds:X509Certificate[\s]+|[\s]*X509Certificate[\s]+)='(?<fld6>.*)$" }
				id => "message-wsgw:10"
				add_field => {
				"event_description" => "authentication succeeded"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "wsgw:10"
					"[rsa][message][id1]" => "wsgw:10"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:11
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld1>][<hostip>]: certificate validation succeeded for '<username>' against '<fld3>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{fld2}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{fld1}][%{hostip}]: certificate validation succeeded for '%{username}' against '%{fld3}'" }
				id => "message-wsgw:11"
				add_field => {
				"ec_subject" => "Certificate"
				"ec_activity" => "Permit"
				"ec_outcome" => "Success"
				"event_description" => "certificate validation succeeded"
					"[event][id]" => "wsgw:11"
					"[rsa][message][id1]" => "wsgw:11"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:12
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: saml-signature authentication succeeded with (<authmethod>, username='<fld3>' { saml2 | saml }:Issuer='<cert_issuer>' ds:XPath='<fld8>' { ds:DigestValue | DigestValue }='<fld4>' { ds:SignatureValue | SignatureValue }='<fld5>' { ds:X509Certificate | X509Certificate }='<fld6>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<fld7>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+saml\-signature[\s]+authentication[\s]+succeeded[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+username='(?<fld3>[^']*)'[\s]+([\s]*saml2[\s]+|[\s]*saml[\s]+):Issuer='(?<cert_issuer>[^']*)'[\s]+ds:XPath='(?<fld8>[^']*)'[\s]+([\s]*ds:DigestValue[\s]+|[\s]*DigestValue[\s]+)='(?<fld4>[^']*)'[\s]+([\s]*ds:SignatureValue[\s]+|[\s]*SignatureValue[\s]+)='(?<fld5>[^']*)'[\s]+([\s]*ds:X509Certificate[\s]+|[\s]*X509Certificate[\s]+)='(?<fld6>.*)$" }
				id => "message-wsgw:12"
				add_field => {
				"event_description" => "authentication succeeded"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "wsgw:12"
					"[rsa][message][id1]" => "wsgw:12"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:13
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): {trans(<operation_id>): | trans(<operation_id>)[<fld3>][<hostip>]: | trans(<operation_id>)[<hostip>]: } custom authentication failed with (<authmethod>, serial='<cert_error>' )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+(trans\((?<operation_id>[^\)]*)\):[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<fld3>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+custom[\s]+authentication[\s]+failed[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+serial='(?<cert_error>[^']*)'[\s]+\)$" }
				id => "message-wsgw:13"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "authentication failed"
					"[event][id]" => "wsgw:13"
					"[rsa][message][id1]" => "wsgw:13"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:14
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: client-ssl authentication succeeded with (<authmethod>, dn='<fld3>' issuer='<cert_issuer>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{fld2}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{fld7}][%{hostip}]: client-ssl authentication succeeded with (%{authmethod}, dn='%{fld3}' issuer='%{cert_issuer}'" }
				id => "message-wsgw:14"
				add_field => {
				"event_description" => "authentication succeeded"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "wsgw:14"
					"[rsa][message][id1]" => "wsgw:14"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:15
		# line in RSA: <hostname> [<domain>][<fld2>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<fld7>][<hostip>]: validate-signer authentication succeeded with (<authmethod>, dn='<fld3>' )
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{fld2}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{fld7}][%{hostip}]: validate-signer authentication succeeded with (%{authmethod}, dn='%{fld3}' )" }
				id => "message-wsgw:15"
				add_field => {
				"event_description" => "authentication succeeded"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
					"[event][id]" => "wsgw:15"
					"[rsa][message][id1]" => "wsgw:15"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:16
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): {trans(<operation_id>): | trans(<operation_id>)[<fld3>][<hostip>]: | trans(<operation_id>)[<hostip>]: } custom authentication succeeded with (<authmethod>, dn='<cert_hostname>' issuer='<cert_issuer>' serial='<fld8> )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+(trans\((?<operation_id>[^\)]*)\):[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<fld3>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+custom[\s]+authentication[\s]+succeeded[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+dn='(?<cert_hostname>[^']*)'[\s]+issuer='(?<cert_issuer>[^']*)'[\s]+serial='(?<fld8>[^\s]*)[\s]+\)$" }
				id => "message-wsgw:16"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "authentication succeeded"
					"[event][id]" => "wsgw:16"
					"[rsa][message][id1]" => "wsgw:16"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:17
		# line in RSA: <hostname> { [<domain>][<fld2>][<event_type>][<severity>] | [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): {trans(<operation_id>): | trans(<operation_id>)[<fld3>][<hostip>]: | trans(<operation_id>)[<hostip>]: } custom authentication failed with (<authmethod>, username='<username>' password='<fld8>'configured-realm='<action>' )
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<fld2>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+(trans\((?<operation_id>[^\)]*)\):[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<fld3>[^\]]*)\]\[(?<hostip>[^\]]*)\]:[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+custom[\s]+authentication[\s]+failed[\s]+with[\s]+\((?<authmethod>[^,]*),[\s]+username='(?<username>[^']*)'[\s]+password='(?<fld8>[^']*)'configured\-realm='(?<action>[^']*)'[\s]+\)$" }
				id => "message-wsgw:17"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "authentication failed"
					"[event][id]" => "wsgw:17"
					"[rsa][message][id1]" => "wsgw:17"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE wsgw:07
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): {trans(<operation_id>): | trans(<operation_id>)[<hostip>]: } <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+(trans\((?<operation_id>[^\)]*)\):[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+)[\s]+(?<event_description>.*)$" }
				id => "message-wsgw:07"
				add_field => {
					"[event][id]" => "wsgw:07"
					"[rsa][message][id1]" => "wsgw:07"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "wsm-stylepolicy" {
		# MESSAGE wsm-stylepolicy
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>) {[request] | [response] } [<hostip>]: rule (<rulename>): selected via match '<fld1>' from processing policy '<policyname>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)[\s]+(\[request\][\s]+|[\s]*\[response\][\s]+)[\s]+\[(?<hostip>[^\]]*)\]:[\s]+rule[\s]+\((?<rulename>[^\)]*)\):[\s]+selected[\s]+via[\s]+match[\s]+'(?<fld1>[^']*)'[\s]+from[\s]+processing[\s]+policy[\s]+'(?<policyname>[^']*)'$" }
				id => "message-wsm-stylepolicy"
				add_field => {
				"event_description" => "Rule Selected via match"
					"[event][id]" => "wsm-stylepolicy"
					"[rsa][message][id1]" => "wsm-stylepolicy"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE wsm-stylepolicy:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-wsm-stylepolicy:01"
				add_field => {
					"[event][id]" => "wsm-stylepolicy:01"
					"[rsa][message][id1]" => "wsm-stylepolicy:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "xmlmgr" {
		# MESSAGE xmlmgr
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): { trans(<operation_id>)[<hostip>]: | trans(<operation_id>): } <fld1> Compilation Request: <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+([\s]*trans\((?<operation_id>[^\)]*)\)\[(?<hostip>[^\]]*)\]:[\s]+|[\s]*trans\((?<operation_id>[^\)]*)\):[\s]+)[\s]+(?<fld1>[^\s]*)[\s]+Compilation[\s]+Request:[\s]+(?<result>.*)$" }
				id => "message-xmlmgr"
				add_field => {
				"event_description" => "Compilation Request"
					"[event][id]" => "xmlmgr"
					"[rsa][message][id1]" => "xmlmgr"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE xmlmgr:02
		# line in RSA:  <hostname> [<fld12>][<resultcode>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>): { <event_description>: <daddr> : tcp port <dport> | <event_description> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+\[(?<fld12>[^\]]*)\]\[(?<resultcode>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+([\s]*(?<event_description>[^:]*):[\s]+(?<daddr>[^\s]*)[\s]+:[\s]+tcp[\s]+port[\s]+(?<dport>[^\s]*)[\s]+|[\s]*(?<event_description>[^\s]*)[\s]+)$" }
				id => "message-xmlmgr:02"
				add_field => {
					"[event][id]" => "xmlmgr:02"
					"[rsa][message][id1]" => "xmlmgr:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xmlmgr:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <event_description>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<event_description>.*)$" }
				id => "message-xmlmgr:01"
				add_field => {
					"[event][id]" => "xmlmgr:01"
					"[rsa][message][id1]" => "xmlmgr:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE xmlmgr:03
		# line in RSA:  <hostname> [<fld12>][<resultcode>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<result>]: illegal character <fld13> at offset <fld14> of <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{fld12}][%{resultcode}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{result}]: illegal character %{fld13} at offset %{fld14} of %{url}" }
				id => "message-xmlmgr:03"
				add_field => {
					"[event][id]" => "xmlmgr:03"
					"[rsa][message][id1]" => "xmlmgr:03"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE xmlmgr:04
		# line in RSA:  <hostname> [<fld12>][<resultcode>][<event_type>][<severity>] <service>(<info>): trans(<operation_id>)[<result>]: <action>: Error parsing response from <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{fld12}][%{resultcode}][%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id})[%{result}]: %{action}: Error parsing response from %{url}" }
				id => "message-xmlmgr:04"
				add_field => {
					"[event][id]" => "xmlmgr:04"
					"[rsa][message][id1]" => "xmlmgr:04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{month} %{day} %{time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId98
	# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } (<service>:<hostip>): <action>
	else if [logstash][msgparser][id] == "msgParserId98" {
		grok {
			match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+\((?<service>[^:]*):(?<hostip>[^\)]*)\):[\s]+(?<action>.*)$" }
			id => "msgParserId98"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId99
	# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } Encountered an unexpected exit directive while processing the startup configuration script.
	else if [logstash][msgparser][id] == "msgParserId99" {
		grok {
			match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+Encountered[\s]+an[\s]+unexpected[\s]+exit[\s]+directive[\s]+while[\s]+processing[\s]+the[\s]+startup[\s]+configuration[\s]+script\.$" }
			id => "msgParserId99"
			add_field => {
				"event_description" => "Encountered an unexpected exit directive while processing the startup configuration script."
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "loadbalancer-group" {
		# MESSAGE loadbalancer-group
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>): <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\):[\s]+(?<result>.*)$" }
				id => "message-loadbalancer-group"
				add_field => {
					"[event][id]" => "loadbalancer-group"
					"[rsa][message][id1]" => "loadbalancer-group"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE loadbalancer-group:01
		# line in RSA:  <hostname> { [<domain>][<event_type>][<severity>] | [<event_type>][<severity>] } <service>(<info>): trans(<operation_id>)[<fld1>]: External URL: '<url>' unreachable.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<hostname>[^\s]*)[\s]+([\s]*\[(?<domain>[^\]]*)\]\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+|[\s]*\[(?<event_type>[^\]]*)\]\[(?<severity>[^\]]*)\][\s]+)[\s]+(?<service>[^\(]*)\((?<info>[^\)]*)\):[\s]+trans\((?<operation_id>[^\)]*)\)\[(?<fld1>[^\]]*)\]:[\s]+External[\s]+URL:[\s]+'(?<url>[^']*)'[\s]+unreachable\.$" }
				id => "message-loadbalancer-group:01"
				add_field => {
					"[event][id]" => "loadbalancer-group:01"
					"[rsa][message][id1]" => "loadbalancer-group:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId102
	# line in RSA:  <hostname> [<event_type>][<severity>] <service>(<info>): trans(<operation_id>): Ajax is not supported
	else if [logstash][msgparser][id] == "msgParserId102" {
		dissect {
			mapping => { "message" => "%{hostname} [%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id}): Ajax is not supported" }
			id => "msgParserId102"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId103
	# line in RSA:  <hostname> [<event_type>][<severity>] <service>(<info>): trans(<operation_id>): Configured.
	else if [logstash][msgparser][id] == "msgParserId103" {
		dissect {
			mapping => { "message" => "%{hostname} [%{event_type}][%{severity}] %{service}(%{info}): trans(%{operation_id}): Configured." }
			id => "msgParserId103"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "PartnerGW_TST-network" {
		# MESSAGE PartnerGW_TST-network
		# line in RSA:  <hostname> [<domain>][<event_type>][<severity>] trans(<operation_id>)[<hostip>]: HTTP invalid response returned <resultcode> Internal Server Error, from URL '<url>' (Method: <web_method> , URI: <fld2>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{event_type}][%{severity}] trans(%{operation_id})[%{hostip}]: HTTP invalid response returned %{resultcode} Internal Server Error, from URL '%{url}' (Method: %{web_method} , URI: %{fld2})" }
				id => "message-PartnerGW_TST-network"
				add_field => {
					"[event][id]" => "PartnerGW_TST-network"
					"[rsa][message][id1]" => "PartnerGW_TST-network"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE PartnerGW_TST-network:01
		# line in RSA:  <hostname> [<domain>][<event_type>][<severity>] trans(<operation_id>)[<hostip>]: Error occurred when connecting to URL '<url>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{hostname} [%{domain}][%{event_type}][%{severity}] trans(%{operation_id})[%{hostip}]: Error occurred when connecting to URL '%{url}'" }
				id => "message-PartnerGW_TST-network:01"
				add_field => {
					"[event][id]" => "PartnerGW_TST-network:01"
					"[rsa][message][id1]" => "PartnerGW_TST-network:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId108
	# line in RSA:  <hostname> [<domain>][<fld1>][<event_type>][<severity>] <action>(<info>): trans(<operation_id>): <event_description>
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "%{hostname} [%{domain}][%{fld1}][%{event_type}][%{severity}] %{action}(%{info}): trans(%{operation_id}): %{event_description}" }
			id => "msgParserId108"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-ibmwebspheredpmsg.json"
#			template_name => "ibmwebspheredp_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

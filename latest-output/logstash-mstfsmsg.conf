# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "mstfs"
			"[observer][name]" => "Microsoft Team Foundation Server"
			"[observer][type]" => "Content Management System"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %MICROSOFTTFS: <id>^^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%MICROSOFTTFS: %{id}^^%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "microsoft_tfs"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-mstfsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: CommandPartitionId=<id1>^^Application=<application>^^Command=<action>^^Status=<fld1>^^StartTime=<fld99>^^ExecutionTime=<duration>^^IdentityName=<username>^^IPAddress=<saddr>^^UniqueIdentifier=<fld2>^^UserAgent=<user_agent>^^CommandIdentifier=<fld3>^^AuthenticationType=<authmethod>^^AgentId=<agent.id>^^ResponseCode=<resultcode>^^TimeToFirstPage=<fld4>^^DelayTime=<fld5>^^ParameterPartitionId=<fld6>^^ParameterCommandId=<fld7>^^ParameterName=<obj_name>^^ParameterIndex=<fld8>^^ParameterValue=<obj_value>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "CommandPartitionId=%{id1}^^Application=%{application}^^Command=%{action}^^Status=%{fld1}^^StartTime=%{fld99}^^ExecutionTime=%{duration}^^IdentityName=%{username}^^IPAddress=%{saddr}^^UniqueIdentifier=%{fld2}^^UserAgent=%{user_agent}^^CommandIdentifier=%{fld3}^^AuthenticationType=%{authmethod}^^AgentId=%{agent.id}^^ResponseCode=%{resultcode}^^TimeToFirstPage=%{fld4}^^DelayTime=%{fld5}^^ParameterPartitionId=%{fld6}^^ParameterCommandId=%{fld7}^^ParameterName=%{obj_name}^^ParameterIndex=%{fld8}^^ParameterValue=%{obj_value}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Rename fields
filter {
	mutate {
		rename => {
			"agent.id" => "agent_id"
		}
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-mstfsmsg.json"
#			template_name => "mstfs_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

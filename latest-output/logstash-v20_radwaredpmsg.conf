# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "radwaredp"
			"[observer][name]" => "Radware DefensePro"
			"[observer][type]" => "IPS"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %DefensePro <hfld1> <hfld2> <hfld3> <messageid> \"<hfld4>\" <!payload:hfld3>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%DefensePro[\s]+(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<message>(?<hfld3>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+\\\"(?<hfld4>[^\\]*)\\\"[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %DefensePro <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%DefensePro[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: DefensePro: <hdate> <htime> <hfld1> <hfld2> <messageid> "<hfld3>" <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^DefensePro:[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+\"(?<hfld3>[^\"]*)\"[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: DefensePro: <hdate> <htime> <hfld1> <messageid> <!payload:hdate>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^DefensePro:[\s]+(?<message>(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_radwaredpmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Intrusions" {
		# MESSAGE Intrusions:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-Intrusions:01"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Intrusions:01"
					"[rsa][message][id1]" => "Intrusions:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Intrusions:02
		# line in RSA:  <id> <category> \"<event_type>\" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> \"<policyname>\" <event_state> <packets> <dclass_counter1> <fld1> <risk> <action> <vlan> <fld15> <fld16> <direction>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\\\"(?<event_type>[^\\]*)\\\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\\\"(?<policyname>[^\\]*)\\\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<direction>.*)$" }
				id => "message-Intrusions:02"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Intrusions:02"
					"[rsa][message][id1]" => "Intrusions:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId0
	# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
	else if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
			id => "msgParserId0"
			add_field => {
				"ec_theme" => "TEV"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Behavioral-DoS" {
		# MESSAGE Behavioral-DoS:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-Behavioral-DoS:01"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Behavioral-DoS:01"
					"[rsa][message][id1]" => "Behavioral-DoS:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Behavioral-DoS:02
		# line in RSA:  <id> <category> \"<event_type>\" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> \"<policyname>\" <event_state> <packets> <dclass_counter1> <fld1> <risk> <action> <vlan> <fld15> <fld16> <direction>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\\\"(?<event_type>[^\\]*)\\\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\\\"(?<policyname>[^\\]*)\\\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<direction>.*)$" }
				id => "message-Behavioral-DoS:02"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Behavioral-DoS:02"
					"[rsa][message][id1]" => "Behavioral-DoS:02"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Anti-Scanning" {
		# MESSAGE Anti-Scanning:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-Anti-Scanning:01"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
					"[event][id]" => "Anti-Scanning:01"
					"[rsa][message][id1]" => "Anti-Scanning:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Anti-Scanning:02
		# line in RSA:  <id> <category> \"<event_type>\" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> \"<policyname>\" <event_state> <packets> <dclass_counter1> <fld1> <risk> <action> <vlan> <fld15> <fld16> <direction>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\\\"(?<event_type>[^\\]*)\\\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\\\"(?<policyname>[^\\]*)\\\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<direction>.*)$" }
				id => "message-Anti-Scanning:02"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
					"[event][id]" => "Anti-Scanning:02"
					"[rsa][message][id1]" => "Anti-Scanning:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "DoS" {
		# MESSAGE DoS:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-DoS:01"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "DoS:01"
					"[rsa][message][id1]" => "DoS:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE DoS:02
		# line in RSA:  <id> <category> \"<event_type>\" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> \"<policyname>\" <event_state> <packets> <dclass_counter1> <fld1> <risk> <action> <vlan> <fld15> <fld16> <direction>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\\\"(?<event_type>[^\\]*)\\\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\\\"(?<policyname>[^\\]*)\\\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<direction>.*)$" }
				id => "message-DoS:02"
				add_field => {
				"ec_subject" => "NetworkComm"
				"ec_activity" => "Scan"
				"ec_theme" => "TEV"
					"[event][id]" => "DoS:02"
					"[rsa][message][id1]" => "DoS:02"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Cracking-Protection" {
		# MESSAGE Cracking-Protection:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-Cracking-Protection:01"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Cracking-Protection:01"
					"[rsa][message][id1]" => "Cracking-Protection:01"
					"[event][categoryid]" => "1001000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Cracking-Protection:02
		# line in RSA:  <id> <category> \"<event_type>\" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> \"<policyname>\" <event_state> <packets> <dclass_counter1> <fld1> <risk> <action> <vlan> <fld15> <fld16> <direction>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\\\"(?<event_type>[^\\]*)\\\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\\\"(?<policyname>[^\\]*)\\\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<direction>.*)$" }
				id => "message-Cracking-Protection:02"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Cracking-Protection:02"
					"[rsa][message][id1]" => "Cracking-Protection:02"
					"[event][categoryid]" => "1001000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Anomalies" {
		# MESSAGE Anomalies:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-Anomalies:01"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Anomalies:01"
					"[rsa][message][id1]" => "Anomalies:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Anomalies:02
		# line in RSA:  <id> <category> \"<event_type>\" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> \"<policyname>\" <event_state> <packets> <dclass_counter1> <fld1> <risk> <action> <vlan> <fld15> <fld16> <direction>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\\\"(?<event_type>[^\\]*)\\\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\\\"(?<policyname>[^\\]*)\\\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<direction>.*)$" }
				id => "message-Anomalies:02"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "Anomalies:02"
					"[rsa][message][id1]" => "Anomalies:02"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "HttpFlood" {
		# MESSAGE HttpFlood:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-HttpFlood:01"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "HttpFlood:01"
					"[rsa][message][id1]" => "HttpFlood:01"
					"[event][categoryid]" => "1002000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE HttpFlood:02
		# line in RSA:  <id> <category> \"<event_type>\" <protocol> {<saddr>:<sport>|<saddr> <sport>} {<daddr>:<dport>|<daddr> <dport>} <interface> <context> \"<policyname>\" <event_state> <packets> <dclass_counter1> <fld1> <risk> <action> <vlan> <fld15> <fld16> <direction>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\\\"(?<event_type>[^\\]*)\\\"[\s]+(?<protocol>[^\s]*)[\s]+((?<saddr>[^:]*):(?<sport>[^\s]*)|(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*))[\s]+((?<daddr>[^:]*):(?<dport>[^\s]*)|(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*))[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\\\"(?<policyname>[^\\]*)\\\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+(?<action>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<direction>.*)$" }
				id => "message-HttpFlood:02"
				add_field => {
				"ec_theme" => "TEV"
					"[event][id]" => "HttpFlood:02"
					"[rsa][message][id1]" => "HttpFlood:02"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: <fld1> <fld2> <severity> COMMAND: "<action>" by user <username> via <network_service>, source IP <saddr>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} COMMAND: \"%{action}\" by user %{username} via %{network_service}, source IP %{saddr}" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Execute"
				"ec_theme" => "ALM"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Configuration" {
		# MESSAGE Configuration:01
		# line in RSA: <fld1> <fld2> <severity> <event_description> set <change_new>, Old Values: <change_old>, ACTION: <action> by user <username> via <network_service> source IP <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} %{event_description} set %{change_new}, Old Values: %{change_old}, ACTION: %{action} by user %{username} via %{network_service} source IP %{saddr}" }
				id => "message-Configuration:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
					"[event][id]" => "Configuration:01"
					"[rsa][message][id1]" => "Configuration:01"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Configuration:02
		# line in RSA: <fld1> <fld2> <severity> <event_description>, ACTION: <action> by user <username> via <network_service> source IP <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} %{event_description}, ACTION: %{action} by user %{username} via %{network_service} source IP %{saddr}" }
				id => "message-Configuration:02"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Configuration"
					"[event][id]" => "Configuration:02"
					"[rsa][message][id1]" => "Configuration:02"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Configuration:03
		# line in RSA: <fld1> <fld2> <severity> Configuration File downloaded from device by user <username> via <network_service>, source IP <saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} Configuration File downloaded from device by user %{username} via %{network_service}, source IP %{saddr}" }
				id => "message-Configuration:03"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Configuration"
				"event_description" => "Configuration File downloaded"
					"[event][id]" => "Configuration:03"
					"[rsa][message][id1]" => "Configuration:03"
					"[event][categoryid]" => "1401000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Configuration:04
		# line in RSA: <fld1> <fld2> <severity> Configuration Upload has been completed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} Configuration Upload has been completed" }
				id => "message-Configuration:04"
				add_field => {
				"ec_theme" => "Configuration"
				"event_description" => "Configuration Upload has been completed"
					"[event][id]" => "Configuration:04"
					"[rsa][message][id1]" => "Configuration:04"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Configuration:05
		# line in RSA: <fld1> <fld2> <severity> Configuration Download has been completed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} Configuration Download has been completed" }
				id => "message-Configuration:05"
				add_field => {
				"ec_theme" => "Configuration"
				"event_description" => "Configuration Download has been completed"
					"[event][id]" => "Configuration:05"
					"[rsa][message][id1]" => "Configuration:05"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Configuration:06
		# line in RSA: <fld1> <fld2> <severity> Configuration file has been modified. Device may fail to load configuration file!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} Configuration file has been modified. Device may fail to load configuration file!" }
				id => "message-Configuration:06"
				add_field => {
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"event_description" => "Configuration file has been modified. Device may fail to load configuration file!"
					"[event][id]" => "Configuration:06"
					"[rsa][message][id1]" => "Configuration:06"
					"[event][categoryid]" => "1612000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Login" {
		# MESSAGE Login:04
		# line in RSA: Login failed {for user|user} <username> via <network_service> (IP: <saddr>){: <result>|<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Login[\s]+failed[\s]+(for[\s]+user|user)[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<network_service>[^\s]*)[\s]+\(IP:[\s]+(?<saddr>[^\)]*)\)(:[\s]+(?<result>.*)|(?<result>.*))$" }
				id => "message-Login:04"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login Failed"
					"[event][id]" => "Login:04"
					"[rsa][message][id1]" => "Login:04"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Login:05
		# line in RSA: Login locked user <username> (IP: <saddr>): <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login locked user %{username} (IP: %{saddr}): %{result}" }
				id => "message-Login:05"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"event_description" => "Login Locked"
					"[event][id]" => "Login:05"
					"[rsa][message][id1]" => "Login:05"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Login:01
		# line in RSA: <fld1> <fld2> <severity> Login failed {for user|user} <username> via <network_service> (IP: <saddr>){: <result>|<result>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+Login[\s]+failed[\s]+(for[\s]+user|user)[\s]+(?<username>[^\s]*)[\s]+via[\s]+(?<network_service>[^\s]*)[\s]+\(IP:[\s]+(?<saddr>[^\)]*)\)(:[\s]+(?<result>.*)|(?<result>.*))$" }
				id => "message-Login:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login Failed"
					"[event][id]" => "Login:01"
					"[rsa][message][id1]" => "Login:01"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Login:02
		# line in RSA: <fld1> <fld2> <severity> Login failed via <network_service> (IP: <saddr>): <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} Login failed via %{network_service} (IP: %{saddr}): %{result}" }
				id => "message-Login:02"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"event_description" => "Login Failed"
					"[event][id]" => "Login:02"
					"[rsa][message][id1]" => "Login:02"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Login:03
		# line in RSA: <fld1> <fld2> <severity> Login locked user <username> (IP: <saddr>): <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} Login locked user %{username} (IP: %{saddr}): %{result}" }
				id => "message-Login:03"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"event_description" => "Login Failed"
					"[event][id]" => "Login:03"
					"[rsa][message][id1]" => "Login:03"
					"[event][categoryid]" => "1401030000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA: <fld1> <fld2> <severity> Connection to NTP server timed out
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} Connection to NTP server timed out" }
			id => "msgParserId16"
			add_field => {
				"ec_theme" => "ALM"
				"event_description" => "Connection to NTP server timed out"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <fld1> <fld2> <severity> Device was rebooted by user <username> via <network_service>, source IP <saddr>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} Device was rebooted by user %{username} via %{network_service}, source IP %{saddr}" }
			id => "msgParserId17"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"event_description" => "Device was rebooted"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: <fld1> <fld2> <severity> Power supply fully operational
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} Power supply fully operational" }
			id => "msgParserId18"
			add_field => {
				"ec_theme" => "ALM"
				"event_description" => "Power supply fully operational"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <fld1> <fld2> <severity> Cold Start
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} Cold Start" }
			id => "msgParserId19"
			add_field => {
				"ec_activity" => "Start"
				"ec_theme" => "ALM"
				"event_description" => "Cold Start"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: <fld1> <fld2> <severity> Port <interface> {Down|Up }
	else if [logstash][msgparser][id] == "msgParserId20" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+Port[\s]+(?<interface>[^\s]*)[\s]+(Down|Up[\s]+)$" }
			id => "msgParserId20"
			add_field => {
				"ec_theme" => "ALM"
				"event_description" => "Port Status Change"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: <fld1> <fld2> <severity> DefensePro was powered off
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} DefensePro was powered off" }
			id => "msgParserId21"
			add_field => {
				"ec_theme" => "ALM"
				"event_description" => "DefensePro Powered off"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Access" {
		# MESSAGE Access:01
		# line in RSA: <fld1> <fld2> <severity> <id> <category> "<event_type>" <protocol> <saddr> <sport> <daddr> <dport> <interface> <context> "<policyname>" <event_state> <packets> <dclass_counter1> <vlan> <fld15> <fld16> <risk> {<action> <sigid_string>|<action>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<severity>[^\s]*)[\s]+(?<id>[^\s]*)[\s]+(?<category>[^\s]*)[\s]+\"(?<event_type>[^\"]*)\"[\s]+(?<protocol>[^\s]*)[\s]+(?<saddr>[^\s]*)[\s]+(?<sport>[^\s]*)[\s]+(?<daddr>[^\s]*)[\s]+(?<dport>[^\s]*)[\s]+(?<interface>[^\s]*)[\s]+(?<context>[^\s]*)[\s]+\"(?<policyname>[^\"]*)\"[\s]+(?<event_state>[^\s]*)[\s]+(?<packets>[^\s]*)[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<vlan>[^\s]*)[\s]+(?<fld15>[^\s]*)[\s]+(?<fld16>[^\s]*)[\s]+(?<risk>[^\s]*)[\s]+((?<action>[^\s]*)[\s]+(?<sigid_string>.*)|(?<action>.*))$" }
				id => "message-Access:01"
				add_field => {
				"ec_theme" => "AccessControl"
					"[event][id]" => "Access:01"
					"[rsa][message][id1]" => "Access:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
		# MESSAGE Access
		# line in RSA: <fld1> <fld2> <severity> Access attempted by unauthorized NMS, Community: <fld3>, IP: "<saddr>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} Access attempted by unauthorized NMS, Community: %{fld3}, IP: \"%{saddr}\"" }
				id => "message-Access"
				add_field => {
				"ec_theme" => "AccessControl"
				"event_description" => "Access attempted by unauthorized NMS"
					"[event][id]" => "Access"
					"[rsa][message][id1]" => "Access"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: <fld1> <fld2> <severity> Please reboot the device for the latest changes to take effect
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} Please reboot the device for the latest changes to take effect" }
			id => "msgParserId24"
			add_field => {
				"ec_theme" => "ALM"
				"event_description" => "Reboot required for latest changes"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE User:01
		# line in RSA: User <username> logged in via <network_service> (IP: <saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} logged in via %{network_service} (IP: %{saddr})" }
				id => "message-User:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "User logged in"
					"[event][id]" => "User:01"
					"[rsa][message][id1]" => "User:01"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE User
		# line in RSA: <fld1> <fld2> <severity> User <username> logged in via <network_service> (IP: <saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{severity} User %{username} logged in via %{network_service} (IP: %{saddr})" }
				id => "message-User"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "User logged in"
					"[event][id]" => "User"
					"[rsa][message][id1]" => "User"
					"[event][categoryid]" => "1401060000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA: <fld1> <fld2> <severity> Certificate named <fld3> expired on <fld4> <fld5>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} Certificate named %{fld3} expired on %{fld4} %{fld5}" }
			id => "msgParserId27"
			add_field => {
				"event_description" => "Certificate expired"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: <fld1> <fld2> <severity> Vision <event_description> by user <username> via <network_service>, source IP <saddr>
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{severity} Vision %{event_description} by user %{username} via %{network_service}, source IP %{saddr}" }
			id => "msgParserId28"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d-M-yyyy H:m:s" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: Updating policy database<fld1>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "Updating policy database%{fld1}" }
			id => "msgParserId29"
			add_field => {
				"ec_theme" => "ALM"
				"event_description" => "Updating policy database"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId30
	# line in RSA: Policy database updated successfully.
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "Policy database updated successfully." }
			id => "msgParserId30"
			add_field => {
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Policy database updated successfully"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_radwaredpmsg.json"
#			template_name => "radwaredp_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "arborpeakflow"
			"[observer][name]" => "Arbor Peakflow X"
			"[observer][type]" => "IPS"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <month> <day> <time> <hhost>: <hfld1> <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<month>[^\s]*)[\s]+(?<day>[^\s]*)[\s]+(?<time>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_arborpeakflowmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Client" {
		# MESSAGE 000010
		# line in RSA: Unapproved Client: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport>/<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Client: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport}/%{fld3}" }
				id => "message-000010"
				add_field => {
					"[event][id]" => "000010"
					"[rsa][message][id1]" => "000010"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000001
		# line in RSA: Unapproved Client: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport> (<service>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Client: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport} (%{service})" }
				id => "message-000001"
				add_field => {
					"[event][id]" => "000001"
					"[rsa][message][id1]" => "000001"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000006
		# line in RSA: Unapproved Client: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Client: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport}" }
				id => "message-000006"
				add_field => {
					"[event][id]" => "000006"
					"[rsa][message][id1]" => "000006"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000007
		# line in RSA: Unapproved Client: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Client: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}" }
				id => "message-000007"
				add_field => {
					"[event][id]" => "000007"
					"[rsa][message][id1]" => "000007"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Connection" {
		# MESSAGE 000002
		# line in RSA: Unapproved Connection: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport> (<service>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Connection: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport} (%{service})" }
				id => "message-000002"
				add_field => {
					"[event][id]" => "000002"
					"[rsa][message][id1]" => "000002"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000003
		# line in RSA: Unapproved Connection: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Connection: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{fld1}" }
				id => "message-000003"
				add_field => {
					"[event][id]" => "000003"
					"[rsa][message][id1]" => "000003"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Server" {
		# MESSAGE 000004
		# line in RSA: Unapproved Server: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport> (<service>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Server: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport} (%{service})" }
				id => "message-000004"
				add_field => {
					"[event][id]" => "000004"
					"[rsa][message][id1]" => "000004"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000009
		# line in RSA: Unapproved Server: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Server: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport}" }
				id => "message-000009"
				add_field => {
					"[event][id]" => "000009"
					"[rsa][message][id1]" => "000009"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Service" {
		# MESSAGE 000005
		# line in RSA: Unapproved Service: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport> (<service>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Service: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport} (%{service})" }
				id => "message-000005"
				add_field => {
					"[event][id]" => "000005"
					"[rsa][message][id1]" => "000005"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000008
		# line in RSA: Unapproved Service: <fld2>,URL: <url>,Severity: <severity>,Client: <daddr>,Server: <saddr>,Service: <protocol>/<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unapproved Service: %{fld2},URL: %{url},Severity: %{severity},Client: %{daddr},Server: %{saddr},Service: %{protocol}/%{sport}" }
				id => "message-000008"
				add_field => {
					"[event][id]" => "000008"
					"[rsa][message][id1]" => "000008"
					"[event][categoryid]" => "1002000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_arborpeakflowmsg.json"
#			template_name => "arborpeakflow_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

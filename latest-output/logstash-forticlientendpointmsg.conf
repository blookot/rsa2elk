# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "forticlientendpoint"
			"[observer][name]" => "Fortinet FortiClient Endpoint Security"
			"[observer][type]" => "Anti Virus"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hmonth> <hday> <hdate> <hhostname> proto=<hprotocol> service=<messageid> status=<haction> src=<hsaddr> dst=<hdaddr> src_port=<hsport> dst_port=<hdport> <!payload:hmonth>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+proto=(?<hprotocol>[^\s]*)[\s]+service=(?<messageid>[^\s]*)[\s]+status=(?<haction>[^\s]*)[\s]+src=(?<hsaddr>[^\s]*)[\s]+dst=(?<hdaddr>[^\s]*)[\s]+src_port=(?<hsport>[^\s]*)[\s]+dst_port=(?<hdport>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hday> <hdate> <hhostname> (<messageid> <hfld5> times in last <hfld6>) <hfld7> <hfld8>::<!payload:hmonth>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+\((?<messageid>[^\s]*)[\s]+(?<hfld5>[^\s]*)[\s]+times[\s]+in[\s]+last[\s]+(?<hfld6>[^\)]*)\)[\s]+(?<hfld7>[^\s]*)[\s]+(?<hfld8>[^:]*)::(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hday> <hdate> <hhostname> <messageid> <hfld5>::<!payload:hmonth>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<hhostname>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<hfld5>[^:]*)::(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-forticlientendpointmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld1> <fld2> <fld3> <hostname> enter <info>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{hostname} enter %{info}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld1> <fld2> <fld3> <hostname> (repeated <fld5> times in last <fld6>) enter <info>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{hostname} (repeated %{fld5} times in last %{fld6}) enter %{info}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: <fld1> <fld2> <fld3> <hostname> proto=<protocol> service=<network_service> status=deny src=<saddr> dst=<daddr> src_port=<sport> dst_port=<dport> server_app=<fld12> pid=<process_id> app_name=<fld14> traff_direct=<direction> block_count=<dclass_counter1> logon_user=<username>@<domain> msg=<result>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{hostname} proto=%{protocol} service=%{network_service} status=deny src=%{saddr} dst=%{daddr} src_port=%{sport} dst_port=%{dport} server_app=%{fld12} pid=%{process_id} app_name=%{fld14} traff_direct=%{direction} block_count=%{dclass_counter1} logon_user=%{username}@%{domain} msg=%{result}" }
			id => "msgParserId2"
			add_field => {
				"ec_theme" => "ALM"
				"ec_subject" => "NetworkComm"
				"ec_outcome" => "Failure"
				"action" => "deny"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-forticlientendpointmsg.json"
#			template_name => "forticlientendpoint_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ibmwebspheremq"
			"[observer][name]" => "IBM WebSphere MQ"
			"[observer][type]" => "Messaging"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 009
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: <hfld1> <hfld2> {AM -|PM -} Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                     Host(<hhostname>) Installation(<hfld4>)                     VRMF(<hfld5>) QMgr(<hfld6>)                     Time(<hfld9>)                     RemoteHost(<hfld8>)<hfld7>CommentInsert3(<hfld10>))<messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hhostname>[^\)]*)\)[\s]+Installation\((?<hfld4>[^\)]*)\)[\s]+VRMF\((?<hfld5>[^\)]*)\)[\s]+QMgr\((?<hfld6>[^\)]*)\)[\s]+Time\((?<hfld9>[^\)]*)\)[\s]+RemoteHost\((?<hfld8>[^\)]*)\)(?<hfld7>[^C]*)CommentInsert3\((?<hfld10>[^\)]*)\)\)(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-009"
			add_field => {
				"[rsa][header][id]" => "009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 010
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: --- <hfld1> <hfld2> {AM -|PM -} Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                     Host(<hhostname>) Installation(<hfld4>)                     VRMF(<hfld5>) QMgr(<hfld6>)                     Time(<hfld9>)<hfld7>CommentInsert3(<hfld10>)<messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+\-\-\-[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hhostname>[^\)]*)\)[\s]+Installation\((?<hfld4>[^\)]*)\)[\s]+VRMF\((?<hfld5>[^\)]*)\)[\s]+QMgr\((?<hfld6>[^\)]*)\)[\s]+Time\((?<hfld9>[^\)]*)\)(?<hfld7>[^C]*)CommentInsert3\((?<hfld10>[^\)]*)\)(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-010"
			add_field => {
				"[rsa][header][id]" => "010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 006
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: --- <hfld1> <hfld2> {AM -|PM -} Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                     Host(<hostname>) Installation(<hfld4>)                     VRMF(<hfld5>) QMgr(<hfld6>)                     <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+\-\-\-[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<hfld4>[^\)]*)\)[\s]+VRMF\((?<hfld5>[^\)]*)\)[\s]+QMgr\((?<hfld6>[^\)]*)\)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-006"
			add_field => {
				"[rsa][header][id]" => "006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 007
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: <hfld1> <hfld2> {AM -|PM -} Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                     Host(<hostname>) Installation(<hfld4>)                     VRMF(<hfld5>) QMgr(<hfld6>)                     <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<hfld4>[^\)]*)\)[\s]+VRMF\((?<hfld5>[^\)]*)\)[\s]+QMgr\((?<hfld6>[^\)]*)\)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-007"
			add_field => {
				"[rsa][header][id]" => "007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 008
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: <hfld1> <hfld2> {AM -|PM -} Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                     Host(<hhostname>) Installation(<hfld5>)                     VRMF(<hfld6>) <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hhostname>[^\)]*)\)[\s]+Installation\((?<hfld5>[^\)]*)\)[\s]+VRMF\((?<hfld6>[^\)]*)\)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-008"
			add_field => {
				"[rsa][header][id]" => "008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 001
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: --- <hfld1> <hfld2> - Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                      Host(<hostname>) <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+\-\-\-[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\-[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hostname>[^\)]*)\)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-001"
			add_field => {
				"[rsa][header][id]" => "001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 002
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: -- <hfld1> <hfld2> - Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                      Host(<hostname>) <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+\-\-[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\-[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hostname>[^\)]*)\)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-002"
			add_field => {
				"[rsa][header][id]" => "002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 003
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: - <hfld1> <hfld2> - Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                      Host(<hostname>) <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+\-[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\-[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hostname>[^\)]*)\)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-003"
			add_field => {
				"[rsa][header][id]" => "003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 004
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: <hfld1> <hfld2> - Process(<process_id>.<hfld3>) User(<husername>) Program(<hprocess>)                      Host(<hostname>) <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\-[\s]+Process\((?<process_id>[^\.]*)\.(?<hfld3>[^\)]*)\)[\s]+User\((?<husername>[^\)]*)\)[\s]+Program\((?<hprocess>[^\)]*)\)[\s]+Host\((?<hostname>[^\)]*)\)[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-004"
			add_field => {
				"[rsa][header][id]" => "004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 005
	# line in RSA: %IBMWEBSPHEREMQ-<hlevel>: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IBMWEBSPHEREMQ\-(?<hlevel>[^:]*):[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-005"
			add_field => {
				"[rsa][header][id]" => "005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-ibmwebspheremqmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  - <process> : <dclass_counter1>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "- %{process} : %{dclass_counter1}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA:  -- <process> : <dclass_counter1>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "-- %{process} : %{dclass_counter1}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA:  --- 
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "---" }
			id => "msgParserId2"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info> EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info} EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info> with error-code <resultcode>.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info} with error-code %{resultcode}.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info> due to error code <resultcode>.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info} due to error code %{resultcode}.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId5"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info> due to Reason Code <resultcode>.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info} due to Reason Code %{resultcode}.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId6"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	else if [logstash][msgparser][id] == "AMQ6183" {
		# MESSAGE AMQ6183
		# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info> EXPLANATION: <event_description> ACTION: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info} EXPLANATION: %{event_description} ACTION: %{action}" }
				id => "message-AMQ6183"
				add_field => {
					"[event][id]" => "AMQ6183"
					"[rsa][message][id1]" => "AMQ6183"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
			}
		}
		# MESSAGE AMQ6183:01
		# line in RSA: <fld1> <fld2> {AM -|PM -} Process(<fld15>.<fld3>) User(<username>) Program(<process>)<fld7>Host(<hostname>) Installation(<fld4>)<fld5>VRMF(<fld6>) <id>:<info> EXPLANATION: <event_description> ACTION: <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<fld15>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)(?<fld7>[^H]*)Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld4>[^\)]*)\)(?<fld5>[^V]*)VRMF\((?<fld6>[^\)]*)\)[\s]+(?<id>[^:]*):(?<info>[^\s]*)[\s]+EXPLANATION:[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
				id => "message-AMQ6183:01"
				add_field => {
					"[event][id]" => "AMQ6183:01"
					"[rsa][message][id1]" => "AMQ6183:01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AMQ6209" {
		# MESSAGE AMQ6209
		# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info> EXPLANATION: <event_description> ACTION: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info} EXPLANATION: %{event_description} ACTION: %{action}" }
				id => "message-AMQ6209"
				add_field => {
					"[event][id]" => "AMQ6209"
					"[rsa][message][id1]" => "AMQ6209"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
			}
		}
		# MESSAGE AMQ6209:01
		# line in RSA: <fld1> <fld2> {AM -|PM -} Process(<fld15>.<fld3>) User(<username>) Program(<process>)<fld7>Host(<hostname>) Installation(<fld4>)<fld5>VRMF(<fld6>) <id>:<info> EXPLANATION: <event_description> ACTION: <action>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<fld15>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)(?<fld7>[^H]*)Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld4>[^\)]*)\)(?<fld5>[^V]*)VRMF\((?<fld6>[^\)]*)\)[\s]+(?<id>[^:]*):(?<info>[^\s]*)[\s]+EXPLANATION:[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
				id => "message-AMQ6209:01"
				add_field => {
					"[event][id]" => "AMQ6209:01"
					"[rsa][message][id1]" => "AMQ6209:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
			}
		}
	}
	# PARSER msgParserId8
	# line in RSA: <fld1> <fld2> {AM -|PM -|- } Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      {Host(<hostname>) Installation(<fld4>)                     VRMF(<fld5>) QMgr(<fld6>)                     <id>:|Host(<hostname>) <id>:} WebSphere MQ <version> EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId8" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-|\-[\s]+)[\s]+Process\((?<process_id>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)[\s]+(Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld4>[^\)]*)\)[\s]+VRMF\((?<fld5>[^\)]*)\)[\s]+QMgr\((?<fld6>[^\)]*)\)[\s]+(?<id>[^:]*):|Host\((?<hostname>[^\)]*)\)[\s]+(?<id>[^:]*):)[\s]+WebSphere[\s]+MQ[\s]+(?<version>[^\s]*)[\s]+EXPLANATION:[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
			id => "msgParserId8"
			add_field => {
				"info" => "WebSphere version"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: There are <dclass_counter1> days left in the trial period for this copy of WebSphere  MQ.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: There are %{dclass_counter1} days left in the trial period for this copy of WebSphere  MQ.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId9"
			add_field => {
				"info" => "Trial date left"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <dclass_counter1> log records accessed on queue manager '<agent>' during the log  replay phase.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{dclass_counter1} log records accessed on queue manager '%{agent}' during the log  replay phase.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId10"
			add_field => {
				"info" => "Log records accessed during replay"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <dclass_counter1> log <info> EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{dclass_counter1} log %{info} EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId11"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info> for reason <resultcode>.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info} for reason %{resultcode}.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId12"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: Default objects statistics : <dclass_counter1> created. <dclass_counter2> replaced. <dclass_counter3> failed.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: Default objects statistics : %{dclass_counter1} created. %{dclass_counter2} replaced. %{dclass_counter3} failed.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId13"
			add_field => {
				"info" => "Default objects statistics"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: Unexpected return code, <resultcode>, from command <context>.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: Unexpected return code, %{resultcode}, from command %{context}.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId14"
			add_field => {
				"info" => "Unexpected return code"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: <fld1> <fld2> {AM -|PM -|- } Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      {Host(<hostname>) Installation(<fld4>)                     VRMF(<fld5>) QMgr(<fld6>)                     <id>:|Host(<hostname>) <id>:} <info> EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId15" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-|\-[\s]+)[\s]+Process\((?<process_id>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)[\s]+(Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld4>[^\)]*)\)[\s]+VRMF\((?<fld5>[^\)]*)\)[\s]+QMgr\((?<fld6>[^\)]*)\)[\s]+(?<id>[^:]*):|Host\((?<hostname>[^\)]*)\)[\s]+(?<id>[^:]*):)[\s]+(?<info>[^\s]*)[\s]+EXPLANATION:[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
			id => "msgParserId15"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: Connection to host '<dhost>' rejected.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: Connection to host '%{dhost}' rejected.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId16"
			add_field => {
				"info" => "Connection to host rejected"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: The host name supplied is not valid.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: The host name supplied is not valid.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId17"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: Error sending data to host <dhost> (<daddr>).    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: Error sending data to host %{dhost} (%{daddr}).    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId18"
			add_field => {
				"info" => "Error sending data to host"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: The data received from host <shost> (<saddr>) is not valid.    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: The data received from host %{shost} (%{saddr}) is not valid.    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId19"
			add_field => {
				"info" => "Data from host not valid"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: Error on receive from host <shost> (<saddr>).    EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: Error on receive from host %{shost} (%{saddr}).    EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId20"
			add_field => {
				"info" => "Error receiving from host"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: <fld1> <fld2> {AM -|PM -|- } Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      {Host(<hostname>) Installation(<fld4>)                     VRMF(<fld5>) QMgr(<fld6>)                     <id>:|Host(<hostname>) <id>:} Connection to host {<dhost> (<daddr>) closed.    EXPLANATION|'<dhost> (<daddr>)' for channel '<fld7>' closed.  EXPLANATION}: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId21" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-|\-[\s]+)[\s]+Process\((?<process_id>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)[\s]+(Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld4>[^\)]*)\)[\s]+VRMF\((?<fld5>[^\)]*)\)[\s]+QMgr\((?<fld6>[^\)]*)\)[\s]+(?<id>[^:]*):|Host\((?<hostname>[^\)]*)\)[\s]+(?<id>[^:]*):)[\s]+Connection[\s]+to[\s]+host[\s]+((?<dhost>[^\s]*)[\s]+\((?<daddr>[^\)]*)\)[\s]+closed\.[\s]+EXPLANATION|'(?<dhost>[^\s]*)[\s]+\((?<daddr>[^\)]*)\)'[\s]+for[\s]+channel[\s]+'(?<fld7>[^']*)'[\s]+closed\.[\s]+EXPLANATION):[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
			id => "msgParserId21"
			add_field => {
				"info" => "Connection to host closed"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: <fld1> <fld2> - Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      Host(<hostname>) <id>: <info>   EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} - Process(%{process_id}.%{fld3}) User(%{username}) Program(%{process})                      Host(%{hostname}) %{id}: %{info}   EXPLANATION: %{event_description} ACTION: %{action}" }
			id => "msgParserId22"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA: <fld1> <fld2> {AM -|PM -|- } Process(<process_id>.<fld3>) User(<username>) Program(<process>)                      {Host(<hostname>) Installation(<fld4>)                     VRMF(<fld5>) QMgr(<fld6>)                     <id>:|Host(<hostname>) <id>:} Channel to remote machine '<daddr>' is ending due to an {error.    EXPLANATION|error.  EXPLANATION}: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId23" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-|\-[\s]+)[\s]+Process\((?<process_id>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)[\s]+(Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld4>[^\)]*)\)[\s]+VRMF\((?<fld5>[^\)]*)\)[\s]+QMgr\((?<fld6>[^\)]*)\)[\s]+(?<id>[^:]*):|Host\((?<hostname>[^\)]*)\)[\s]+(?<id>[^:]*):)[\s]+Channel[\s]+to[\s]+remote[\s]+machine[\s]+'(?<daddr>[^']*)'[\s]+is[\s]+ending[\s]+due[\s]+to[\s]+an[\s]+(error\.[\s]+EXPLANATION|error\.[\s]+EXPLANATION):[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
			id => "msgParserId23"
			add_field => {
				"info" => "Channel ending due to error"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: <fld1> <fld2> {AM -|PM -} Process(<fld15>.<fld3>) User(<username>) Program(<process>)<fld7>Host(<hostname>) Installation(<fld4>)<fld5>VRMF(<fld6>) <id>:<info> EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId7" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<fld15>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)(?<fld7>[^H]*)Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld4>[^\)]*)\)(?<fld5>[^V]*)VRMF\((?<fld6>[^\)]*)\)[\s]+(?<id>[^:]*):(?<info>[^\s]*)[\s]+EXPLANATION:[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
			id => "msgParserId7"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <fld1> <fld2> {AM -|PM -} Process(<fld15>.<fld3>) User(<username>) Program(<process>)<fld4>Host(<hostname>) Installation(<fld5>)<fld6>VRMF(<fld7>) QMgr(<fld8>)<fld9>Time(<fld10>)<fld11>RemoteHost(<daddr>)<fld12>CommentInsert3(<fld13>)<fld14> <id>: Error on receive from host <dhost> (<fld16>).  EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId24" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<fld15>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)(?<fld4>[^H]*)Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld5>[^\)]*)\)(?<fld6>[^V]*)VRMF\((?<fld7>[^\)]*)\)[\s]+QMgr\((?<fld8>[^\)]*)\)(?<fld9>[^T]*)Time\((?<fld10>[^\)]*)\)(?<fld11>[^R]*)RemoteHost\((?<daddr>[^\)]*)\)(?<fld12>[^C]*)CommentInsert3\((?<fld13>[^\)]*)\)(?<fld14>[^\s]*)[\s]+(?<id>[^:]*):[\s]+Error[\s]+on[\s]+receive[\s]+from[\s]+host[\s]+(?<dhost>[^\s]*)[\s]+\((?<fld16>[^\)]*)\)\.[\s]+EXPLANATION:[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
			id => "msgParserId24"
			add_field => {
				"info" => "Error on receive from host"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: <fld1> <fld2> {AM -|PM -} Process(<fld15>.<fld3>) User(<username>) Program(<process>)<fld4>Host(<hostname>) Installation(<fld5>)<fld6>VRMF(<fld7>) QMgr(<fld8>)<fld9>Time(<fld10>)<fld11>CommentInsert3(<fld13>)<id>: Channel <fld16> to host '<daddr>' ended abnormally.  EXPLANATION: <event_description> ACTION: <action>
	else if [logstash][msgparser][id] == "msgParserId25" {
		grok {
			match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(AM[\s]+\-|PM[\s]+\-)[\s]+Process\((?<fld15>[^\.]*)\.(?<fld3>[^\)]*)\)[\s]+User\((?<username>[^\)]*)\)[\s]+Program\((?<process>[^\)]*)\)(?<fld4>[^H]*)Host\((?<hostname>[^\)]*)\)[\s]+Installation\((?<fld5>[^\)]*)\)(?<fld6>[^V]*)VRMF\((?<fld7>[^\)]*)\)[\s]+QMgr\((?<fld8>[^\)]*)\)(?<fld9>[^T]*)Time\((?<fld10>[^\)]*)\)(?<fld11>[^C]*)CommentInsert3\((?<fld13>[^\)]*)\)(?<id>[^:]*):[\s]+Channel[\s]+(?<fld16>[^\s]*)[\s]+to[\s]+host[\s]+'(?<daddr>[^']*)'[\s]+ended[\s]+abnormally\.[\s]+EXPLANATION:[\s]+(?<event_description>[^\s]*)[\s]+ACTION:[\s]+(?<action>.*)$" }
			id => "msgParserId25"
			add_field => {
				"info" => "Channel ended abnormally"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:mm:ss" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-ibmwebspheremqmsg.json"
#			template_name => "ibmwebspheremq_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

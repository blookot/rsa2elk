# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "netwitnessspectrum"
			"[observer][name]" => "Netwitness Spectrum"
			"[observer][type]" => "Anti Virus"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0003
	# line in RSA: <hfld1> CEF:<hfld6>|NetWitness|Spectrum|<hfld7>|{Suspicious Event | Suspicious File}|Detected suspicious {network | file in} event ID <hevent_id> session ID <hsessionid>|<severity>|<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+CEF:(?<hfld6>[^\|]*)\|NetWitness\|Spectrum\|(?<hfld7>[^\|]*)\|(Suspicious[\s]+Event[\s]+|[\s]*Suspicious[\s]+File)\|Detected[\s]+suspicious[\s]+(network[\s]+|[\s]*file[\s]+in)[\s]+event[\s]+ID[\s]+(?<hevent_id>[^\s]*)[\s]+session[\s]+ID[\s]+(?<hsessionid>[^\|]*)\|(?<severity>[^\|]*)\|(?<message>.*)$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "Suspicious_Event"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hfld1> CEF:<hfld6>|RSA|Security Analytics|<hfld7>|{Suspicious Event | Suspicious File}|Detected suspicious {network | file in} event ID <hevent_id> session ID <hsessionid>|<severity>|<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+CEF:(?<hfld6>[^\|]*)\|RSA\|Security[\s]+Analytics\|(?<hfld7>[^\|]*)\|(Suspicious[\s]+Event[\s]+|[\s]*Suspicious[\s]+File)\|Detected[\s]+suspicious[\s]+(network[\s]+|[\s]*file[\s]+in)[\s]+event[\s]+ID[\s]+(?<hevent_id>[^\s]*)[\s]+session[\s]+ID[\s]+(?<hsessionid>[^\|]*)\|(?<severity>[^\|]*)\|(?<message>.*)$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "Suspicious_Event"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <hfld1> CEF:<hfld6>|RSA|Security Analytics Malware|<hfld7>|{Suspicious Event | Suspicious File}|Detected suspicious {network | file in} event ID <hevent_id> session ID <hsessionid>|<severity>|<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+CEF:(?<hfld6>[^\|]*)\|RSA\|Security[\s]+Analytics[\s]+Malware\|(?<hfld7>[^\|]*)\|(Suspicious[\s]+Event[\s]+|[\s]*Suspicious[\s]+File)\|Detected[\s]+suspicious[\s]+(network[\s]+|[\s]*file[\s]+in)[\s]+event[\s]+ID[\s]+(?<hevent_id>[^\s]*)[\s]+session[\s]+ID[\s]+(?<hsessionid>[^\|]*)\|(?<severity>[^\|]*)\|(?<message>.*)$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "Suspicious_Event"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: <hfld1> CEF:<hfld6>|RSA|Security Analytics Malware|<hfld7>|{Suspicious Event | Suspicious File}|Detected suspicious {network event|file}|<severity>|<!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hfld1>[^\s]*)[\s]+CEF:(?<hfld6>[^\|]*)\|RSA\|Security[\s]+Analytics[\s]+Malware\|(?<hfld7>[^\|]*)\|(Suspicious[\s]+Event[\s]+|[\s]*Suspicious[\s]+File)\|Detected[\s]+suspicious[\s]+(network[\s]+event|file)\|(?<severity>[^\|]*)\|(?<message>.*)$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "Suspicious_Event"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: <hfld1> CEF:<hfld6>|NetWitness|Spectrum|<hfld7>|<msgIdPart1> <msgIdPart2>|<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\s]*)[\s]+CEF:(?<hfld6>[^\|]*)\|NetWitness\|Spectrum\|(?<hfld7>[^\|]*)\|(?<msgIdPart1>[^\s]*)[\s]+(?<msgIdPart2>[^\|]*)\|(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hfld1> CEF:<hfld6>|NetWitness|Spectrum|<hfld7>|<messageid>|<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<hfld1>[^\s]*)[\s]+CEF:(?<hfld6>[^\|]*)\|NetWitness\|Spectrum\|(?<hfld7>[^\|]*)\|(?<messageid>[^\|]*)\|(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-netwitnessspectrummsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Added User|Changed by <username> from <saddr>|<fld7>|Username=[<c_username>] <info>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Added User|Changed by %{username} from %{saddr}|%{fld7}|Username=[%{c_username}] %{info}" }
			id => "msgParserId0"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_outcome" => "Success"
				"action" => "Added new user"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Added Role|Changed by <username> from <saddr>|<fld7>|Role Name=[<fld8>] <info>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Added Role|Changed by %{username} from %{saddr}|%{fld7}|Role Name=[%{fld8}] %{info}" }
			id => "msgParserId1"
			add_field => {
				"action" => "Added new role"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Modification User|Changed by <username> from <saddr>|<fld7>| <info>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Modification User|Changed by %{username} from %{saddr}|%{fld7}| %{info}" }
			id => "msgParserId2"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"action" => "Modifications done to user"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Modification|<agent> changed by <username>|<fld7>|
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Modification|%{agent} changed by %{username}|%{fld7}|" }
			id => "msgParserId3"
			add_field => {
				"action" => "Modifications done to configuration"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Authentication" {
		# MESSAGE Authentication
		# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Authentication|Authentication failed for user <username> from <saddr>|<fld7>|cause=<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Authentication|Authentication failed for user %{username} from %{saddr}|%{fld7}|cause=%{result}" }
				id => "message-Authentication"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "Failed Authentication"
					"[event][id]" => "Authentication"
					"[rsa][message][id1]" => "Authentication"
					"[event][categoryid]" => "1301000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
		# MESSAGE Authentication:01
		# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Authentication|Authentication succeeded for user <username> from <saddr>|<fld7>| <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Authentication|Authentication succeeded for user %{username} from %{saddr}|%{fld7}| %{info}" }
				id => "message-Authentication:01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"action" => "Successful Authentication"
					"[event][id]" => "Authentication:01"
					"[rsa][message][id1]" => "Authentication:01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Enabled User|Changed by <username> from <saddr>|<fld7>|Username=[<c_username>]
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Enabled User|Changed by %{username} from %{saddr}|%{fld7}|Username=[%{c_username}]" }
			id => "msgParserId6"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Enable"
				"ec_theme" => "AccessControl"
				"action" => "Enabled User"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Disabled User|Changed by <username> from <saddr>|<fld7>|Username=[<c_username>]
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Disabled User|Changed by %{username} from %{saddr}|%{fld7}|Username=[%{c_username}]" }
			id => "msgParserId7"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Disable"
				"ec_theme" => "AccessControl"
				"action" => "Disabled User"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: <fld1> <fld2> <fld3> <fld11> CEF:<fld4>|<fld10>|<fld12>|<fld13>|Unlocked User|Changed by <username> from <saddr>|<fld7>|Username=[<c_username>]
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld11} CEF:%{fld4}|%{fld10}|%{fld12}|%{fld13}|Unlocked User|Changed by %{username} from %{saddr}|%{fld7}|Username=[%{c_username}]" }
			id => "msgParserId8"
			add_field => {
				"action" => "Unlocked User"
				"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: static=<risk_num_static> nextgen=<risk_num_next> community=<risk_num_comm> sandbox=<risk_num_sand> fname=<filename> fsize=<filename_size> file.name=<filename> file.size=<filename_size> file.md5.hash=<checksum> filehash=<checksum> com.netwitness.event.internal.id=<fld26> com.netwitness.event.internal.uuid=<fld27> country.dst.code=<cn_ctr_dst_code> city.dst=<location_city> org.dst=<org_dst> payload=<cs_payload> packets=<packets> country.dst=<location_dst> time=<fld34> threat.source=<threat_source> tcp.srcport=<sport> tcp.srcpport=<sport> com.netwitness.event.internal.source=<url> filetype=<cs_filetype> latdec.dst=<latdec_dst> eth.src=<smacaddr> agency.dst=<cs_agency_dst> ip.proto=<protocol> tcp.flags=<tcp_flags> ip.src=<saddr> tcp.dstport=<dport> threat.category=<threat_name> eth.dst=<dmacaddr> lifetime=<cs_lifetime> latdec.src=<latdec_src> did=<cn_log_did> alert.id=<alert_id> country.src=<location_src> sessionid=<sessionid> longdec.src=<longdec_src> medium=<cs_log_medium> size=<bytes> ad.domain.dst=<ddomain> ad.computer.dst=<ad_computer_dst> ad.username.src=<c_username> rpackets=<cn_rpackets> action=<action> ad.domain.src=<sdomain> eth.src.vendor=<cs_eth_src_ven> rpayload=<cs_rpayload> ad.username.dst=<username> content=<content_type> extension=<extension> eth.dst.vendor=<cs_eth_dst_ven> rid=<cn_log_rid> directory=<directory> risk.suspicious=<risk_suspicious> eth.type=<eth_type> ip.dst=<daddr> service=<service> filename=<filename> streams=<cs_streams> risk.info=<risk_info> event.source=<event_source> malware.nextgen.source=<event_source> high.confidence.ioc.hit=<threat_name> event.type=<event_type> event.id=<id> event.uuid=<cs_event_uuid> agent.ext=<fld11> client=<agent> citadelsys.src=<fld18> http.response=<fld19> alias.host=<hostname> http.request=<fld29> alert=<fld30> asn.dst=<cn_asn_dst> longdec.dst=<latdec_dst> server=<application> tld=<fld39> antivirus.primary.detected=<cs_av_primary> antivirus.secondary.detected=<cs_av_secondary> antivirus.other.detected=<cs_av_other> dest.tld=<cs_dst_tld> udp.srcport=<sport> udp.dstport=<dport> domain.dst=<ddomain> feed.name=<feed_name> feed.description=<feed_desc> threat.description=<threat_val> referer=<referer> risk.warning=<risk_warning> attachment=<attachment> whois.registrar=<cs_registrar> whois.registrant=<cs_registrant> whois.date.creation=<cs_datecret> whois.server=<cs_whois_server>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "static=%{risk_num_static} nextgen=%{risk_num_next} community=%{risk_num_comm} sandbox=%{risk_num_sand} fname=%{filename} fsize=%{filename_size} file.name=%{filename} file.size=%{filename_size} file.md5.hash=%{checksum} filehash=%{checksum} com.netwitness.event.internal.id=%{fld26} com.netwitness.event.internal.uuid=%{fld27} country.dst.code=%{cn_ctr_dst_code} city.dst=%{location_city} org.dst=%{org_dst} payload=%{cs_payload} packets=%{packets} country.dst=%{location_dst} time=%{fld34} threat.source=%{threat_source} tcp.srcport=%{sport} tcp.srcpport=%{sport} com.netwitness.event.internal.source=%{url} filetype=%{cs_filetype} latdec.dst=%{latdec_dst} eth.src=%{smacaddr} agency.dst=%{cs_agency_dst} ip.proto=%{protocol} tcp.flags=%{tcp_flags} ip.src=%{saddr} tcp.dstport=%{dport} threat.category=%{threat_name} eth.dst=%{dmacaddr} lifetime=%{cs_lifetime} latdec.src=%{latdec_src} did=%{cn_log_did} alert.id=%{alert_id} country.src=%{location_src} sessionid=%{sessionid} longdec.src=%{longdec_src} medium=%{cs_log_medium} size=%{bytes} ad.domain.dst=%{ddomain} ad.computer.dst=%{ad_computer_dst} ad.username.src=%{c_username} rpackets=%{cn_rpackets} action=%{action} ad.domain.src=%{sdomain} eth.src.vendor=%{cs_eth_src_ven} rpayload=%{cs_rpayload} ad.username.dst=%{username} content=%{content_type} extension=%{extension} eth.dst.vendor=%{cs_eth_dst_ven} rid=%{cn_log_rid} directory=%{directory} risk.suspicious=%{risk_suspicious} eth.type=%{eth_type} ip.dst=%{daddr} service=%{service} filename=%{filename} streams=%{cs_streams} risk.info=%{risk_info} event.source=%{event_source} malware.nextgen.source=%{event_source} high.confidence.ioc.hit=%{threat_name} event.type=%{event_type} event.id=%{id} event.uuid=%{cs_event_uuid} agent.ext=%{fld11} client=%{agent} citadelsys.src=%{fld18} http.response=%{fld19} alias.host=%{hostname} http.request=%{fld29} alert=%{fld30} asn.dst=%{cn_asn_dst} longdec.dst=%{latdec_dst} server=%{application} tld=%{fld39} antivirus.primary.detected=%{cs_av_primary} antivirus.secondary.detected=%{cs_av_secondary} antivirus.other.detected=%{cs_av_other} dest.tld=%{cs_dst_tld} udp.srcport=%{sport} udp.dstport=%{dport} domain.dst=%{ddomain} feed.name=%{feed_name} feed.description=%{feed_desc} threat.description=%{threat_val} referer=%{referer} risk.warning=%{risk_warning} attachment=%{attachment} whois.registrar=%{cs_registrar} whois.registrant=%{cs_registrant} whois.date.creation=%{cs_datecret} whois.server=%{cs_whois_server}" }
			id => "msgParserId9"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-netwitnessspectrummsg.json"
#			template_name => "netwitnessspectrum_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

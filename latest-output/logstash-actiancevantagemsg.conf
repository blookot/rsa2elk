# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "actiancevantage"
			"[observer][name]" => "Actiance Vantage"
			"[observer][type]" => "Analysis"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %ActianceAudit: <hfld1>^^<messageid>^^<hfld2>^^<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ActianceAudit:[\s]+(?<hfld1>[^\^]*)\^\^(?<message>(?<messageid>[^\^]*)\^\^(?<hfld2>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %ActianceEvents: <hfld1>^^<hfld2>^^<hfld3>^^<hfld4>^^<hfld5>^^<messageid>^^<!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%ActianceEvents:[\s]+(?<hfld1>[^\^]*)\^\^(?<message>(?<hfld2>[^\^]*)\^\^(?<hfld3>[^\^]*)\^\^(?<hfld4>[^\^]*)\^\^(?<hfld5>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-actiancevantagemsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <event_type>^^<fld1>^^<saddr>^^<protocol>^^<result>^^<fld2>^^<fld3>^^<fld4>^^<event_counter>^^<bytes>^^<duration_string>^^<fld5>^^<fld6>^^<fld7>^^<fld8>^^<fld9>^^<fld10>^^<fld11>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{event_type}^^%{fld1}^^%{saddr}^^%{protocol}^^%{result}^^%{fld2}^^%{fld3}^^%{fld4}^^%{event_counter}^^%{bytes}^^%{duration_string}^^%{fld5}^^%{fld6}^^%{fld7}^^%{fld8}^^%{fld9}^^%{fld10}^^%{fld11}" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "ADMIN" {
		# MESSAGE ADMIN:ADD
		# line in RSA: <event_type>^^<action>^^<severity>^^<event_time>.<fld4>^^Employee Info:<param>^^<username>^^<user_role>^^<fld1>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}^^%{action}^^%{severity}^^%{event_time}.%{fld4}^^Employee Info:%{param}^^%{username}^^%{user_role}^^%{fld1}^^%{fld2}^^%{event_description}" }
				id => "message-ADMIN:ADD"
				add_field => {
					"[event][id]" => "ADMIN:ADD"
					"[rsa][message][id1]" => "ADMIN:ADD"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{event_time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ADMIN:REPORT
		# line in RSA: <event_type>^^<action>^^<severity>^^<event_time>.<fld4>^^Report Parameters [  <param> ]^^<username>^^<user_role>^^<fld1>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}^^%{action}^^%{severity}^^%{event_time}.%{fld4}^^Report Parameters [  %{param} ]^^%{username}^^%{user_role}^^%{fld1}^^%{fld2}^^%{event_description}" }
				id => "message-ADMIN:REPORT"
				add_field => {
					"[event][id]" => "ADMIN:REPORT"
					"[rsa][message][id1]" => "ADMIN:REPORT"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{event_time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE ADMIN:UPDATE
		# line in RSA: <event_type>^^<action>^^<severity>^^<event_time>.<fld4>^^<param>^^<username>^^<user_role>^^<fld1>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}^^%{action}^^%{severity}^^%{event_time}.%{fld4}^^%{param}^^%{username}^^%{user_role}^^%{fld1}^^%{fld2}^^%{event_description}" }
				id => "message-ADMIN:UPDATE"
				add_field => {
					"[event][id]" => "ADMIN:UPDATE"
					"[rsa][message][id1]" => "ADMIN:UPDATE"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{event_time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "AUTH" {
		# MESSAGE AUTH:LOGIN
		# line in RSA: <event_type>^^<action>^^<severity>^^<event_time>.<fld4>^^Logged in from IP:<saddr>[Hostname:<shost>]^^<username>^^<user_role>^^<fld1>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}^^%{action}^^%{severity}^^%{event_time}.%{fld4}^^Logged in from IP:%{saddr}[Hostname:%{shost}]^^%{username}^^%{user_role}^^%{fld1}^^%{fld2}^^%{event_description}" }
				id => "message-AUTH:LOGIN"
				add_field => {
					"[event][id]" => "AUTH:LOGIN"
					"[rsa][message][id1]" => "AUTH:LOGIN"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{event_time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE AUTH:LOGOUT
		# line in RSA: <event_type>^^<action>^^<severity>^^<event_time>.<fld4>^^Employee (<fld3>) Logged out.^^<username>^^<user_role>^^<fld1>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}^^%{action}^^%{severity}^^%{event_time}.%{fld4}^^Employee (%{fld3}) Logged out.^^%{username}^^%{user_role}^^%{fld1}^^%{fld2}^^%{event_description}" }
				id => "message-AUTH:LOGOUT"
				add_field => {
					"[event][id]" => "AUTH:LOGOUT"
					"[rsa][message][id1]" => "AUTH:LOGOUT"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{event_time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "CONFIG" {
		# MESSAGE CONFIG:UPDATE
		# line in RSA: <event_type>^^<action>^^<severity>^^<event_time>.<fld4>^^Old value: <change_old>, New value: <change_new>^^<username>^^<user_role>^^<fld1>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}^^%{action}^^%{severity}^^%{event_time}.%{fld4}^^Old value: %{change_old}, New value: %{change_new}^^%{username}^^%{user_role}^^%{fld1}^^%{fld2}^^%{event_description}" }
				id => "message-CONFIG:UPDATE"
				add_field => {
					"[event][id]" => "CONFIG:UPDATE"
					"[rsa][message][id1]" => "CONFIG:UPDATE"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{event_time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
		# MESSAGE CONFIG:ADD
		# line in RSA: <event_type>^^<action>^^<severity>^^<event_time>.<fld4>^^<param>^^<username>^^<user_role>^^<fld1>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_type}^^%{action}^^%{severity}^^%{event_time}.%{fld4}^^%{param}^^%{username}^^%{user_role}^^%{fld1}^^%{fld2}^^%{event_description}" }
				id => "message-CONFIG:ADD"
				add_field => {
					"[event][id]" => "CONFIG:ADD"
					"[rsa][message][id1]" => "CONFIG:ADD"
					"[event][categoryid]" => "1801010000"
					"[logstash][fullDateTimeString]" => "%{event_time}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d H:m:s" ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-actiancevantagemsg.json"
#			template_name => "actiancevantage_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

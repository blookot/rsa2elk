# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "sunoneldap"
			"[observer][name]" => "SunOne LDAP Directory Server"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %SunOneLDAP-4: time: <hfld1>  time: <hfld2>  dn: <hfld3>  changetype: <messageid> <!payload:hfld2>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SunOneLDAP\-4:[\s]+time:[\s]+(?<hfld1>[^\s]*)[\s]+time:[\s]+(?<message>(?<hfld2>[^\s]*)[\s]+dn:[\s]+(?<hfld3>[^\s]*)[\s]+changetype:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %SunOneLDAP-4: time: <hfld1>  dn: <hfld2>  changetype: <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SunOneLDAP\-4:[\s]+time:[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+dn:[\s]+(?<hfld2>[^\s]*)[\s]+changetype:[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %OracleDS-4: time: <hfld1>^^dn: <hfld2>^^changetype: <messageid>^^<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%OracleDS\-4:[\s]+time:[\s]+(?<message>(?<hfld1>[^\^]*)\^\^dn:[\s]+(?<hfld2>[^\^]*)\^\^changetype:[\s]+(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %OracleDSTVM-4: [<hfld1> <hfld2>] conn=<hfld1> op=<hfld2> msgId=-<hfld3> - <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%OracleDSTVM-4: [%{hfld1} %{hfld2}] conn=%{hfld1} op=%{hfld2} msgId=-%{hfld3} - %{messageid} %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %OracleDSTVM-4: [<hfld1> <hfld2>] conn=<hfld1> op=<hfld2> msgId=<hfld3> - <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%OracleDSTVM-4: [%{hfld1} %{hfld2}] conn=%{hfld1} op=%{hfld2} msgId=%{hfld3} - %{messageid} %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %OracleDSTVM-4: [<hfld1> <hfld2>] conn=<hfld1> op=<hfld2> msgId=-<hfld3> - <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%OracleDSTVM-4: [%{hfld1} %{hfld2}] conn=%{hfld1} op=%{hfld2} msgId=-%{hfld3} - %{message}" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "Oracle_DS"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: %OracleDSTVM-4: [<hfld1> <hfld2>] conn=<hfld1> op=<hfld2> msgId=<hfld3> - <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%OracleDSTVM-4: [%{hfld1} %{hfld2}] conn=%{hfld1} op=%{hfld2} msgId=%{hfld3} - %{message}" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "Oracle_DS"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-sunoneldapmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "modify" {
		# MESSAGE modify:03
		# line in RSA: <fld1>^^dn: <dst_dn>^^changetype: <action>^^<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}^^dn: %{dst_dn}^^changetype: %{action}^^%{info}" }
				id => "message-modify:03"
				add_field => {
					"[event][id]" => "modify:03"
					"[rsa][message][id1]" => "modify:03"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
		# MESSAGE modify:01
		# line in RSA: <fld1>  dn: <dst_dn>  changetype: <action>  <info>  -  replace: modifiersname  modifiersname: <src_dn>  -  replace: modifytimestamp  modifytimestamp: <fld2>  -
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}  dn: %{dst_dn}  changetype: %{action}  %{info}  -  replace: modifiersname  modifiersname: %{src_dn}  -  replace: modifytimestamp  modifytimestamp: %{fld2}  -" }
				id => "message-modify:01"
				add_field => {
					"[event][id]" => "modify:01"
					"[rsa][message][id1]" => "modify:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
		# MESSAGE modify:02
		# line in RSA: <fld1>  dn: <dst_dn>  changetype: <action>  <info>  replace: modifiersname  modifiersname: <src_dn>  replace: modifytimestamp  modifytimestamp: <fld2>  -
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}  dn: %{dst_dn}  changetype: %{action}  %{info}  replace: modifiersname  modifiersname: %{src_dn}  replace: modifytimestamp  modifytimestamp: %{fld2}  -" }
				id => "message-modify:02"
				add_field => {
					"[event][id]" => "modify:02"
					"[rsa][message][id1]" => "modify:02"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "add" {
		# MESSAGE add:01
		# line in RSA: <fld1>^^dn: <dst_dn>^^changetype: <action>^^<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}^^dn: %{dst_dn}^^changetype: %{action}^^%{info}" }
				id => "message-add:01"
				add_field => {
					"[event][id]" => "add:01"
					"[rsa][message][id1]" => "add:01"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
		# MESSAGE add
		# line in RSA: <fld1>  dn: <dst_dn>  changetype: <action>  <info>  modifiersName: <src_dn>  createTimestamp: <fld2>  modifyTimestamp: <fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}  dn: %{dst_dn}  changetype: %{action}  %{info}  modifiersName: %{src_dn}  createTimestamp: %{fld2}  modifyTimestamp: %{fld3}" }
				id => "message-add"
				add_field => {
					"[event][id]" => "add"
					"[rsa][message][id1]" => "add"
					"[event][categoryid]" => "1701010000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "delete" {
		# MESSAGE delete:01
		# line in RSA: <fld1>^^dn: <dst_dn>^^changetype: <action>^^<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}^^dn: %{dst_dn}^^changetype: %{action}^^%{info}" }
				id => "message-delete:01"
				add_field => {
					"[event][id]" => "delete:01"
					"[rsa][message][id1]" => "delete:01"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
		# MESSAGE delete
		# line in RSA: <fld1>  dn: <dst_dn>  changetype: <action>  modifiersname: <src_dn>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}  dn: %{dst_dn}  changetype: %{action}  modifiersname: %{src_dn}" }
				id => "message-delete"
				add_field => {
					"[event][id]" => "delete"
					"[rsa][message][id1]" => "delete"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "modrdn" {
		# MESSAGE modrdn:01
		# line in RSA: <fld1>^^dn: <dst_dn>^^changetype: <action>^^<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}^^dn: %{dst_dn}^^changetype: %{action}^^%{info}" }
				id => "message-modrdn:01"
				add_field => {
					"[event][id]" => "modrdn:01"
					"[rsa][message][id1]" => "modrdn:01"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
		# MESSAGE modrdn
		# line in RSA: <fld1>  dn: <dst_dn>  changetype: <action>  <info>  -  replace: modifiersname  modifiersname: <src_dn>  -  replace: modifytimestamp  modifytimestamp: <fld2>  -
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}  dn: %{dst_dn}  changetype: %{action}  %{info}  -  replace: modifiersname  modifiersname: %{src_dn}  -  replace: modifytimestamp  modifytimestamp: %{fld2}  -" }
				id => "message-modrdn"
				add_field => {
					"[event][id]" => "modrdn"
					"[rsa][message][id1]" => "modrdn"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{fld1}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyyMMddHHmmss" ] }
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: err=<result_code> tag=<fld1> nentries=<fld2> etime=<duration> csn=<fld3> notes=<fld4>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "err=%{result_code} tag=%{fld1} nentries=%{fld2} etime=%{duration} csn=%{fld3} notes=%{fld4}" }
			id => "msgParserId5"
			add_field => {
				"event_type" => "RESULT"
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: oid=<fld4>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "oid=%{fld4}" }
			id => "msgParserId6"
			add_field => {
				"event_type" => "EXT"
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: dn=<dst_dn>
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "dn=%{dst_dn}" }
			id => "msgParserId7"
			add_field => {
				"event_type" => "MOD"
				"[logstash][fullDateTimeString]" => "%{hfld1}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: base=<src_dn> scope=<fld5> filter=<fld6> attrs=<fld7>
	else if [logstash][msgparser][id] == "msgParserId8" {
		dissect {
			mapping => { "message" => "base=%{src_dn} scope=%{fld5} filter=%{fld6} attrs=%{fld7}" }
			id => "msgParserId8"
			add_field => {
				"event_type" => "SRCH"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: dn=<dst_dn> method=<fld7> version=<version>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "dn=%{dst_dn} method=%{fld7} version=%{version}" }
			id => "msgParserId9"
			add_field => {
				"event_type" => "BIND"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: targetop=<fld1> msgid=<fld2> nentries=<fld2> etime=<duration>
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "targetop=%{fld1} msgid=%{fld2} nentries=%{fld2} etime=%{duration}" }
			id => "msgParserId10"
			add_field => {
				"event_type" => "ABANDON"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: dn=<dst_dn>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "dn=%{dst_dn}" }
			id => "msgParserId11"
			add_field => {
				"event_type" => "ADD"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: dn=<dst_dn> newrdn=<fld4> newsuperior=<fld5>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "dn=%{dst_dn} newrdn=%{fld4} newsuperior=%{fld5}" }
			id => "msgParserId12"
			add_field => {
				"event_type" => "MODRDN"
				"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
		}
	}
	else if [logstash][msgparser][id] == "Oracle_DS" {
		# MESSAGE LDAP_Connection
		# line in RSA: <fld1> LDAP connection from <saddr>:<sport> to <daddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} LDAP connection from %{saddr}:%{sport} to %{daddr}" }
				id => "message-LDAP_Connection"
				add_field => {
				"event_type" => "LDAP connection"
					"[event][id]" => "LDAP_Connection"
					"[rsa][message][id1]" => "LDAP_Connection"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
			}
		}
		# MESSAGE UNBIND
		# line in RSA: UNBIND
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UNBIND" }
				id => "message-UNBIND"
				add_field => {
				"event_type" => "UNBIND"
					"[event][id]" => "UNBIND"
					"[rsa][message][id1]" => "UNBIND"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
			}
		}
		# MESSAGE closed
		# line in RSA:  closed.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "closed." }
				id => "message-closed"
				add_field => {
				"event_type" => "connection closed"
					"[event][id]" => "closed"
					"[rsa][message][id1]" => "closed"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
			}
		}
		# MESSAGE closing_connection
		# line in RSA:  closing from <saddr>:<sport> - U1 - Connection closed by unbind client <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "closing from %{saddr}:%{sport} - U1 - Connection closed by unbind client %{fld1}" }
				id => "message-closing_connection"
				add_field => {
				"event_type" => "connection closed"
					"[event][id]" => "closing_connection"
					"[rsa][message][id1]" => "closing_connection"
					"[event][categoryid]" => "1701020000"
					"[logstash][fullDateTimeString]" => "%{hfld1} %{hfld2}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "d/MMM/yyyy:HH:m:s " ] }
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-sunoneldapmsg.json"
#			template_name => "sunoneldap_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

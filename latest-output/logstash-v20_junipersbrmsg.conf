# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "junipersbr"
			"[observer][name]" => "Steel-Belted Radius"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %SBR-<hlevel>:<space>"<hdate>","<htime>","<hshost>","<messageid>",<!payload:hshost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):(?<space>[^\"]*)\"(?<hdate>[^\"]*)\",\"(?<htime>[^\"]*)\",\"(?<message>(?<hshost>[^\"]*)\",\"(?<messageid>[^\"]*)\",(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> (<hfld1>)<messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+\((?<hfld1>[^\)]*)\)(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> <hcount> <messageid> instance <!payload:hcount>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<hcount>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+instance[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> <hfld1> maintenance version <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+maintenance[\s]+version[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0051
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> <hfld1> full <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+full[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0051"
			add_field => {
				"[rsa][header][id]" => "0051"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> <messageid>() <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<messageid>[^\(]*)\(\)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> (<hfld1>)<messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+\((?<hfld1>[^\)]*)\)(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: %SBR-<hlevel>: <hdate> <htime> <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0080
	# line in RSA: %SBR-<hlevel>: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0080"
			add_field => {
				"[rsa][header][id]" => "0080"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0009
	# line in RSA: %SBR-<hlevel>:<space>"<hdate>","<htime>","<hshost>","<husername>","<messageid>",<!payload:hshost>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%SBR\-(?<hlevel>[^:]*):(?<space>[^\"]*)\"(?<hdate>[^\"]*)\",\"(?<htime>[^\"]*)\",\"(?<message>(?<hshost>[^\"]*)\",\"(?<husername>[^\"]*)\",\"(?<messageid>[^\"]*)\",(?<payload>.*))$" }
			id => "header-0009"
			add_field => {
				"[rsa][header][id]" => "0009"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_junipersbrmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA:  000:<event_description>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "000:%{event_description}" }
			id => "msgParserId0"
			add_field => {
				"action" => "Version identification"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA:  010:<event_description>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "010:%{event_description}" }
			id => "msgParserId1"
			add_field => {
				"action" => "Version identification"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA:  020:<event_description>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "020:%{event_description}" }
			id => "msgParserId2"
			add_field => {
				"action" => "Version identification"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:  030:<event_description>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "030:%{event_description}" }
			id => "msgParserId3"
			add_field => {
				"action" => "Version identification"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA:  050:<event_description>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "050:%{event_description}" }
			id => "msgParserId4"
			add_field => {
				"action" => "Version identification"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA:  040:<event_description>
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "040:%{event_description}" }
			id => "msgParserId5"
			add_field => {
				"action" => "Version identification"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Accounting" {
		# MESSAGE 000001
		# line in RSA:  Accounting request discarded due to lack of valid license
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Accounting request discarded due to lack of valid license" }
				id => "message-000001"
				add_field => {
				"action" => "Accounting request discarded"
				"result" => "lack of valid license"
					"[event][id]" => "000001"
					"[rsa][message][id1]" => "000001"
					"[event][categoryid]" => "1602020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000002
		# line in RSA:  Accounting start contains ip address <saddr> currently in use
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Accounting start contains ip address %{saddr} currently in use" }
				id => "message-000002"
				add_field => {
				"action" => "Accounting start contains ip address"
					"[event][id]" => "000002"
					"[rsa][message][id1]" => "000002"
					"[event][categoryid]" => "1602020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 002002
		# line in RSA:  Accounting Request
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Accounting Request" }
				id => "message-002002"
				add_field => {
				"action" => "Accounting Request"
					"[event][id]" => "002002"
					"[rsa][message][id1]" => "002002"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 002003
		# line in RSA:  Accounting Response
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Accounting Response" }
				id => "message-002003"
				add_field => {
				"action" => "Accounting Response"
					"[event][id]" => "002003"
					"[rsa][message][id1]" => "002003"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000089
		# line in RSA:  Accounting packet not from collection
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Accounting packet not from collection" }
				id => "message-000089"
				add_field => {
				"action" => "Accounting packet not from collection"
					"[event][id]" => "000089"
					"[rsa][message][id1]" => "000089"
					"[event][categoryid]" => "1602020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA:  Acct-Authentic : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "Acct-Authentic : Integer Value = %{info}" }
			id => "msgParserId11"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"action" => "Acct-Authentic"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA:  Acct-Input-Octets : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "Acct-Input-Octets : Integer Value = %{info}" }
			id => "msgParserId12"
			add_field => {
				"action" => "Acct-Input-Octets"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA:  Acct-Link-Count : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "Acct-Link-Count : Integer Value = %{info}" }
			id => "msgParserId13"
			add_field => {
				"action" => "Acct-Link-Count"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA:  Acct-Multi-Session-Id : String Value = <info>
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "Acct-Multi-Session-Id : String Value = %{info}" }
			id => "msgParserId14"
			add_field => {
				"action" => "Acct-Multi-Session-Id"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA:  Acct-Output-Octets : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "Acct-Output-Octets : Integer Value = %{info}" }
			id => "msgParserId15"
			add_field => {
				"action" => "Acct-Multi-Session-Id"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA:  Acct-Session-Id : String Value = <info>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "Acct-Session-Id : String Value = %{info}" }
			id => "msgParserId16"
			add_field => {
				"action" => "Acct-Session-Id"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA:  Acct-Session-Time : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "Acct-Session-Time : Integer Value = %{info}" }
			id => "msgParserId17"
			add_field => {
				"action" => "Acct-Session-Time"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA:  Acct-Status-Type : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "Acct-Status-Type : Integer Value = %{info}" }
			id => "msgParserId18"
			add_field => {
				"action" => "Acct-Status-Type"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA:  Acct-Termination-Cause : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "Acct-Termination-Cause : Integer Value = %{info}" }
			id => "msgParserId19"
			add_field => {
				"action" => "Acct-Termination-Cause"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Created" {
		# MESSAGE 000202
		# line in RSA:  Created new session record with Class attribute.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Created new session record with Class attribute." }
				id => "message-000202"
				add_field => {
				"action" => "Created new session record"
					"[event][id]" => "000202"
					"[rsa][message][id1]" => "000202"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000099
		# line in RSA:  Created new session record without Class attribute for user <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Created new session record without Class attribute for user %{fld1}" }
				id => "message-000099"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"action" => "Created new session record without Class attribute for user."
					"[event][id]" => "000099"
					"[rsa][message][id1]" => "000099"
					"[event][categoryid]" => "1701060000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Created_03
		# line in RSA:  Created instance of named pipe called <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Created instance of named pipe called %{filename}" }
				id => "message-Created_03"
				add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"action" => "Created instance of named pipe."
					"[event][id]" => "Created_03"
					"[rsa][message][id1]" => "Created_03"
					"[event][categoryid]" => "1701060000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Created_04
		# line in RSA:  Created phantom session object with no Class attribute.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Created phantom session object with no Class attribute." }
				id => "message-Created_04"
				add_field => {
				"action" => "Created phantom session object with no Class attribute."
					"[event][id]" => "Created_04"
					"[rsa][message][id1]" => "Created_04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Determined" {
		# MESSAGE 000203
		# line in RSA:  Determined that <username> authenticated by plug-in module is the user
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Determined that %{username} authenticated by plug-in module is the user" }
				id => "message-000203"
				add_field => {
				"action" => "Determined authenticated user"
					"[event][id]" => "000203"
					"[rsa][message][id1]" => "000203"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Determined_01
		# line in RSA:  Determined that <fld1> of class <fld2> is the user
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Determined that %{fld1} of class %{fld2} is the user" }
				id => "message-Determined_01"
				add_field => {
				"action" => "Determined that user is of a particular class."
					"[event][id]" => "Determined_01"
					"[rsa][message][id1]" => "Determined_01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "admin" {
		# MESSAGE 000003
		# line in RSA:  admin interface (<web_method>): Retrieval of URI [<webpage>] failed with internal error <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "admin interface (%{web_method}): Retrieval of URI [%{webpage}] failed with internal error %{resultcode}" }
				id => "message-000003"
				add_field => {
				"ec_subject" => "File"
				"ec_activity" => "Request"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"action" => "URI failed"
					"[event][id]" => "000003"
					"[rsa][message][id1]" => "000003"
					"[event][categoryid]" => "1603090000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000004
		# line in RSA:  admin interface (<web_method>): URI [<webpage>] failed because query strings are not supported for <network_service>:<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "admin interface (%{web_method}): URI [%{webpage}] failed because query strings are not supported for %{network_service}:%{fld1}" }
				id => "message-000004"
				add_field => {
				"ec_subject" => "File"
				"ec_activity" => "Request"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"action" => "URI failed"
				"result" => "query strings are not supported"
					"[event][id]" => "000004"
					"[rsa][message][id1]" => "000004"
					"[event][categoryid]" => "1603090000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000005
		# line in RSA:  admin interface (<web_method>): URI {[<webpage>] not found|[<webpage>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*admin[\s]+interface[\s]+\((?<web_method>[^\)]*)\):[\s]+URI[\s]+(\[(?<webpage>[^\]]*)\][\s]+not[\s]+found|\[(?<webpage>.*))$" }
				id => "message-000005"
				add_field => {
				"ec_subject" => "File"
				"ec_activity" => "Request"
				"ec_theme" => "ALM"
				"action" => "URI not found"
					"[event][id]" => "000005"
					"[rsa][message][id1]" => "000005"
					"[event][categoryid]" => "1603090000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000006
		# line in RSA: admin session assigning access level '<privilege>' to user '<fld1>\<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "admin session assigning access level '%{privilege}' to user '%{fld1}\%{username}'" }
				id => "message-000006"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "UserGroup"
				"action" => "assigning access level"
					"[event][id]" => "000006"
					"[rsa][message][id1]" => "000006"
					"[event][categoryid]" => "1402030000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000007
		# line in RSA:  admin interface discarded invalid request
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "admin interface discarded invalid request" }
				id => "message-000007"
				add_field => {
				"ec_theme" => "ALM"
				"action" => "admin interface discarded"
				"result" => "invalid request"
					"[event][id]" => "000007"
					"[rsa][message][id1]" => "000007"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId27
	# line in RSA:  Appending echo values, if any
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "Appending echo values, if any" }
			id => "msgParserId27"
			add_field => {
				"action" => "Appending echo values"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "WINAUTH" {
		# MESSAGE 000113
		# line in RSA:  WINAUTH:  NTSTATUS = <fld1> / Win Error = <fld2>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WINAUTH:  NTSTATUS = %{fld1} / Win Error = %{fld2}." }
				id => "message-000113"
				add_field => {
				"action" => "Error"
					"[event][id]" => "000113"
					"[rsa][message][id1]" => "000113"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000106
		# line in RSA:  WINAUTH (<fld1>): Attempting to authenticate user <username> in domain CORP.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WINAUTH (%{fld1}): Attempting to authenticate user %{username} in domain CORP." }
				id => "message-000106"
				add_field => {
				"ec_subject" => "Process"
				"ec_activity" => "Logon"
				"ec_theme" => "ALM"
				"action" => "Attempting to authenticate"
					"[event][id]" => "000106"
					"[rsa][message][id1]" => "000106"
					"[event][categoryid]" => "1603090000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000107
		# line in RSA:  <fld1> Logon failure: unknown user name or bad password.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} Logon failure: unknown user name or bad password." }
				id => "message-000107"
				add_field => {
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "Logon failure"
					"[event][id]" => "000107"
					"[rsa][message][id1]" => "000107"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000115
		# line in RSA:  WINAUTH: LsaLogon returned <fld3>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WINAUTH: LsaLogon returned %{fld3}." }
				id => "message-000115"
				add_field => {
				"action" => "returned"
					"[event][id]" => "000115"
					"[rsa][message][id1]" => "000115"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001137
		# line in RSA: WINAUTH: Enumerating groups of expired user: <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "WINAUTH: Enumerating groups of expired user: %{username}" }
				id => "message-001137"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"event_description" => "Enumerating groups of expired user"
					"[event][id]" => "001137"
					"[rsa][message][id1]" => "001137"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Authenticating" {
		# MESSAGE 000109
		# line in RSA:  Authenticating user <username> with authentication method SQL
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authenticating user %{username} with authentication method SQL" }
				id => "message-000109"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"action" => "Authenticating user "
					"[event][id]" => "000109"
					"[rsa][message][id1]" => "000109"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000110
		# line in RSA:  Authenticating user <username> with authentication method Windows Domain Group
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authenticating user %{username} with authentication method Windows Domain Group" }
				id => "message-000110"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"action" => "Authenticating user "
					"[event][id]" => "000110"
					"[rsa][message][id1]" => "000110"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000093
		# line in RSA:  Authenticating user <username> with authentication method Native User
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authenticating user %{username} with authentication method Native User" }
				id => "message-000093"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"action" => "Authenticating user "
					"[event][id]" => "000093"
					"[rsa][message][id1]" => "000093"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000095
		# line in RSA:  Authenticating user <username> with authentication method Windows Domain User
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authenticating user %{username} with authentication method Windows Domain User" }
				id => "message-000095"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"action" => "Authenticating user "
					"[event][id]" => "000095"
					"[rsa][message][id1]" => "000095"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Authenticating_06
		# line in RSA:  Authenticating user <fld1> with authentication method SecurID User
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authenticating user %{fld1} with authentication method SecurID User" }
				id => "message-Authenticating_06"
				add_field => {
				"action" => "Authenticating user."
					"[event][id]" => "Authenticating_06"
					"[rsa][message][id1]" => "Authenticating_06"
					"[event][categoryid]" => "1304000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Authentication" {
		# MESSAGE 000008
		# line in RSA: Authentication Rejection Results:
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication Rejection Results:" }
				id => "message-000008"
				add_field => {
				"action" => "Authentication Rejection"
					"[event][id]" => "000008"
					"[rsa][message][id1]" => "000008"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000111
		# line in RSA:  Authentication Request
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication Request" }
				id => "message-000111"
				add_field => {
				"action" => "Authentication Request"
					"[event][id]" => "000111"
					"[rsa][message][id1]" => "000111"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000112
		# line in RSA:  Authentication Response
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication Response" }
				id => "message-000112"
				add_field => {
				"action" => "Authentication Response"
					"[event][id]" => "000112"
					"[rsa][message][id1]" => "000112"
					"[event][categoryid]" => "1302010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA:  Auto-configuring server <info> addresses
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "Auto-configuring server %{info} addresses" }
			id => "msgParserId36"
			add_field => {
				"action" => "Auto-configuring"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId37
	# line in RSA:  Calling-Station-Id : String Value = <info>
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "Calling-Station-Id : String Value = %{info}" }
			id => "msgParserId37"
			add_field => {
				"action" => "Calling-Station-Id"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Class" {
		# MESSAGE 001010
		# line in RSA:  Class subattribute: DistName : String Value = <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Class subattribute: DistName : String Value = %{info}" }
				id => "message-001010"
				add_field => {
				"action" => "Class subattribute"
					"[event][id]" => "001010"
					"[rsa][message][id1]" => "001010"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001011
		# line in RSA:  Class subattribute: AuthType : String Value = <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Class subattribute: AuthType : String Value = %{info}" }
				id => "message-001011"
				add_field => {
				"action" => "Class subattribute"
					"[event][id]" => "001011"
					"[rsa][message][id1]" => "001011"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001012
		# line in RSA:  Class subattribute: TransactionId : Value = <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Class subattribute: TransactionId : Value = %{info}" }
				id => "message-001012"
				add_field => {
				"action" => "Class subattribute"
					"[event][id]" => "001012"
					"[rsa][message][id1]" => "001012"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001013
		# line in RSA:  Class : Value =<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Class : Value =%{info}" }
				id => "message-001013"
				add_field => {
				"action" => "Class subattribute"
					"[event][id]" => "001013"
					"[rsa][message][id1]" => "001013"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Class_14
		# line in RSA:  Class subattribute: IpAddr : String Value = <fld1>:<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Class subattribute: IpAddr : String Value = %{fld1}:%{fld2}" }
				id => "message-Class_14"
				add_field => {
				"action" => "Class subattribute: IpAddr"
					"[event][id]" => "Class_14"
					"[rsa][message][id1]" => "Class_14"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Class_15
		# line in RSA:  Class subattribute: SessionId : Integer Value = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Class subattribute: SessionId : Integer Value = %{fld1}" }
				id => "message-Class_15"
				add_field => {
				"action" => "Class subattribute: SessionId"
					"[event][id]" => "Class_15"
					"[rsa][message][id1]" => "Class_15"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Class_16
		# line in RSA:  Class : String Value = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Class : String Value = %{fld1}" }
				id => "message-Class_16"
				add_field => {
					"[event][id]" => "Class_16"
					"[rsa][message][id1]" => "Class_16"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Client" {
		# MESSAGE 000010
		# line in RSA: Client product information not found, Silently discarding
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client product information not found, Silently discarding" }
				id => "message-000010"
				add_field => {
				"action" => "Silently discarding"
					"[event][id]" => "000010"
					"[rsa][message][id1]" => "000010"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001014
		# line in RSA:  Client Name = <username> Dictionary Name = <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Client Name = %{username} Dictionary Name = %{info}" }
				id => "message-001014"
				add_field => {
					"[event][id]" => "001014"
					"[rsa][message][id1]" => "001014"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId44
	# line in RSA:  Comparing checklist items with user/profile items 
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "Comparing checklist items with user/profile items" }
			id => "msgParserId44"
			add_field => {
				"action" => "Comparing checklist items"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId45
	# line in RSA:  Completed server shutdown process
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "Completed server shutdown process" }
			id => "msgParserId45"
			add_field => {
				"action" => "server shutdown"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId46
	# line in RSA:  Configured server IP address:<fld1>
	else if [logstash][msgparser][id] == "msgParserId46" {
		dissect {
			mapping => { "message" => "Configured server IP address:%{fld1}" }
			id => "msgParserId46"
			add_field => {
				"action" => "server IP configured"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Configuring" {
		# MESSAGE 000013
		# line in RSA: Configuring administrators: deleting user '<fld1>\<username>' of level '<privilege>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuring administrators: deleting user '%{fld1}\%{username}' of level '%{privilege}'" }
				id => "message-000013"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"action" => "deleting user"
					"[event][id]" => "000013"
					"[rsa][message][id1]" => "000013"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000213
		# line in RSA: Configuring administrators: deleting '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuring administrators: deleting '%{username}'" }
				id => "message-000213"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "UserGroup"
				"action" => "deleting user"
					"[event][id]" => "000213"
					"[rsa][message][id1]" => "000213"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000313
		# line in RSA: Configuring administrators: adding user '<fld1>\<username>' of level '<privilege>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuring administrators: adding user '%{fld1}\%{username}' of level '%{privilege}'" }
				id => "message-000313"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"action" => "adding user"
					"[event][id]" => "000313"
					"[rsa][message][id1]" => "000313"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000413
		# line in RSA: Configuring administrators: adding '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuring administrators: adding '%{username}'" }
				id => "message-000413"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Create"
				"ec_theme" => "UserGroup"
				"action" => "adding user"
					"[event][id]" => "000413"
					"[rsa][message][id1]" => "000413"
					"[event][categoryid]" => "1402020100"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA:  <action> 
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "%{action}" }
			id => "msgParserId51"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "CRadManagedServerUpdate" {
		# MESSAGE 000014
		# line in RSA:  <fld1>::DoStart <shost> is <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}::DoStart %{shost} is %{info}" }
				id => "message-000014"
				add_field => {
				"action" => "DoStart"
					"[event][id]" => "000014"
					"[rsa][message][id1]" => "000014"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000015
		# line in RSA:  <fld1>::ProcessFile is updating document:<filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}::ProcessFile is updating document:%{filename}" }
				id => "message-000015"
				add_field => {
				"action" => "updating document"
					"[event][id]" => "000015"
					"[rsa][message][id1]" => "000015"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000098
		# line in RSA:  <fld1>::ProcessPackage complete for stamp: <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}::ProcessPackage complete for stamp: %{fld2}" }
				id => "message-000098"
				add_field => {
				"action" => "ProcessPackage complete for stamp"
					"[event][id]" => "000098"
					"[rsa][message][id1]" => "000098"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE CRadManagedServerUpdate_01
		# line in RSA:  CRadManagedServerUpdate::DownloadPackage HTTP POST error: <fld1> <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CRadManagedServerUpdate::DownloadPackage HTTP POST error: %{fld1} %{fld2}" }
				id => "message-CRadManagedServerUpdate_01"
				add_field => {
				"action" => "CRadManagedServerUpdate::DownloadPackage HTTP POST error"
					"[event][id]" => "CRadManagedServerUpdate_01"
					"[rsa][message][id1]" => "CRadManagedServerUpdate_01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE CRadManagedServerUpdate_02
		# line in RSA:  CRadManagedServerUpdate::DownloadPackage exceeded iterations limit while communicating with <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CRadManagedServerUpdate::DownloadPackage exceeded iterations limit while communicating with %{fld1}" }
				id => "message-CRadManagedServerUpdate_02"
				add_field => {
				"action" => "CRadManagedServerUpdate::DownloadPackage exceeded iterations limit while communicating."
					"[event][id]" => "CRadManagedServerUpdate_02"
					"[rsa][message][id1]" => "CRadManagedServerUpdate_02"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "DCF" {
		# MESSAGE 000016
		# line in RSA:  DCF system { shutting | shut } down
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*DCF[\s]+system[\s]+([\s]*shutting[\s]+|[\s]*shut[\s]+)[\s]+down$" }
				id => "message-000016"
				add_field => {
				"action" => "system shut down"
					"[event][id]" => "000016"
					"[rsa][message][id1]" => "000016"
					"[event][categoryid]" => "1611000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000017
		# line in RSA: DCF system started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "DCF system started" }
				id => "message-000017"
				add_field => {
				"action" => "system started"
					"[event][id]" => "000017"
					"[rsa][message][id1]" => "000017"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Determining" {
		# MESSAGE 000075
		# line in RSA:  Determining if this radius should act as a proxy
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Determining if this radius should act as a proxy" }
				id => "message-000075"
				add_field => {
				"action" => "Determining if this radius should act as a proxy"
					"[event][id]" => "000075"
					"[rsa][message][id1]" => "000075"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000175
		# line in RSA:  Determining if request is for a tunnel
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Determining if request is for a tunnel" }
				id => "message-000175"
				add_field => {
				"action" => "Determining request"
					"[event][id]" => "000175"
					"[rsa][message][id1]" => "000175"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000176
		# line in RSA:  Determining user class
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Determining user class" }
				id => "message-000176"
				add_field => {
				"action" => "Determining user class"
					"[event][id]" => "000176"
					"[rsa][message][id1]" => "000176"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId60
	# line in RSA:  diag <fld1>: state = <fld2>, error = <info>.
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "diag %{fld1}: state = %{fld2}, error = %{info}." }
			id => "msgParserId60"
			add_field => {
				"action" => "diag"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId61
	# line in RSA:  Doing inventory check on request
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "Doing inventory check on request" }
			id => "msgParserId61"
			add_field => {
				"action" => "Doing inventory check on request"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId62
	# line in RSA:  Domain user authentication failed with err = <info>
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "Domain user authentication failed with err = %{info}" }
			id => "msgParserId62"
			add_field => {
				"action" => "Domain user authentication failed"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Error" {
		# MESSAGE 000018
		# line in RSA:  Error in admin session: User authentication fails
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error in admin session: User authentication fails" }
				id => "message-000018"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "User authentication fails"
				"result" => "Error in admin session"
					"[event][id]" => "000018"
					"[rsa][message][id1]" => "000018"
					"[event][categoryid]" => "1301010000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000019
		# line in RSA:  Error condition:<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error condition:%{result}" }
				id => "message-000019"
				add_field => {
				"action" => "Error condition"
					"[event][id]" => "000019"
					"[rsa][message][id1]" => "000019"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000020
		# line in RSA:  Error allocating dynamic resources, Rejecting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error allocating dynamic resources, Rejecting" }
				id => "message-000020"
				add_field => {
				"action" => "Rejecting"
				"result" => "Error allocating dynamic resources"
					"[event][id]" => "000020"
					"[rsa][message][id1]" => "000020"
					"[event][categoryid]" => "1603090000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001118
		# line in RSA:  Error <fld1> returned from DsEnumerateDomainTrusts call
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error %{fld1} returned from DsEnumerateDomainTrusts call" }
				id => "message-001118"
				add_field => {
				"action" => "Error returned from DsEnumerateDomainTrusts call"
					"[event][id]" => "001118"
					"[rsa][message][id1]" => "001118"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001133
		# line in RSA:  Error encountered trying to register <filename> - <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Error encountered trying to register %{filename} - %{result}" }
				id => "message-001133"
				add_field => {
				"action" => "error while registeration due to failed authentication"
					"[event][id]" => "001133"
					"[rsa][message][id1]" => "001133"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Extended" {
		# MESSAGE 000021
		# line in RSA: Extended Proxy is not a licensed feature: upgrade required
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Extended Proxy is not a licensed feature: upgrade required" }
				id => "message-000021"
				add_field => {
				"action" => "upgrade required"
					"[event][id]" => "000021"
					"[rsa][message][id1]" => "000021"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001122
		# line in RSA: Extended Proxy: Updating realm configuration
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Extended Proxy: Updating realm configuration" }
				id => "message-001122"
				add_field => {
				"action" => "Updating realm configuration"
					"[event][id]" => "001122"
					"[rsa][message][id1]" => "001122"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "F" {
		# MESSAGE 001022
		# line in RSA:  <filename> radAuthHandleRequest() <fld1> Entering
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{filename} radAuthHandleRequest() %{fld1} Entering" }
				id => "message-001022"
				add_field => {
				"action" => "radAuthHandleRequest() Entering"
					"[event][id]" => "001022"
					"[rsa][message][id1]" => "001022"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001023
		# line in RSA:  <filename> radAuthHandleRequest() <fld1> Exiting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{filename} radAuthHandleRequest() %{fld1} Exiting" }
				id => "message-001023"
				add_field => {
				"action" => "radAuthHandleRequest() Entering"
					"[event][id]" => "001023"
					"[rsa][message][id1]" => "001023"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId69
	# line in RSA:  Framed-IP-Address : IPAddress = <saddr>
	else if [logstash][msgparser][id] == "msgParserId69" {
		dissect {
			mapping => { "message" => "Framed-IP-Address : IPAddress = %{saddr}" }
			id => "msgParserId69"
			add_field => {
				"action" => "Framed-IP-Address"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Getting" {
		# MESSAGE 001083
		# line in RSA:  Getting client product information
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Getting client product information" }
				id => "message-001083"
				add_field => {
				"action" => "Getting client product information"
					"[event][id]" => "001083"
					"[rsa][message][id1]" => "001083"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001084
		# line in RSA:  Getting info on requesting client
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Getting info on requesting client" }
				id => "message-001084"
				add_field => {
				"action" => "Getting info on requesting client"
					"[event][id]" => "001084"
					"[rsa][message][id1]" => "001084"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001085
		# line in RSA:  Getting profile info for requesting user
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Getting profile info for requesting user" }
				id => "message-001085"
				add_field => {
				"action" => "Getting profile info for requesting user"
					"[event][id]" => "001085"
					"[rsa][message][id1]" => "001085"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Getting_04
		# line in RSA:  Getting attribute info on requesting user
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Getting attribute info on requesting user" }
				id => "message-Getting_04"
				add_field => {
				"action" => "Getting attribute info on requesting user"
					"[event][id]" => "Getting_04"
					"[rsa][message][id1]" => "Getting_04"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId73
	# line in RSA:  Initializing cache entry
	else if [logstash][msgparser][id] == "msgParserId73" {
		dissect {
			mapping => { "message" => "Initializing cache entry" }
			id => "msgParserId73"
			add_field => {
				"action" => "Initializing cache entry"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId74
	# line in RSA:  In admin session: User { <shost>\<username> | <username> } is authenticated
	else if [logstash][msgparser][id] == "msgParserId74" {
		grok {
			match => { "message" => "^[\s]*In[\s]+admin[\s]+session:[\s]+User[\s]+([\s]*(?<shost>[^\\]*)\\(?<username>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+is[\s]+authenticated$" }
			id => "msgParserId74"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"action" => "User is authenticated"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Initialized" {
		# MESSAGE 000024
		# line in RSA:  Initialized Radius socket address <saddr> port <sport> (receive buffer size <bytes> bytes)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Initialized Radius socket address %{saddr} port %{sport} (receive buffer size %{bytes} bytes)" }
				id => "message-000024"
				add_field => {
				"action" => "Initialized socket"
					"[event][id]" => "000024"
					"[rsa][message][id1]" => "000024"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000025
		# line in RSA:  Initialized <filename> referenced in <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Initialized %{filename} referenced in %{info}" }
				id => "message-000025"
				add_field => {
				"action" => "Initialized"
					"[event][id]" => "000025"
					"[rsa][message][id1]" => "000025"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId77
	# line in RSA:  InstanceID = <group>, Result =<result>
	else if [logstash][msgparser][id] == "msgParserId77" {
		dissect {
			mapping => { "message" => "InstanceID = %{group}, Result =%{result}" }
			id => "msgParserId77"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId78
	# line in RSA: <fld1>","<action>",{"<fld2>"|<fld2>},<fld3>,{"<domain>\<username>"| "<username>"|<username>},{"<saddr>"|<saddr>},{"<sport>"|<sport>},<fld4>,{"<protocol>"|<protocol>},{"<daddr>"|<daddr>},<fld5>,<fld6>,<fld7>,<fld8>,<fld9>,<fld10>,{"<service>"|<service>},{"<dport>"|<dport>},<fld11>,<fld12>,<fld13>,<fld14>,<fld15>,<fld16>,<fld17>,<fld18>,<fld19>,{"<fld20>"|<fld20>},{"<fld21>"|<fld21>},<fld22>,{"<fld23>"|<fld23>},<fld24>,{"<rbytes>"|<rbytes>},{"<sbytes>"|<sbytes>},{"<fld25>"|<fld25>},<fld26>,{"<duration>"|<duration>},<fld27>,<fld28>,{"<result>"|<result>},<fld29>,<fld30>,<fld31>,<fld32>,<fld33>,<fld34>,<fld35>,<fld36>,<fld37>,{"<group>"|<group>},<fld38>,<fld39>,<fld40>,<fld41>,{"<info>"|<info>},<fld42>,<fld43>,<fld44>,{"<fld45>"|<fld45>},<fld46>,<fld47>,{"<version>"|<version>},<fld48>
	else if [logstash][msgparser][id] == "msgParserId78" {
		grok {
			match => { "message" => "^(?<fld1>[^\"]*)\",\"(?<action>[^\"]*)\",(\"(?<fld2>[^\"]*)\"|(?<fld2>[^,]*)),(?<fld3>[^,]*),(\"(?<domain>[^\\]*)\\(?<username>[^\"]*)\"|[\s]*\"(?<username>[^\"]*)\"|(?<username>[^,]*)),(\"(?<saddr>[^\"]*)\"|(?<saddr>[^,]*)),(\"(?<sport>[^\"]*)\"|(?<sport>[^,]*)),(?<fld4>[^,]*),(\"(?<protocol>[^\"]*)\"|(?<protocol>[^,]*)),(\"(?<daddr>[^\"]*)\"|(?<daddr>[^,]*)),(?<fld5>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(\"(?<service>[^\"]*)\"|(?<service>[^,]*)),(\"(?<dport>[^\"]*)\"|(?<dport>[^,]*)),(?<fld11>[^,]*),(?<fld12>[^,]*),(?<fld13>[^,]*),(?<fld14>[^,]*),(?<fld15>[^,]*),(?<fld16>[^,]*),(?<fld17>[^,]*),(?<fld18>[^,]*),(?<fld19>[^,]*),(\"(?<fld20>[^\"]*)\"|(?<fld20>[^,]*)),(\"(?<fld21>[^\"]*)\"|(?<fld21>[^,]*)),(?<fld22>[^,]*),(\"(?<fld23>[^\"]*)\"|(?<fld23>[^,]*)),(?<fld24>[^,]*),(\"(?<rbytes>[^\"]*)\"|(?<rbytes>[^,]*)),(\"(?<sbytes>[^\"]*)\"|(?<sbytes>[^,]*)),(\"(?<fld25>[^\"]*)\"|(?<fld25>[^,]*)),(?<fld26>[^,]*),(\"(?<duration>[^\"]*)\"|(?<duration>[^,]*)),(?<fld27>[^,]*),(?<fld28>[^,]*),(\"(?<result>[^\"]*)\"|(?<result>[^,]*)),(?<fld29>[^,]*),(?<fld30>[^,]*),(?<fld31>[^,]*),(?<fld32>[^,]*),(?<fld33>[^,]*),(?<fld34>[^,]*),(?<fld35>[^,]*),(?<fld36>[^,]*),(?<fld37>[^,]*),(\"(?<group>[^\"]*)\"|(?<group>[^,]*)),(?<fld38>[^,]*),(?<fld39>[^,]*),(?<fld40>[^,]*),(?<fld41>[^,]*),(\"(?<info>[^\"]*)\"|(?<info>[^,]*)),(?<fld42>[^,]*),(?<fld43>[^,]*),(?<fld44>[^,]*),(\"(?<fld45>[^\"]*)\"|(?<fld45>[^,]*)),(?<fld46>[^,]*),(?<fld47>[^,]*),(\"(?<version>[^\"]*)\"|(?<version>[^,]*)),(?<fld48>.*)$" }
			id => "msgParserId78"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "license" {
		# MESSAGE 000027
		# line in RSA:  license string <fld1> additional info
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "license string %{fld1} additional info" }
				id => "message-000027"
				add_field => {
				"action" => "additional info"
					"[event][id]" => "000027"
					"[rsa][message][id1]" => "000027"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000022
		# line in RSA:  license
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "license" }
				id => "message-000022"
				add_field => {
				"action" => "full license"
					"[event][id]" => "000022"
					"[rsa][message][id1]" => "000022"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId81
	# line in RSA:  Licensed for <info> Edition
	else if [logstash][msgparser][id] == "msgParserId81" {
		dissect {
			mapping => { "message" => "Licensed for %{info} Edition" }
			id => "msgParserId81"
			add_field => {
				"action" => "Licensed"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId82
	# line in RSA:  Matched <saddr> to RAS client <username>
	else if [logstash][msgparser][id] == "msgParserId82" {
		dissect {
			mapping => { "message" => "Matched %{saddr} to RAS client %{username}" }
			id => "msgParserId82"
			add_field => {
				"action" => "Matched to RAS client"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Merging" {
		# MESSAGE 001076
		# line in RSA:  Merging profile info with user info
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Merging profile info with user info" }
				id => "message-001076"
				add_field => {
				"action" => "Merging profile info with user info"
					"[event][id]" => "001076"
					"[rsa][message][id1]" => "001076"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001077
		# line in RSA:  Merging saved attributes with user info
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Merging saved attributes with user info" }
				id => "message-001077"
				add_field => {
				"action" => "Merging saved attributes with user info"
					"[event][id]" => "001077"
					"[rsa][message][id1]" => "001077"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Missing" {
		# MESSAGE 000030
		# line in RSA:  Missing checklist attribute <info> for user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Missing checklist attribute %{info} for user %{username}" }
				id => "message-000030"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "Missing checklist attribute"
					"[event][id]" => "000030"
					"[rsa][message][id1]" => "000030"
					"[event][categoryid]" => "1301020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000031
		# line in RSA:  Missing <info> attribute in request
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Missing %{info} attribute in request" }
				id => "message-000031"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "Missing attribute in request"
					"[event][id]" => "000031"
					"[rsa][message][id1]" => "000031"
					"[event][categoryid]" => "1301020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId87
	# line in RSA:  NAS-ID in request: "<info>"
	else if [logstash][msgparser][id] == "msgParserId87" {
		dissect {
			mapping => { "message" => "NAS-ID in request: \"%{info}\"" }
			id => "msgParserId87"
			add_field => {
				"action" => "NAS-ID"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId88
	# line in RSA:  NAS-Identifier : String Value = <info>
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "NAS-Identifier : String Value = %{info}" }
			id => "msgParserId88"
			add_field => {
				"action" => "NAS-Identifier"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "NAS-IP-Address" {
		# MESSAGE 000074
		# line in RSA:  NAS-IP-Address in request: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NAS-IP-Address in request: %{info}" }
				id => "message-000074"
				add_field => {
				"action" => "NAS-IP-Address in request"
					"[event][id]" => "000074"
					"[rsa][message][id1]" => "000074"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001034
		# line in RSA:  NAS-IP-Address : IPAddress = <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "NAS-IP-Address : IPAddress = %{info}" }
				id => "message-001034"
				add_field => {
				"action" => "NAS-IP-Address"
					"[event][id]" => "001034"
					"[rsa][message][id1]" => "001034"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId91
	# line in RSA:  NAS-Port : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "NAS-Port : Integer Value = %{info}" }
			id => "msgParserId91"
			add_field => {
				"action" => "NAS-Port"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId92
	# line in RSA:  NAS-Port-Type : Integer Value = <info>
	else if [logstash][msgparser][id] == "msgParserId92" {
		dissect {
			mapping => { "message" => "NAS-Port-Type : Integer Value = %{info}" }
			id => "msgParserId92"
			add_field => {
				"action" => "NAS-Port-Type"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId93
	# line in RSA:  New license <fld1> registered
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "New license %{fld1} registered" }
			id => "msgParserId93"
			add_field => {
				"action" => "registered"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId94
	# line in RSA:  No administrative {groups|users} found in <filename>
	else if [logstash][msgparser][id] == "msgParserId94" {
		grok {
			match => { "message" => "^[\s]*No[\s]+administrative[\s]+(groups|users)[\s]+found[\s]+in[\s]+(?<filename>.*)$" }
			id => "msgParserId94"
			add_field => {
				"ec_theme" => "ALM"
				"action" => "No administrative groups or users found"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId95
	# line in RSA:  NT domain authentication enabled
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "NT domain authentication enabled" }
			id => "msgParserId95"
			add_field => {
				"action" => "authentication enabled"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Packet" {
		# MESSAGE 001036
		# line in RSA:  Packet : Code = <fld1> ID = <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Packet : Code = %{fld1} ID = %{fld2}" }
				id => "message-001036"
				add_field => {
					"[event][id]" => "001036"
					"[rsa][message][id1]" => "001036"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001037
		# line in RSA:  Packet containing <sbytes> bytes successfully sent
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Packet containing %{sbytes} bytes successfully sent" }
				id => "message-001037"
				add_field => {
					"[event][id]" => "001037"
					"[rsa][message][id1]" => "001037"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId98
	# line in RSA:  Parsed Packet { = | =<info> }
	else if [logstash][msgparser][id] == "msgParserId98" {
		grok {
			match => { "message" => "^[\s]*Parsed[\s]+Packet[\s]+([\s]*=[\s]+|[\s]*=(?<info>[^\s]*)[\s]+)$" }
			id => "msgParserId98"
			add_field => {
				"action" => "Parsed Packet"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId99
	# line in RSA:  perfmon pipe <filename> terminating due to shutdown
	else if [logstash][msgparser][id] == "msgParserId99" {
		dissect {
			mapping => { "message" => "perfmon pipe %{filename} terminating due to shutdown" }
			id => "msgParserId99"
			add_field => {
				"action" => "pipe terminating"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId100
	# line in RSA:  PerfMon Pipe Error:<result> 
	else if [logstash][msgparser][id] == "msgParserId100" {
		dissect {
			mapping => { "message" => "PerfMon Pipe Error:%{result}" }
			id => "msgParserId100"
			add_field => {
				"action" => "PerfMon Pipe Error"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "ProcessAccountingRequest" {
		# MESSAGE 001040
		# line in RSA:  ProcessAccountingRequest: new-style class attribute contains dn <username>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ProcessAccountingRequest: new-style class attribute contains dn %{username}." }
				id => "message-001040"
				add_field => {
				"action" => "ProcessAccountingRequest"
					"[event][id]" => "001040"
					"[rsa][message][id1]" => "001040"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000104
		# line in RSA:  ProcessAccountingRequest: no dn in new-style class attribute
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ProcessAccountingRequest: no dn in new-style class attribute" }
				id => "message-000104"
				add_field => {
				"action" => "ProcessAccountingRequest"
					"[event][id]" => "000104"
					"[rsa][message][id1]" => "000104"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Proxy" {
		# MESSAGE 001041
		# line in RSA:  Proxy Error: Proxy Request believed to be of the right form but did not have a proxy match in data base
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Proxy Error: Proxy Request believed to be of the right form but did not have a proxy match in data base" }
				id => "message-001041"
				add_field => {
				"action" => "Proxy Error: Proxy Request believed to be of the right form but did not have a proxy match in data base"
					"[event][id]" => "001041"
					"[rsa][message][id1]" => "001041"
					"[event][categoryid]" => "1602020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000038
		# line in RSA:  Proxy Error: no username in request - request not proxy forwarded
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Proxy Error: no username in request - request not proxy forwarded" }
				id => "message-000038"
				add_field => {
				"action" => "Proxy error"
				"result" => "no username in request"
					"[event][id]" => "000038"
					"[rsa][message][id1]" => "000038"
					"[event][categoryid]" => "1603110000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Radius" {
		# MESSAGE 000039
		# line in RSA:  Radius { Accounting | Authentication } Server started ...
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Radius[\s]+([\s]*Accounting[\s]+|[\s]*Authentication[\s]+)[\s]+Server[\s]+started[\s]+\.\.\.$" }
				id => "message-000039"
				add_field => {
				"action" => "Server started"
					"[event][id]" => "000039"
					"[rsa][message][id1]" => "000039"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000040
		# line in RSA:  Radius Administration Server Initialization Complete
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Radius Administration Server Initialization Complete" }
				id => "message-000040"
				add_field => {
				"action" => "Server Initialization Complete"
					"[event][id]" => "000040"
					"[rsa][message][id1]" => "000040"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "radUpdateCompiler" {
		# MESSAGE 000041
		# line in RSA:  <fld1>::CommitUpdates for provider <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}::CommitUpdates for provider %{filename}" }
				id => "message-000041"
				add_field => {
				"action" => "CommitUpdates for provider"
					"[event][id]" => "000041"
					"[rsa][message][id1]" => "000041"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000042
		# line in RSA:  <fld1>::ProcessPackage parsing package document for <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}::ProcessPackage parsing package document for %{filename}" }
				id => "message-000042"
				add_field => {
				"action" => "parsing package document"
					"[event][id]" => "000042"
					"[rsa][message][id1]" => "000042"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId109
	# line in RSA:  Raw Packet <fld1>
	else if [logstash][msgparser][id] == "msgParserId109" {
		dissect {
			mapping => { "message" => "Raw Packet %{fld1}" }
			id => "msgParserId109"
			add_field => {
				"action" => "Raw Packet"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Received" {
		# MESSAGE 001043
		# line in RSA:  Received from: ip=<saddr> port=<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received from: ip=%{saddr} port=%{sport}" }
				id => "message-001043"
				add_field => {
				"action" => "Received from"
					"[event][id]" => "001043"
					"[rsa][message][id1]" => "001043"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Received_05
		# line in RSA:  Received From: ip=<fld1> port=<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received From: ip=%{fld1} port=%{fld2}" }
				id => "message-Received_05"
				add_field => {
				"action" => "Received From: ip and port."
					"[event][id]" => "Received_05"
					"[rsa][message][id1]" => "Received_05"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001152
		# line in RSA: Received request with unmatched state attribute, <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Received request with unmatched state attribute, %{action}" }
				id => "message-001152"
				add_field => {
				"event_description" => "Received request with unmatched state attribute"
					"[event][id]" => "001152"
					"[rsa][message][id1]" => "001152"
					"[event][categoryid]" => "1301020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Removing" {
		# MESSAGE 000076
		# line in RSA:  Removing accounting record (<info>) for NAS <shost>, user <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Removing accounting record (%{info}) for NAS %{shost}, user %{username}" }
				id => "message-000076"
				add_field => {
				"action" => "Removing accounting record"
					"[event][id]" => "000076"
					"[rsa][message][id1]" => "000076"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE Removing_02
		# line in RSA:  Removing phantom record (session start replacement received) for <fld1>, user <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Removing phantom record (session start replacement received) for %{fld1}, user %{fld2}" }
				id => "message-Removing_02"
				add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"action" => "Removing phantom record (session start replacement received)"
					"[event][id]" => "Removing_02"
					"[rsa][message][id1]" => "Removing_02"
					"[event][categoryid]" => "1701030000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId112
	# line in RSA:  request items don't match user/profile items, Rejecting
	else if [logstash][msgparser][id] == "msgParserId112" {
		dissect {
			mapping => { "message" => "request items don't match user/profile items, Rejecting" }
			id => "msgParserId112"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "Rejecting"
				"event_description" => "request items don't match user/profile items"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Request" {
		# MESSAGE 000044
		# line in RSA:  Request has invalid syntax (e.g.<info>), Rejecting
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Request has invalid syntax (e.g.%{info}), Rejecting" }
				id => "message-000044"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "Rejecting"
				"event_description" => "Request has invalid syntax"
					"[event][id]" => "000044"
					"[rsa][message][id1]" => "000044"
					"[event][categoryid]" => "1301020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001146
		# line in RSA:  Request was not an authentication request, <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Request was not an authentication request, %{result}" }
				id => "message-001146"
				add_field => {
				"action" => "not an authentication request"
					"[event][id]" => "001146"
					"[rsa][message][id1]" => "001146"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "SecurID" {
		# MESSAGE 000045
		# line in RSA:  SecurID authentication method disabled because '<filename>' file not present
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SecurID authentication method disabled because '%{filename}' file not present" }
				id => "message-000045"
				add_field => {
				"action" => "authentication method disabled"
				"result" => "file not present"
					"[event][id]" => "000045"
					"[rsa][message][id1]" => "000045"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE SecurID_01
		# line in RSA:  SecurID authentication for user <fld1> success
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SecurID authentication for user %{fld1} success" }
				id => "message-SecurID_01"
				add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"action" => "SecurID authentication for user success"
					"[event][id]" => "SecurID_01"
					"[rsa][message][id1]" => "SecurID_01"
					"[event][categoryid]" => "1302000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId115
	# line in RSA: Sending accounting response
	else if [logstash][msgparser][id] == "msgParserId115" {
		dissect {
			mapping => { "message" => "Sending accounting response" }
			id => "msgParserId115"
			add_field => {
				"action" => "Sending accounting response"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Sent" {
		# MESSAGE 000047
		# line in RSA:  Sent {accept|proxy accept} response for user <username> to client <saddr>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*Sent[\s]+(accept|proxy[\s]+accept)[\s]+response[\s]+for[\s]+user[\s]+(?<username>[^\s]*)[\s]+to[\s]+client[\s]+(?<saddr>.*)$" }
				id => "message-000047"
				add_field => {
				"action" => "Sent accept response"
					"[event][id]" => "000047"
					"[rsa][message][id1]" => "000047"
					"[event][categoryid]" => "1801020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000048
		# line in RSA:  Sent reject response
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sent reject response" }
				id => "message-000048"
				add_field => {
				"action" => "Sent reject response"
					"[event][id]" => "000048"
					"[rsa][message][id1]" => "000048"
					"[event][categoryid]" => "1803000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001048
		# line in RSA:  Sent to: ip=<daddr> port=<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sent to: ip=%{daddr} port=%{dport}" }
				id => "message-001048"
				add_field => {
				"action" => "Sent to"
					"[event][id]" => "001048"
					"[rsa][message][id1]" => "001048"
					"[event][categoryid]" => "1602000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001150
		# line in RSA:  Sent proxy reject response for user <domain>\<username> to client <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Sent proxy reject response for user %{domain}\%{username} to client %{shost}" }
				id => "message-001150"
				add_field => {
				"action" => "Sent proxy reject response"
					"[event][id]" => "001150"
					"[rsa][message][id1]" => "001150"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Server" {
		# MESSAGE 000049
		# line in RSA:  Server running under <username> account - host authentication disabled
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server running under %{username} account - host authentication disabled" }
				id => "message-000049"
				add_field => {
				"action" => "host authentication disabled"
					"[event][id]" => "000049"
					"[rsa][message][id1]" => "000049"
					"[event][categoryid]" => "1605030000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001119
		# line in RSA:  Server Certificate <fld1> Fingerprint:<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Server Certificate %{fld1} Fingerprint:%{fld2}" }
				id => "message-001119"
				add_field => {
				"action" => "Server Certificate Fingerprint:"
					"[event][id]" => "001119"
					"[rsa][message][id1]" => "001119"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId120
	# line in RSA:  Service-Type : Integer Value = <fld1>
	else if [logstash][msgparser][id] == "msgParserId120" {
		dissect {
			mapping => { "message" => "Service-Type : Integer Value = %{fld1}" }
			id => "msgParserId120"
			add_field => {
				"action" => "Service-Type"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId121
	# line in RSA:  Setting data types
	else if [logstash][msgparser][id] == "msgParserId121" {
		dissect {
			mapping => { "message" => "Setting data types" }
			id => "msgParserId121"
			add_field => {
				"action" => "Setting data types"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId122
	# line in RSA:  Shared secret verification failed - invalid accounting request
	else if [logstash][msgparser][id] == "msgParserId122" {
		dissect {
			mapping => { "message" => "Shared secret verification failed - invalid accounting request" }
			id => "msgParserId122"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "Shared secret verification failed"
				"result" => "invalid accounting request"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId123
	# line in RSA:  SharedSecret or TargetHost specification missing in <filename> file
	else if [logstash][msgparser][id] == "msgParserId123" {
		dissect {
			mapping => { "message" => "SharedSecret or TargetHost specification missing in %{filename} file" }
			id => "msgParserId123"
			add_field => {
				"action" => "specification missing in file"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId124
	# line in RSA:  Shutting down Radius { Accounting | Authentication } Server ...
	else if [logstash][msgparser][id] == "msgParserId124" {
		grok {
			match => { "message" => "^[\s]*Shutting[\s]+down[\s]+Radius[\s]+([\s]*Accounting[\s]+|[\s]*Authentication[\s]+)[\s]+Server[\s]+\.\.\.$" }
			id => "msgParserId124"
			add_field => {
				"action" => "Shutting down"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId125
	# line in RSA:  SQLExecute returned info (<info>)
	else if [logstash][msgparser][id] == "msgParserId125" {
		dissect {
			mapping => { "message" => "SQLExecute returned info (%{info})" }
			id => "msgParserId125"
			add_field => {
				"action" => "SQLExecute returned info"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId126
	# line in RSA: <fld1>","<action>",{"<fld2>"|<fld2>},<fld3>,{"<domain>\<username>"| "<username>"|<username>},{"<saddr>"|<saddr>},{"<fld50>"|<fld50>},<fld4>,{"<protocol>"|<protocol>},{"<daddr>"|<daddr>},<fld5>,<fld6>,<fld7>,<fld8>,<fld9>,<fld10>,{"<service>"|<service>},{"<dport>"|<dport>},<fld11>,<fld12>,<fld13>,{"<fld14>"|<fld14>},{"<fld15>"|<fld15>},<fld16>,<fld17>,<fld18>,<fld19>,{"<fld20>"|<fld20>},{"<fld21>"|<fld21>},<fld22>,{"<fld23>"|<fld23>},<fld24>,{"<rbytes>"|<rbytes>},{"<sbytes>"|<sbytes>},{"<fld25>"|<fld25>},<fld26>,{"<duration>"|<duration>},<fld27>,<fld28>,{"<result>"|<result>},<fld29>,<fld30>,<fld31>,<fld32>,<fld33>,<fld34>,<fld35>,<fld36>,<fld37>,{"<group>"|<group>},<fld38>,<fld39>,<fld40>,<fld41>,{"<info>"|<info>},<fld42>,<fld43>,<fld44>,{"<fld45>"|<fld45>},<fld46>,<fld47>,{"<version>"|<version>},<fld48>
	else if [logstash][msgparser][id] == "msgParserId126" {
		grok {
			match => { "message" => "^(?<fld1>[^\"]*)\",\"(?<action>[^\"]*)\",(\"(?<fld2>[^\"]*)\"|(?<fld2>[^,]*)),(?<fld3>[^,]*),(\"(?<domain>[^\\]*)\\(?<username>[^\"]*)\"|[\s]*\"(?<username>[^\"]*)\"|(?<username>[^,]*)),(\"(?<saddr>[^\"]*)\"|(?<saddr>[^,]*)),(\"(?<fld50>[^\"]*)\"|(?<fld50>[^,]*)),(?<fld4>[^,]*),(\"(?<protocol>[^\"]*)\"|(?<protocol>[^,]*)),(\"(?<daddr>[^\"]*)\"|(?<daddr>[^,]*)),(?<fld5>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(\"(?<service>[^\"]*)\"|(?<service>[^,]*)),(\"(?<dport>[^\"]*)\"|(?<dport>[^,]*)),(?<fld11>[^,]*),(?<fld12>[^,]*),(?<fld13>[^,]*),(\"(?<fld14>[^\"]*)\"|(?<fld14>[^,]*)),(\"(?<fld15>[^\"]*)\"|(?<fld15>[^,]*)),(?<fld16>[^,]*),(?<fld17>[^,]*),(?<fld18>[^,]*),(?<fld19>[^,]*),(\"(?<fld20>[^\"]*)\"|(?<fld20>[^,]*)),(\"(?<fld21>[^\"]*)\"|(?<fld21>[^,]*)),(?<fld22>[^,]*),(\"(?<fld23>[^\"]*)\"|(?<fld23>[^,]*)),(?<fld24>[^,]*),(\"(?<rbytes>[^\"]*)\"|(?<rbytes>[^,]*)),(\"(?<sbytes>[^\"]*)\"|(?<sbytes>[^,]*)),(\"(?<fld25>[^\"]*)\"|(?<fld25>[^,]*)),(?<fld26>[^,]*),(\"(?<duration>[^\"]*)\"|(?<duration>[^,]*)),(?<fld27>[^,]*),(?<fld28>[^,]*),(\"(?<result>[^\"]*)\"|(?<result>[^,]*)),(?<fld29>[^,]*),(?<fld30>[^,]*),(?<fld31>[^,]*),(?<fld32>[^,]*),(?<fld33>[^,]*),(?<fld34>[^,]*),(?<fld35>[^,]*),(?<fld36>[^,]*),(?<fld37>[^,]*),(\"(?<group>[^\"]*)\"|(?<group>[^,]*)),(?<fld38>[^,]*),(?<fld39>[^,]*),(?<fld40>[^,]*),(?<fld41>[^,]*),(\"(?<info>[^\"]*)\"|(?<info>[^,]*)),(?<fld42>[^,]*),(?<fld43>[^,]*),(?<fld44>[^,]*),(\"(?<fld45>[^\"]*)\"|(?<fld45>[^,]*)),(?<fld46>[^,]*),(?<fld47>[^,]*),(\"(?<version>[^\"]*)\"|(?<version>[^,]*)),(?<fld48>.*)$" }
			id => "msgParserId126"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Starting" {
		# MESSAGE 000054
		# line in RSA:  Starting server shutdown process
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting server shutdown process" }
				id => "message-000054"
				add_field => {
				"action" => "shutdown process"
					"[event][id]" => "000054"
					"[rsa][message][id1]" => "000054"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000055
		# line in RSA:  Starting DCF system
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Starting DCF system" }
				id => "message-000055"
				add_field => {
				"action" => "Starting system"
					"[event][id]" => "000055"
					"[rsa][message][id1]" => "000055"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId129
	# line in RSA:  Statistics attributes included in packet that is not an accounting STOP.  Processing continues.
	else if [logstash][msgparser][id] == "msgParserId129" {
		dissect {
			mapping => { "message" => "Statistics attributes included in packet that is not an accounting STOP.  Processing continues." }
			id => "msgParserId129"
			add_field => {
				"action" => "Processing continues."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Steel-Belted" {
		# MESSAGE 000056
		# line in RSA:  Steel-Belted Radius is operational.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Steel-Belted Radius is operational." }
				id => "message-000056"
				add_field => {
				"action" => "Steel-Belted Radius is operational"
					"[event][id]" => "000056"
					"[rsa][message][id1]" => "000056"
					"[event][categoryid]" => "1610000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000057
		# line in RSA:  Steel-Belted Radius licenses
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Steel-Belted Radius licenses" }
				id => "message-000057"
				add_field => {
				"action" => "Steel-Belted Radius licenses"
					"[event][id]" => "000057"
					"[rsa][message][id1]" => "000057"
					"[event][categoryid]" => "1608000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "Successfully" {
		# MESSAGE 000059
		# line in RSA:  Successfully created and closed <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully created and closed %{filename}" }
				id => "message-000059"
				add_field => {
				"action" => "created and closed"
					"[event][id]" => "000059"
					"[rsa][message][id1]" => "000059"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000060
		# line in RSA:  Successfully restored dictionary information from saved <filename> file
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully restored dictionary information from saved %{filename} file" }
				id => "message-000060"
				add_field => {
				"action" => "restored dictionary information"
					"[event][id]" => "000060"
					"[rsa][message][id1]" => "000060"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000061
		# line in RSA:  Successfully transferred <filename> to <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully transferred %{filename} to %{result}" }
				id => "message-000061"
				add_field => {
				"action" => "successful transfer"
					"[event][id]" => "000061"
					"[rsa][message][id1]" => "000061"
					"[event][categoryid]" => "1605020000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId135
	# line in RSA:  Too many or too few authentication attributes in request; rejecting.
	else if [logstash][msgparser][id] == "msgParserId135" {
		dissect {
			mapping => { "message" => "Too many or too few authentication attributes in request; rejecting." }
			id => "msgParserId135"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Failure"
				"action" => "rejecting"
				"result" => "Too many or too few authentication attributes in request"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId136
	# line in RSA:  Unable to find user { <shost>\<username> | <username> } with matching password
	else if [logstash][msgparser][id] == "msgParserId136" {
		grok {
			match => { "message" => "^[\s]*Unable[\s]+to[\s]+find[\s]+user[\s]+([\s]*(?<shost>[^\\]*)\\(?<username>[^\s]*)[\s]+|[\s]*(?<username>[^\s]*)[\s]+)[\s]+with[\s]+matching[\s]+password$" }
			id => "msgParserId136"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_outcome" => "Failure"
				"action" => "Unable to find user"
				"result" => "no matching password"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "Unexpected" {
		# MESSAGE 000064
		# line in RSA:  <event_description>: <fld1>: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}: %{fld1}: %{result}" }
				id => "message-000064"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"action" => "Unexpected error in admin session"
					"[event][id]" => "000064"
					"[rsa][message][id1]" => "000064"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000065
		# line in RSA:  <event_description>: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}: %{result}" }
				id => "message-000065"
				add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"action" => "Unexpected error in admin session"
					"[event][id]" => "000065"
					"[rsa][message][id1]" => "000065"
					"[event][categoryid]" => "1303000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId139
	# line in RSA:  upgrade
	else if [logstash][msgparser][id] == "msgParserId139" {
		dissect {
			mapping => { "message" => "upgrade" }
			id => "msgParserId139"
			add_field => {
				"action" => "version upgrade"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId140
	# line in RSA:  Usage limit for user <username> exceeded. Request denied. 
	else if [logstash][msgparser][id] == "msgParserId140" {
		dissect {
			mapping => { "message" => "Usage limit for user %{username} exceeded. Request denied." }
			id => "msgParserId140"
			add_field => {
				"action" => "Request denied"
				"result" => "Usage limit for user exceeded"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "User" {
		# MESSAGE 000069
		# line in RSA:  <dclass_counter1> User instance in use at startup
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{dclass_counter1} User instance in use at startup" }
				id => "message-000069"
				add_field => {
				"action" => "User instance in use at startup"
					"[event][id]" => "000069"
					"[rsa][message][id1]" => "000069"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 000077
		# line in RSA:  User <username> being passed to attribute editing authentication methods
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} being passed to attribute editing authentication methods" }
				id => "message-000077"
				add_field => {
				"action" => "User being passed to attribute editing authentication methods"
					"[event][id]" => "000077"
					"[rsa][message][id1]" => "000077"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001136
		# line in RSA:  User {(<username>)|<username>} {rejected: locked out|is now locked out.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*User[\s]+(\((?<username>[^\)]*)\)|(?<username>[^\s]*))[\s]+(rejected:[\s]+locked[\s]+out|is[\s]+now[\s]+locked[\s]+out\.)$" }
				id => "message-001136"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_activity" => "Logoff"
				"action" => "User locked out"
					"[event][id]" => "001136"
					"[rsa][message][id1]" => "001136"
					"[event][categoryid]" => "1401070100"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001136_01
		# line in RSA: User {(<username>)|<username>} {is now unlocked.|is now unlocked out.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+(\((?<username>[^\)]*)\)|(?<username>[^\s]*))[\s]+(is[\s]+now[\s]+unlocked\.|is[\s]+now[\s]+unlocked[\s]+out\.)$" }
				id => "message-001136_01"
				add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Authentication"
				"ec_activity" => "Logon"
				"action" => "User unlocked"
					"[event][id]" => "001136_01"
					"[rsa][message][id1]" => "001136_01"
					"[event][categoryid]" => "1401060100"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001141
		# line in RSA:  User <username> ultimately failed challenge sequence 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User %{username} ultimately failed challenge sequence" }
				id => "message-001141"
				add_field => {
				"action" => "User failed challenge sequence "
					"[event][id]" => "001141"
					"[rsa][message][id1]" => "001141"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId143
	# line in RSA:  User-Name : String Value = <info>
	else if [logstash][msgparser][id] == "msgParserId143" {
		dissect {
			mapping => { "message" => "User-Name : String Value = %{info}" }
			id => "msgParserId143"
			add_field => {
				"action" => "User being passed to attribute editing authentication methods"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId144
	# line in RSA:  User-Password <fld1>
	else if [logstash][msgparser][id] == "msgParserId144" {
		dissect {
			mapping => { "message" => "User-Password %{fld1}" }
			id => "msgParserId144"
			add_field => {
				"action" => "User-Password"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId145
	# line in RSA:  Vector <fld1>
	else if [logstash][msgparser][id] == "msgParserId145" {
		dissect {
			mapping => { "message" => "Vector %{fld1}" }
			id => "msgParserId145"
			add_field => {
				"action" => "Vector"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId146
	# line in RSA:  Version:<version>
	else if [logstash][msgparser][id] == "msgParserId146" {
		dissect {
			mapping => { "message" => "Version:%{version}" }
			id => "msgParserId146"
			add_field => {
				"action" => "Version identification"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId147
	# line in RSA:  Warning -- { Authentication | Accounting } request received from unknown <info> Client <saddr>
	else if [logstash][msgparser][id] == "msgParserId147" {
		grok {
			match => { "message" => "^[\s]*Warning[\s]+\-\-[\s]+([\s]*Authentication[\s]+|[\s]*Accounting[\s]+)[\s]+request[\s]+received[\s]+from[\s]+unknown[\s]+(?<info>[^\s]*)[\s]+Client[\s]+(?<saddr>.*)$" }
			id => "msgParserId147"
			add_field => {
				"ec_theme" => "Authentication"
				"ec_outcome" => "Error"
				"action" => "Warning"
				"result" => "request received from unknown Client"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId151
	# line in RSA:  Windows Domain authentication enabled
	else if [logstash][msgparser][id] == "msgParserId151" {
		dissect {
			mapping => { "message" => "Windows Domain authentication enabled" }
			id => "msgParserId151"
			add_field => {
				"ec_activity" => "Enable"
				"ec_theme" => "Authentication"
				"action" => "Windows domain authentication enabled"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId153
	# line in RSA:  Pipe <filename> is connected
	else if [logstash][msgparser][id] == "msgParserId153" {
		dissect {
			mapping => { "message" => "Pipe %{filename} is connected" }
			id => "msgParserId153"
			add_field => {
				"action" => "Pipe is connected."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId155
	# line in RSA:  Disconnect named pipe <filename>
	else if [logstash][msgparser][id] == "msgParserId155" {
		dissect {
			mapping => { "message" => "Disconnect named pipe %{filename}" }
			id => "msgParserId155"
			add_field => {
				"action" => "Disconnect named pipe."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId156
	# line in RSA:  Teardown perfmon named pipe
	else if [logstash][msgparser][id] == "msgParserId156" {
		dissect {
			mapping => { "message" => "Teardown perfmon named pipe" }
			id => "msgParserId156"
			add_field => {
				"action" => "Teardown perfmon named pipe"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId160
	# line in RSA:  Framed-Protocol : Integer Value = <fld1>
	else if [logstash][msgparser][id] == "msgParserId160" {
		dissect {
			mapping => { "message" => "Framed-Protocol : Integer Value = %{fld1}" }
			id => "msgParserId160"
			add_field => {
				"action" => "Framed-Protocol : Integer Values."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId162
	# line in RSA:  Acct-Input-Packets : Integer Value = <fld1>
	else if [logstash][msgparser][id] == "msgParserId162" {
		dissect {
			mapping => { "message" => "Acct-Input-Packets : Integer Value = %{fld1}" }
			id => "msgParserId162"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId163
	# line in RSA:  Acct-Output-Packets : Integer Value = <fld1>
	else if [logstash][msgparser][id] == "msgParserId163" {
		dissect {
			mapping => { "message" => "Acct-Output-Packets : Integer Value = %{fld1}" }
			id => "msgParserId163"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId164
	# line in RSA:  Unknown type : Value =
	else if [logstash][msgparser][id] == "msgParserId164" {
		dissect {
			mapping => { "message" => "Unknown type : Value =" }
			id => "msgParserId164"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId165
	# line in RSA:  Acct-Delay-Time : Integer Value = <fld1>
	else if [logstash][msgparser][id] == "msgParserId165" {
		dissect {
			mapping => { "message" => "Acct-Delay-Time : Integer Value = %{fld1}" }
			id => "msgParserId165"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId166
	# line in RSA:  CNasInformation::clearRecordsForStop() deleted session with same session id: <fld1>
	else if [logstash][msgparser][id] == "msgParserId166" {
		dissect {
			mapping => { "message" => "CNasInformation::clearRecordsForStop() deleted session with same session id: %{fld1}" }
			id => "msgParserId166"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId168
	# line in RSA:  Beginning instance of SecurID authentication
	else if [logstash][msgparser][id] == "msgParserId168" {
		dissect {
			mapping => { "message" => "Beginning instance of SecurID authentication" }
			id => "msgParserId168"
			add_field => {
				"action" => "Beginning instance of SecurID authentication."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId169
	# line in RSA:  Performing SecurID user authentication for <fld1>
	else if [logstash][msgparser][id] == "msgParserId169" {
		dissect {
			mapping => { "message" => "Performing SecurID user authentication for %{fld1}" }
			id => "msgParserId169"
			add_field => {
				"action" => "Performing SecurID user authentication for user."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId171
	# line in RSA:  Terminated instance of SecurID authentication
	else if [logstash][msgparser][id] == "msgParserId171" {
		dissect {
			mapping => { "message" => "Terminated instance of SecurID authentication" }
			id => "msgParserId171"
			add_field => {
				"action" => "Terminated instance of SecurID authentication"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId175
	# line in RSA:  Adding accounting record (phantom record) for <fld1>, user <fld2>
	else if [logstash][msgparser][id] == "msgParserId175" {
		dissect {
			mapping => { "message" => "Adding accounting record (phantom record) for %{fld1}, user %{fld2}" }
			id => "msgParserId175"
			add_field => {
				"ec_activity" => "Create"
				"ec_theme" => "Configuration"
				"action" => "Adding accounting record (phantom record)."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId177
	# line in RSA:  Deleted phantom with same transaction id: <fld1>
	else if [logstash][msgparser][id] == "msgParserId177" {
		dissect {
			mapping => { "message" => "Deleted phantom with same transaction id: %{fld1}" }
			id => "msgParserId177"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"action" => "Deleted phantom with same transaction id"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId178
	# line in RSA:  Called-Station-Id : String Value = <fld1>
	else if [logstash][msgparser][id] == "msgParserId178" {
		dissect {
			mapping => { "message" => "Called-Station-Id : String Value = %{fld1}" }
			id => "msgParserId178"
			add_field => {
				"action" => "Called-Station-Id : String Value"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId181
	# line in RSA:  Using EAP type <fld1> in <fld2> section of <fld3> file
	else if [logstash][msgparser][id] == "msgParserId181" {
		dissect {
			mapping => { "message" => "Using EAP type %{fld1} in %{fld2} section of %{fld3} file" }
			id => "msgParserId181"
			add_field => {
				"action" => "Using EAP type in section of a file."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId182
	# line in RSA:  CRadConfigServerProviderPost::ExecutePost old <fld1> stamp <fld2>
	else if [logstash][msgparser][id] == "msgParserId182" {
		dissect {
			mapping => { "message" => "CRadConfigServerProviderPost::ExecutePost old %{fld1} stamp %{fld2}" }
			id => "msgParserId182"
			add_field => {
				"action" => "CRadConfigServerProviderPost::ExecutePost."
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId183
	# line in RSA:  Evaluation period will expire on <fld1>
	else if [logstash][msgparser][id] == "msgParserId183" {
		dissect {
			mapping => { "message" => "Evaluation period will expire on %{fld1}" }
			id => "msgParserId183"
			add_field => {
				"action" => "Evaluation period expires"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId186
	# line in RSA:  <fld1> cookie not present.
	else if [logstash][msgparser][id] == "msgParserId186" {
		dissect {
			mapping => { "message" => "%{fld1} cookie not present." }
			id => "msgParserId186"
			add_field => {
				"action" => "cookie not present"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "EAP-TTLS" {
		# MESSAGE 001121
		# line in RSA:  EAP-TTLS: Unable to load server certificate and private key - file <filename> not found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-TTLS: Unable to load server certificate and private key - file %{filename} not found" }
				id => "message-001121"
				add_field => {
				"action" => "Unable to load server certificate"
					"[event][id]" => "001121"
					"[rsa][message][id1]" => "001121"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001138
		# line in RSA: <fld1> session for user <username> was resumed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} session for user %{username} was resumed" }
				id => "message-001138"
				add_field => {
				"action" => "session resumed"
					"[event][id]" => "001138"
					"[rsa][message][id1]" => "001138"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001144
		# line in RSA:  EAP-TTLS: User-Name without usable credentials found in payload of an EAP/TTLS authentication
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-TTLS: User-Name without usable credentials found in payload of an EAP/TTLS authentication" }
				id => "message-001144"
				add_field => {
				"action" => "User-Name without usable credentials"
				"event_description" => "User-Name without usable credentials found in payload of an EAP/TTLS authentication"
					"[event][id]" => "001144"
					"[rsa][message][id1]" => "001144"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId189
	# line in RSA:  Provider <fld1> Update Received
	else if [logstash][msgparser][id] == "msgParserId189" {
		dissect {
			mapping => { "message" => "Provider %{fld1} Update Received" }
			id => "msgParserId189"
			add_field => {
				"action" => "Update Received"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId190
	# line in RSA:  Update for  <filename> Not Registered, creating!
	else if [logstash][msgparser][id] == "msgParserId190" {
		dissect {
			mapping => { "message" => "Update for  %{filename} Not Registered, creating!" }
			id => "msgParserId190"
			add_field => {
				"action" => "update for file not registered"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "EAP-TLS" {
		# MESSAGE 001125
		# line in RSA:  EAP-TLS: No trusted root certificates found in the ROOT directory under the server directory
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-TLS: No trusted root certificates found in the ROOT directory under the server directory" }
				id => "message-001125"
				add_field => {
				"action" => "certificates not found"
					"[event][id]" => "001125"
					"[rsa][message][id1]" => "001125"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001126
		# line in RSA:  EAP-TLS module failed to initialize
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-TLS module failed to initialize" }
				id => "message-001126"
				add_field => {
				"action" => "module failed to initialize"
					"[event][id]" => "001126"
					"[rsa][message][id1]" => "001126"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	else if [logstash][msgparser][id] == "EAP-PEAP" {
		# MESSAGE 001129
		# line in RSA:  EAP-PEAP: Unable to lead server certificate and private key - file <filename> not found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-PEAP: Unable to lead server certificate and private key - file %{filename} not found" }
				id => "message-001129"
				add_field => {
				"action" => "unable to { lead | load } server certificate"
					"[event][id]" => "001129"
					"[rsa][message][id1]" => "001129"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s", "M/d/yyyy HH.m.s" ] }
			}
		}
		# MESSAGE 001127
		# line in RSA:  EAP-PEAP: Unable to lead server certificate and private key file <filename> not found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-PEAP: Unable to lead server certificate and private key file %{filename} not found" }
				id => "message-001127"
				add_field => {
				"action" => "unable to { lead | load } server certificate"
					"[event][id]" => "001127"
					"[rsa][message][id1]" => "001127"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s", "M/d/yyyy HH.m.s" ] }
			}
		}
		# MESSAGE 001142
		# line in RSA:  EAP-PEAP session for user <username> was resumed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-PEAP session for user %{username} was resumed" }
				id => "message-001142"
				add_field => {
				"action" => "session resumed"
					"[event][id]" => "001142"
					"[rsa][message][id1]" => "001142"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001153
		# line in RSA: EAP-PEAP: EAP-Message is missing or too large
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-PEAP: EAP-Message is missing or too large" }
				id => "message-001153"
				add_field => {
				"event_description" => "EAP-Message is missing or too large"
					"[event][id]" => "001153"
					"[rsa][message][id1]" => "001153"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
		# MESSAGE 001154
		# line in RSA: EAP-PEAP: <fld1> request encountered response what was neither <fld2> nor <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "EAP-PEAP: %{fld1} request encountered response what was neither %{fld2} nor %{fld3}" }
				id => "message-001154"
				add_field => {
				"event_description" => "response was neither EAP-Generic-Token nor NAK"
					"[event][id]" => "001154"
					"[rsa][message][id1]" => "001154"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId195
	# line in RSA:  CRadConfigManagedServerList: <event_description>
	else if [logstash][msgparser][id] == "msgParserId195" {
		dissect {
			mapping => { "message" => "CRadConfigManagedServerList: %{event_description}" }
			id => "msgParserId195"
			add_field => {
				"action" => "Server Config"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId196
	# line in RSA:  <event_description>
	else if [logstash][msgparser][id] == "msgParserId196" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId196"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId197
	# line in RSA:  <event_description>
	else if [logstash][msgparser][id] == "msgParserId197" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId197"
			add_field => {
				"action" => "Not licensed to run module"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId198
	# line in RSA:  <event_description>
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId198"
			add_field => {
				"action" => "read access denied"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId200
	# line in RSA:  Initialization of module <filename> failed
	else if [logstash][msgparser][id] == "msgParserId200" {
		dissect {
			mapping => { "message" => "Initialization of module %{filename} failed" }
			id => "msgParserId200"
			add_field => {
				"action" => "module initialization failed"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId201
	# line in RSA:  <action> (<bytes> bytes) received from <saddr>, ignoring authentication request
	else if [logstash][msgparser][id] == "msgParserId201" {
		dissect {
			mapping => { "message" => "%{action} (%{bytes} bytes) received from %{saddr}, ignoring authentication request" }
			id => "msgParserId201"
			add_field => {
				"event_description" => "Truncated request ignoring authentication request"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId206
	# line in RSA:  Status Server Response on Authentication Port
	else if [logstash][msgparser][id] == "msgParserId206" {
		dissect {
			mapping => { "message" => "Status Server Response on Authentication Port" }
			id => "msgParserId206"
			add_field => {
				"event_description" => "Status Server Response on Authentication Port"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId207
	# line in RSA:  Funk-Source-IP-Address : IPAddress = <saddr>
	else if [logstash][msgparser][id] == "msgParserId207" {
		dissect {
			mapping => { "message" => "Funk-Source-IP-Address : IPAddress = %{saddr}" }
			id => "msgParserId207"
			add_field => {
				"action" => "Funk-Source-IP-Address"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId210
	# line in RSA:  Cached passcode matched new request for SecurID authentication of user <username>
	else if [logstash][msgparser][id] == "msgParserId210" {
		dissect {
			mapping => { "message" => "Cached passcode matched new request for SecurID authentication of user %{username}" }
			id => "msgParserId210"
			add_field => {
				"event_description" => "passcode matched SecurID authentication"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId213
	# line in RSA:  content-type: <info>
	else if [logstash][msgparser][id] == "msgParserId213" {
		dissect {
			mapping => { "message" => "content-type: %{info}" }
			id => "msgParserId213"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId214
	# line in RSA:  content-length: <info>
	else if [logstash][msgparser][id] == "msgParserId214" {
		dissect {
			mapping => { "message" => "content-length: %{info}" }
			id => "msgParserId214"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId215
	# line in RSA:  foundstonetest] failed because <info>
	else if [logstash][msgparser][id] == "msgParserId215" {
		dissect {
			mapping => { "message" => "foundstonetest] failed because %{info}" }
			id => "msgParserId215"
			add_field => {
				"action" => "foundstonetest failed"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId217
	# line in RSA: WARNING: Removing accounting record (<info>) for NAS <shost>, user <username>
	else if [logstash][msgparser][id] == "msgParserId217" {
		dissect {
			mapping => { "message" => "WARNING: Removing accounting record (%{info}) for NAS %{shost}, user %{username}" }
			id => "msgParserId217"
			add_field => {
				"ec_subject" => "User"
				"ec_theme" => "Configuration"
				"ec_activity" => "Delete"
				"action" => "Removing accounting record"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId221
	# line in RSA: <fld1>","<fld2>",{"<action>"|<action>},{"<domain>\<username>"| "<username>"|<username>},<stransaddr>,<fld4>,<fld5>,<fld6>,<fld7>,<fld8>,<fld9>,<fld10>,<fld11>,<fld12>,<fld13>,<fld14>,<fld15>,<fld16>,<fld17>,<fld18>,<fld19>
	else if [logstash][msgparser][id] == "msgParserId221" {
		grok {
			match => { "message" => "^(?<fld1>[^\"]*)\",\"(?<fld2>[^\"]*)\",(\"(?<action>[^\"]*)\"|(?<action>[^,]*)),(\"(?<domain>[^\\]*)\\(?<username>[^\"]*)\"|[\s]*\"(?<username>[^\"]*)\"|(?<username>[^,]*)),(?<stransaddr>[^,]*),(?<fld4>[^,]*),(?<fld5>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(?<fld11>[^,]*),(?<fld12>[^,]*),(?<fld13>[^,]*),(?<fld14>[^,]*),(?<fld15>[^,]*),(?<fld16>[^,]*),(?<fld17>[^,]*),(?<fld18>[^,]*),(?<fld19>.*)$" }
			id => "msgParserId221"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}
	# PARSER msgParserId222
	# line in RSA: <fld1>","<fld2>",{"<action>"|<action>},{"<domain>\<username>"| "<username>"|<username>},<stransaddr>,<fld4>,<fld5>,<fld6>,<fld7>,<fld8>,<fld9>,<fld10>,<fld11>,<fld12>,<fld13>,<fld14>,<fld15>,<fld16>,<fld17>,<fld18>,<fld19>
	else if [logstash][msgparser][id] == "msgParserId222" {
		grok {
			match => { "message" => "^(?<fld1>[^\"]*)\",\"(?<fld2>[^\"]*)\",(\"(?<action>[^\"]*)\"|(?<action>[^,]*)),(\"(?<domain>[^\\]*)\\(?<username>[^\"]*)\"|[\s]*\"(?<username>[^\"]*)\"|(?<username>[^,]*)),(?<stransaddr>[^,]*),(?<fld4>[^,]*),(?<fld5>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(?<fld8>[^,]*),(?<fld9>[^,]*),(?<fld10>[^,]*),(?<fld11>[^,]*),(?<fld12>[^,]*),(?<fld13>[^,]*),(?<fld14>[^,]*),(?<fld15>[^,]*),(?<fld16>[^,]*),(?<fld17>[^,]*),(?<fld18>[^,]*),(?<fld19>.*)$" }
			id => "msgParserId222"
			add_field => {
				"ec_activity" => "Deny"
				"ec_theme" => "Communication"
				"[logstash][fullDateTimeString]" => "%{hdate} %{htime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "M/d/yyyy HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_junipersbrmsg.json"
#			template_name => "junipersbr_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "aforecloudlink"
			"[observer][name]" => "Afore Cloudlink"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <hmonth> <hday> <htime> <hfld1> <hhost>: [<hfld3>] <hfld4>: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+\[(?<hfld3>[^\]]*)\][\s]+(?<hfld4>[^:]*):[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hmonth> <hday> <htime> <hfld1> <hhost>: [<hfld3>] <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld1>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+\[(?<hfld3>[^\]]*)\][\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hmonth> <hday> <htime> <hhost>: [<hfld3>] <hfld2>: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+\[(?<hfld3>[^\]]*)\][\s]+(?<hfld2>[^:]*):[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <hmonth> <hday> <htime> <hhost>: [<hfld3>] <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hday>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hhost>[^:]*):[\s]+\[(?<hfld3>[^\]]*)\][\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-aforecloudlinkmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "Change" {
		# MESSAGE Change
		# line in RSA: Change syslog configuration succeeded on <shost> (user - <username>, ip - <saddr>). {<disposition> <fld2> at <fld2>|<disposition>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Change[\s]+syslog[\s]+configuration[\s]+succeeded[\s]+on[\s]+(?<shost>[^\s]*)[\s]+\(user[\s]+\-[\s]+(?<username>[^,]*),[\s]+ip[\s]+\-[\s]+(?<saddr>[^\)]*)\)\.[\s]+((?<disposition>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+at[\s]+(?<fld2>.*)|(?<disposition>.*))$" }
				id => "message-Change"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Change syslog configuration succeeded"
					"[event][id]" => "Change"
					"[rsa][message][id1]" => "Change"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:01
		# line in RSA: Change syslog configuration rejected on <shost> (user - <username>, ip - <saddr>). <disposition>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change syslog configuration rejected on %{shost} (user - %{username}, ip - %{saddr}). %{disposition}" }
				id => "message-Change:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"event_description" => "Change syslog configuration rejected"
					"[event][id]" => "Change:01"
					"[rsa][message][id1]" => "Change:01"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:02
		# line in RSA: Change Domain Controller configuration failed on <fld1> (user - <username>, ip - <saddr>). <info> domain: '<domain>', IP: '<daddr>', user: '<c_username>'. <fld3> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change Domain Controller configuration failed on %{fld1} (user - %{username}, ip - %{saddr}). %{info} domain: '%{domain}', IP: '%{daddr}', user: '%{c_username}'. %{fld3}" }
				id => "message-Change:02"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"event_description" => "Change Domain Controller configuration failed"
					"[event][id]" => "Change:02"
					"[rsa][message][id1]" => "Change:02"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:03
		# line in RSA: Change key store configuration failed on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change key store configuration failed on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:03"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"event_description" => "Change key store configuration failed"
					"[event][id]" => "Change:03"
					"[rsa][message][id1]" => "Change:03"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:04
		# line in RSA: Change storage type succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change storage type succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:04"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Change storage type succeeded"
					"[event][id]" => "Change:04"
					"[rsa][message][id1]" => "Change:04"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:05
		# line in RSA: Change key store configuration succeeded on <fld1> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change key store configuration succeeded on %{fld1} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:05"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Change key store configuration succeeded"
					"[event][id]" => "Change:05"
					"[rsa][message][id1]" => "Change:05"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:06
		# line in RSA: Change key allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change key allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Change:06"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Change key allowed"
					"[event][id]" => "Change:06"
					"[rsa][message][id1]" => "Change:06"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:07
		# line in RSA: Change storage key succeeded on <shost> (user - <username>, ip - <saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change storage key succeeded on %{shost} (user - %{username}, ip - %{saddr})." }
				id => "message-Change:07"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Change storage key succeeded"
					"[event][id]" => "Change:07"
					"[rsa][message][id1]" => "Change:07"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:08
		# line in RSA: Change NTP configuration succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change NTP configuration succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:08"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Change NTP configuration succeeded"
					"[event][id]" => "Change:08"
					"[rsa][message][id1]" => "Change:08"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:09
		# line in RSA: Change TimeZone succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change TimeZone succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:09"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Change TimeZone succeeded"
					"[event][id]" => "Change:09"
					"[rsa][message][id1]" => "Change:09"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:10
		# line in RSA: Change DNS configuration succeeded on <shost> (user - <username>, ip - <saddr>). Add DNS: <domain>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change DNS configuration succeeded on %{shost} (user - %{username}, ip - %{saddr}). Add DNS: %{domain}" }
				id => "message-Change:10"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Change DNS configuration succeeded"
					"[event][id]" => "Change:10"
					"[rsa][message][id1]" => "Change:10"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:11
		# line in RSA: Change storage ACL allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change storage ACL allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Change:11"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "Configuration"
				"event_description" => "Change storage ACL allowed"
					"[event][id]" => "Change:11"
					"[rsa][message][id1]" => "Change:11"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:12
		# line in RSA: Change storage ACL succeeded on <fld1> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change storage ACL succeeded on %{fld1} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:12"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "Configuration"
				"event_description" => "Change storage ACL succeeded"
					"[event][id]" => "Change:12"
					"[rsa][message][id1]" => "Change:12"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:13
		# line in RSA: Change Amazon Cloud configuration failed on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change Amazon Cloud configuration failed on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:13"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Failure"
				"event_description" => "Change Amazon Cloud configuration failed"
					"[event][id]" => "Change:13"
					"[rsa][message][id1]" => "Change:13"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Change:14
		# line in RSA: Change Amazon Cloud configuration succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Change Amazon Cloud configuration succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Change:14"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Modify"
				"ec_theme" => "Configuration"
				"ec_outcome" => "Success"
				"event_description" => "Change Amazon Cloud configuration succeeded"
					"[event][id]" => "Change:14"
					"[rsa][message][id1]" => "Change:14"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA: Upload ISO failed on <shost> (user - <username>, ip - <saddr>). <info>
	else if [logstash][msgparser][id] == "msgParserId15" {
		dissect {
			mapping => { "message" => "Upload ISO failed on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
			id => "msgParserId15"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"event_description" => "Upload ISO failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Lock" {
		# MESSAGE Lock
		# line in RSA: Lock storage allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lock storage allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Lock"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "AccessControl"
				"event_description" => "Lock storage allowed"
					"[event][id]" => "Lock"
					"[rsa][message][id1]" => "Lock"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Lock:01
		# line in RSA: Lock storage succeeded on <shost> (user - <username>, ip - <saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Lock storage succeeded on %{shost} (user - %{username}, ip - %{saddr})." }
				id => "message-Lock:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"event_description" => "Lock storage succeeded"
					"[event][id]" => "Lock:01"
					"[rsa][message][id1]" => "Lock:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId18
	# line in RSA: Syslog change allowed for <username> (<saddr>) on <shost>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "Syslog change allowed for %{username} (%{saddr}) on %{shost}" }
			id => "msgParserId18"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "Configuration"
				"event_description" => "Syslog change allowed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "CCM" {
		# MESSAGE CCM:01
		# line in RSA: CCM failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CCM failure" }
				id => "message-CCM:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"shost" => "%{hfld2}"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"event_description" => "CCM failure"
					"[event][id]" => "CCM:01"
					"[rsa][message][id1]" => "CCM:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE CCM
		# line in RSA: CCM operational
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "CCM operational" }
				id => "message-CCM"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"dhost" => "%{hfld2}"
				"event_description" => "CCM operational"
					"[event][id]" => "CCM"
					"[rsa][message][id1]" => "CCM"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Log" {
		# MESSAGE Log:01
		# line in RSA: Log out allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log out allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Log:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"event_description" => "Log out allowed"
					"[event][id]" => "Log:01"
					"[rsa][message][id1]" => "Log:01"
					"[event][categoryid]" => "1802000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Log:02
		# line in RSA: Log in allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Log in allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Log:02"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"ec_theme" => "Authentication"
				"event_description" => "Log in allowed"
					"[event][id]" => "Log:02"
					"[rsa][message][id1]" => "Log:02"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA: Domain Controller on <hostip> is accessible
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "Domain Controller on %{hostip} is accessible" }
			id => "msgParserId23"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"shost" => "%{hfld2}"
				"event_description" => "Domain Controller is accessible"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: Failed to join <domain> domain: <info>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "Failed to join %{domain} domain: %{info}" }
			id => "msgParserId24"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"shost" => "%{hfld2}"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"event_description" => "Failed to join domain"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Key" {
		# MESSAGE Key
		# line in RSA: Key store change allowed for <username> (<saddr>) on <shost>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Key store change allowed for %{username} (%{saddr}) on %{shost}. %{info}" }
				id => "message-Key"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "AccessControl"
				"event_description" => "Key store change allowed"
					"[event][id]" => "Key"
					"[rsa][message][id1]" => "Key"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Key:01
		# line in RSA: Key store inaccessible: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Key store inaccessible: %{info}" }
				id => "message-Key:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"shost" => "%{hfld2}"
				"event_description" => "Key store inaccessible"
					"[event][id]" => "Key:01"
					"[rsa][message][id1]" => "Key:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Key:02
		# line in RSA: Key store accessible.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Key store accessible." }
				id => "message-Key:02"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"shost" => "%{hfld2}"
				"event_description" => "Key store accessible"
					"[event][id]" => "Key:02"
					"[rsa][message][id1]" => "Key:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA: The device is formatting
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "The device is formatting" }
			id => "msgParserId28"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"event_description" => "The device is formatting"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Generate" {
		# MESSAGE Generate
		# line in RSA: Generate VPN Passcode allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Generate VPN Passcode allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Generate"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"event_description" => "Generate VPN Passcode allowed"
					"[event][id]" => "Generate"
					"[rsa][message][id1]" => "Generate"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Generate:01
		# line in RSA: Generate VPN Passcode succeeded on <shost> (user - <username>, ip - <saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Generate VPN Passcode succeeded on %{shost} (user - %{username}, ip - %{saddr})." }
				id => "message-Generate:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"event_description" => "Generate VPN Passcode succeeded"
					"[event][id]" => "Generate:01"
					"[rsa][message][id1]" => "Generate:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Generate:02
		# line in RSA: Generate report succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Generate report succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Generate:02"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_outcome" => "Success"
				"ec_theme" => "ALM"
				"event_description" => "Generate report succeeded"
					"[event][id]" => "Generate:02"
					"[rsa][message][id1]" => "Generate:02"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "VPN" {
		# MESSAGE VPN
		# line in RSA: VPN certification request allowed for <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN certification request allowed for %{shost}" }
				id => "message-VPN"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "Certificate"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"event_description" => "VPN certification request allowed"
					"[event][id]" => "VPN"
					"[rsa][message][id1]" => "VPN"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE VPN:01
		# line in RSA: VPN connection request allowed for <shost>. <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN connection request allowed for %{shost}. %{info}" }
				id => "message-VPN:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"event_description" => "VPN connection request allowed"
					"[event][id]" => "VPN:01"
					"[rsa][message][id1]" => "VPN:01"
					"[event][categoryid]" => "1801020100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE VPN:02
		# line in RSA: VPN client connection allowed for <shost> (<saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VPN client connection allowed for %{shost} (%{saddr})." }
				id => "message-VPN:02"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_activity" => "Permit"
				"ec_theme" => "Communication"
				"event_description" => "VPN client connection allowed"
					"[event][id]" => "VPN:02"
					"[rsa][message][id1]" => "VPN:02"
					"[event][categoryid]" => "1801020100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Storage" {
		# MESSAGE Storage
		# line in RSA: Storage License Registration succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Storage License Registration succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Storage"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Storage License Registration succeeded"
					"[event][id]" => "Storage"
					"[rsa][message][id1]" => "Storage"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Storage:01
		# line in RSA: Storage License Release succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Storage License Release succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Storage:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Storage License Release succeeded"
					"[event][id]" => "Storage:01"
					"[rsa][message][id1]" => "Storage:01"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Storage:02
		# line in RSA: Storage License Assignment succeeded on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Storage License Assignment succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Storage:02"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Storage License Assignment succeeded"
					"[event][id]" => "Storage:02"
					"[rsa][message][id1]" => "Storage:02"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Storage:03
		# line in RSA: Storage license validated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Storage license validated." }
				id => "message-Storage:03"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"dhost" => "%{hfld2}"
				"event_description" => "Storage license validated"
					"[event][id]" => "Storage:03"
					"[rsa][message][id1]" => "Storage:03"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: Rescan storage volume size succeeded on <shost> (user - <username>, ip - <saddr>). <info>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "Rescan storage volume size succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
			id => "msgParserId39"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Scan"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Rescan storage volume size succeeded"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Merge" {
		# MESSAGE Merge
		# line in RSA: Merge storages succeeded on <shost> (user - <username>, ip - <saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Merge storages succeeded on %{shost} (user - %{username}, ip - %{saddr})." }
				id => "message-Merge"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Merge storages succeeded"
					"[event][id]" => "Merge"
					"[rsa][message][id1]" => "Merge"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Merge:01
		# line in RSA: Merge storages failed on <shost> (user - <username>, ip - <saddr>). <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Merge storages failed on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
				id => "message-Merge:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Failure"
				"event_description" => "Merge storages failed"
					"[event][id]" => "Merge:01"
					"[rsa][message][id1]" => "Merge:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Format" {
		# MESSAGE Format
		# line in RSA: Format storage allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Format storage allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Format"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Permit"
				"ec_theme" => "ALM"
				"event_description" => "Format storage allowed"
					"[event][id]" => "Format"
					"[rsa][message][id1]" => "Format"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Format:01
		# line in RSA: Format storage succeeded on <shost> (user - <username>, ip - <saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Format storage succeeded on %{shost} (user - %{username}, ip - %{saddr})." }
				id => "message-Format:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Format storage succeeded"
					"[event][id]" => "Format:01"
					"[rsa][message][id1]" => "Format:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Remove" {
		# MESSAGE Remove
		# line in RSA: Remove host allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Remove host allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Remove"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "AccessControl"
				"event_description" => "Remove host allowed"
					"[event][id]" => "Remove"
					"[rsa][message][id1]" => "Remove"
					"[event][categoryid]" => "1402020100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Remove:01
		# line in RSA: Remove host succeeded on <shost> (user - <username>, ip - <saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Remove host succeeded on %{shost} (user - %{username}, ip - %{saddr})." }
				id => "message-Remove:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Delete"
				"ec_theme" => "AccessControl"
				"ec_outcome" => "Success"
				"event_description" => "Remove host succeeded"
					"[event][id]" => "Remove:01"
					"[rsa][message][id1]" => "Remove:01"
					"[event][categoryid]" => "1402020100"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Unlock" {
		# MESSAGE Unlock
		# line in RSA: Unlock storage succeeded on <shost> (user - <username>, ip - <saddr>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unlock storage succeeded on %{shost} (user - %{username}, ip - %{saddr})." }
				id => "message-Unlock"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Unlock storage succeeded"
					"[event][id]" => "Unlock"
					"[rsa][message][id1]" => "Unlock"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Unlock:01
		# line in RSA: Unlock storage allowed for <username> (<saddr>) on <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Unlock storage allowed for %{username} (%{saddr}) on %{shost}" }
				id => "message-Unlock:01"
				add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_activity" => "Permit"
				"event_description" => "Unlock storage allowed"
					"[event][id]" => "Unlock:01"
					"[rsa][message][id1]" => "Unlock:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId48
	# line in RSA: Instantiate template succeeded on <shost> (user - <username>, ip - <saddr>). <info>
	else if [logstash][msgparser][id] == "msgParserId48" {
		dissect {
			mapping => { "message" => "Instantiate template succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
			id => "msgParserId48"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Instantiate template succeeded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA: Invalid Storage Licensing.
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "Invalid Storage Licensing." }
			id => "msgParserId49"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"dhost" => "%{hfld2}"
				"event_description" => "Invalid Storage Licensing"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId50
	# line in RSA: Online.
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "Online." }
			id => "msgParserId50"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"dhost" => "%{hfld2}"
				"event_description" => "Online"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId51
	# line in RSA: Offline.
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "Offline." }
			id => "msgParserId51"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"dhost" => "%{hfld2}"
				"event_description" => "Offline"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA: Add template succeeded on <shost> (user - <username>, ip - <saddr>). <info>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "Add template succeeded on %{shost} (user - %{username}, ip - %{saddr}). %{info}" }
			id => "msgParserId52"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_theme" => "ALM"
				"ec_outcome" => "Success"
				"event_description" => "Add template succeeded"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId53
	# line in RSA: LOGOUT granted for <username> (<saddr>) on <shost>
	else if [logstash][msgparser][id] == "msgParserId53" {
		dissect {
			mapping => { "message" => "LOGOUT granted for %{username} (%{saddr}) on %{shost}" }
			id => "msgParserId53"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"ec_subject" => "User"
				"ec_activity" => "Logoff"
				"ec_theme" => "Authentication"
				"ec_outcome" => "Success"
				"event_description" => "LOGOUT granted"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId54
	# line in RSA: Security Audit auto for <shost>
	else if [logstash][msgparser][id] == "msgParserId54" {
		dissect {
			mapping => { "message" => "Security Audit auto for %{shost}" }
			id => "msgParserId54"
			add_field => {
				"event_type" => "%{hfld3}"
				"hostname" => "%{hhost}"
				"event_description" => "Security Audit auto"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-aforecloudlinkmsg.json"
#			template_name => "aforecloudlink_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

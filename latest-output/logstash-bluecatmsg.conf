# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "bluecat"
			"[observer][name]" => "BlueCat"
			"[observer][type]" => "System"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: <month> <date> <time> <hhost> CEF:<hfld1>|<hfld2>|<hproduct>|<hversion>|<messageid>|<hfld3>|<hseverity>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{month} %{date} %{time} %{hhost} CEF:%{hfld1}|%{hfld2}|%{hproduct}|%{hversion}|%{messageid}|%{hfld3}|%{hseverity}|%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: <hhost> CEF:<hfld1>|BCN|Adonis|<hversion>|<messageid>|<fld5>|<fld6>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hhost} CEF:%{hfld1}|BCN|Adonis|%{hversion}|%{messageid}|%{fld5}|%{fld6}|%{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: <hhost> LEEF:<fld1>|BCN|Adonis|<hversion>|<messageid>|<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hhost} LEEF:%{fld1}|BCN|Adonis|%{hversion}|%{messageid}|%{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-bluecatmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: cat=<category> smac=<smacaddr> src=<saddr> dmac=<dmacaddr> dst=<daddr>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "cat=%{category} smac=%{smacaddr} src=%{saddr} dmac=%{dmacaddr} dst=%{daddr}" }
			id => "msgParserId0"
			add_field => {
				"hostname" => "%{hhost}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hfld3}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: cat=<category> src=<saddr> cs1=<action> cs1Label=<fld1> url=<url>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "cat=%{category} src=%{saddr} cs1=%{action} cs1Label=%{fld1} url=%{url}" }
			id => "msgParserId1"
			add_field => {
				"hostname" => "%{hhost}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hfld3}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: cat=<category> src=<saddr> cs1=<action> cs1Label=<fld1>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "cat=%{category} src=%{saddr} cs1=%{action} cs1Label=%{fld1}" }
			id => "msgParserId2"
			add_field => {
				"hostname" => "%{hhost}"
				"product" => "%{hproduct}"
				"version" => "%{hversion}"
				"event_type" => "%{messageid}"
				"event_description" => "%{hfld3}"
				"severity" => "%{hseverity}"
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-bluecatmsg.json"
#			template_name => "bluecat_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

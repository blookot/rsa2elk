# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "evidian"
			"[observer][name]" => "Evidian"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %evidian: <id>^^<hdatetime>.<hfld6>^^<category>^^<event_type>^^<username>^^<access_point>^^<hfld2>^^<hfld3>^^<obj_name>^^<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%evidian: %{id}^^%{hdatetime}.%{hfld6}^^%{category}^^%{event_type}^^%{username}^^%{access_point}^^%{hfld2}^^%{hfld3}^^%{obj_name}^^%{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "EVIDIAN_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-evidianmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: audit-cache-date:<fld1>|audit-last-known:<fld2>|enatelXCertificateIssuer:<fld3>|enatelXRevocationURI:<url>|cache-auth:<fld4>|cluster-session:<fld5>|enatelAllowedApplicationMask:<fld6>|enatelTokenClassName:<fld7>|re-auth:<fld8>|token-class-type:<fld9>|token-config:<fld10>|enatelAccountType:<fld11>|enatelSSOAccountLoginIdentifier:<fld12>|program-exe:<filename>|enatelAccountBaseID:<fld13>|enatelApplicationObject:<fld14>|enatelLastUpdateTime:<fld15>|mac-address:<macaddr>|enatelUserEntityObject:<fld16>|roaming-session:<fld17>|domain:<domain>|controller:<fld18>|SCD-Week-hours:<fld19>|new-name:<fld20>|APPPRF-On-desktop:<fld21>|APPPRF-Prim-auth-req:<fld22>|APPPRF-Is-launched:<fld23>|APPSSO-Is-token-cached:<fld24>|APPSSO-Is-token-only:<fld25>|APPSSO-Can-reveal-act:<fld26>|APPSSO-Can-reveal-act:<fld27>|APPSSO-Can-edit-pwd:<fld28>|APPSSO-Can-lock-act:<fld29>|APPSSO-Act-prot:<fld30>|APPSSO-Act-cancel:<fld31>|APP-DLG-new-pwd:<fld32>|APP-DLG-duration:<fld33>|APP-DLG-mode:<fld34>|OLE-Authorized:<fld35>|OLE-Empty:<fld36>|enatelAllowedLoginModification:<fld37>|enatelAllowedOnAllAccessPoints:<fld38>|presentationAddress:<fld39>|enatelPropagationType:<fld40>|enatelIsPublic:<fld41>|enatelHasNoParameter:<fld42>|enatelAdmObject:<fld43>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "audit-cache-date:%{fld1}|audit-last-known:%{fld2}|enatelXCertificateIssuer:%{fld3}|enatelXRevocationURI:%{url}|cache-auth:%{fld4}|cluster-session:%{fld5}|enatelAllowedApplicationMask:%{fld6}|enatelTokenClassName:%{fld7}|re-auth:%{fld8}|token-class-type:%{fld9}|token-config:%{fld10}|enatelAccountType:%{fld11}|enatelSSOAccountLoginIdentifier:%{fld12}|program-exe:%{filename}|enatelAccountBaseID:%{fld13}|enatelApplicationObject:%{fld14}|enatelLastUpdateTime:%{fld15}|mac-address:%{macaddr}|enatelUserEntityObject:%{fld16}|roaming-session:%{fld17}|domain:%{domain}|controller:%{fld18}|SCD-Week-hours:%{fld19}|new-name:%{fld20}|APPPRF-On-desktop:%{fld21}|APPPRF-Prim-auth-req:%{fld22}|APPPRF-Is-launched:%{fld23}|APPSSO-Is-token-cached:%{fld24}|APPSSO-Is-token-only:%{fld25}|APPSSO-Can-reveal-act:%{fld26}|APPSSO-Can-reveal-act:%{fld27}|APPSSO-Can-edit-pwd:%{fld28}|APPSSO-Can-lock-act:%{fld29}|APPSSO-Act-prot:%{fld30}|APPSSO-Act-cancel:%{fld31}|APP-DLG-new-pwd:%{fld32}|APP-DLG-duration:%{fld33}|APP-DLG-mode:%{fld34}|OLE-Authorized:%{fld35}|OLE-Empty:%{fld36}|enatelAllowedLoginModification:%{fld37}|enatelAllowedOnAllAccessPoints:%{fld38}|presentationAddress:%{fld39}|enatelPropagationType:%{fld40}|enatelIsPublic:%{fld41}|enatelHasNoParameter:%{fld42}|enatelAdmObject:%{fld43}" }
			id => "msgParserId0"
			add_field => {
				"vid" => "%{category}"
				"[logstash][fullDateTimeString]" => "%{hdatetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-evidianmsg.json"
#			template_name => "evidian_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

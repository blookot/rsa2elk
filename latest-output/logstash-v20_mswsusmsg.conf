# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "mswsus"
			"[observer][name]" => "Windows Server Update Service"
			"[observer][type]" => "Configuration Management"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %mswsus: <hevent_time>^^<messageid>^^<!payload:hevent_time>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%mswsus:[\s]+(?<message>(?<hevent_time>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_mswsusmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld2>^^<id>^^Default Event.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Default[\s]+Event\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId0"
			add_field => {
				"event_description" => " Default Event"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld2>^^<id>^^Retail Log event.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId1" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Retail[\s]+Log[\s]+event\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId1"
			add_field => {
				"event_description" => " Retail Log event."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <fld2>^^<id>^^Debug Log event.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Debug[\s]+Log[\s]+event\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId2"
			add_field => {
				"event_description" => " Debug Log event."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld2>^^<id>^^Inventory: Faied to download rule file^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Inventory:[\s]+Faied[\s]+to[\s]+download[\s]+rule[\s]+file\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId3"
			add_field => {
				"event_description" => " Inventory: Failed to download rule file"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <fld2>^^<id>^^Inventory: Faied to process rule file^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId4" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Inventory:[\s]+Faied[\s]+to[\s]+process[\s]+rule[\s]+file\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId4"
			add_field => {
				"event_description" => " Inventory: Failed to process rule file"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <fld2>^^<id>^^Inventory: Faied to collect inventory data^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Inventory:[\s]+Faied[\s]+to[\s]+collect[\s]+inventory[\s]+data\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId5"
			add_field => {
				"event_description" => " Inventory: Failed to collect inventory data"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <fld2>^^<id>^^Inventory: Faied to upload result data^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Inventory:[\s]+Faied[\s]+to[\s]+upload[\s]+result[\s]+data\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId6"
			add_field => {
				"event_description" => " Inventory: Failed to upload result data"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: <fld2>^^<id>^^Inventory: Operational failure^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId7" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Inventory:[\s]+Operational[\s]+failure\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId7"
			add_field => {
				"event_description" => " Inventory: Operational failure"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA: <fld2>^^<id>^^Inventory: Successfully collected the inventory data^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId8" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Inventory:[\s]+Successfully[\s]+collected[\s]+the[\s]+inventory[\s]+data\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId8"
			add_field => {
				"event_description" => " Inventory: Successfully collected the inventory data"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: <fld2>^^<id>^^Windows Update Client successfully detected <dclass_counter1> <dclass_counter1_string>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Windows[\s]+Update[\s]+Client[\s]+successfully[\s]+detected[\s]+(?<dclass_counter1>[^\s]*)[\s]+(?<dclass_counter1_string>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId9"
			add_field => {
				"event_description" => " Windows Update Client successfully detected updates"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <fld2>^^<id>^^Windows Update Client failed to detect with error <resultcode>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId10" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Windows[\s]+Update[\s]+Client[\s]+failed[\s]+to[\s]+detect[\s]+with[\s]+error[\s]+(?<resultcode>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId10"
			add_field => {
				"event_description" => " Windows Update Client failed to detect updates with error."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: <fld2>^^<id>^^Unable to Connect: Windows is unable to connect to the automatic updates service and therefore cannot download and install updates according to the set schedule. Windows will continue to try to establish a connection.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId11" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Unable[\s]+to[\s]+Connect:[\s]+Windows[\s]+is[\s]+unable[\s]+to[\s]+connect[\s]+to[\s]+the[\s]+automatic[\s]+updates[\s]+service[\s]+and[\s]+therefore[\s]+cannot[\s]+download[\s]+and[\s]+install[\s]+updates[\s]+according[\s]+to[\s]+the[\s]+set[\s]+schedule\.[\s]+Windows[\s]+will[\s]+continue[\s]+to[\s]+try[\s]+to[\s]+establish[\s]+a[\s]+connection\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId11"
			add_field => {
				"event_description" => " Unable to Connect: Windows is unable to connect to the automatic updates service and therefore cannot download and install updates according to the set schedule. Windows will continue to try to establish a connection."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: <fld2>^^<id>^^Reporting client status.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId12" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Reporting[\s]+client[\s]+status\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId12"
			add_field => {
				"event_description" => " Reporting client status."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <fld2>^^<id>^^Client has an invalid Pid.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId13" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Client[\s]+has[\s]+an[\s]+invalid[\s]+Pid\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId13"
			add_field => {
				"event_description" => " Client has an invalid Pid."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: <fld2>^^<id>^^Error: Download failed.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId14" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Error:[\s]+Download[\s]+failed\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId14"
			add_field => {
				"event_description" => " Error: Download failed."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA: <fld2>^^<id>^^Download succeeded.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId15" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Download[\s]+succeeded\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId15"
			add_field => {
				"event_description" => " Download succeeded."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: <fld2>^^<id>^^Download canceled.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId16" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Download[\s]+canceled\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId16"
			add_field => {
				"event_description" => " Download canceled."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <fld2>^^<id>^^Download succeeded. Some bits came from a peer and not the server.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId17" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Download[\s]+succeeded\.[\s]+Some[\s]+bits[\s]+came[\s]+from[\s]+a[\s]+peer[\s]+and[\s]+not[\s]+the[\s]+server\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId17"
			add_field => {
				"event_description" => " Download succeeded. Some bits came from a peer and not the server."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: <fld2>^^<id>^^Installation Failure: Windows failed to install the following update with error <resultcode>: <application>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId18" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Installation[\s]+Failure:[\s]+Windows[\s]+failed[\s]+to[\s]+install[\s]+the[\s]+following[\s]+update[\s]+with[\s]+error[\s]+(?<resultcode>[^:]*):[\s]+(?<application>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId18"
			add_field => {
				"event_description" => " Installation Failure: Windows failed to install the update with error."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <fld2>^^<id>^^Installation Successful: Windows successfully installed the following update: <application>^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId19" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Installation[\s]+Successful:[\s]+Windows[\s]+successfully[\s]+installed[\s]+the[\s]+following[\s]+update:[\s]+(?<application>[^\^]*)\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId19"
			add_field => {
				"event_description" => " Installation Successful: Windows successfully installed the update"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: <fld2>^^<id>^^Installation successful and restart required for the following update: <application>^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId20" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Installation[\s]+successful[\s]+and[\s]+restart[\s]+required[\s]+for[\s]+the[\s]+following[\s]+update:[\s]+(?<application>[^\^]*)\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId20"
			add_field => {
				"event_description" => " Installation successful and restart required for the update:"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: <fld2>^^<id>^^Hide update: user hid one update.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId21" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Hide[\s]+update:[\s]+user[\s]+hid[\s]+one[\s]+update\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId21"
			add_field => {
				"event_description" => " Hide update: user hid one update."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: <fld2>^^<id>^^User cancelled the installation.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId22" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^User[\s]+cancelled[\s]+the[\s]+installation\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId22"
			add_field => {
				"event_description" => " User cancelled the installation."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA: <fld2>^^<id>^^Installation Ready: The following updates are downloaded and ready for installation. To install the updates, an administrator should log on to this computer and Windows will prompt with further instructions: <application>^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId23" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Installation[\s]+Ready:[\s]+The[\s]+following[\s]+updates[\s]+are[\s]+downloaded[\s]+and[\s]+ready[\s]+for[\s]+installation\.[\s]+To[\s]+install[\s]+the[\s]+updates,[\s]+an[\s]+administrator[\s]+should[\s]+log[\s]+on[\s]+to[\s]+this[\s]+computer[\s]+and[\s]+Windows[\s]+will[\s]+prompt[\s]+with[\s]+further[\s]+instructions:[\s]+(?<application>[^\^]*)\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId23"
			add_field => {
				"event_description" => "Installation Ready: The updates are downloaded and ready for installation. To install the updates, an administrator should log on to this computer and Windows will prompt with further instructions"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: <fld2>^^<id>^^Restart Required: To complete the installation of the following updates, the computer must be restarted. Until this computer has been restarted, Windows cannot search for or download new updates: <application>^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId24" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Restart[\s]+Required:[\s]+To[\s]+complete[\s]+the[\s]+installation[\s]+of[\s]+the[\s]+following[\s]+updates,[\s]+the[\s]+computer[\s]+must[\s]+be[\s]+restarted\.[\s]+Until[\s]+this[\s]+computer[\s]+has[\s]+been[\s]+restarted,[\s]+Windows[\s]+cannot[\s]+search[\s]+for[\s]+or[\s]+download[\s]+new[\s]+updates:[\s]+(?<application>[^\^]*)\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId24"
			add_field => {
				"event_description" => "Restart Required: To complete the installation of the updates, the computer must be restarted. Until this computer has been restarted, Windows cannot search for or download new updates"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: <fld2>^^<id>^^Restart Required: To complete the installation of the following updates, the computer will be restarted within <fld1> minutes: <application>^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId25" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Restart[\s]+Required:[\s]+To[\s]+complete[\s]+the[\s]+installation[\s]+of[\s]+the[\s]+following[\s]+updates,[\s]+the[\s]+computer[\s]+will[\s]+be[\s]+restarted[\s]+within[\s]+(?<fld1>[^\s]*)[\s]+minutes:[\s]+(?<application>[^\^]*)\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId25"
			add_field => {
				"event_description" => "Restart Required: To complete the installation of the updates, the computer will be restarted "
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: <fld2>^^<id>^^Unhide update: user unhid one update.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId26" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Unhide[\s]+update:[\s]+user[\s]+unhid[\s]+one[\s]+update\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId26"
			add_field => {
				"event_description" => "Unhide update: user unhid one update."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <fld2>^^<id>^^Installation pending.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId27" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Installation[\s]+pending\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId27"
			add_field => {
				"event_description" => "Installation pending."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: <fld2>^^<id>^^Reboot completed.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId28" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Reboot[\s]+completed\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId28"
			add_field => {
				"event_description" => "Reboot completed."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: <fld2>^^<id>^^Installation Failure Post Reboot.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId29" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Installation[\s]+Failure[\s]+Post[\s]+Reboot\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId29"
			add_field => {
				"event_description" => "Installation Failure Post Reboot."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA: <fld2>^^<id>^^Uninstallation Failure: Windows failed to uninstall the following update with error <resultcode>: <application>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId30" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Uninstallation[\s]+Failure:[\s]+Windows[\s]+failed[\s]+to[\s]+uninstall[\s]+the[\s]+following[\s]+update[\s]+with[\s]+error[\s]+(?<resultcode>[^:]*):[\s]+(?<application>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId30"
			add_field => {
				"event_description" => "Uninstallation Failure: Windows failed to uninstall the updates."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA: <fld2>^^<id>^^Uninstallation Successful: Windows successfully uninstalled the following update: <application>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId31" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Uninstallation[\s]+Successful:[\s]+Windows[\s]+successfully[\s]+uninstalled[\s]+the[\s]+following[\s]+update:[\s]+(?<application>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId31"
			add_field => {
				"event_description" => "Uninstallation Successful: Windows successfully uninstalled the updates"
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId32
	# line in RSA: <fld2>^^<id>^^User cancelled the uninstall.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId32" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^User[\s]+cancelled[\s]+the[\s]+uninstall\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId32"
			add_field => {
				"event_description" => "User cancelled the uninstall."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId33
	# line in RSA: <fld2>^^<id>^^Uninstallation successful and restart required for the following update: <application>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId33" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Uninstallation[\s]+successful[\s]+and[\s]+restart[\s]+required[\s]+for[\s]+the[\s]+following[\s]+update:[\s]+(?<application>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId33"
			add_field => {
				"event_description" => "Uninstallation successful and restart required for updates."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId34
	# line in RSA: <fld2>^^<id>^^Content download started.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId34" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Content[\s]+download[\s]+started\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId34"
			add_field => {
				"event_description" => "Content download started."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId35
	# line in RSA: <fld2>^^<id>^^Error: Content download failed. Reason=<fld22>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId35" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Error:[\s]+Content[\s]+download[\s]+failed\.[\s]+Reason=(?<fld22>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId35"
			add_field => {
				"event_description" => "Error: Content download failed."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId36
	# line in RSA: <fld2>^^<id>^^Content download succeeded.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId36" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Content[\s]+download[\s]+succeeded\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId36"
			add_field => {
				"event_description" => "Content download succeeded."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId37
	# line in RSA: <fld2>^^<id>^^File download cancelled.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId37" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^File[\s]+download[\s]+cancelled\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId37"
			add_field => {
				"event_description" => "File download cancelled."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId38
	# line in RSA: <fld2>^^<id>^^File download succeeded.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId38" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^File[\s]+download[\s]+succeeded\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId38"
			add_field => {
				"event_description" => "File download succeeded."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId39
	# line in RSA: <fld2>^^<id>^^A synchronization was started due to its schedule.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId39" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^A[\s]+synchronization[\s]+was[\s]+started[\s]+due[\s]+to[\s]+its[\s]+schedule\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId39"
			add_field => {
				"event_description" => "A synchronization was started due to its schedule."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId40
	# line in RSA: <fld2>^^<id>^^A synchronization was started manually.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId40" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^A[\s]+synchronization[\s]+was[\s]+started[\s]+manually\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId40"
			add_field => {
				"event_description" => "A synchronization was started manually."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId41
	# line in RSA: <fld2>^^<id>^^A synchronization completed successfully.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId41" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^A[\s]+synchronization[\s]+completed[\s]+successfully\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId41"
			add_field => {
				"event_description" => "A synchronization completed successfully."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId42
	# line in RSA: <fld2>^^<id>^^A synchronization failed.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId42" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^A[\s]+synchronization[\s]+failed\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId42"
			add_field => {
				"event_description" => "A synchronization failed."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA: <fld2>^^<id>^^A synchronization was canceled.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId43" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^A[\s]+synchronization[\s]+was[\s]+canceled\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId43"
			add_field => {
				"event_description" => "A synchronization was canceled."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId44
	# line in RSA: <fld2>^^<id>^^A Subscription has been modified.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId44" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^A[\s]+Subscription[\s]+has[\s]+been[\s]+modified\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId44"
			add_field => {
				"event_description" => "A Subscription has been modified."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId45
	# line in RSA: <fld2>^^<id>^^Connection to database failed. Reason=<fld22>. Connection string: <info>^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId45" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Connection[\s]+to[\s]+database[\s]+failed\.[\s]+Reason=(?<fld22>[^\.]*)\.[\s]+Connection[\s]+string:[\s]+(?<info>[^\^]*)\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId45"
			add_field => {
				"event_description" => "Connection to database failed."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId46
	# line in RSA: <fld2>^^<id>^^Approval of update revision failed. Reason=<fld22>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId46" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Approval[\s]+of[\s]+update[\s]+revision[\s]+failed\.[\s]+Reason=(?<fld22>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId46"
			add_field => {
				"event_description" => "Approval of update revision failed."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId47
	# line in RSA: <fld2>^^<id>^^Auto approval of update failed. Reason=<fld22>.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId47" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Auto[\s]+approval[\s]+of[\s]+update[\s]+failed\.[\s]+Reason=(?<fld22>[^\.]*)\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId47"
			add_field => {
				"event_description" => "Auto approval of update failed."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId48
	# line in RSA: <fld2>^^<id>^^Catalog synchronization agent appears to have failed and aborted.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId48" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Catalog[\s]+synchronization[\s]+agent[\s]+appears[\s]+to[\s]+have[\s]+failed[\s]+and[\s]+aborted\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId48"
			add_field => {
				"event_description" => " Catalog synchronization agent appears to have failed and aborted."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId49
	# line in RSA: <fld2>^^<id>^^Content synchornization agent appears to have failed and aborted.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId49" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Content[\s]+synchornization[\s]+agent[\s]+appears[\s]+to[\s]+have[\s]+failed[\s]+and[\s]+aborted\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId49"
			add_field => {
				"event_description" => " Content synchronization agent appears to have failed and aborted."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId50
	# line in RSA: <fld2>^^<id>^^Failure occured in Stats.NET Handler. Severity: <severity>, Message: <fld22>^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId50" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^Failure[\s]+occured[\s]+in[\s]+Stats\.NET[\s]+Handler\.[\s]+Severity:[\s]+(?<severity>[^,]*),[\s]+Message:[\s]+(?<fld22>[^\^]*)\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId50"
			add_field => {
				"event_description" => "Failure occured in Stats.NET Handler."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId51
	# line in RSA: <fld2>^^<id>^^This update is created locally.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId51" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^This[\s]+update[\s]+is[\s]+created[\s]+locally\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId51"
			add_field => {
				"event_description" => "Update created locally."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId52
	# line in RSA: <fld2>^^<id>^^This update is submitted to central publishing server.^^<event_type>^^<saddr>^^<domain>^^{<process>^^(null)|<process>^^<fld10>|<process>}
	else if [logstash][msgparser][id] == "msgParserId52" {
		grok {
			match => { "message" => "^(?<fld2>[^\^]*)\^\^(?<id>[^\^]*)\^\^This[\s]+update[\s]+is[\s]+submitted[\s]+to[\s]+central[\s]+publishing[\s]+server\.\^\^(?<event_type>[^\^]*)\^\^(?<saddr>[^\^]*)\^\^(?<domain>[^\^]*)\^\^((?<process>[^\^]*)\^\^\(null\)|(?<process>[^\^]*)\^\^(?<fld10>.*)|(?<process>.*))$" }
			id => "msgParserId52"
			add_field => {
				"event_description" => "Update is submitted to central publishing server."
				"[logstash][fullDateTimeString]" => "%{hevent_time}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_mswsusmsg.json"
#			template_name => "mswsus_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "aventail"
			"[observer][name]" => "Aventail SSL VPN"
			"[observer][type]" => "VPN"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 1114
	# line in RSA: <hmonth> <hdate> <htime> <shost> <messageid>: AVFM:handler:close:<!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<shost>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+AVFM:handler:close:(?<payload>.*))$" }
			id => "header-1114"
			add_field => {
				"[rsa][header][id]" => "1114"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0100
	# line in RSA: %AVENTAIL-4: <hfld1> <hfld2> "<hfld3>" "<hfld4>" 1.1 <messageid>: <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-4:[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\"(?<hfld3>[^\"]*)\"[\s]+\"(?<hfld4>[^\"]*)\"[\s]+1\.1[\s]+(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0100"
			add_field => {
				"[rsa][header][id]" => "0100"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0101
	# line in RSA: %AVENTAIL-4: <hfld1> <hfld2> "<hfld3>" "<hfld4>" 1.1 <messageid> <!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-4:[\s]+(?<message>(?<hfld1>[^\s]*)[\s]+(?<hfld2>[^\s]*)[\s]+\"(?<hfld3>[^\"]*)\"[\s]+\"(?<hfld4>[^\"]*)\"[\s]+1\.1[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0101"
			add_field => {
				"[rsa][header][id]" => "0101"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0001
	# line in RSA: %AVENTAIL-<hdata>: <hdate> <htime> <fld1> <hlevel> [<husername>]: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<hlevel>[^\s]*)[\s]+\[(?<husername>[^\]]*)\]:[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %AVENTAIL-<hdata>: <hday> <hmonth> <hyear> <htime> - [<username>]:<messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+(?<hday>[^\s]*)[\s]+(?<hmonth>[^\s]*)[\s]+(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+\-[\s]+\[(?<username>[^\]]*)\]:(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %AVENTAIL-<hdata>: <hday> <hmonth> <hyear> <htime> - '<fld1>: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+(?<hday>[^\s]*)[\s]+(?<hmonth>[^\s]*)[\s]+(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+\-[\s]+'(?<fld1>[^:]*):[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %AVENTAIL-<hdata>: <hday> <hmonth> <hyear> <htime> - <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+(?<hday>[^\s]*)[\s]+(?<hmonth>[^\s]*)[\s]+(?<hyear>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+\-[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %AVENTAIL-<hdata>: <saddr> <fld1> <fld2> [<hdatetime> <fld3>] "<messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+(?<saddr>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+\[(?<hdatetime>[^\s]*)[\s]+(?<fld3>[^\]]*)\][\s]+\"(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0006
	# line in RSA: %AVENTAIL-<hdata>: [<hday> <hmonth> <hdate> <htime> <hyear>] [<hlevel>] <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+\[(?<hday>[^\s]*)[\s]+(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hyear>[^\]]*)\][\s]+\[(?<hlevel>[^\]]*)\][\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0006"
			add_field => {
				"[rsa][header][id]" => "0006"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0008
	# line in RSA: %AVENTAIL-<hdata>: [<hdatetime> <fld1>] <fld2> <operation_id> <fld3> <fld4> <hlevel> <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%AVENTAIL-%{hdata}: [%{hdatetime} %{fld1}] %{fld2} %{operation_id} %{fld3} %{fld4} %{hlevel} %{messageid} %{message}" }
			id => "header-0008"
			add_field => {
				"[rsa][header][id]" => "0008"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0007
	# line in RSA: %AVENTAIL-<hdata>: <hdate> <htime> <fld1> <hlevel> <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<fld1>[^\s]*)[\s]+(?<hlevel>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0007"
			add_field => {
				"[rsa][header][id]" => "0007"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0010
	# line in RSA: %AVENTAIL-<hdata>: <saddr>:<sport> <scheme> { "(<husername>)@(<hfld34>)" | "-" } "<hdatetime> <hfld35>" <hfld36> <messageid> <!payload>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%AVENTAIL\-(?<hdata>[^:]*):[\s]+(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+(?<scheme>[^\s]*)[\s]+([\s]*\"\((?<husername>[^\)]*)\)@\((?<hfld34>[^\)]*)\)\"[\s]+|[\s]*\"\-\"[\s]+)[\s]+\"(?<hdatetime>[^\s]*)[\s]+(?<hfld35>[^\"]*)\"[\s]+(?<hfld36>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<message>.*)$" }
			id => "header-0010"
			add_field => {
				"[rsa][header][id]" => "0010"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1111
	# line in RSA: <hmonth> <hdate> <htime> syslog-ng@<hfld50> <messageid>[<hdata>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+syslog\-ng@(?<hfld50>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hdata>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-1111"
			add_field => {
				"[rsa][header][id]" => "1111"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0011
	# line in RSA: <hmonth> <hdate> <htime> syslog-ng@<hfld50> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+syslog\-ng@(?<hfld50>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0011"
			add_field => {
				"[rsa][header][id]" => "0011"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0012
	# line in RSA: <hmonth> <hdate> <htime> <hfld21>/<hfld22> <messageid> [<hfld23>,<hfld24>] <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld21>[^/]*)/(?<hfld22>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+\[(?<hfld23>[^,]*),(?<hfld24>[^\]]*)\][\s]+(?<payload>.*))$" }
			id => "header-0012"
			add_field => {
				"[rsa][header][id]" => "0012"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0013
	# line in RSA: <hmonth> <hdate> <htime> <hfld21>/<hfld22> <messageid>:cleanup:<hfld51> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld21>[^/]*)/(?<hfld22>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):cleanup:(?<hfld51>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0013"
			add_field => {
				"[rsa][header][id]" => "0013"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0014
	# line in RSA: <hmonth> <hdate> <htime> <hfld50> <hserver>: [<hdatetime> <fld1>] <fld2> <operation_id> <fld3> <fld4> <hlevel> <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hdate} %{htime} %{hfld50} %{hserver}: [%{hdatetime} %{fld1}] %{fld2} %{operation_id} %{fld3} %{fld4} %{hlevel} %{messageid} %{message}" }
			id => "header-0014"
			add_field => {
				"[rsa][header][id]" => "0014"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0015
	# line in RSA: <hmonth> <hdate> <htime> <hfld15>/<hfld16> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld15>[^/]*)/(?<hfld16>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-0015"
			add_field => {
				"[rsa][header][id]" => "0015"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0016
	# line in RSA: <hmonth> <hdate> <htime> <hfld15>/<hfld16> <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld15>[^/]*)/(?<hfld16>[^\s]*)[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0016"
			add_field => {
				"[rsa][header][id]" => "0016"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0017
	# line in RSA: <hmonth> <hdate> <htime> <shost> WP: <messageid>  [<hfld1>,<hfld2>] <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%{hmonth} %{hdate} %{htime} %{shost} WP: %{messageid}  [%{hfld1},%{hfld2}] %{message}" }
			id => "header-0017"
			add_field => {
				"[rsa][header][id]" => "0017"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0018
	# line in RSA: <hmonth> <hdate> <htime> <shost> <hserver>: <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<shost>[^\s]*)[\s]+(?<hserver>[^:]*):[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0018"
			add_field => {
				"[rsa][header][id]" => "0018"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1112
	# line in RSA: <hmonth> <hdate> <htime> <hfld50> <messageid>[<hdata>]: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<hfld50>[^\s]*)[\s]+(?<message>(?<messageid>[^\[]*)\[(?<hdata>[^\]]*)\]:[\s]+(?<payload>.*))$" }
			id => "header-1112"
			add_field => {
				"[rsa][header][id]" => "1112"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 1113
	# line in RSA: <hmonth> <hdate> <htime> <shost> <messageid>: <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<hmonth>[^\s]*)[\s]+(?<hdate>[^\s]*)[\s]+(?<htime>[^\s]*)[\s]+(?<shost>[^\s]*)[\s]+(?<message>(?<messageid>[^:]*):[\s]+(?<payload>.*))$" }
			id => "header-1113"
			add_field => {
				"[rsa][header][id]" => "1113"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_aventailmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	if [logstash][msgparser][id] == "/USR/SBIN/CRON" {
		# MESSAGE 000190
		# line in RSA:  <process>[<process_id>]: (<username>) CMD (<service>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: (%{username}) CMD (%{service})" }
				id => "message-000190"
				add_field => {
				"event_description" => "CRON execution"
					"[event][id]" => "000190"
					"[rsa][message][id1]" => "000190"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000278
		# line in RSA:  <process>[<process_id>]: (<username>) info (<info>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: (%{username}) info (%{info})" }
				id => "message-000278"
				add_field => {
				"event_description" => "CRON execution"
					"[event][id]" => "000278"
					"[rsa][message][id1]" => "000278"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000218
		# line in RSA:  <process>[<process_id>]: (<username>) error (<info> with exit status <resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: (%{username}) error (%{info} with exit status %{resultcode})" }
				id => "message-000218"
				add_field => {
				"event_description" => "CRON execution"
					"[event][id]" => "000218"
					"[rsa][message][id1]" => "000218"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Added" {
		# MESSAGE 000001
		# line in RSA: Added { authentication | resource | SSH } <fld1> - Name=<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Added[\s]+([\s]*authentication[\s]+|[\s]*resource[\s]+|[\s]*SSH[\s]+)[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+Name=(?<info>.*)$" }
				id => "message-000001"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Added"
					"[event][id]" => "000001"
					"[rsa][message][id1]" => "000001"
					"[event][categoryid]" => "1502030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000002
		# line in RSA: Added { WorkPlace shortcut | zone } - Description=<info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Added[\s]+([\s]*WorkPlace[\s]+shortcut[\s]+|[\s]*zone[\s]+)[\s]+\-[\s]+Description=(?<info>.*)$" }
				id => "message-000002"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Added"
					"[event][id]" => "000002"
					"[rsa][message][id1]" => "000002"
					"[event][categoryid]" => "1402000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000003
		# line in RSA: Added user - Name=<username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Added user - Name=%{username}" }
				id => "message-000003"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Added user"
					"[event][id]" => "000003"
					"[rsa][message][id1]" => "000003"
					"[event][categoryid]" => "1402020200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000004
		# line in RSA: Added Authentication { Realm REALM. | Module SecurID.}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Added[\s]+Authentication[\s]+([\s]*Realm[\s]+REALM\.[\s]+|[\s]*Module[\s]+SecurID\.)$" }
				id => "message-000004"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Added Authentication"
					"[event][id]" => "000004"
					"[rsa][message][id1]" => "000004"
					"[event][categoryid]" => "1502030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000602
		# line in RSA: Added community - Name=<fld51>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Added community - Name=%{fld51}" }
				id => "message-000602"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Added community"
					"[event][id]" => "000602"
					"[rsa][message][id1]" => "000602"
					"[event][categoryid]" => "1701010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000603
		# line in RSA: Added SNMP network connection - Address=<saddr> Netmask=<smask>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Added SNMP network connection - Address=%{saddr} Netmask=%{smask}" }
				id => "message-000603"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Added SNMP network connection"
					"[event][id]" => "000603"
					"[rsa][message][id1]" => "000603"
					"[event][categoryid]" => "1701010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA: Adding user group - Name=<group>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "Adding user group - Name=%{group}" }
			id => "msgParserId9"
			add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Adding user"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "AMC" {
		# MESSAGE 000199
		# line in RSA:  <process>: <fld1> WARNING <fld3> - workplace status on apply: <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{fld1} WARNING %{fld3} - workplace status on apply: %{fld2}" }
				id => "message-000199"
				add_field => {
				"event_description" => "workplace status on apply"
					"[event][id]" => "000199"
					"[rsa][message][id1]" => "000199"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000198
		# line in RSA:  <process>: <fld1> INFO <fld2> - Successfully synchronized slave, <shost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: %{fld1} INFO %{fld2} - Successfully synchronized slave, %{shost}" }
				id => "message-000198"
				add_field => {
				"event_description" => "Successfully synchronized slave"
					"[event][id]" => "000198"
					"[rsa][message][id1]" => "000198"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000518
		# line in RSA:  <fld29>:<fld51> INFO <fld52>- Finished applying configuration changes
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}:%{fld51} INFO %{fld52}- Finished applying configuration changes" }
				id => "message-000518"
				add_field => {
				"event_description" => "Finished applying configuration changes"
					"[event][id]" => "000518"
					"[rsa][message][id1]" => "000518"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000519
		# line in RSA:  <fld29>:<fld51> INFO <fld52>- About to reconfigure service: <service>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}:%{fld51} INFO %{fld52}- About to reconfigure service: %{service}" }
				id => "message-000519"
				add_field => {
				"event_description" => "About to reconfigure service"
					"[event][id]" => "000519"
					"[rsa][message][id1]" => "000519"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000520
		# line in RSA:  <fld29>:<fld51> INFO <fld52>- Applying configuration changes...
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}:%{fld51} INFO %{fld52}- Applying configuration changes..." }
				id => "message-000520"
				add_field => {
				"event_description" => "Applying configuration changes"
					"[event][id]" => "000520"
					"[rsa][message][id1]" => "000520"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000521
		# line in RSA:  <fld29>:<fld51> INFO <fld52>- About to restart service: <fld53>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}:%{fld51} INFO %{fld52}- About to restart service: %{fld53}" }
				id => "message-000521"
				add_field => {
				"event_description" => "About to restart service"
					"[event][id]" => "000521"
					"[rsa][message][id1]" => "000521"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000740
		# line in RSA:  AMC: <fld51> WARNING <fld52>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AMC: %{fld51} WARNING %{fld52}" }
				id => "message-000740"
				add_field => {
					"[event][id]" => "000740"
					"[rsa][message][id1]" => "000740"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Applied" {
		# MESSAGE 000006
		# line in RSA: Applied configuration changes
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Applied configuration changes" }
				id => "message-000006"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Configuration Changes"
					"[event][id]" => "000006"
					"[rsa][message][id1]" => "000006"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000007
		# line in RSA: Applied Changes
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Applied Changes" }
				id => "message-000007"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Applied Changes"
					"[event][id]" => "000007"
					"[rsa][message][id1]" => "000007"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA: Attempting to add user to the list.
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "Attempting to add user to the list." }
			id => "msgParserId19"
			add_field => {
				"event_description" => "add user"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: ASAP upgrade/patch initiated from Management Console.
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "ASAP upgrade/patch initiated from Management Console." }
			id => "msgParserId20"
			add_field => {
				"administrator" => "%{husername}"
				"event_description" => "upgrade"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "AVFM" {
		# MESSAGE 000197
		# line in RSA:  <process>:handler:close:<saddr>:<sport>-><daddr>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}:handler:close:%{saddr}:%{sport}->%{daddr}:%{dport}" }
				id => "message-000197"
				add_field => {
				"event_description" => "AVFM handler close"
					"[event][id]" => "000197"
					"[rsa][message][id1]" => "000197"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000515
		# line in RSA:  <fld29>: Started
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Started" }
				id => "message-000515"
				add_field => {
				"event_description" => "Started"
					"[event][id]" => "000515"
					"[rsa][message][id1]" => "000515"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000516
		# line in RSA:  <process>: Stopped
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: Stopped" }
				id => "message-000516"
				add_field => {
				"event_description" => "Stopped"
					"[event][id]" => "000516"
					"[rsa][message][id1]" => "000516"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: Configuring server for <protocol> protocol
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "Configuring server for %{protocol} protocol" }
			id => "msgParserId24"
			add_field => {
				"event_description" => "Configuring server"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "CSACL" {
		# MESSAGE 000201
		# line in RSA:  It took <fld1> seconds to examine <fld2> rules and build the custom rule list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "It took %{fld1} seconds to examine %{fld2} rules and build the custom rule list" }
				id => "message-000201"
				add_field => {
				"event_description" => "examine rules and build the custom rule list"
					"[event][id]" => "000201"
					"[rsa][message][id1]" => "000201"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000170
		# line in RSA:  <process> { - userGroup(<info>): Module | /IP - <url>: Module | - <url>: Module } reported it could not determine if it matched
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\s]*)[\s]+([\s]*\-[\s]+userGroup\((?<info>[^\)]*)\):[\s]+Module[\s]+|[\s]*/IP[\s]+\-[\s]+(?<url>[^:]*):[\s]+Module[\s]+|[\s]*\-[\s]+(?<url>[^:]*):[\s]+Module[\s]+)[\s]+reported[\s]+it[\s]+could[\s]+not[\s]+determine[\s]+if[\s]+it[\s]+matched$" }
				id => "message-000170"
				add_field => {
				"event_description" => "Module reported it could not determine if it matched"
					"[event][id]" => "000170"
					"[rsa][message][id1]" => "000170"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000661
		# line in RSA: User '(<username>)@{ (<shost>) (<info>)' | (<shost>)' } connecting from '<saddr>:<sport>' { found no matching access rule, | matched rule #<fld1> '<fld2>', } access to '<dhost>:<dport>' is denied.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+'\((?<username>[^\)]*)\)@([\s]*\((?<shost>[^\)]*)\)[\s]+\((?<info>[^\)]*)\)'[\s]+|[\s]*\((?<shost>[^\)]*)\)'[\s]+)[\s]+connecting[\s]+from[\s]+'(?<saddr>[^:]*):(?<sport>[^']*)'[\s]+([\s]*found[\s]+no[\s]+matching[\s]+access[\s]+rule,[\s]+|[\s]*matched[\s]+rule[\s]+#(?<fld1>[^\s]*)[\s]+'(?<fld2>[^']*)',[\s]+)[\s]+access[\s]+to[\s]+'(?<dhost>[^:]*):(?<dport>[^']*)'[\s]+is[\s]+denied\.$" }
				id => "message-000661"
				add_field => {
				"event_description" => "user connection denied"
					"[event][id]" => "000661"
					"[rsa][message][id1]" => "000661"
					"[event][categoryid]" => "1501040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000662
		# line in RSA:  User {'(<username>)@(<shost>) (UID=<uid>, <dn>)'|'(<username>)@(<shost>) (<dn>)'|'(<username>)@(<shost>)'} connecting from '<saddr>:<sport>' matched rule {#<fld1> '<fld2>'| #<fld1>}, access to '<dhost>:<dport>' is permitted.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*User[\s]+('\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+\(UID=(?<uid>[^,]*),[\s]+(?<dn>[^\)]*)\)'|'\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+\((?<dn>[^\)]*)\)'|'\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)')[\s]+connecting[\s]+from[\s]+'(?<saddr>[^:]*):(?<sport>[^']*)'[\s]+matched[\s]+rule[\s]+(#(?<fld1>[^\s]*)[\s]+'(?<fld2>[^']*)'|[\s]*#(?<fld1>[^,]*)),[\s]+access[\s]+to[\s]+'(?<dhost>[^:]*):(?<dport>[^']*)'[\s]+is[\s]+permitted\.$" }
				id => "message-000662"
				add_field => {
				"event_description" => "user connection permitted"
					"[event][id]" => "000662"
					"[rsa][message][id1]" => "000662"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000176
		# line in RSA:  <fld1>: Unable to resolve hostname '<dhost>', reason='Host Not Found'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: Unable to resolve hostname '%{dhost}', reason='Host Not Found'" }
				id => "message-000176"
				add_field => {
				"event_description" => "Unable to resolve hostname"
					"[event][id]" => "000176"
					"[rsa][message][id1]" => "000176"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000666
		# line in RSA:  <fld1>: Unable to resolve hostname '<dhost>', reason='DNS Cache Failure'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1}: Unable to resolve hostname '%{dhost}', reason='DNS Cache Failure'" }
				id => "message-000666"
				add_field => {
				"event_description" => "DNS Cache Failure"
					"[event][id]" => "000666"
					"[rsa][message][id1]" => "000666"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000669
		# line in RSA:  The host resource '<dhost>' does not resolve in DNS and should be <action> from your configuration file.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "The host resource '%{dhost}' does not resolve in DNS and should be %{action} from your configuration file." }
				id => "message-000669"
				add_field => {
				"event_description" => "Unable to resolve hostname"
					"[event][id]" => "000669"
					"[rsa][message][id1]" => "000669"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000704
		# line in RSA:  User '(<username>)@(<shost>)' connecting from '<saddr>:<sport>' matched rule '<rulename>', access to '<daddr>:<dport>' is permitted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User '(%{username})@(%{shost})' connecting from '%{saddr}:%{sport}' matched rule '%{rulename}', access to '%{daddr}:%{dport}' is permitted." }
				id => "message-000704"
				add_field => {
					"[event][id]" => "000704"
					"[rsa][message][id1]" => "000704"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId32
	# line in RSA:  host <hostip>/<interface> ignores redirects for <saddr> to <daddr>
	else if [logstash][msgparser][id] == "msgParserId32" {
		dissect {
			mapping => { "message" => "host %{hostip}/%{interface} ignores redirects for %{saddr} to %{daddr}" }
			id => "msgParserId32"
			add_field => {
				"event_description" => "host ignoring redirects for this route"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "linfo" {
		# MESSAGE 000513
		# line in RSA:  <fld29>: Successfully loaded the license
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Successfully loaded the license" }
				id => "message-000513"
				add_field => {
				"event_description" => "licenced"
					"[event][id]" => "000513"
					"[rsa][message][id1]" => "000513"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000514
		# line in RSA:  <fld29>: License Version = <fld51>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: License Version = %{fld51}" }
				id => "message-000514"
				add_field => {
					"[event][id]" => "000514"
					"[rsa][message][id1]" => "000514"
					"[event][categoryid]" => "1608000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA:  ll header: <fld1>
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "ll header: %{fld1}" }
			id => "msgParserId35"
			add_field => {
				"event_description" => "link header info"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA:  martian source <daddr> from <saddr>, on dev <interface>
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "martian source %{daddr} from %{saddr}, on dev %{interface}" }
			id => "msgParserId36"
			add_field => {
				"event_description" => "martian source on interface"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Deleted" {
		# MESSAGE 000011
		# line in RSA: Deleted WorkPlace shortcut - ID=<fld1> Description=<fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deleted WorkPlace shortcut - ID=%{fld1} Description=%{fld2}" }
				id => "message-000011"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Deleted WorkPlace shortcut"
					"[event][id]" => "000011"
					"[rsa][message][id1]" => "000011"
					"[event][categoryid]" => "1701030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000600
		# line in RSA: Deleted authentication realm - Name=<group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deleted authentication realm - Name=%{group}" }
				id => "message-000600"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Deleted authentication realm"
					"[event][id]" => "000600"
					"[rsa][message][id1]" => "000600"
					"[event][categoryid]" => "1701030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000601
		# line in RSA: Deleted access rule - ID=<rule> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Deleted access rule - ID=%{rule} %{info}" }
				id => "message-000601"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Deleted access rule"
					"[event][id]" => "000601"
					"[rsa][message][id1]" => "000601"
					"[event][categoryid]" => "1701030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "EWACL" {
		# MESSAGE 000013
		# line in RSA: User '{ (<username>)@(<dhost>) (<info>)' | (<username>)@(<dhost>)' | (<fld2>) (<username>)@(<dhost>)' } connecting from '<daddr>:<dport>' { matched rule #<rule> | matched rule } '<rulename>', access to '<shost>:<sport>' is permitted.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+'([\s]*\((?<username>[^\)]*)\)@\((?<dhost>[^\)]*)\)[\s]+\((?<info>[^\)]*)\)'[\s]+|[\s]*\((?<username>[^\)]*)\)@\((?<dhost>[^\)]*)\)'[\s]+|[\s]*\((?<fld2>[^\)]*)\)[\s]+\((?<username>[^\)]*)\)@\((?<dhost>[^\)]*)\)'[\s]+)[\s]+connecting[\s]+from[\s]+'(?<daddr>[^:]*):(?<dport>[^']*)'[\s]+([\s]*matched[\s]+rule[\s]+#(?<rule>[^\s]*)[\s]+|[\s]*matched[\s]+rule[\s]+)[\s]+'(?<rulename>[^']*)',[\s]+access[\s]+to[\s]+'(?<shost>[^:]*):(?<sport>[^']*)'[\s]+is[\s]+permitted\.$" }
				id => "message-000013"
				add_field => {
				"event_description" => "login"
					"[event][id]" => "000013"
					"[rsa][message][id1]" => "000013"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000188
		# line in RSA:  <info> { - userGroup(<fld22>): Module | /IP - <url>: Module | - <url>: Module } reported it could not determine if it matched
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<info>[^\s]*)[\s]+([\s]*\-[\s]+userGroup\((?<fld22>[^\)]*)\):[\s]+Module[\s]+|[\s]*/IP[\s]+\-[\s]+(?<url>[^:]*):[\s]+Module[\s]+|[\s]*\-[\s]+(?<url>[^:]*):[\s]+Module[\s]+)[\s]+reported[\s]+it[\s]+could[\s]+not[\s]+determine[\s]+if[\s]+it[\s]+matched$" }
				id => "message-000188"
				add_field => {
				"event_description" => "Module reported it could not determine if it matched"
					"[event][id]" => "000188"
					"[rsa][message][id1]" => "000188"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000187
		# line in RSA:  It took <duration> seconds to examine <fld2> rules and build the custom rule list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "It took %{duration} seconds to examine %{fld2} rules and build the custom rule list" }
				id => "message-000187"
				add_field => {
				"event_description" => "examine rules and build the custom rule list"
					"[event][id]" => "000187"
					"[rsa][message][id1]" => "000187"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000178
		# line in RSA:  <info>: Unable to resolve hostname '<dhost>', reason='<result>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{info}: Unable to resolve hostname '%{dhost}', reason='%{result}'" }
				id => "message-000178"
				add_field => {
				"event_description" => "Unable to resolve hostname"
					"[event][id]" => "000178"
					"[rsa][message][id1]" => "000178"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000618
		# line in RSA: User '(<username>)@{ (<fld21>) (<fld22>)' | (<fld23>)' } connecting from '<shost>:<sport>' { found no matching access rule, | matched rule #<fld1> '<fld2>', } access to '<dhost>:<dport>' is denied.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+'\((?<username>[^\)]*)\)@([\s]*\((?<fld21>[^\)]*)\)[\s]+\((?<fld22>[^\)]*)\)'[\s]+|[\s]*\((?<fld23>[^\)]*)\)'[\s]+)[\s]+connecting[\s]+from[\s]+'(?<shost>[^:]*):(?<sport>[^']*)'[\s]+([\s]*found[\s]+no[\s]+matching[\s]+access[\s]+rule,[\s]+|[\s]*matched[\s]+rule[\s]+#(?<fld1>[^\s]*)[\s]+'(?<fld2>[^']*)',[\s]+)[\s]+access[\s]+to[\s]+'(?<dhost>[^:]*):(?<dport>[^']*)'[\s]+is[\s]+denied\.$" }
				id => "message-000618"
				add_field => {
				"event_description" => "user access denied"
					"[event][id]" => "000618"
					"[rsa][message][id1]" => "000618"
					"[event][categoryid]" => "1501040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000012
		# line in RSA: No Match { EW | Web Access } { Rule #<fld1> | Rule } '<rulename>', User '(<username>)@(<dhost>)', { Destination Network is '<daddr>:<dport>' |  unknown }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^No[\s]+Match[\s]+([\s]*EW[\s]+|[\s]*Web[\s]+Access[\s]+)[\s]+([\s]*Rule[\s]+#(?<fld1>[^\s]*)[\s]+|[\s]*Rule[\s]+)[\s]+'(?<rulename>[^']*)',[\s]+User[\s]+'\((?<username>[^\)]*)\)@\((?<dhost>[^\)]*)\)',[\s]+([\s]*Destination[\s]+Network[\s]+is[\s]+'(?<daddr>[^:]*):(?<dport>[^']*)'[\s]+|[\s]*unknown[\s]+)$" }
				id => "message-000012"
				add_field => {
				"event_description" => "No Match Rule"
					"[event][id]" => "000012"
					"[rsa][message][id1]" => "000012"
					"[event][categoryid]" => "1501010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000014
		# line in RSA:  avtComparator: Unable to confirm valid ip address for address group '<hostname>' error '<result>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "avtComparator: Unable to confirm valid ip address for address group '%{hostname}' error '%{result}'" }
				id => "message-000014"
				add_field => {
				"event_description" => "confirmation valid ip"
					"[event][id]" => "000014"
					"[rsa][message][id1]" => "000014"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000735
		# line in RSA:  No Policy Variable Value found for Variable '<fld2>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No Policy Variable Value found for Variable '%{fld2}'" }
				id => "message-000735"
				add_field => {
				"event_description" => "No Policy Variable Value found"
					"[event][id]" => "000735"
					"[rsa][message][id1]" => "000735"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId47
	# line in RSA:  <process>: <action>
	else if [logstash][msgparser][id] == "msgParserId47" {
		dissect {
			mapping => { "message" => "%{process}: %{action}" }
			id => "msgParserId47"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId48
	# line in RSA:  <saddr>:<sport> - "(<username>)@(<group>)" "<fld20>.<fld21>" 1.1 <web_method>:<protocol> <daddr>:<dport> <fld22> <sbytes> <bytes> <duration>
	else if [logstash][msgparser][id] == "msgParserId48" {
		dissect {
			mapping => { "message" => "%{saddr}:%{sport} - \"(%{username})@(%{group})\" \"%{fld20}.%{fld21}\" 1.1 %{web_method}:%{protocol} %{daddr}:%{dport} %{fld22} %{sbytes} %{bytes} %{duration}" }
			id => "msgParserId48"
			add_field => {
				"event_description" => "message flow"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId49
	# line in RSA:  <web_method> <url> <protocol>" <resultcode> <sbytes>
	else if [logstash][msgparser][id] == "msgParserId49" {
		dissect {
			mapping => { "message" => "%{web_method} %{url} %{protocol}\" %{resultcode} %{sbytes}" }
			id => "msgParserId49"
			add_field => {
				"event_description" => "GET requested"
				"[logstash][fullDateTimeString]" => "%{hdatehtime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy:H:m:s" ] }
		}
	}
	# PARSER msgParserId50
	# line in RSA: Licensing: License file, <filename>, imported by <username>
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "Licensing: License file, %{filename}, imported by %{username}" }
			id => "msgParserId50"
			add_field => {
				"event_description" => "Licensing"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Login" {
		# MESSAGE 000017
		# line in RSA: Login succeeded - Address=<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login succeeded - Address=%{saddr}" }
				id => "message-000017"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Login succeeded"
					"[event][id]" => "000017"
					"[rsa][message][id1]" => "000017"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000018
		# line in RSA: Login failed - Address=<saddr>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed - Address=%{saddr}" }
				id => "message-000018"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Login failed"
					"[event][id]" => "000018"
					"[rsa][message][id1]" => "000018"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000019
		# line in RSA: Login succeeded for user "<username>" from IP <saddr>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login succeeded for user \"%{username}\" from IP %{saddr}'" }
				id => "message-000019"
				add_field => {
				"event_description" => "Login succeeded"
					"[event][id]" => "000019"
					"[rsa][message][id1]" => "000019"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000020
		# line in RSA: Login failed for user "<username>" from IP <saddr>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Login failed for user \"%{username}\" from IP %{saddr}'" }
				id => "message-000020"
				add_field => {
				"event_description" => "Login failed"
					"[event][id]" => "000020"
					"[rsa][message][id1]" => "000020"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId55
	# line in RSA: Logout - Address=<saddr> Duration=<duration> Expired=<info>
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "Logout - Address=%{saddr} Duration=%{duration} Expired=%{info}" }
			id => "msgParserId55"
			add_field => {
				"event_description" => "Logout"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Metrics" {
		# MESSAGE 000022
		# line in RSA: Currently logging metrics on <fld1> of connections.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Currently logging metrics on %{fld1} of connections." }
				id => "message-000022"
				add_field => {
				"event_description" => "logging"
					"[event][id]" => "000022"
					"[rsa][message][id1]" => "000022"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000023
		# line in RSA:  ::PROXY::STATISTICS:: { connect | namelookup | total } time - <duration>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*::PROXY::STATISTICS::[\s]+([\s]*connect[\s]+|[\s]*namelookup[\s]+|[\s]*total[\s]+)[\s]+time[\s]+\-[\s]+(?<duration>.*)$" }
				id => "message-000023"
				add_field => {
				"event_description" => "Configuring Proxy Server Services"
					"[event][id]" => "000023"
					"[rsa][message][id1]" => "000023"
					"[event][categoryid]" => "1001030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000024
		# line in RSA:  ::PROXY::STATISTICS:: {upload | download | header | request } size - <bytes>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*::PROXY::STATISTICS::[\s]+(upload[\s]+|[\s]*download[\s]+|[\s]*header[\s]+|[\s]*request[\s]+)[\s]+size[\s]+\-[\s]+(?<bytes>.*)$" }
				id => "message-000024"
				add_field => {
				"event_description" => "Configuring Proxy Server Services"
					"[event][id]" => "000024"
					"[rsa][message][id1]" => "000024"
					"[event][categoryid]" => "1001030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000025
		# line in RSA:  ::PROXY::STATISTICS:: { upload | download } speed - <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*::PROXY::STATISTICS::[\s]+([\s]*upload[\s]+|[\s]*download[\s]+)[\s]+speed[\s]+\-[\s]+(?<fld1>.*)$" }
				id => "message-000025"
				add_field => {
				"event_description" => "Configuring Proxy Server Services"
					"[event][id]" => "000025"
					"[rsa][message][id1]" => "000025"
					"[event][categoryid]" => "1001030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Misc" {
		# MESSAGE 000168
		# line in RSA:  ::<fld3>:: Failed to receive data from the backend server (<fld1>) - (Connection reset by peer)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::%{fld3}:: Failed to receive data from the backend server (%{fld1}) - (Connection reset by peer)" }
				id => "message-000168"
				add_field => {
				"event_description" => "Failed to receive data from the backend server"
					"[event][id]" => "000168"
					"[rsa][message][id1]" => "000168"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000279
		# line in RSA:  ::<fld3>:: PARSE ERROR: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::%{fld3}:: PARSE ERROR: %{info}" }
				id => "message-000279"
				add_field => {
				"event_description" => "PARSE ERROR"
					"[event][id]" => "000279"
					"[rsa][message][id1]" => "000279"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000285
		# line in RSA:  ::<fld3>:: Parse error in file <directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::%{fld3}:: Parse error in file %{directory}" }
				id => "message-000285"
				add_field => {
				"event_description" => "PARSE ERROR"
					"[event][id]" => "000285"
					"[rsa][message][id1]" => "000285"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Misc
		# line in RSA:  <<KERNEL
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "<KERNEL" }
				id => "message-Misc"
				add_field => {
					"[event][id]" => "Misc"
					"[rsa][message][id1]" => "Misc"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000701
		# line in RSA:  ::CONNECTION:: listRealms() failed - Failure
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::CONNECTION:: listRealms() failed - Failure" }
				id => "message-000701"
				add_field => {
				"event_description" => "Connection failed"
					"[event][id]" => "000701"
					"[rsa][message][id1]" => "000701"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000026
		# line in RSA:  ::DEVICEPROFILE::<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::DEVICEPROFILE::%{info}" }
				id => "message-000026"
				add_field => {
				"event_description" => "defaulting to type Desktop for agent"
					"[event][id]" => "000026"
					"[rsa][message][id1]" => "000026"
					"[event][categoryid]" => "1001030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000700
		# line in RSA:  ::ERROR:: Unable to retrieve authentication realms.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::ERROR:: Unable to retrieve authentication realms." }
				id => "message-000700"
				add_field => {
				"event_description" => "Unable to retrieve authentication realms"
					"[event][id]" => "000700"
					"[rsa][message][id1]" => "000700"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000027
		# line in RSA:  ::ERROR:: Problem retrieving <fld1> - error code <resultcode> - (<result>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::ERROR:: Problem retrieving %{fld1} - error code %{resultcode} - (%{result})" }
				id => "message-000027"
				add_field => {
				"event_description" => "Problem retrieving"
					"[event][id]" => "000027"
					"[rsa][message][id1]" => "000027"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000029
		# line in RSA:  LXRP: write() <action>, error = <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LXRP: write() %{action}, error = %{result}" }
				id => "message-000029"
				add_field => {
					"[event][id]" => "000029"
					"[rsa][message][id1]" => "000029"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000030
		# line in RSA:  LXRPBasic: Can't connect to local.policy:<fld1>, error= <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LXRPBasic: Can't connect to local.policy:%{fld1}, error= %{result}" }
				id => "message-000030"
				add_field => {
					"[event][id]" => "000030"
					"[rsa][message][id1]" => "000030"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000031
		# line in RSA:  LXRPDispatcher: Now listening on port local.policy:<sport>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LXRPDispatcher: Now listening on port local.policy:%{sport}." }
				id => "message-000031"
				add_field => {
					"[event][id]" => "000031"
					"[rsa][message][id1]" => "000031"
					"[event][categoryid]" => "1001030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000032
		# line in RSA:  ::PCA:: Disabling translation
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::PCA:: Disabling translation" }
				id => "message-000032"
				add_field => {
				"event_description" => "Disabling translation"
					"[event][id]" => "000032"
					"[rsa][message][id1]" => "000032"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000033
		# line in RSA:  ::PCA:: Turning on PCA <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::PCA:: Turning on PCA %{fld1}" }
				id => "message-000033"
				add_field => {
				"event_description" => "Turning on PCA"
					"[event][id]" => "000033"
					"[rsa][message][id1]" => "000033"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000034
		# line in RSA:  ::PCA:: Received proxy request (link=<url>)<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::PCA:: Received proxy request (link=%{url})%{fld1}" }
				id => "message-000034"
				add_field => {
				"event_description" => "Received proxy request"
					"[event][id]" => "000034"
					"[rsa][message][id1]" => "000034"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000035
		# line in RSA:  ::VB:: Unable to open <fld1> configuration file <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::VB:: Unable to open %{fld1} configuration file %{fld2}" }
				id => "message-000035"
				add_field => {
				"event_description" => "open configuration file"
					"[event][id]" => "000035"
					"[rsa][message][id1]" => "000035"
					"[event][categoryid]" => "1603060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000611
		# line in RSA:  ::LXRP:: Error on connection <fld35>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::LXRP:: Error on connection %{fld35}" }
				id => "message-000611"
				add_field => {
				"event_description" => "Error on connection"
					"[event][id]" => "000611"
					"[rsa][message][id1]" => "000611"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000612
		# line in RSA:  LXRPProtoHeader: Unable to find proper protocol header in message.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LXRPProtoHeader: Unable to find proper protocol header in message." }
				id => "message-000612"
				add_field => {
				"event_description" => "Unable to find proper protocol header in message"
					"[event][id]" => "000612"
					"[rsa][message][id1]" => "000612"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000613
		# line in RSA:  LXRP: Can't set Protocol Header information.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "LXRP: Can't set Protocol Header information." }
				id => "message-000613"
				add_field => {
				"event_description" => "Can't set Protocol Header information"
					"[event][id]" => "000613"
					"[rsa][message][id1]" => "000613"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000714
		# line in RSA:  ::ERROR:: Unable to open the log file to write to
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::ERROR:: Unable to open the log file to write to" }
				id => "message-000714"
				add_field => {
				"service" => "Misc"
				"event_description" => "Unable to open the log file to write"
					"[event][id]" => "000714"
					"[rsa][message][id1]" => "000714"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000724
		# line in RSA:   ::ERROR:: Unable to authorize request: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::ERROR:: Unable to authorize request: %{event_description}" }
				id => "message-000724"
				add_field => {
				"service" => "Misc"
					"[event][id]" => "000724"
					"[rsa][message][id1]" => "000724"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000728
		# line in RSA:  ::ERROR:: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::ERROR:: %{result}" }
				id => "message-000728"
				add_field => {
				"service" => "Misc"
					"[event][id]" => "000728"
					"[rsa][message][id1]" => "000728"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Module" {
		# MESSAGE 000036
		# line in RSA: SSL: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSL: %{event_description}" }
				id => "message-000036"
				add_field => {
					"[event][id]" => "000036"
					"[rsa][message][id1]" => "000036"
					"[event][categoryid]" => "1001020200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000037
		# line in RSA: SSLSRV: Failed to add cipher <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SSLSRV: Failed to add cipher %{fld1}" }
				id => "message-000037"
				add_field => {
					"[event][id]" => "000037"
					"[rsa][message][id1]" => "000037"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Policy" {
		# MESSAGE 000180
		# line in RSA: User { '(<username>)@(<shost>) (<fld22>)' | '(<username>)@(<shost>)' | '(<fld2> (<username>))@(<shost>)' } connecting from '<saddr>:<sport>' { matched rule #<fld1> | matched rule } '<rulename>', access to '<daddr>:<dport>' is permitted.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+([\s]*'\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+\((?<fld22>[^\)]*)\)'[\s]+|[\s]*'\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)'[\s]+|[\s]*'\((?<fld2>[^\s]*)[\s]+\((?<username>[^\)]*)\)\)@\((?<shost>[^\)]*)\)'[\s]+)[\s]+connecting[\s]+from[\s]+'(?<saddr>[^:]*):(?<sport>[^']*)'[\s]+([\s]*matched[\s]+rule[\s]+#(?<fld1>[^\s]*)[\s]+|[\s]*matched[\s]+rule[\s]+)[\s]+'(?<rulename>[^']*)',[\s]+access[\s]+to[\s]+'(?<daddr>[^:]*):(?<dport>[^']*)'[\s]+is[\s]+permitted\.$" }
				id => "message-000180"
				add_field => {
				"event_description" => "user permitted"
					"[event][id]" => "000180"
					"[rsa][message][id1]" => "000180"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Policy
		# line in RSA: User '{ (<username>)@(<shost>) (<fld22>) | (<username>)@(<shost>) | (<fld2> (<username>))@(<shost>) }' connecting from '<saddr>:<sport>' found no matching access rule, access to '<daddr>:<dport>' is denied.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+'([\s]*\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+\((?<fld22>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+|[\s]*\((?<fld2>[^\s]*)[\s]+\((?<username>[^\)]*)\)\)@\((?<shost>[^\)]*)\)[\s]+)'[\s]+connecting[\s]+from[\s]+'(?<saddr>[^:]*):(?<sport>[^']*)'[\s]+found[\s]+no[\s]+matching[\s]+access[\s]+rule,[\s]+access[\s]+to[\s]+'(?<daddr>[^:]*):(?<dport>[^']*)'[\s]+is[\s]+denied\.$" }
				id => "message-Policy"
				add_field => {
				"event_description" => "access denied"
					"[event][id]" => "Policy"
					"[rsa][message][id1]" => "Policy"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000179
		# line in RSA:  It took <fld1> seconds to examine <fld2> rules and build the custom rule list
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "It took %{fld1} seconds to examine %{fld2} rules and build the custom rule list" }
				id => "message-000179"
				add_field => {
				"event_description" => "examine rules and build the custom rule list"
					"[event][id]" => "000179"
					"[rsa][message][id1]" => "000179"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000039
		# line in RSA: avtHost(<fld1>): Converted interface card '<interface>' -> '<saddr>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "avtHost(%{fld1}): Converted interface card '%{interface}' -> '%{saddr}'" }
				id => "message-000039"
				add_field => {
				"event_description" => "Converted interface card"
					"[event][id]" => "000039"
					"[rsa][message][id1]" => "000039"
					"[event][categoryid]" => "1701020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000040
		# line in RSA:  <process> { - userGroup(<info>): Module | /IP - <url>: Module | - <url>: Module } reported it could not determine if it matched
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^\s]*)[\s]+([\s]*\-[\s]+userGroup\((?<info>[^\)]*)\):[\s]+Module[\s]+|[\s]*/IP[\s]+\-[\s]+(?<url>[^:]*):[\s]+Module[\s]+|[\s]*\-[\s]+(?<url>[^:]*):[\s]+Module[\s]+)[\s]+reported[\s]+it[\s]+could[\s]+not[\s]+determine[\s]+if[\s]+it[\s]+matched$" }
				id => "message-000040"
				add_field => {
				"event_description" => "Module reported it could not determine if it matched"
					"[event][id]" => "000040"
					"[rsa][message][id1]" => "000040"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000041
		# line in RSA: Rule '<rulename>' got <info>, and <fld1> is true, rule chain processing terminated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Rule '%{rulename}' got %{info}, and %{fld1} is true, rule chain processing terminated." }
				id => "message-000041"
				add_field => {
				"event_description" => "rule chain processing terminated"
					"[event][id]" => "000041"
					"[rsa][message][id1]" => "000041"
					"[event][categoryid]" => "1502010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000042
		# line in RSA: { Policy::Policy: | Policy: } <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*Policy::Policy:[\s]+|[\s]*Policy:[\s]+)[\s]+(?<info>.*)$" }
				id => "message-000042"
				add_field => {
					"[event][id]" => "000042"
					"[rsa][message][id1]" => "000042"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000043
		# line in RSA:  avtComparator: Unable to confirm valid ip address for address group '<hostname>' error '<result>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "avtComparator: Unable to confirm valid ip address for address group '%{hostname}' error '%{result}'" }
				id => "message-000043"
				add_field => {
				"event_description" => "confirmation valid ip"
					"[event][id]" => "000043"
					"[rsa][message][id1]" => "000043"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000608
		# line in RSA:  No Policy Variable Value found for Variable '<fld31>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "No Policy Variable Value found for Variable '%{fld31}'" }
				id => "message-000608"
				add_field => {
				"event_description" => "No Policy Variable Value found"
					"[event][id]" => "000608"
					"[rsa][message][id1]" => "000608"
					"[event][categoryid]" => "1501040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000185
		# line in RSA:  <process>(<info>: Match for Client Profile '<product>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}(%{info}: Match for Client Profile '%{product}'" }
				id => "message-000185"
				add_field => {
				"event_description" => "Match for Client Profile detected"
					"[event][id]" => "000185"
					"[rsa][message][id1]" => "000185"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000705
		# line in RSA:  EPC Zone '<fld1>', user '(<username>)@{ (<shost>) (<info>)' | (<shost>)' }.  No client profiles, zone ALWAYS matches.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*EPC[\s]+Zone[\s]+'(?<fld1>[^']*)',[\s]+user[\s]+'\((?<username>[^\)]*)\)@([\s]*\((?<shost>[^\)]*)\)[\s]+\((?<info>[^\)]*)\)'[\s]+|[\s]*\((?<shost>[^\)]*)\)'[\s]+)\.[\s]+No[\s]+client[\s]+profiles,[\s]+zone[\s]+ALWAYS[\s]+matches\.$" }
				id => "message-000705"
				add_field => {
					"[event][id]" => "000705"
					"[rsa][message][id1]" => "000705"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000710
		# line in RSA:  EPC Zone '<fld1>' matches Client Profile '<fld2>' for user '(<username>)@{ (<shost>) (<info>)' | (<shost>)'}.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*EPC[\s]+Zone[\s]+'(?<fld1>[^']*)'[\s]+matches[\s]+Client[\s]+Profile[\s]+'(?<fld2>[^']*)'[\s]+for[\s]+user[\s]+'\((?<username>[^\)]*)\)@([\s]*\((?<shost>[^\)]*)\)[\s]+\((?<info>[^\)]*)\)'[\s]+|[\s]*\((?<shost>[^\)]*)\)')\.$" }
				id => "message-000710"
				add_field => {
					"[event][id]" => "000710"
					"[rsa][message][id1]" => "000710"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId87
	# line in RSA:   <web_method> <url> <protocol>" <resultcode> <sbytes>
	else if [logstash][msgparser][id] == "msgParserId87" {
		dissect {
			mapping => { "message" => "%{web_method} %{url} %{protocol}\" %{resultcode} %{sbytes}" }
			id => "msgParserId87"
			add_field => {
				"event_description" => "POST requested"
				"[logstash][fullDateTimeString]" => "%{hdatehtime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "d/M/yyyy:H:m:s" ] }
		}
	}
	# PARSER msgParserId88
	# line in RSA:  <process>: <resultcode> messages suppressed
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "%{process}: %{resultcode} messages suppressed" }
			id => "msgParserId88"
			add_field => {
				"event_description" => "messages suppressed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId89
	# line in RSA:  <event_description> of '<url>' took <fld1>
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "%{event_description} of '%{url}' took %{fld1}" }
			id => "msgParserId89"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId90
	# line in RSA: Restarted the appliance.
	else if [logstash][msgparser][id] == "msgParserId90" {
		dissect {
			mapping => { "message" => "Restarted the appliance." }
			id => "msgParserId90"
			add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Restarted"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Session" {
		# MESSAGE 000171
		# line in RSA:  ::<process>:: Skipping translation for already translated link with hostname <shost> and path <directory>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::%{process}:: Skipping translation for already translated link with hostname %{shost} and path %{directory}" }
				id => "message-000171"
				add_field => {
				"event_description" => "Skipping translation for already translated link"
					"[event][id]" => "000171"
					"[rsa][message][id1]" => "000171"
					"[event][categoryid]" => "1603050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000175
		# line in RSA:  <process>, realm method id is <fld1> { and | an } team restore failed
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<process>[^,]*),[\s]+realm[\s]+method[\s]+id[\s]+is[\s]+(?<fld1>[^\s]*)[\s]+([\s]*and[\s]+|[\s]*an[\s]+)[\s]+team[\s]+restore[\s]+failed$" }
				id => "message-000175"
				add_field => {
				"event_description" => "team restore failed"
					"[event][id]" => "000175"
					"[rsa][message][id1]" => "000175"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000045
		# line in RSA: Authentication for user '(<username>)<fld1>(<shost>)' FAILED for realm <group>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication for user '(%{username})%{fld1}(%{shost})' FAILED for realm %{group}" }
				id => "message-000045"
				add_field => {
				"event_description" => "Authentication FAILED"
					"[event][id]" => "000045"
					"[rsa][message][id1]" => "000045"
					"[event][categoryid]" => "1301010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000046
		# line in RSA: Authentication { Restore for | for } user '{ (<saddr> (<username>))@(<shost>) | (<username>)@(<shost>) }' <result>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Authentication[\s]+([\s]*Restore[\s]+for[\s]+|[\s]*for[\s]+)[\s]+user[\s]+'([\s]*\((?<saddr>[^\s]*)[\s]+\((?<username>[^\)]*)\)\)@\((?<shost>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+)'[\s]+(?<result>.*)$" }
				id => "message-000046"
				add_field => {
				"event_description" => "Authentication"
					"[event][id]" => "000046"
					"[rsa][message][id1]" => "000046"
					"[event][categoryid]" => "1302010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000047
		# line in RSA: Conn: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Conn: %{info}" }
				id => "message-000047"
				add_field => {
				"event_description" => "failed to shift"
					"[event][id]" => "000047"
					"[rsa][message][id1]" => "000047"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000048
		# line in RSA:  ::EPC::<info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::EPC::%{info}" }
				id => "message-000048"
				add_field => {
					"[event][id]" => "000048"
					"[rsa][message][id1]" => "000048"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000049
		# line in RSA:  ::MICROINTERROGATION::(<username>)@(<shost>):: <fld1> = <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::MICROINTERROGATION::(%{username})@(%{shost}):: %{fld1} = %{fld2}" }
				id => "message-000049"
				add_field => {
					"[event][id]" => "000049"
					"[rsa][message][id1]" => "000049"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000051
		# line in RSA:  ::PROXY:: Could not retrieve URL (<url>): Problem retrieving URL - error code #<resultcode> - (<result>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::PROXY:: Could not retrieve URL (%{url}): Problem retrieving URL - error code #%{resultcode} - (%{result})" }
				id => "message-000051"
				add_field => {
					"[event][id]" => "000051"
					"[rsa][message][id1]" => "000051"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000052
		# line in RSA:  ::REQUEST:: Using web-based access rules for agent <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::REQUEST:: Using web-based access rules for agent %{fld1}" }
				id => "message-000052"
				add_field => {
				"event_description" => "Using web-based access rules for agent"
					"[event][id]" => "000052"
					"[rsa][message][id1]" => "000052"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000050
		# line in RSA: PolicySignal: Received signal <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "PolicySignal: Received signal %{fld1}" }
				id => "message-000050"
				add_field => {
				"event_description" => "Received signal"
					"[event][id]" => "000050"
					"[rsa][message][id1]" => "000050"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000053
		# line in RSA: SocksSignal: Received signal <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SocksSignal: Received signal %{fld1}" }
				id => "message-000053"
				add_field => {
				"event_description" => "Received signal"
					"[event][id]" => "000053"
					"[rsa][message][id1]" => "000053"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000702
		# line in RSA: Session Start: '(<username>)@(<group>) (<saddr>)', authenticated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session Start: '(%{username})@(%{group}) (%{saddr})', authenticated." }
				id => "message-000702"
				add_field => {
				"event_description" => "Session Start"
					"[event][id]" => "000702"
					"[rsa][message][id1]" => "000702"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000656
		# line in RSA: Session Start: '(<username>)@(<group>)', authenticated.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session Start: '(%{username})@(%{group})', authenticated." }
				id => "message-000656"
				add_field => {
				"event_description" => "Session Start"
					"[event][id]" => "000656"
					"[rsa][message][id1]" => "000656"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000657
		# line in RSA: There are now <fld36> active users, this is over the current soft limit of <fld35> users.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "There are now %{fld36} active users, this is over the current soft limit of %{fld35} users." }
				id => "message-000657"
				add_field => {
					"[event][id]" => "000657"
					"[rsa][message][id1]" => "000657"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000663
		# line in RSA: Src='<saddr>:<sport>' Auth='<protocol>' User='(<username>)@(<shost>)' SocksVersion='<fld22>' Command='<info>' Dest='{ -:- | <daddr>:<dport> }' Error='<result>' SrcBytes='<sbytes>' DstBytes='<rbytes>' Duration='<duration>' VirtualHost='<hostip>' EquipmentId='<fld56>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Src='(?<saddr>[^:]*):(?<sport>[^']*)'[\s]+Auth='(?<protocol>[^']*)'[\s]+User='\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)'[\s]+SocksVersion='(?<fld22>[^']*)'[\s]+Command='(?<info>[^']*)'[\s]+Dest='([\s]*\-:\-[\s]+|[\s]*(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+)'[\s]+Error='(?<result>[^']*)'[\s]+SrcBytes='(?<sbytes>[^']*)'[\s]+DstBytes='(?<rbytes>[^']*)'[\s]+Duration='(?<duration>[^']*)'[\s]+VirtualHost='(?<hostip>[^']*)'[\s]+EquipmentId='(?<fld56>[^']*)'$" }
				id => "message-000663"
				add_field => {
					"[event][id]" => "000663"
					"[rsa][message][id1]" => "000663"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000664
		# line in RSA:  Authentication Restore for user '(<username>)@(<shost>) (<info>)' SUCCESS
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication Restore for user '(%{username})@(%{shost}) (%{info})' SUCCESS" }
				id => "message-000664"
				add_field => {
				"event_description" => "Authentication Restore"
					"[event][id]" => "000664"
					"[rsa][message][id1]" => "000664"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000186
		# line in RSA:  Connection::<process>: Received indeterministic platform <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Connection::%{process}: Received indeterministic platform %{fld2}" }
				id => "message-000186"
				add_field => {
				"event_description" => "Received indeterministic platform"
					"[event][id]" => "000186"
					"[rsa][message][id1]" => "000186"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000707
		# line in RSA:  Session: <event_description>, error='<result>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session: %{event_description}, error='%{result}'" }
				id => "message-000707"
				add_field => {
					"[event][id]" => "000707"
					"[rsa][message][id1]" => "000707"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000713
		# line in RSA:  ClientRequest: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "ClientRequest: %{event_description}" }
				id => "message-000713"
				add_field => {
					"[event][id]" => "000713"
					"[rsa][message][id1]" => "000713"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000721
		# line in RSA:  TEAM: Attempt made to use TEAM ID from different source IP address
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TEAM: Attempt made to use TEAM ID from different source IP address" }
				id => "message-000721"
				add_field => {
				"service" => "Session"
				"event_description" => "Attempt made to use TEAM ID from different source IP address"
					"[event][id]" => "000721"
					"[rsa][message][id1]" => "000721"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000722
		# line in RSA:  ::ALIASCACHE:: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::ALIASCACHE:: %{event_description}" }
				id => "message-000722"
				add_field => {
				"service" => "Session"
					"[event][id]" => "000722"
					"[rsa][message][id1]" => "000722"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000738
		# line in RSA:  Authentication for user '(<username>)@(<fld1>) (<mail_id>)' <info>, <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Authentication for user '(%{username})@(%{fld1}) (%{mail_id})' %{info}, %{fld2}" }
				id => "message-000738"
				add_field => {
					"[event][id]" => "000738"
					"[rsa][message][id1]" => "000738"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "syslog-ng" {
		# MESSAGE 000193
		# line in RSA:  <process>[<process_id>]: Log statistics; <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: Log statistics; %{info}" }
				id => "message-000193"
				add_field => {
				"event_description" => "Log statistics"
					"[event][id]" => "000193"
					"[rsa][message][id1]" => "000193"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000192
		# line in RSA:  <process>[<process_id>]: SIGHUP received, reloading configuration;
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}[%{process_id}]: SIGHUP received, reloading configuration;" }
				id => "message-000192"
				add_field => {
				"event_description" => "reloading configuration"
					"[event][id]" => "000192"
					"[rsa][message][id1]" => "000192"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "System" {
		# MESSAGE 000624
		# line in RSA:  Session End: '(<username>)@(<fld45>)'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Session End: '(%{username})@(%{fld45})'" }
				id => "message-000624"
				add_field => {
				"event_description" => "Session Ended"
					"[event][id]" => "000624"
					"[rsa][message][id1]" => "000624"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000174
		# line in RSA:  <process>: building error response status:<resultcode> Invalid TEAM ID
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: building error response status:%{resultcode} Invalid TEAM ID" }
				id => "message-000174"
				add_field => {
				"event_description" => "building error response status"
					"[event][id]" => "000174"
					"[rsa][message][id1]" => "000174"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000173
		# line in RSA:  <process>: unable to restore team token
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: unable to restore team token" }
				id => "message-000173"
				add_field => {
				"event_description" => "unable to restore team token"
					"[event][id]" => "000173"
					"[rsa][message][id1]" => "000173"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000172
		# line in RSA:  policy:<policyname>: policy client returned status:<result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "policy:%{policyname}: policy client returned status:%{result}" }
				id => "message-000172"
				add_field => {
				"event_description" => "policy client returned status of Failure"
					"[event][id]" => "000172"
					"[rsa][message][id1]" => "000172"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000054
		# line in RSA: _attempt_config_push: avpsd reconfig complete
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "_attempt_config_push: avpsd reconfig complete" }
				id => "message-000054"
				add_field => {
					"[event][id]" => "000054"
					"[rsa][message][id1]" => "000054"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000055
		# line in RSA: _init_policy_client: PolicyClient startup failed!
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "_init_policy_client: PolicyClient startup failed!" }
				id => "message-000055"
				add_field => {
				"info" => "%{$MSG}"
				"event_description" => "startup failed"
					"[event][id]" => "000055"
					"[rsa][message][id1]" => "000055"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000056
		# line in RSA: _process_sigterm: Shutdown on <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "_process_sigterm: Shutdown on %{fld1}" }
				id => "message-000056"
				add_field => {
				"event_description" => " Shutdown"
					"[event][id]" => "000056"
					"[rsa][message][id1]" => "000056"
					"[event][categoryid]" => "1611000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000057
		# line in RSA: _run_common: cleaning up
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "_run_common: cleaning up" }
				id => "message-000057"
				add_field => {
				"event_description" => " cleaning up"
					"[event][id]" => "000057"
					"[rsa][message][id1]" => "000057"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000058
		# line in RSA: _signal_activity_callback: <fld1> received before previous reconfiguration completed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "_signal_activity_callback: %{fld1} received before previous reconfiguration completed" }
				id => "message-000058"
				add_field => {
				"event_description" => " reconfiguration"
					"[event][id]" => "000058"
					"[rsa][message][id1]" => "000058"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000059
		# line in RSA: AAMgr: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AAMgr: %{info}" }
				id => "message-000059"
				add_field => {
					"[event][id]" => "000059"
					"[rsa][message][id1]" => "000059"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000060
		# line in RSA: Acceptor: Attempt to start ping traceroute daemon listening on port <dhost>:<dport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Acceptor: Attempt to start ping traceroute daemon listening on port %{dhost}:%{dport}" }
				id => "message-000060"
				add_field => {
				"event_description" => "start ping"
					"[event][id]" => "000060"
					"[rsa][message][id1]" => "000060"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000061
		# line in RSA: Acceptor: Socks Server is now Listening on <daddr>:<dport>, fd=<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Acceptor: Socks Server is now Listening on %{daddr}:%{dport}, fd=%{fld1}" }
				id => "message-000061"
				add_field => {
					"[event][id]" => "000061"
					"[rsa][message][id1]" => "000061"
					"[event][categoryid]" => "1801000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000062
		# line in RSA: Acceptor: new child process started pid=<fld1>.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Acceptor: new child process started pid=%{fld1}." }
				id => "message-000062"
				add_field => {
				"event_description" => "child process started"
					"[event][id]" => "000062"
					"[rsa][message][id1]" => "000062"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000063
		# line in RSA: Auth: <service>:     host = <saddr>:<sport>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}:     host = %{saddr}:%{sport}" }
				id => "message-000063"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000063"
					"[rsa][message][id1]" => "000063"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000064
		# line in RSA: Auth: <service>:   c-s-id = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}:   c-s-id = %{fld1}" }
				id => "message-000064"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000064"
					"[rsa][message][id1]" => "000064"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000065
		# line in RSA: Auth: <service>:   NAS-ID = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}:   NAS-ID = %{fld1}" }
				id => "message-000065"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000065"
					"[rsa][message][id1]" => "000065"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000066
		# line in RSA: Auth: <service>:  retries = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}:  retries = %{fld1}" }
				id => "message-000066"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000066"
					"[rsa][message][id1]" => "000066"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000067
		# line in RSA: Auth: <service>:  service = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}:  service = %{fld1}" }
				id => "message-000067"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000067"
					"[rsa][message][id1]" => "000067"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000068
		# line in RSA: Auth: <service>:  timeout = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}:  timeout = %{fld1}" }
				id => "message-000068"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000068"
					"[rsa][message][id1]" => "000068"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000069
		# line in RSA: Auth: <service>: encoding = <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: encoding = %{info}" }
				id => "message-000069"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000069"
					"[rsa][message][id1]" => "000069"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000070
		# line in RSA: Auth: <service>: configuring message prompt = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: configuring message prompt = %{fld1}" }
				id => "message-000070"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000070"
					"[rsa][message][id1]" => "000070"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000071
		# line in RSA: Auth: <service>: configuring password prompt = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: configuring password prompt = %{fld1}" }
				id => "message-000071"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000071"
					"[rsa][message][id1]" => "000071"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000072
		# line in RSA: Auth: <service>: configuring title prompt = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: configuring title prompt = %{fld1}" }
				id => "message-000072"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000072"
					"[rsa][message][id1]" => "000072"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000073
		# line in RSA: Auth: <service>: configuring username prompt = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: configuring username prompt = %{fld1}" }
				id => "message-000073"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000073"
					"[rsa][message][id1]" => "000073"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000074
		# line in RSA: Auth: <service>: groupatt = <fld1>,  <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: groupatt = %{fld1},  %{fld2}" }
				id => "message-000074"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000074"
					"[rsa][message][id1]" => "000074"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000075
		# line in RSA: Auth: <service>: Dumping RADIUS config settings
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: Dumping RADIUS config settings" }
				id => "message-000075"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000075"
					"[rsa][message][id1]" => "000075"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000076
		# line in RSA: Auth: <service>: { useradiusprompt | separatecramprompts } is OFF
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Auth:[\s]+(?<service>[^:]*):[\s]+([\s]*useradiusprompt[\s]+|[\s]*separatecramprompts[\s]+)[\s]+is[\s]+OFF$" }
				id => "message-000076"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000076"
					"[rsa][message][id1]" => "000076"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000077
		# line in RSA: Auth: <service>: successmessages are ON
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: successmessages are ON" }
				id => "message-000077"
				add_field => {
				"event_description" => "Configaration changed"
					"[event][id]" => "000077"
					"[rsa][message][id1]" => "000077"
					"[event][categoryid]" => "1605030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000078
		# line in RSA: Auth: <service>: Bad password for user '<username>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: Bad password for user '%{username}'" }
				id => "message-000078"
				add_field => {
				"info" => "%{$MSG}"
				"event_description" => "Bad password"
					"[event][id]" => "000078"
					"[rsa][message][id1]" => "000078"
					"[event][categoryid]" => "1301000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000079
		# line in RSA: Auth: <service>: Authentication failed for user '<username>', <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: Authentication failed for user '%{username}', %{info}" }
				id => "message-000079"
				add_field => {
				"event_description" => "Authentication failed"
				"result" => "%{info}"
					"[event][id]" => "000079"
					"[rsa][message][id1]" => "000079"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000080
		# line in RSA: Auth: <service>: No such user '<username>', err <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: No such user '%{username}', err %{resultcode}" }
				id => "message-000080"
				add_field => {
				"event_description" => "Authentication failed"
					"[event][id]" => "000080"
					"[rsa][message][id1]" => "000080"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000081
		# line in RSA: Auth: <service>: End user auth failed for '<username>' for auth realm <fld1>.  Possible causes: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: End user auth failed for '%{username}' for auth realm %{fld1}.  Possible causes: %{result}" }
				id => "message-000081"
				add_field => {
				"event_description" => "Authentication failed"
					"[event][id]" => "000081"
					"[rsa][message][id1]" => "000081"
					"[event][categoryid]" => "1301020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000082
		# line in RSA: API: { Successfully started | Restarted } logging
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^API:[\s]+([\s]*Successfully[\s]+started[\s]+|[\s]*Restarted[\s]+)[\s]+logging$" }
				id => "message-000082"
				add_field => {
				"event_description" => "Successfully started"
					"[event][id]" => "000082"
					"[rsa][message][id1]" => "000082"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000083
		# line in RSA: Appliance initialized properly: Running in Non FIPS mode.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Appliance initialized properly: Running in Non FIPS mode." }
				id => "message-000083"
				add_field => {
				"event_description" => "Appliance initialized"
					"[event][id]" => "000083"
					"[rsa][message][id1]" => "000083"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000084
		# line in RSA: AOWNER AddAssociation <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AOWNER AddAssociation %{fld1}" }
				id => "message-000084"
				add_field => {
				"event_description" => "Removed or Added Association"
					"[event][id]" => "000084"
					"[rsa][message][id1]" => "000084"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000085
		# line in RSA: Association:_create_association: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Association:_create_association: %{fld1}" }
				id => "message-000085"
				add_field => {
				"event_description" => "Create Association"
					"[event][id]" => "000085"
					"[rsa][message][id1]" => "000085"
					"[event][categoryid]" => "1704000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000086
		# line in RSA: associationTimeout    = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "associationTimeout    = %{fld1}" }
				id => "message-000086"
				add_field => {
				"event_description" => "Timeout"
					"[event][id]" => "000086"
					"[rsa][message][id1]" => "000086"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000087
		# line in RSA: AVPN <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AVPN %{fld1}" }
				id => "message-000087"
				add_field => {
				"event_description" => "exit"
					"[event][id]" => "000087"
					"[rsa][message][id1]" => "000087"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000088
		# line in RSA: { AVPSD: | AVPSD } {successfully reconfigured kernel components |  Successfully started logging | exit }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*AVPSD:[\s]+|[\s]*AVPSD[\s]+)[\s]+(successfully[\s]+reconfigured[\s]+kernel[\s]+components[\s]+|[\s]*Successfully[\s]+started[\s]+logging[\s]+|[\s]*exit[\s]+)$" }
				id => "message-000088"
				add_field => {
					"[event][id]" => "000088"
					"[rsa][message][id1]" => "000088"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000089
		# line in RSA: AVSSLD: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AVSSLD: %{event_description}" }
				id => "message-000089"
				add_field => {
					"[event][id]" => "000089"
					"[rsa][message][id1]" => "000089"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000090
		# line in RSA: cluster <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "cluster %{fld1}" }
				id => "message-000090"
				add_field => {
					"[event][id]" => "000090"
					"[rsa][message][id1]" => "000090"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000091
		# line in RSA: --configfile <space> = <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--configfile %{space} = %{filename}" }
				id => "message-000091"
				add_field => {
				"event_description" => "configfile"
					"[event][id]" => "000091"
					"[rsa][message][id1]" => "000091"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000092
		# line in RSA: connectionTimeout <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "connectionTimeout %{fld1}" }
				id => "message-000092"
				add_field => {
				"event_description" => "connection Timeout"
					"[event][id]" => "000092"
					"[rsa][message][id1]" => "000092"
					"[event][categoryid]" => "1801030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000093
		# line in RSA: desktopExpiry         = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "desktopExpiry         = %{fld1}" }
				id => "message-000093"
				add_field => {
				"event_description" => "desktopExpiry"
					"[event][id]" => "000093"
					"[rsa][message][id1]" => "000093"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000094
		# line in RSA: --foreground <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--foreground %{space} = %{fld1}" }
				id => "message-000094"
				add_field => {
				"event_description" => "foreground"
					"[event][id]" => "000094"
					"[rsa][message][id1]" => "000094"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000095
		# line in RSA: --hardlimit <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--hardlimit %{space} = %{fld1}" }
				id => "message-000095"
				add_field => {
				"event_description" => "hardlimit"
					"[event][id]" => "000095"
					"[rsa][message][id1]" => "000095"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000096
		# line in RSA: hasValidLicense(): License for '<fld1>' is valid
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "hasValidLicense(): License for '%{fld1}' is valid" }
				id => "message-000096"
				add_field => {
				"event_description" => "License Validation"
					"[event][id]" => "000096"
					"[rsa][message][id1]" => "000096"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000097
		# line in RSA: ::INIT::<fld3>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::INIT::%{fld3}" }
				id => "message-000097"
				add_field => {
					"[event][id]" => "000097"
					"[rsa][message][id1]" => "000097"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000098
		# line in RSA: Init: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Init: %{fld1}" }
				id => "message-000098"
				add_field => {
					"[event][id]" => "000098"
					"[rsa][message][id1]" => "000098"
					"[event][categoryid]" => "1602020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000099
		# line in RSA:  Initialize: <fld2> <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Initialize: %{fld2} %{fld1}" }
				id => "message-000099"
				add_field => {
					"[event][id]" => "000099"
					"[rsa][message][id1]" => "000099"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000101
		# line in RSA: --loglevel <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--loglevel %{space} = %{fld1}" }
				id => "message-000101"
				add_field => {
				"event_description" => "loglevel"
					"[event][id]" => "000101"
					"[rsa][message][id1]" => "000101"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000102
		# line in RSA: --logserveraddress <space> = <dhost>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--logserveraddress %{space} = %{dhost}" }
				id => "message-000102"
				add_field => {
				"event_description" => "logserveraddress"
					"[event][id]" => "000102"
					"[rsa][message][id1]" => "000102"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000103
		# line in RSA: --logserverport <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--logserverport %{space} = %{fld1}" }
				id => "message-000103"
				add_field => {
				"event_description" => "logserverport"
					"[event][id]" => "000103"
					"[rsa][message][id1]" => "000103"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000104
		# line in RSA: --logseveritytrigger <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--logseveritytrigger %{space} = %{fld1}" }
				id => "message-000104"
				add_field => {
				"event_description" => "logseveritytrigger"
					"[event][id]" => "000104"
					"[rsa][message][id1]" => "000104"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000105
		# line in RSA: --logtimetrigger <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--logtimetrigger %{space} = %{fld1}" }
				id => "message-000105"
				add_field => {
				"event_description" => "logtimetrigger"
					"[event][id]" => "000105"
					"[rsa][message][id1]" => "000105"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000106
		# line in RSA: --logtypes <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--logtypes %{space} = %{fld1}" }
				id => "message-000106"
				add_field => {
				"event_description" => "logtypes"
					"[event][id]" => "000106"
					"[rsa][message][id1]" => "000106"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000107
		# line in RSA: --logtypetrigger <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--logtypetrigger %{space} = %{fld1}" }
				id => "message-000107"
				add_field => {
				"event_description" => "logtypetrigger"
					"[event][id]" => "000107"
					"[rsa][message][id1]" => "000107"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000108
		# line in RSA: Main <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Main %{fld1}" }
				id => "message-000108"
				add_field => {
				"event_description" => "Server is initializing or using"
					"[event][id]" => "000108"
					"[rsa][message][id1]" => "000108"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000109
		# line in RSA: Messages.<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Messages.%{fld1}" }
				id => "message-000109"
				add_field => {
					"[event][id]" => "000109"
					"[rsa][message][id1]" => "000109"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000110
		# line in RSA: mod_ssl_configuration:<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "mod_ssl_configuration:%{fld1}" }
				id => "message-000110"
				add_field => {
				"event_description" => "mod_ssl_configuration"
					"[event][id]" => "000110"
					"[rsa][message][id1]" => "000110"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000111
		# line in RSA: { PolicyConfig: | Policy: | Policy } <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*PolicyConfig:[\s]+|[\s]*Policy:[\s]+|[\s]*Policy[\s]+)[\s]+(?<fld1>.*)$" }
				id => "message-000111"
				add_field => {
					"[event][id]" => "000111"
					"[rsa][message][id1]" => "000111"
					"[event][categoryid]" => "1502000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000112
		# line in RSA: --policyserveraddress <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--policyserveraddress %{space} = %{fld1}" }
				id => "message-000112"
				add_field => {
				"event_description" => "policyserveraddress"
					"[event][id]" => "000112"
					"[rsa][message][id1]" => "000112"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000113
		# line in RSA: --policyserverport <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--policyserverport %{space} = %{fld1}" }
				id => "message-000113"
				add_field => {
				"event_description" => "policyserverport"
					"[event][id]" => "000113"
					"[rsa][message][id1]" => "000113"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000114
		# line in RSA: POMgr: Association has been bound to <fld1>, killing it.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "POMgr: Association has been bound to %{fld1}, killing it." }
				id => "message-000114"
				add_field => {
				"event_description" => "Association has been bound"
					"[event][id]" => "000114"
					"[rsa][message][id1]" => "000114"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000116
		# line in RSA: RADIUSACCT: <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RADIUSACCT: %{event_description}" }
				id => "message-000116"
				add_field => {
					"[event][id]" => "000116"
					"[rsa][message][id1]" => "000116"
					"[event][categoryid]" => "1302010100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000117
		# line in RSA: RPC: <action>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "RPC: %{action}" }
				id => "message-000117"
				add_field => {
					"[event][id]" => "000117"
					"[rsa][message][id1]" => "000117"
					"[event][categoryid]" => "1001020204"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000118
		# line in RSA: { ServerInit: | Server } <fld1>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^([\s]*ServerInit:[\s]+|[\s]*Server[\s]+)[\s]+(?<fld1>.*)$" }
				id => "message-000118"
				add_field => {
					"[event][id]" => "000118"
					"[rsa][message][id1]" => "000118"
					"[event][categoryid]" => "1610000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000119
		# line in RSA:  servlog: Loaded message strings from file <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "servlog: Loaded message strings from file %{fld1}" }
				id => "message-000119"
				add_field => {
				"event_description" => "Loaded message strings"
					"[event][id]" => "000119"
					"[rsa][message][id1]" => "000119"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000120
		# line in RSA: SessionList: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SessionList: %{fld1}" }
				id => "message-000120"
				add_field => {
					"[event][id]" => "000120"
					"[rsa][message][id1]" => "000120"
					"[event][categoryid]" => "1001030200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000121
		# line in RSA: Setting <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Setting %{fld1}" }
				id => "message-000121"
				add_field => {
				"event_description" => "Setting Code Set"
					"[event][id]" => "000121"
					"[rsa][message][id1]" => "000121"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000122
		# line in RSA: setup_logging: <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "setup_logging: %{fld1}" }
				id => "message-000122"
				add_field => {
				"event_description" => "setup_logging"
					"[event][id]" => "000122"
					"[rsa][message][id1]" => "000122"
					"[event][categoryid]" => "1401060100"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000123
		# line in RSA: --softlimit <space> = <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "--softlimit %{space} = %{fld1}" }
				id => "message-000123"
				add_field => {
				"event_description" => "softlimit"
					"[event][id]" => "000123"
					"[rsa][message][id1]" => "000123"
					"[event][categoryid]" => "1701000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000124
		# line in RSA: Successfully <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Successfully %{info}" }
				id => "message-000124"
				add_field => {
					"[event][id]" => "000124"
					"[rsa][message][id1]" => "000124"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000125
		# line in RSA: teamTimeout <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "teamTimeout %{fld1}" }
				id => "message-000125"
				add_field => {
				"event_description" => "teamTimeout"
					"[event][id]" => "000125"
					"[rsa][message][id1]" => "000125"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000126
		# line in RSA: TimeoutInterval <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TimeoutInterval %{fld1}" }
				id => "message-000126"
				add_field => {
				"event_description" => "TimeoutInterval"
					"[event][id]" => "000126"
					"[rsa][message][id1]" => "000126"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000127
		# line in RSA: userTimeout <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "userTimeout %{fld1}" }
				id => "message-000127"
				add_field => {
				"event_description" => "userTimeout"
					"[event][id]" => "000127"
					"[rsa][message][id1]" => "000127"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000128
		# line in RSA: VAM Made offerServices <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "VAM Made offerServices %{fld1}" }
				id => "message-000128"
				add_field => {
				"event_description" => "Made offerServices"
					"[event][id]" => "000128"
					"[rsa][message][id1]" => "000128"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000622
		# line in RSA: lost_connection_to_ps exit
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "lost_connection_to_ps exit" }
				id => "message-000622"
				add_field => {
				"event_description" => "Lost connection"
					"[event][id]" => "000622"
					"[rsa][message][id1]" => "000622"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000623
		# line in RSA: TEAM: Failed to remove TEAM Credential <fld31>.  Code = <resultcode>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TEAM: Failed to remove TEAM Credential %{fld31}.  Code = %{resultcode}" }
				id => "message-000623"
				add_field => {
				"event_description" => "Failed to remove TEAM Credential"
					"[event][id]" => "000623"
					"[rsa][message][id1]" => "000623"
					"[event][categoryid]" => "1603110000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000166
		# line in RSA:  VAM Can't validate pool for <saddr> <result> { << | <space> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*VAM[\s]+Can't[\s]+validate[\s]+pool[\s]+for[\s]+(?<saddr>[^\s]*)[\s]+(?<result>[^\s]*)[\s]+([\s]*<[\s]+|[\s]*(?<space>[^\s]*)[\s]+)$" }
				id => "message-000166"
				add_field => {
				"event_description" => "VAM Can't validate pool for host"
					"[event][id]" => "000166"
					"[rsa][message][id1]" => "000166"
					"[event][categoryid]" => "1501040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000167
		# line in RSA:  <process>: No Connection with ID='<fld1>' found
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: No Connection with ID='%{fld1}' found" }
				id => "message-000167"
				add_field => {
				"event_description" => "No Connection with ID found"
					"[event][id]" => "000167"
					"[rsa][message][id1]" => "000167"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000100
		# line in RSA: '(<username>)@(<shost>){ (<info>)' | ' } logged in from <saddr> and was assigned to <interface>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^'\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)([\s]*\((?<info>[^\)]*)\)'[\s]+|[\s]*'[\s]+)[\s]+logged[\s]+in[\s]+from[\s]+(?<saddr>[^\s]*)[\s]+and[\s]+was[\s]+assigned[\s]+to[\s]+(?<interface>.*)$" }
				id => "message-000100"
				add_field => {
				"event_description" => "logged in and assigned domain"
					"[event][id]" => "000100"
					"[rsa][message][id1]" => "000100"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000667
		# line in RSA:  AUTH: <service>:User authentication for sAMAccountName = <username>  successful for Auth Realm (<shost>). UserDN = (<info>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: %{service}:User authentication for sAMAccountName = %{username}  successful for Auth Realm (%{shost}). UserDN = (%{info})." }
				id => "message-000667"
				add_field => {
				"event_description" => "Authentication Successful for Auth Realm"
					"[event][id]" => "000667"
					"[rsa][message][id1]" => "000667"
					"[event][categoryid]" => "1401060000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000200
		# line in RSA:  AUTH: <service>:User authentication for sAMAccountName = <username>  FAILED for Auth Realm (<shost>). UserDN = (<info>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: %{service}:User authentication for sAMAccountName = %{username}  FAILED for Auth Realm (%{shost}). UserDN = (%{info})" }
				id => "message-000200"
				add_field => {
				"event_description" => "Authentication Failed for Auth Realm"
					"[event][id]" => "000200"
					"[rsa][message][id1]" => "000200"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000181
		# line in RSA:  AUTH: <service>: OTP Password Expiry Config time is <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: %{service}: OTP Password Expiry Config time is %{fld1}" }
				id => "message-000181"
				add_field => {
				"event_description" => "OTP Password Expiry Config time specification"
					"[event][id]" => "000181"
					"[rsa][message][id1]" => "000181"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000182
		# line in RSA:  CFG Pool Init { Static/NAT | Static } id=<fld1> name='<group>' gid='<fld2>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*CFG[\s]+Pool[\s]+Init[\s]+([\s]*Static/NAT[\s]+|[\s]*Static[\s]+)[\s]+id=(?<fld1>[^\s]*)[\s]+name='(?<group>[^']*)'[\s]+gid='(?<fld2>[^']*)'$" }
				id => "message-000182"
				add_field => {
				"event_description" => "CFG Pool Init Static/NAT"
					"[event][id]" => "000182"
					"[rsa][message][id1]" => "000182"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000183
		# line in RSA:  Auth: <service>: User '<username>' is not a member of any RADIUS groups based on attribute <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Auth: %{service}: User '%{username}' is not a member of any RADIUS groups based on attribute %{fld1}" }
				id => "message-000183"
				add_field => {
				"event_description" => "User is not a member of any RADIUS groups based on attribute"
					"[event][id]" => "000183"
					"[rsa][message][id1]" => "000183"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000184
		# line in RSA:  { ndns=<fld4> nwins=<fld5> nsuffix=<fld6> | suffix<fld1>=<shost> | wins<fld2>=<saddr> | dns<fld3>=<saddr> }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*([\s]*ndns=(?<fld4>[^\s]*)[\s]+nwins=(?<fld5>[^\s]*)[\s]+nsuffix=(?<fld6>[^\s]*)[\s]+|[\s]*suffix(?<fld1>[^=]*)=(?<shost>[^\s]*)[\s]+|[\s]*wins(?<fld2>[^=]*)=(?<saddr>[^\s]*)[\s]+|[\s]*dns(?<fld3>[^=]*)=(?<saddr>[^\s]*)[\s]+)$" }
				id => "message-000184"
				add_field => {
				"event_description" => "Miscellaneous info"
					"[event][id]" => "000184"
					"[rsa][message][id1]" => "000184"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000708
		# line in RSA:  <event_description> pool <fld1> for _lastaddr <saddr>, disallowing <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} pool %{fld1} for _lastaddr %{saddr}, disallowing %{fld2}" }
				id => "message-000708"
				add_field => {
					"[event][id]" => "000708"
					"[rsa][message][id1]" => "000708"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000709
		# line in RSA:  <event_description> for user '<username>', not configured
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} for user '%{username}', not configured" }
				id => "message-000709"
				add_field => {
					"[event][id]" => "000709"
					"[rsa][message][id1]" => "000709"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000716
		# line in RSA:  ::API::<fld1>:: User is not authorized to access CT
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::API::%{fld1}:: User is not authorized to access CT" }
				id => "message-000716"
				add_field => {
				"service" => "System"
				"event_description" => "User is not authorized to access CT"
					"[event][id]" => "000716"
					"[rsa][message][id1]" => "000716"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000718
		# line in RSA:  logonrpc:<fld1>: unable to restore logon_id
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "logonrpc:%{fld1}: unable to restore logon_id" }
				id => "message-000718"
				add_field => {
				"service" => "System"
				"event_description" => "unable to restore logon_id"
					"[event][id]" => "000718"
					"[rsa][message][id1]" => "000718"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000719
		# line in RSA:  logonrpc:rpc: building error response status:<fld1> error(<resultcode>) Unable to obtain a connection to the Policy
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "logonrpc:rpc: building error response status:%{fld1} error(%{resultcode}) Unable to obtain a connection to the Policy" }
				id => "message-000719"
				add_field => {
				"service" => "System"
				"event_description" => "Unable to obtain a connection to the Policy"
					"[event][id]" => "000719"
					"[rsa][message][id1]" => "000719"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000723
		# line in RSA:  AUTH: <fld1> :User authentication for uid = <username> successful for Auth Realm (<fld3>). UserDN = (<info>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: %{fld1} :User authentication for uid = %{username} successful for Auth Realm (%{fld3}). UserDN = (%{info})." }
				id => "message-000723"
				add_field => {
				"service" => "System"
					"[event][id]" => "000723"
					"[rsa][message][id1]" => "000723"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE System
		# line in RSA:  AUTH: <fld1> :User authentication for uid = <username> FAILED for Auth Realm (<fld3>). UserDN = (<info>).
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "AUTH: %{fld1} :User authentication for uid = %{username} FAILED for Auth Realm (%{fld3}). UserDN = (%{info})." }
				id => "message-System"
				add_field => {
				"service" => "System"
					"[event][id]" => "System"
					"[rsa][message][id1]" => "System"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000730
		# line in RSA:  <fld1> restoration failed
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} restoration failed" }
				id => "message-000730"
				add_field => {
				"service" => "Misc"
				"event_description" => "restoration failed"
					"[event][id]" => "000730"
					"[rsa][message][id1]" => "000730"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000731
		# line in RSA:  <event_description> clientInfo lists zero interfaces (OK on resume)  <fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} clientInfo lists zero interfaces (OK on resume)  %{fld1}" }
				id => "message-000731"
				add_field => {
				"service" => "System"
					"[event][id]" => "000731"
					"[rsa][message][id1]" => "000731"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000799
		# line in RSA:  <event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description}" }
				id => "message-000799"
				add_field => {
				"service" => "System"
					"[event][id]" => "000799"
					"[rsa][message][id1]" => "000799"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId198
	# line in RSA: Terminated sessions for user <username>@<group>
	else if [logstash][msgparser][id] == "msgParserId198" {
		dissect {
			mapping => { "message" => "Terminated sessions for user %{username}@%{group}" }
			id => "msgParserId198"
			add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Terminated sessions"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId199
	# line in RSA: Terminating sessions for user <username>@<group>
	else if [logstash][msgparser][id] == "msgParserId199" {
		dissect {
			mapping => { "message" => "Terminating sessions for user %{username}@%{group}" }
			id => "msgParserId199"
			add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Terminating sessions"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId200
	# line in RSA:  <saddr>:<sport> - "(<username>)@(<group>)" "<fld20>.<fld21>" 1.1 <service> <daddr>:<dport> <fld1> <sbytes> <bytes> <duration>
	else if [logstash][msgparser][id] == "msgParserId200" {
		dissect {
			mapping => { "message" => "%{saddr}:%{sport} - \"(%{username})@(%{group})\" \"%{fld20}.%{fld21}\" 1.1 %{service} %{daddr}:%{dport} %{fld1} %{sbytes} %{bytes} %{duration}" }
			id => "msgParserId200"
			add_field => {
				"event_description" => "Tunnel flow"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Unknown" {
		# MESSAGE 000131
		# line in RSA: ::SSL:: Discarding first certificate
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::SSL:: Discarding first certificate" }
				id => "message-000131"
				add_field => {
				"event_description" => "Discarding first certificate"
					"[event][id]" => "000131"
					"[rsa][message][id1]" => "000131"
					"[event][categoryid]" => "1001020200"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000130
		# line in RSA: ::SSL::<fld1>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "::SSL::%{fld1}" }
				id => "message-000130"
				add_field => {
				"event_description" => "Read in certificate"
					"[event][id]" => "000130"
					"[rsa][message][id1]" => "000130"
					"[event][categoryid]" => "1001020200"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Updated" {
		# MESSAGE 000132
		# line in RSA: Updated { authentication | SSH | WorkPlace | access | resource } <fld1> - <info>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Updated[\s]+([\s]*authentication[\s]+|[\s]*SSH[\s]+|[\s]*WorkPlace[\s]+|[\s]*access[\s]+|[\s]*resource[\s]+)[\s]+(?<fld1>[^\s]*)[\s]+\-[\s]+(?<info>.*)$" }
				id => "message-000132"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Updated"
					"[event][id]" => "000132"
					"[rsa][message][id1]" => "000132"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000133
		# line in RSA: Updated the <product> software.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updated the %{product} software." }
				id => "message-000133"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Updated software"
					"[event][id]" => "000133"
					"[rsa][message][id1]" => "000133"
					"[event][categoryid]" => "1704030000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000134
		# line in RSA: Updated { user group | user } - <info>, Name=<group>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Updated[\s]+([\s]*user[\s]+group[\s]+|[\s]*user[\s]+)[\s]+\-[\s]+(?<info>[^,]*),[\s]+Name=(?<group>.*)$" }
				id => "message-000134"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Updated user"
					"[event][id]" => "000134"
					"[rsa][message][id1]" => "000134"
					"[event][categoryid]" => "1402020300"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000135
		# line in RSA: Updated Authentication Module <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updated Authentication Module %{info}" }
				id => "message-000135"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Updated Authentication Module"
					"[event][id]" => "000135"
					"[rsa][message][id1]" => "000135"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000625
		# line in RSA: Updated SNMP - Enabled=false
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updated SNMP - Enabled=false" }
				id => "message-000625"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "SNMP disabled"
					"[event][id]" => "000625"
					"[rsa][message][id1]" => "000625"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000626
		# line in RSA: Updated community - ID=<fld25> Name=<fld26>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updated community - ID=%{fld25} Name=%{fld26}" }
				id => "message-000626"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Updated community"
					"[event][id]" => "000626"
					"[rsa][message][id1]" => "000626"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000627
		# line in RSA: Updated SNMP - Enabled=true
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Updated SNMP - Enabled=true" }
				id => "message-000627"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "SNMP enabled"
					"[event][id]" => "000627"
					"[rsa][message][id1]" => "000627"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId210
	# line in RSA:  <process>: Deleting <obj_type> { files older | older } than <fld1>
	else if [logstash][msgparser][id] == "msgParserId210" {
		grok {
			match => { "message" => "^[\s]*(?<process>[^:]*):[\s]+Deleting[\s]+(?<obj_type>[^\s]*)[\s]+([\s]*files[\s]+older[\s]+|[\s]*older[\s]+)[\s]+than[\s]+(?<fld1>.*)$" }
			id => "msgParserId210"
			add_field => {
				"event_description" => "Deleting old files"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "WPACL" {
		# MESSAGE 000138
		# line in RSA: User '{ (<username>)@(<shost>) (<peer>) | (<username>)@(<shost>) | (<fld2> (<username>))@(<shost>) }' connecting from '<saddr>:<sport>' { matched rule #<fld1> | matched rule } '<rulename>', access to '<dhost>:<dport>' is permitted.
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^User[\s]+'([\s]*\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+\((?<peer>[^\)]*)\)[\s]+|[\s]*\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+|[\s]*\((?<fld2>[^\s]*)[\s]+\((?<username>[^\)]*)\)\)@\((?<shost>[^\)]*)\)[\s]+)'[\s]+connecting[\s]+from[\s]+'(?<saddr>[^:]*):(?<sport>[^']*)'[\s]+([\s]*matched[\s]+rule[\s]+#(?<fld1>[^\s]*)[\s]+|[\s]*matched[\s]+rule[\s]+)[\s]+'(?<rulename>[^']*)',[\s]+access[\s]+to[\s]+'(?<dhost>[^:]*):(?<dport>[^']*)'[\s]+is[\s]+permitted\.$" }
				id => "message-000138"
				add_field => {
				"event_description" => "user connected"
					"[event][id]" => "000138"
					"[rsa][message][id1]" => "000138"
					"[event][categoryid]" => "1502050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000169
		# line in RSA:  <service> - userGroup{ (<info>): | (<info> } Module reported it could not determine if it matched
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<service>[^\s]*)[\s]+\-[\s]+userGroup([\s]*\((?<info>[^\)]*)\):[\s]+|[\s]*\((?<info>[^\s]*)[\s]+)[\s]+Module[\s]+reported[\s]+it[\s]+could[\s]+not[\s]+determine[\s]+if[\s]+it[\s]+matched$" }
				id => "message-000169"
				add_field => {
				"event_description" => "Module reported it could not determine if it matched"
					"[event][id]" => "000169"
					"[rsa][message][id1]" => "000169"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000136
		# line in RSA:  avtComparator: Unable to confirm valid ip address for address group '<hostname>' error '<resultcode>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "avtComparator: Unable to confirm valid ip address for address group '%{hostname}' error '%{resultcode}'" }
				id => "message-000136"
				add_field => {
				"event_description" => "confirmation valid ip"
					"[event][id]" => "000136"
					"[rsa][message][id1]" => "000136"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000137
		# line in RSA: No Match { EW | Web Access } { Rule #<fld1> | Rule } '<rulename>', User '(<username>)@(<shost>)', { Destination Network is '<dhost>:<sport>' |  unknown }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^No[\s]+Match[\s]+([\s]*EW[\s]+|[\s]*Web[\s]+Access[\s]+)[\s]+([\s]*Rule[\s]+#(?<fld1>[^\s]*)[\s]+|[\s]*Rule[\s]+)[\s]+'(?<rulename>[^']*)',[\s]+User[\s]+'\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)',[\s]+([\s]*Destination[\s]+Network[\s]+is[\s]+'(?<dhost>[^:]*):(?<sport>[^']*)'[\s]+|[\s]*unknown[\s]+)$" }
				id => "message-000137"
				add_field => {
					"[event][id]" => "000137"
					"[rsa][message][id1]" => "000137"
					"[event][categoryid]" => "1501010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000621
		# line in RSA: User '(<username>)@(<shost>)' connecting from '<saddr>:<sport>' found no matching access rule, access to '<dhost>:<dport>' is denied.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User '(%{username})@(%{shost})' connecting from '%{saddr}:%{sport}' found no matching access rule, access to '%{dhost}:%{dport}' is denied." }
				id => "message-000621"
				add_field => {
				"event_description" => "user connection denied"
					"[event][id]" => "000621"
					"[rsa][message][id1]" => "000621"
					"[event][categoryid]" => "1501040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000660
		# line in RSA: User '(<username>)@(<shost>)' connecting from '<saddr>:<sport>' matched rule #<rule> '<rulename>', access to '<dhost>:<dport>' is denied.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User '(%{username})@(%{shost})' connecting from '%{saddr}:%{sport}' matched rule #%{rule} '%{rulename}', access to '%{dhost}:%{dport}' is denied." }
				id => "message-000660"
				add_field => {
				"event_description" => "user connection denied"
					"[event][id]" => "000660"
					"[rsa][message][id1]" => "000660"
					"[event][categoryid]" => "1501040000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "Audit" {
		# MESSAGE 000609
		# line in RSA: VirtualHost='<hostip>' StartTime='<fld52>' Src='<saddr>' User='(<username>)@(<fld23>)' Method='<web_method>' HTTPVersion='<fld54>' Request='<fld55> <web_query>' Status='<resultcode>' Bytes='<bytes>' {PlatformPrefix='<fld57>' | EquipmentId='<fld56>'}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VirtualHost='(?<hostip>[^']*)'[\s]+StartTime='(?<fld52>[^']*)'[\s]+Src='(?<saddr>[^']*)'[\s]+User='\((?<username>[^\)]*)\)@\((?<fld23>[^\)]*)\)'[\s]+Method='(?<web_method>[^']*)'[\s]+HTTPVersion='(?<fld54>[^']*)'[\s]+Request='(?<fld55>[^\s]*)[\s]+(?<web_query>[^']*)'[\s]+Status='(?<resultcode>[^']*)'[\s]+Bytes='(?<bytes>[^']*)'[\s]+(PlatformPrefix='(?<fld57>[^']*)'[\s]+|[\s]*EquipmentId='(?<fld56>[^']*)')$" }
				id => "message-000609"
				add_field => {
					"[event][id]" => "000609"
					"[rsa][message][id1]" => "000609"
					"[event][categoryid]" => "1612000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000610
		# line in RSA: VirtualHost='<hostip>' StartTime='<fld52>' Src='<saddr>' User='<username>' Method='<web_method>' HTTPVersion='<fld54>' Request='<fld55> <web_query>' Status='<resultcode>' Bytes='<bytes>' {PlatformPrefix='<fld57>' | EquipmentId='<fld56>'}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^VirtualHost='(?<hostip>[^']*)'[\s]+StartTime='(?<fld52>[^']*)'[\s]+Src='(?<saddr>[^']*)'[\s]+User='(?<username>[^']*)'[\s]+Method='(?<web_method>[^']*)'[\s]+HTTPVersion='(?<fld54>[^']*)'[\s]+Request='(?<fld55>[^\s]*)[\s]+(?<web_query>[^']*)'[\s]+Status='(?<resultcode>[^']*)'[\s]+Bytes='(?<bytes>[^']*)'[\s]+(PlatformPrefix='(?<fld57>[^']*)'[\s]+|[\s]*EquipmentId='(?<fld56>[^']*)')$" }
				id => "message-000610"
				add_field => {
					"[event][id]" => "000610"
					"[rsa][message][id1]" => "000610"
					"[event][categoryid]" => "1612000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000703
		# line in RSA: Src={'[<saddr>]:<sport>'|'<saddr>:<sport>'} Auth='<scheme>' User='{(<username>)@(<shost>) (UID=<uid>, <dn>)|(<username>)@(<shost>) (<dn>)|(<username>)@(<shost>)}' SocksVersion='<fld54>' Command='<info>' Dest='<daddr>:<dport>' Error='<result>' SrcBytes='<sbytes>' DstBytes='<rbytes>' Duration='<duration>' VirtualHost='<hostip>' PlatformPrefix='<fld3>' EquipmentId='<fld4>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Src=('\[(?<saddr>[^\]]*)\]:(?<sport>[^']*)'|'(?<saddr>[^:]*):(?<sport>[^']*)')[\s]+Auth='(?<scheme>[^']*)'[\s]+User='(\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+\(UID=(?<uid>[^,]*),[\s]+(?<dn>[^\)]*)\)|\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\)[\s]+\((?<dn>[^\)]*)\)|\((?<username>[^\)]*)\)@\((?<shost>[^\)]*)\))'[\s]+SocksVersion='(?<fld54>[^']*)'[\s]+Command='(?<info>[^']*)'[\s]+Dest='(?<daddr>[^:]*):(?<dport>[^']*)'[\s]+Error='(?<result>[^']*)'[\s]+SrcBytes='(?<sbytes>[^']*)'[\s]+DstBytes='(?<rbytes>[^']*)'[\s]+Duration='(?<duration>[^']*)'[\s]+VirtualHost='(?<hostip>[^']*)'[\s]+PlatformPrefix='(?<fld3>[^']*)'[\s]+EquipmentId='(?<fld4>[^']*)'$" }
				id => "message-000703"
				add_field => {
					"[event][id]" => "000703"
					"[rsa][message][id1]" => "000703"
					"[event][categoryid]" => "1612000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE Audit
		# line in RSA: Src={'[<saddr>]:<sport>'|'<saddr>:<sport>'} Auth='<scheme>' User='<username>' SocksVersion='<fld54>' Command='<fld55>' Dest='<daddr>:<dport>' Error='<result>' SrcBytes='<sbytes>' DstBytes='<rbytes>' Duration='<duration>' VirtualHost='<hostip>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Src=('\[(?<saddr>[^\]]*)\]:(?<sport>[^']*)'|'(?<saddr>[^:]*):(?<sport>[^']*)')[\s]+Auth='(?<scheme>[^']*)'[\s]+User='(?<username>[^']*)'[\s]+SocksVersion='(?<fld54>[^']*)'[\s]+Command='(?<fld55>[^']*)'[\s]+Dest='(?<daddr>[^:]*):(?<dport>[^']*)'[\s]+Error='(?<result>[^']*)'[\s]+SrcBytes='(?<sbytes>[^']*)'[\s]+DstBytes='(?<rbytes>[^']*)'[\s]+Duration='(?<duration>[^']*)'[\s]+VirtualHost='(?<hostip>[^']*)'$" }
				id => "message-Audit"
				add_field => {
					"[event][id]" => "Audit"
					"[rsa][message][id1]" => "Audit"
					"[event][categoryid]" => "1612000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000729
		# line in RSA: <event_description> id=<fld1>, Arguments: STR "<saddr>:<sport>", STR "<fld21>", STR "(<username>)@(<fld29>)", SHORT (<fld23> <fld2>), STR "<fld3>", STR "<fld22>:<fld24>", SHORT (<fld4> <fld5>), LONG (<fld6> <fld7>), LONG (<fld8> <fld9>), STR "<fld10>", STR "<fld11>", STR "<fld12>", STR "<fld13>"
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_description} id=%{fld1}, Arguments: STR \"%{saddr}:%{sport}\", STR \"%{fld21}\", STR \"(%{username})@(%{fld29})\", SHORT (%{fld23} %{fld2}), STR \"%{fld3}\", STR \"%{fld22}:%{fld24}\", SHORT (%{fld4} %{fld5}), LONG (%{fld6} %{fld7}), LONG (%{fld8} %{fld9}), STR \"%{fld10}\", STR \"%{fld11}\", STR \"%{fld12}\", STR \"%{fld13}\"" }
				id => "message-000729"
				add_field => {
				"service" => "Audit"
					"[event][id]" => "000729"
					"[rsa][message][id1]" => "000729"
					"[event][categoryid]" => "1401030000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId219
	# line in RSA: <fld29>:cleanup:<process> pid=<process_id>(<fld55>)<fld56>
	else if [logstash][msgparser][id] == "msgParserId219" {
		dissect {
			mapping => { "message" => "%{fld29}:cleanup:%{process} pid=%{process_id}(%{fld55})%{fld56}" }
			id => "msgParserId219"
			add_field => {
				"event_description" => "cleanup"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "Configuration" {
		# MESSAGE 000614
		# line in RSA: Configuration exported to <fld31>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuration exported to %{fld31}" }
				id => "message-000614"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Configuration export"
					"[event][id]" => "000614"
					"[rsa][message][id1]" => "000614"
					"[event][categoryid]" => "1701050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000615
		# line in RSA: Configuration restored from <fld31>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuration restored from %{fld31}" }
				id => "message-000615"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Configuration restore"
					"[event][id]" => "000615"
					"[rsa][message][id1]" => "000615"
					"[event][categoryid]" => "1701050000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000616
		# line in RSA: Configuration exported
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Configuration exported" }
				id => "message-000616"
				add_field => {
				"administrator" => "%{husername}"
				"event_description" => "Configuration export"
					"[event][id]" => "000616"
					"[rsa][message][id1]" => "000616"
					"[event][categoryid]" => "1701050000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "NEACL" {
		# MESSAGE 000619
		# line in RSA: User '(<username>)@(<fld23>)' connecting from '<saddr>:<sport>' found no matching access rule, access to '<daddr>:<dport>' is denied.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User '(%{username})@(%{fld23})' connecting from '%{saddr}:%{sport}' found no matching access rule, access to '%{daddr}:%{dport}' is denied." }
				id => "message-000619"
				add_field => {
				"event_description" => "login"
					"[event][id]" => "000619"
					"[rsa][message][id1]" => "000619"
					"[event][categoryid]" => "1501040000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000620
		# line in RSA: User '(<username>)@(<fld23>)' connecting from '<saddr>:<sport>' matched rule <rule> '<rulename>', access to '<daddr>:<dport>' is permitted.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "User '(%{username})@(%{fld23})' connecting from '%{saddr}:%{sport}' matched rule %{rule} '%{rulename}', access to '%{daddr}:%{dport}' is permitted." }
				id => "message-000620"
				add_field => {
				"event_description" => "login"
					"[event][id]" => "000620"
					"[rsa][message][id1]" => "000620"
					"[event][categoryid]" => "1801020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId225
	# line in RSA:  <shost>:<sport> <fld41> <fld42> <fld43> <fld44>
	else if [logstash][msgparser][id] == "msgParserId225" {
		dissect {
			mapping => { "message" => "%{shost}:%{sport} %{fld41} %{fld42} %{fld43} %{fld44}" }
			id => "msgParserId225"
			add_field => {
				"event_description" => "connect"
				"username" => "%{husername}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId226
	# line in RSA:  <shost>:<sport> <fld41> <fld42> <fld43> <fld44>
	else if [logstash][msgparser][id] == "msgParserId226" {
		dissect {
			mapping => { "message" => "%{shost}:%{sport} %{fld41} %{fld42} %{fld43} %{fld44}" }
			id => "msgParserId226"
			add_field => {
				"username" => "%{husername}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId227
	# line in RSA:  <saddr>:<sport> <fld41> <fld42> <fld43> <fld44>
	else if [logstash][msgparser][id] == "msgParserId227" {
		dissect {
			mapping => { "message" => "%{saddr}:%{sport} %{fld41} %{fld42} %{fld43} %{fld44}" }
			id => "msgParserId227"
			add_field => {
				"username" => "%{husername}"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "INFO" {
		# MESSAGE 000501
		# line in RSA:  <fld25> [<fld51>] session(<fld26>) <url>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld25} [%{fld51}] session(%{fld26}) %{url}" }
				id => "message-000501"
				add_field => {
					"[event][id]" => "000501"
					"[rsa][message][id1]" => "000501"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000502
		# line in RSA:  {<fld25> [<fld51>] <event_description>|<event_description>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*((?<fld25>[^\s]*)[\s]+\[(?<fld51>[^\]]*)\][\s]+(?<event_description>.*)|(?<event_description>.*))$" }
				id => "message-000502"
				add_field => {
					"[event][id]" => "000502"
					"[rsa][message][id1]" => "000502"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "servicemgr" {
		# MESSAGE 000195
		# line in RSA:  <process>: AccessCheck::<fld1>: <fld2>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{process}: AccessCheck::%{fld1}: %{fld2}" }
				id => "message-000195"
				add_field => {
				"event_description" => "servicemgr AccessCheck"
					"[event][id]" => "000195"
					"[rsa][message][id1]" => "000195"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000504
		# line in RSA:  <fld29>: { Starting | Restarting } service: id = <service>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld29>[^:]*):[\s]+([\s]*Starting[\s]+|[\s]*Restarting[\s]+)[\s]+service:[\s]+id[\s]+=[\s]+(?<service>.*)$" }
				id => "message-000504"
				add_field => {
				"event_description" => "start"
					"[event][id]" => "000504"
					"[rsa][message][id1]" => "000504"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000505
		# line in RSA:  <fld29>: Reconfiguring service: id = <service>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Reconfiguring service: id = %{service}" }
				id => "message-000505"
				add_field => {
				"event_description" => "Reconfiguring service"
					"[event][id]" => "000505"
					"[rsa][message][id1]" => "000505"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000506
		# line in RSA:  <fld29>: Failed to find a process entry for service, <fld53>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Failed to find a process entry for service, %{fld53}" }
				id => "message-000506"
				add_field => {
					"[event][id]" => "000506"
					"[rsa][message][id1]" => "000506"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000507
		# line in RSA:  <fld29>: libacp:pid=<process_id>:atfork:renicing
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: libacp:pid=%{process_id}:atfork:renicing" }
				id => "message-000507"
				add_field => {
					"[event][id]" => "000507"
					"[rsa][message][id1]" => "000507"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000508
		# line in RSA:  <fld29>: Not restarting the service workplace beacuse of start time limit
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Not restarting the service workplace beacuse of start time limit" }
				id => "message-000508"
				add_field => {
				"event_description" => "Not restarting the service workplace beacuse of start time limit"
					"[event][id]" => "000508"
					"[rsa][message][id1]" => "000508"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000509
		# line in RSA:  <fld29>: Failed to access service:<fld53>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Failed to access service:%{fld53}" }
				id => "message-000509"
				add_field => {
				"event_description" => "Failed to access service"
					"[event][id]" => "000509"
					"[rsa][message][id1]" => "000509"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000510
		# line in RSA:  <fld29>: StateMap { start | restart }:: restarting <fld53>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*(?<fld29>[^:]*):[\s]+StateMap[\s]+([\s]*start[\s]+|[\s]*restart[\s]+)::[\s]+restarting[\s]+(?<fld53>.*)$" }
				id => "message-000510"
				add_field => {
				"event_description" => "start"
					"[event][id]" => "000510"
					"[rsa][message][id1]" => "000510"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000511
		# line in RSA:  <fld29>: Not restarting the service <fld53> beacuse of start time limit
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Not restarting the service %{fld53} beacuse of start time limit" }
				id => "message-000511"
				add_field => {
				"event_description" => "Not restarting"
					"[event][id]" => "000511"
					"[rsa][message][id1]" => "000511"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000512
		# line in RSA:  <fld29>: Stopping service: id = <fld53>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld29}: Stopping service: id = %{fld53}" }
				id => "message-000512"
				add_field => {
				"event_description" => "Stopping"
					"[event][id]" => "000512"
					"[rsa][message][id1]" => "000512"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId240
	# line in RSA:  <process>[<process_id>]: SNMP: Generated <fld2> (<fld3>) trap
	else if [logstash][msgparser][id] == "msgParserId240" {
		dissect {
			mapping => { "message" => "%{process}[%{process_id}]: SNMP: Generated %{fld2} (%{fld3}) trap" }
			id => "msgParserId240"
			add_field => {
				"event_description" => "Generated SNMP Trap"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId241
	# line in RSA:  <fld29>: Stop failed: not running
	else if [logstash][msgparser][id] == "msgParserId241" {
		dissect {
			mapping => { "message" => "%{fld29}: Stop failed: not running" }
			id => "msgParserId241"
			add_field => {
				"event_description" => "Stopped"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId244
	# line in RSA: <info>
	else if [logstash][msgparser][id] == "msgParserId244" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId244"
			add_field => {
				"event_description" => "Authentication failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId247
	# line in RSA: <event_description> older than 7 days.
	else if [logstash][msgparser][id] == "msgParserId247" {
		dissect {
			mapping => { "message" => "%{event_description} older than 7 days." }
			id => "msgParserId247"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId257
	# line in RSA:  <saddr>:<sport> - "(<username>)@(<group>)" "<fld20>.<fld21>" 1.1 <info>:<protocol> <daddr>:<dport> <fld22> <sbytes> <bytes> <duration>
	else if [logstash][msgparser][id] == "msgParserId257" {
		dissect {
			mapping => { "message" => "%{saddr}:%{sport} - \"(%{username})@(%{group})\" \"%{fld20}.%{fld21}\" 1.1 %{info}:%{protocol} %{daddr}:%{dport} %{fld22} %{sbytes} %{bytes} %{duration}" }
			id => "msgParserId257"
			add_field => {
				"event_description" => "message flow"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "WARN" {
		# MESSAGE 000725
		# line in RSA:  Exception (no Message) type: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Exception (no Message) type: %{info}" }
				id => "message-000725"
				add_field => {
				"service" => "WARN"
					"[event][id]" => "000725"
					"[rsa][message][id1]" => "000725"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000726
		# line in RSA: Exception message: {<event_description> for sessionId=<fld1>==; reading uri=<fld2>://<saddr>/ |<info>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^Exception[\s]+message:[\s]+((?<event_description>[^\s]*)[\s]+for[\s]+sessionId=(?<fld1>[^=]*)==;[\s]+reading[\s]+uri=(?<fld2>[^:]*)://(?<saddr>[^/]*)/[\s]+|(?<info>.*))$" }
				id => "message-000726"
				add_field => {
				"service" => "WARN"
					"[event][id]" => "000726"
					"[rsa][message][id1]" => "000726"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000727
		# line in RSA:  Resource <fld1> Not Found.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "Resource %{fld1} Not Found." }
				id => "message-000727"
				add_field => {
				"service" => "WARN"
				"event_description" => "Resource Not Found."
					"[event][id]" => "000727"
					"[rsa][message][id1]" => "000727"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000739
		# line in RSA:  <fld1> <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{info}" }
				id => "message-000739"
				add_field => {
				"service" => "WARN"
				"event_description" => "Policy Server broken"
					"[event][id]" => "000739"
					"[rsa][message][id1]" => "000739"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId267
	# line in RSA:  <info>
	else if [logstash][msgparser][id] == "msgParserId267" {
		dissect {
			mapping => { "message" => "%{info}" }
			id => "msgParserId267"
			add_field => {
				"service" => "FATAL"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId273
	# line in RSA:  Executing '<fld1>'
	else if [logstash][msgparser][id] == "msgParserId273" {
		dissect {
			mapping => { "message" => "Executing '%{fld1}'" }
			id => "msgParserId273"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId274
	# line in RSA: <event_description>
	else if [logstash][msgparser][id] == "msgParserId274" {
		dissect {
			mapping => { "message" => "%{event_description}" }
			id => "msgParserId274"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId275
	# line in RSA:  <saddr>:<sport> - "(<username>)@(<group>)" "<fld20>.<fld21>" 1.1 <service> <daddr>:<dport> <fld22> <sbytes> <bytes> <duration>
	else if [logstash][msgparser][id] == "msgParserId275" {
		dissect {
			mapping => { "message" => "%{saddr}:%{sport} - \"(%{username})@(%{group})\" \"%{fld20}.%{fld21}\" 1.1 %{service} %{daddr}:%{dport} %{fld22} %{sbytes} %{bytes} %{duration}" }
			id => "msgParserId275"
			add_field => {
				"event_description" => "message tunnel"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "kernel" {
		# MESSAGE 000737
		# line in RSA:  kernel: __ratelimit: <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "kernel: __ratelimit: %{info}" }
				id => "message-000737"
				add_field => {
				"event_description" => "callbacks suppressed"
					"[event][id]" => "000737"
					"[rsa][message][id1]" => "000737"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000763
		# line in RSA: {kernel: AVFM: AVFM:handler:close | kernel: AVFM:handler:close}:<shost>:<sport>{ -><dhost>:<dport>:<fld1>|-<fld1>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(kernel:[\s]+AVFM:[\s]+AVFM:handler:close[\s]+|[\s]*kernel:[\s]+AVFM:handler:close):(?<shost>[^:]*):(?<sport>[^\s\-]*)([\s]*\->(?<dhost>[^:]*):(?<dport>[^:]*):(?<fld1>.*)|\-(?<fld1>.*))$" }
				id => "message-000763"
				add_field => {
				"event_description" => "handler:close"
					"[event][id]" => "000763"
					"[rsa][message][id1]" => "000763"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000764
		# line in RSA:  kernel: AVFM: refrag:ip_fragment failed:<shost>-><dhost> proto=<protocol> (err=<resultcode>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "kernel: AVFM: refrag:ip_fragment failed:%{shost}->%{dhost} proto=%{protocol} (err=%{resultcode})" }
				id => "message-000764"
				add_field => {
				"event_description" => "ip_fragment failed"
					"[event][id]" => "000764"
					"[rsa][message][id1]" => "000764"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000765
		# line in RSA:  kernel: IPTABLES:<fld1>:{<fld2>:IN=<sinterface> | <fld2>IN=<sinterface>} OUT=<dinterface> {MAC=<macaddr> SRC=<saddr>| SRC=<saddr>} DST=<daddr> LEN=<fld1> TOS=<fld2> PREC=<fld3> TTL=<fld4> ID=<id> { PROTO=<protocol> SPT=<sport> DPT=<dport> LEN=<fld5>| <fld6> PROTO=<protocol> SPT=<sport> DPT=<dport> <info>| <fld6> PROTO=<protocol> TYPE=<fld7> CODE=<fld8> ID=<fld9> SEQ=<fld10>| <fld6> PROTO=<protocol> TYPE=<fld7> CODE=<fld8> <info> }  
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*kernel:[\s]+IPTABLES:(?<fld1>[^:]*):((?<fld2>[^:]*):IN=(?<sinterface>[^\s]*)[\s]+|[\s]*(?<fld2>[^I]*)IN=(?<sinterface>[^\s]*))[\s]+OUT=(?<dinterface>[^\s]*)[\s]+(MAC=(?<macaddr>[^\s]*)[\s]+SRC=(?<saddr>[^\s]*)|[\s]*SRC=(?<saddr>[^\s]*))[\s]+DST=(?<daddr>[^\s]*)[\s]+LEN=(?<fld1>[^\s]*)[\s]+TOS=(?<fld2>[^\s]*)[\s]+PREC=(?<fld3>[^\s]*)[\s]+TTL=(?<fld4>[^\s]*)[\s]+ID=(?<id>[^\s]*)[\s]+([\s]*PROTO=(?<protocol>[^\s]*)[\s]+SPT=(?<sport>[^\s]*)[\s]+DPT=(?<dport>[^\s]*)[\s]+LEN=(?<fld5>[^\s]*)|[\s]*(?<fld6>[^\s]*)[\s]+PROTO=(?<protocol>[^\s]*)[\s]+SPT=(?<sport>[^\s]*)[\s]+DPT=(?<dport>[^\s]*)[\s]+(?<info>[^\s]*)|[\s]*(?<fld6>[^\s]*)[\s]+PROTO=(?<protocol>[^\s]*)[\s]+TYPE=(?<fld7>[^\s]*)[\s]+CODE=(?<fld8>[^\s]*)[\s]+ID=(?<fld9>[^\s]*)[\s]+SEQ=(?<fld10>[^\s]*)|[\s]*(?<fld6>[^\s]*)[\s]+PROTO=(?<protocol>[^\s]*)[\s]+TYPE=(?<fld7>[^\s]*)[\s]+CODE=(?<fld8>[^\s]*)[\s]+(?<info>[^\s]*)[\s]+)[\s]+$" }
				id => "message-000765"
				add_field => {
					"[event][id]" => "000765"
					"[rsa][message][id1]" => "000765"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000766
		# line in RSA:  kernel: PRNG:FIPS:reseeded:reseed_counter=<fld1> block_count=<fld2> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "kernel: PRNG:FIPS:reseeded:reseed_counter=%{fld1} block_count=%{fld2}" }
				id => "message-000766"
				add_field => {
					"[event][id]" => "000766"
					"[rsa][message][id1]" => "000766"
					"[event][categoryid]" => "1801010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE 000767
		# line in RSA:  kernel: FIPS:PRNG:KAT: <event_description> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "kernel: FIPS:PRNG:KAT: %{event_description}" }
				id => "message-000767"
				add_field => {
					"[event][id]" => "000767"
					"[rsa][message][id1]" => "000767"
					"[event][categoryid]" => "1605000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "avpsd" {
		# MESSAGE avpsd
		# line in RSA:  avpsd: {>|<<} DHCPProxy:: { Request to <fld1> | Request } 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*avpsd:[\s]+(>|<)[\s]+DHCPProxy::[\s]+([\s]*Request[\s]+to[\s]+(?<fld1>[^\s]*)[\s]+|[\s]*Request[\s]+)[\s]+$" }
				id => "message-avpsd"
				add_field => {
				"event_description" => "DHCPProxy Request"
					"[event][id]" => "avpsd"
					"[rsa][message][id1]" => "avpsd"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE avpsd:01
		# line in RSA:  avpsd: {>|<<} DHCPLease::Acquire 
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^[\s]*avpsd:[\s]+(>|<)[\s]+DHCPLease::Acquire[\s]+$" }
				id => "message-avpsd:01"
				add_field => {
				"event_description" => "DHCPLease Acquire"
					"[event][id]" => "avpsd:01"
					"[rsa][message][id1]" => "avpsd:01"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE avpsd:02
		# line in RSA:  avpsd:    DHCPProxy::Request XID <fld2> already registered 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "avpsd:    DHCPProxy::Request XID %{fld2} already registered" }
				id => "message-avpsd:02"
				add_field => {
				"event_description" => "DHCPProxy Request registered"
					"[event][id]" => "avpsd:02"
					"[rsa][message][id1]" => "avpsd:02"
					"[event][categoryid]" => "1605010000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_aventailmsg.json"
#			template_name => "aventail_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

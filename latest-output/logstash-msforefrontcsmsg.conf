# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "msforefrontcs"
			"[observer][name]" => "Microsoft Forefront Client Security"
			"[observer][type]" => "Anti Virus"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %MS_FCS: <hfld1>^^<hfld2>^^<hfld3>^^<hfld4>^^<hfld5>^^<hfld6>^^<hfld7>^^<messageid>^^<!payload:hfld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%MS_FCS:[\s]+(?<message>(?<hfld1>[^\^]*)\^\^(?<hfld2>[^\^]*)\^\^(?<hfld3>[^\^]*)\^\^(?<hfld4>[^\^]*)\^\^(?<hfld5>[^\^]*)\^\^(?<hfld6>[^\^]*)\^\^(?<hfld7>[^\^]*)\^\^(?<messageid>[^\^]*)\^\^(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %NICWIN-<hlevel>-<Hmessageid>: <msgIdPart1>,<Hlinenum>,<Hday> <Hdatetime>,<msgIdPart2>,Microsoft-Windows-Security-Auditing,<Hevent_user>,<Hevent_type>,<Hevent_computer>,<Hcategory>,<Hdata>,<!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{Hmessageid}: %{msgIdPart1},%{Hlinenum},%{Hday} %{Hdatetime},%{msgIdPart2},Microsoft-Windows-Security-Auditing,%{Hevent_user},%{Hevent_type},%{Hevent_computer},%{Hcategory},%{Hdata},%{message}" }
			id => "header-0002"
			add_field => {
				"[rsa][header][id]" => "0002"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}_Microsoft-Windows-Security-Auditing"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0003
	# line in RSA: %NICWIN-<hlevel>-<msgIdPart1> Endpoint Protection_<msgIdPart2>_<hfld1>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{msgIdPart1} Endpoint Protection_%{msgIdPart2}_%{hfld1}: %{message}" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{msgIdPart1}_%{msgIdPart2}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: %NICWIN-<hlevel>-<messageid>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{messageid}: %{message}" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: %NICWIN-<hlevel>-<messageid> <hfld1>: <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%NICWIN-%{hlevel}-%{messageid} %{hfld1}: %{message}" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-msforefrontcsmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security has finished analyzing the database for the malicious outbreak  Version = <version>  Profile ID = <fld3>  Threat ID = <fld4>  Threat name = <virusname>  Alert level = <fld5>  Event count = <event_counter>  Protection type = <fld7>  First instance = <fld8>  Last instance = <fld9>  Window start time = <fld13>  Window end time = <fld14>  Outbreak time slot = <fld12>
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security has finished analyzing the database for the malicious outbreak  Version = %{version}  Profile ID = %{fld3}  Threat ID = %{fld4}  Threat name = %{virusname}  Alert level = %{fld5}  Event count = %{event_counter}  Protection type = %{fld7}  First instance = %{fld8}  Last instance = %{fld9}  Window start time = %{fld13}  Window end time = %{fld14}  Outbreak time slot = %{fld12}" }
			id => "msgParserId0"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security has finished analyzing the database for the malicious outbreak"
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Agent state summary.  Version = <version>  Profile ID = <fld3>  Profile instance ID = <fld15>  OU = <info>  FQDNs = <fqdn>  IP addresses = <hostip>  MAC addresses = <macaddr>  <context>
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Agent state summary.  Version = %{version}  Profile ID = %{fld3}  Profile instance ID = %{fld15}  OU = %{info}  FQDNs = %{fqdn}  IP addresses = %{hostip}  MAC addresses = %{macaddr}  %{context}" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^The following non-MOM API has failed: <fld13>.  Error code:<resultcode>  Error description:<result>
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^The following non-MOM API has failed: %{fld13}.  Error code:%{resultcode}  Error description:%{result}" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security scan has detected spyware or other potentially unwanted software.   For more information please see the following: <info>  Scan ID: <operation_id>  Scan Type: <event_type>  Scan Parameters: <param>  User:<event_user>  Name:<virusname>  ID:<fld18>  Severity: <fld19>  Category: <category>  Path Found: <filename>  Detection Type: <fld22>
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security scan has detected spyware or other potentially unwanted software.   For more information please see the following: %{info}  Scan ID: %{operation_id}  Scan Type: %{event_type}  Scan Parameters: %{param}  User:%{event_user}  Name:%{virusname}  ID:%{fld18}  Severity: %{fld19}  Category: %{category}  Path Found: %{filename}  Detection Type: %{fld22}" }
			id => "msgParserId3"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security scan has detected spyware or other potentially unwanted software."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^A vulnerability scan on this computer detected the following results for the <fld41> issue:  Issue Name: <fld34>  Result: <result>  Risk: <risk>  Severity: <fld19>  More Information: <info>
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^A vulnerability scan on this computer detected the following results for the %{fld41} issue:  Issue Name: %{fld34}  Result: %{result}  Risk: %{risk}  Severity: %{fld19}  More Information: %{info}" }
			id => "msgParserId4"
			add_field => {
				"event_description" => "A vulnerability scan on this computer detected the following results"
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Update opt-in completed successfully.
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Update opt-in completed successfully." }
			id => "msgParserId5"
			add_field => {
				"event_description" => "Microsoft Update opt-in completed successfully."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security scan has finished.    Scan ID: <operation_id>  Scan Type: <event_type>  Scan Parameters: <param>  User: <event_user>  Scan Time: <duration_string>
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security scan has finished.    Scan ID: %{operation_id}  Scan Type: %{event_type}  Scan Parameters: %{param}  User: %{event_user}  Scan Time: %{duration_string}" }
			id => "msgParserId6"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security scan has finished."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "10005" {
		# MESSAGE 10005
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^The Forefront Client Security State Assessment Service has started.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^The Forefront Client Security State Assessment Service has started." }
				id => "message-10005"
				add_field => {
				"event_description" => "The Forefront Client Security State Assessment Service has started."
					"[event][id]" => "10005"
					"[rsa][message][id1]" => "10005"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 10005:01
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^The Forefront Client Security State Assessment Service has stopped.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^The Forefront Client Security State Assessment Service has stopped." }
				id => "message-10005:01"
				add_field => {
				"event_description" => "The Forefront Client Security State Assessment Service has stopped."
					"[event][id]" => "10005:01"
					"[rsa][message][id1]" => "10005:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^A security state assessment scan completed successfully.    Parameters:    Agent Version = <component_version>  Profile ID = <fld3>  Scan ID = <operation_id>  Start Time = <fld4>  Stop Time = <fld5>  Scan Status = <fld38>  Overall Score = <fld39>  Overall Severity = <fld19>  Error Issues = <dclass_counter1>  High Issues = <dclass_counter2>  Medium Issues = <dclass_counter3>  Low Issues = <fld44>  Informational Issues = <fld45>  Scan Type = <event_type>
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^A security state assessment scan completed successfully.    Parameters:    Agent Version = %{component_version}  Profile ID = %{fld3}  Scan ID = %{operation_id}  Start Time = %{fld4}  Stop Time = %{fld5}  Scan Status = %{fld38}  Overall Score = %{fld39}  Overall Severity = %{fld19}  Error Issues = %{dclass_counter1}  High Issues = %{dclass_counter2}  Medium Issues = %{dclass_counter3}  Low Issues = %{fld44}  Informational Issues = %{fld45}  Scan Type = %{event_type}" }
			id => "msgParserId9"
			add_field => {
				"event_description" => "A security state assessment scan completed successfully."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^An on-demand scan was successfully scheduled.
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^An on-demand scan was successfully scheduled." }
			id => "msgParserId10"
			add_field => {
				"event_description" => "An on-demand scan was successfully scheduled."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "1008" {
		# MESSAGE 1008
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security scan has started.    Scan ID: <operation_id>  Scan Type: <event_type>  Scan Parameters: <param>  User: <event_user>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security scan has started.    Scan ID: %{operation_id}  Scan Type: %{event_type}  Scan Parameters: %{param}  User: %{event_user}" }
				id => "message-1008"
				add_field => {
				"event_description" => "Microsoft Forefront Client Security scan has started."
					"[event][id]" => "1008"
					"[rsa][message][id1]" => "1008"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 1008:01
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security has encountered an error when taking action on spyware or other potentially unwanted software.   For more information please see the following:  <info>    Scan ID: <operation_id>     Scan Type: <event_type>    User: <event_user>    Name: <virusname>    ID: <fld18>    Severity: <fld19>    Category: <category>    Path:     Action: <action>    Error Code: <resultcode>    Error description: <result>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security has encountered an error when taking action on spyware or other potentially unwanted software.   For more information please see the following:  %{info}    Scan ID: %{operation_id}     Scan Type: %{event_type}    User: %{event_user}    Name: %{virusname}    ID: %{fld18}    Severity: %{fld19}    Category: %{category}    Path:     Action: %{action}    Error Code: %{resultcode}    Error description: %{result}" }
				id => "message-1008:01"
				add_field => {
				"event_description" => "Microsoft Forefront Client Security has encountered an error when taking action on spyware or other potentially unwanted software."
					"[event][id]" => "1008:01"
					"[rsa][message][id1]" => "1008:01"
					"[event][categoryid]" => "1003050000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security scan has started.    Scan ID: <operation_id>  Scan Type: <event_type>  Scan Parameters: <param>  User: <event_user>
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security scan has started.    Scan ID: %{operation_id}  Scan Type: %{event_type}  Scan Parameters: %{param}  User: %{event_user}" }
			id => "msgParserId11"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security scan has started."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security signature version has been updated.    Current Signature Version: <version>  Previous Signature Version: <fld25>  Update Source: <fld26>  Signature Type: <event_type>  Update Type: <fld27>  User: <event_user>  Current Engine Version: <change_new>  Previous Engine Version: <change_old>
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security signature version has been updated.    Current Signature Version: %{version}  Previous Signature Version: %{fld25}  Update Source: %{fld26}  Signature Type: %{event_type}  Update Type: %{fld27}  User: %{event_user}  Current Engine Version: %{change_new}  Previous Engine Version: %{change_old}" }
			id => "msgParserId13"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security signature version has been updated"
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "3004" {
		# MESSAGE 3004
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security Real-Time Protection agent has detected changes. Microsoft recommends you analyze the software that made these changes for potential risks. You can use information about how these programs operate to choose whether to allow them to run or remove them from your computer.  Allow changes only if you trust the program or the software publisher. Microsoft Forefront Client Security can't undo changes that you allow.   For more information please see the following: <info>  Scan ID: <operation_id>  Agent: <fld20>  User: <event_user>  Name: <virusname>  ID: <fld18>  Severity: <fld19>  Category: <category>  Path Found: <filename>  Alert Type: <fld30>  Process Name: <process>  Detection Type: <fld22>  Status: <event_state>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security Real-Time Protection agent has detected changes. Microsoft recommends you analyze the software that made these changes for potential risks. You can use information about how these programs operate to choose whether to allow them to run or remove them from your computer.  Allow changes only if you trust the program or the software publisher. Microsoft Forefront Client Security can't undo changes that you allow.   For more information please see the following: %{info}  Scan ID: %{operation_id}  Agent: %{fld20}  User: %{event_user}  Name: %{virusname}  ID: %{fld18}  Severity: %{fld19}  Category: %{category}  Path Found: %{filename}  Alert Type: %{fld30}  Process Name: %{process}  Detection Type: %{fld22}  Status: %{event_state}" }
				id => "message-3004"
				add_field => {
				"event_description" => "Microsoft Forefront Client Security Real-Time Protection agent has detected changes. "
					"[event][id]" => "3004"
					"[rsa][message][id1]" => "3004"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 3004:01
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security Real-Time Protection agent has detected changes. Microsoft recommends you analyze the software that made these changes for potential risks. You can use information about how these programs operate to choose whether to allow them to run or remove them from your computer.  Allow changes only if you trust the program or the software publisher. Microsoft Forefront Client Security can't undo changes that you allow.   For more information please see the following: <info>  Scan ID: <operation_id>  Agent: <fld20>  User: <event_user>  Name: <virusname>  ID: <fld18>  Severity: <fld19>  Category: <category>  Path Found: <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security Real-Time Protection agent has detected changes. Microsoft recommends you analyze the software that made these changes for potential risks. You can use information about how these programs operate to choose whether to allow them to run or remove them from your computer.  Allow changes only if you trust the program or the software publisher. Microsoft Forefront Client Security can't undo changes that you allow.   For more information please see the following: %{info}  Scan ID: %{operation_id}  Agent: %{fld20}  User: %{event_user}  Name: %{virusname}  ID: %{fld18}  Severity: %{fld19}  Category: %{category}  Path Found: %{filename}" }
				id => "message-3004:01"
				add_field => {
				"event_description" => "Microsoft Forefront Client Security Real-Time Protection agent has detected changes. "
					"[event][id]" => "3004:01"
					"[rsa][message][id1]" => "3004:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security engine version has been updated.    Current Engine Version: <fld33>  Previous Engine Version: <change_old>  Update Source: <fld26>  User: <event_user>
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security engine version has been updated.    Current Engine Version: %{fld33}  Previous Engine Version: %{change_old}  Update Source: %{fld26}  User: %{event_user}" }
			id => "msgParserId16"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security engine version has been updated."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security Configuration has changed. If this is an unexpected event you should review the settings as this may be the result of malware.    Old value: <fld33>  New value: <change_new>
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security Configuration has changed. If this is an unexpected event you should review the settings as this may be the result of malware.    Old value: %{fld33}  New value: %{change_new}" }
			id => "msgParserId17"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security Configuration has changed. If this is an unexpected event you should review the settings as this may be the result of malware."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security Real-Time Protection agent has taken action to protect this machine from spyware or other potentially unwanted software.   For more information please see the following: <info>  Scan ID: <operation_id>  User: <event_user>  Name: <virusname>  ID: <fld18>  Severity: <fld19>  Category: <category>  Alert Type: <fld30>  Action: <action>
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security Real-Time Protection agent has taken action to protect this machine from spyware or other potentially unwanted software.   For more information please see the following: %{info}  Scan ID: %{operation_id}  User: %{event_user}  Name: %{virusname}  ID: %{fld18}  Severity: %{fld19}  Category: %{category}  Alert Type: %{fld30}  Action: %{action}" }
			id => "msgParserId18"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security Real-Time Protection agent has taken action to protect this machine from spyware or other potentially unwanted software."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security has taken action to protect this machine from spyware or other potentially unwanted software.   For more information please see the following: <info>  Scan ID: <operation_id>  Scan Type: <event_type>  User: <event_user>  Name: <virusname>  ID: <fld18>  Severity: <fld19> Category: <category>  Action: <action>
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security has taken action to protect this machine from spyware or other potentially unwanted software.   For more information please see the following: %{info}  Scan ID: %{operation_id}  Scan Type: %{event_type}  User: %{event_user}  Name: %{virusname}  ID: %{fld18}  Severity: %{fld19} Category: %{category}  Action: %{action}" }
			id => "msgParserId19"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security has taken action to protect this machine from spyware or other potentially unwanted software."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^<event_description>
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^%{event_description}" }
			id => "msgParserId20"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Error reading string from registry <fld46>
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Error reading string from registry %{fld46}" }
			id => "msgParserId21"
			add_field => {
				"event_description" => "Error reading string from registry"
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Microsoft Forefront Client Security Real-Time Protection agent has detected changes. Microsoft recommends you analyze the software that made these changes for potential risks. You can use information about how these programs operate to choose whether to allow them to run or remove them from your computer.  Allow changes only if you trust the program or the software publisher. Microsoft Forefront Client Security can't undo changes that you allow.   For more information please see the following: <info>  Scan ID: <operation_id>  Agent: <fld20>  User: <event_user>  Name: <virusname>  ID: <fld18>  Severity: <fld19>  Category: <category>  Path Found: <filename>  Alert Type: <fld30>  Process Name: <process>  Detection Type: <fld22>  Status: <event_state>
	else if [logstash][msgparser][id] == "msgParserId22" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Microsoft Forefront Client Security Real-Time Protection agent has detected changes. Microsoft recommends you analyze the software that made these changes for potential risks. You can use information about how these programs operate to choose whether to allow them to run or remove them from your computer.  Allow changes only if you trust the program or the software publisher. Microsoft Forefront Client Security can't undo changes that you allow.   For more information please see the following: %{info}  Scan ID: %{operation_id}  Agent: %{fld20}  User: %{event_user}  Name: %{virusname}  ID: %{fld18}  Severity: %{fld19}  Category: %{category}  Path Found: %{filename}  Alert Type: %{fld30}  Process Name: %{process}  Detection Type: %{fld22}  Status: %{event_state}" }
			id => "msgParserId22"
			add_field => {
				"event_description" => "Microsoft Forefront Client Security Real-Time Protection agent has detected changes."
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	else if [logstash][msgparser][id] == "10006" {
		# MESSAGE 10006
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Forefront Client Security State Assessment Service policy applied successfully.    Applied the following settings:    <info>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Forefront Client Security State Assessment Service policy applied successfully.    Applied the following settings:    %{info}" }
				id => "message-10006"
				add_field => {
				"event_description" => "Forefront Client Security State Assessment Service policy applied successfully"
					"[event][id]" => "10006"
					"[rsa][message][id1]" => "10006"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
		# MESSAGE 10006:01
		# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^<event_description>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^%{event_description}" }
				id => "message-10006:01"
				add_field => {
					"[event][id]" => "10006:01"
					"[rsa][message][id1]" => "10006:01"
					"[event][categoryid]" => "1605000000"
					"[logstash][fullDateTimeString]" => "%{fld58}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Trend pre-calc event: <fld33>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Trend pre-calc event: %{fld33}" }
			id => "msgParserId24"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: <fld58>.<fld59>^^<severity>^^<fld1>^^<domain>\<hostname>^^<event_source>^^<agent>^^<username>^^<fld2>^^Finished calculating trend data of trend: <fld33>
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "%{fld58}.%{fld59}^^%{severity}^^%{fld1}^^%{domain}\%{hostname}^^%{event_source}^^%{agent}^^%{username}^^%{fld2}^^Finished calculating trend data of trend: %{fld33}" }
			id => "msgParserId25"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld58}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "yyyy-M-d HH:m:s" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scan has started. Scan ID:%b<fld2> Scan Type:%b<agent> Scan Parameters:%b<fld4> Scan Resources:%b<fld5> User:%b<username>
	else if [logstash][msgparser][id] == "msgParserId26" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scan has started. Scan ID:%b%{fld2} Scan Type:%b%{agent} Scan Parameters:%b%{fld4} Scan Resources:%b%{fld5} User:%b%{username}" }
			id => "msgParserId26"
			add_field => {
				"event_description" => "Scan has started"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scan has finished. Scan ID:%b<fld2> Scan Type:%b<agent> Scan Parameters:%b<fld4> User:%b<username>Scan Time:%b<fld10>
	else if [logstash][msgparser][id] == "msgParserId27" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scan has finished. Scan ID:%b%{fld2} Scan Type:%b%{agent} Scan Parameters:%b%{fld4} User:%b%{username}Scan Time:%b%{fld10}" }
			id => "msgParserId27"
			add_field => {
				"event_description" => "SCan has finished"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scan has been stopped before completion. Scan ID:%b<fld2> Scan Type:%b<agent> Scan Parameters:%b<fld4> User:%b<username>
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scan has been stopped before completion. Scan ID:%b%{fld2} Scan Type:%b%{agent} Scan Parameters:%b%{fld4} User:%b%{username}" }
			id => "msgParserId28"
			add_field => {
				"event_description" => "Scan has been stopped before completion"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scan has been paused. Scan ID:%b<fld2> Scan Type:%b<agent> Scan Parameters:%b<fld4> User:%b<username>
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scan has been paused. Scan ID:%b%{fld2} Scan Type:%b%{agent} Scan Parameters:%b%{fld4} User:%b%{username}" }
			id => "msgParserId29"
			add_field => {
				"event_description" => "Scan has been paused"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scan has resumed. Scan ID:%b<fld2> Scan Type:%b<agent> Scan Parameters:%b<fld4> User:%b<username>
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scan has resumed. Scan ID:%b%{fld2} Scan Type:%b%{agent} Scan Parameters:%b%{fld4} User:%b%{username}" }
			id => "msgParserId30"
			add_field => {
				"event_description" => "Scan has been resumed"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scan has encountered an error and terminated. Scan ID:%b<fld2> Scan Type:%b<agent> Scan Parameters:%b<fld4> User:%b<username>Error Code:%b<resultcode> Error description:%b<result>
	else if [logstash][msgparser][id] == "msgParserId31" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scan has encountered an error and terminated. Scan ID:%b%{fld2} Scan Type:%b%{agent} Scan Parameters:%b%{fld4} User:%b%{username}Error Code:%b%{resultcode} Error description:%b%{result}" }
			id => "msgParserId31"
			add_field => {
				"event_description" => "Scan has encountered an error and terminated"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId32
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has detected malware or other potentially unwanted software. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> Status:%b<info> User:%b<username>Process Name:%b<fld18> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId32" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has detected malware or other potentially unwanted software. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} Status:%b%{info} User:%b%{username}Process Name:%b%{fld18} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId32"
			add_field => {
				"event_description" => "has detected malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId33
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has taken action to protect this machine from malware or other potentially unwanted software. For more information please see the following: <url> User:%b<username>Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Action:%b<action> Status:%b<info> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId33" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has taken action to protect this machine from malware or other potentially unwanted software. For more information please see the following: %{url} User:%b%{username}Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Action:%b%{action} Status:%b%{info} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId33"
			add_field => {
				"event_description" => "has taken action to protect this machine from malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId34
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error when taking action on malware or other potentially unwanted software. For more information please see the following: <url> User:%b<username>Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Action:%b<action> Error Code:%b<resultcode> Error description:%b<result> Status:%b<info> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error when taking action on malware or other potentially unwanted software. For more information please see the following: %{url} User:%b%{username}Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Action:%b%{action} Error Code:%b%{resultcode} Error description:%b%{result} Status:%b%{info} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId34"
			add_field => {
				"event_description" => "has encountered an error when taking action on malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId35
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has restored an item from quarantine. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> User:%b<username>Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has restored an item from quarantine. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} User:%b%{username}Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId35"
			add_field => {
				"event_description" => " has restored an item from quarantine"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId36
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error trying to restore an item from quarantine. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> User:%b<username>Error Code:%b<resultcode> Error description:%b<result> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error trying to restore an item from quarantine. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} User:%b%{username}Error Code:%b%{resultcode} Error description:%b%{result} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId36"
			add_field => {
				"event_description" => "has encountered an error trying to restore an item from quarantine"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId37
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has deleted an item from quarantine. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> User:%b<username>Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has deleted an item from quarantine. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} User:%b%{username}Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId37"
			add_field => {
				"event_description" => "Has detected suspecious behaviour"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId38
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error trying to delete an item from quarantine. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> User:%b<username>Error Code:%b<resultcode> Error description:%b<result> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId38" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error trying to delete an item from quarantine. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} User:%b%{username}Error Code:%b%{resultcode} Error description:%b%{result} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId38"
			add_field => {
				"event_description" => "has encountered an error trying to delete an item from quarantine"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId39
	# line in RSA: <event_log>,<fld56>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has removed history of malware and other potentially unwanted software. Time:%b<fld57> User:%b<username>
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld56},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has removed history of malware and other potentially unwanted software. Time:%b%{fld57} User:%b%{username}" }
			id => "msgParserId39"
			add_field => {
				"event_description" => "has removed history of malware and other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId40
	# line in RSA: <event_log>,<fld56>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error trying to remove history of malware and other potentially unwanted software. Time:%b<fld57> User:%b<username>Error Code:%b<resultcode> Error description:%b<result>
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld56},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error trying to remove history of malware and other potentially unwanted software. Time:%b%{fld57} User:%b%{username}Error Code:%b%{resultcode} Error description:%b%{result}" }
			id => "msgParserId40"
			add_field => {
				"event_description" => "has encountered an error trying to remove history of malware and other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId41
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has detected a suspicious behavior. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> Status:%b<info> User:%b<username>Process Name:%b<fld18> Signature ID:%b<fld56> Signature Version:%b<content_version> Engine Version:%b<component_version> Fidelity Label: %b<fld23> Target File Name: %b<fld24>
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has detected a suspicious behavior. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} Status:%b%{info} User:%b%{username}Process Name:%b%{fld18} Signature ID:%b%{fld56} Signature Version:%b%{content_version} Engine Version:%b%{component_version} Fidelity Label: %b%{fld23} Target File Name: %b%{fld24}" }
			id => "msgParserId41"
			add_field => {
				"event_description" => "has detected a suspicious behavior"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId42
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has detected malware or other potentially unwanted software. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> User:%b%<username> Process Name:%b<fld10> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId42" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has detected malware or other potentially unwanted software. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} User:%b%%{username} Process Name:%b%{fld10} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId42"
			add_field => {
				"event_description" => "has detected malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has taken action to protect this machine from malware or other potentially unwanted software. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> User:%b%<username> Process Name:%b<fld10> Action:%b<action> Action Status: %b<info> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId43" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has taken action to protect this machine from malware or other potentially unwanted software. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} User:%b%%{username} Process Name:%b%{fld10} Action:%b%{action} Action Status: %b%{info} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId43"
			add_field => {
				"event_description" => "has taken action to protect this machine from malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId44
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered a non-critical error when taking action on malware or other potentially unwanted software. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> User:%b%<username> Process Name:%b<fld10> Action:%b<action> Action Status: %b<info> Error Code:%b<resultcode> Error description:%b<result> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered a non-critical error when taking action on malware or other potentially unwanted software. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} User:%b%%{username} Process Name:%b%{fld10} Action:%b%{action} Action Status: %b%{info} Error Code:%b%{resultcode} Error description:%b%{result} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId44"
			add_field => {
				"event_description" => "has encountered a non-critical error when taking action on malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId45
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered a critical error when taking action on malware or other potentially unwanted software. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> User:%b%<username> Process Name:%b<fld10> Action:%b<action> Action Status: %b<info> Error Code:%b<resultcode> Error description:%b<result> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId45" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered a critical error when taking action on malware or other potentially unwanted software. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} User:%b%%{username} Process Name:%b%{fld10} Action:%b%{action} Action Status: %b%{info} Error Code:%b%{resultcode} Error description:%b%{result} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId45"
			add_field => {
				"event_description" => "has encountered a critical error when taking action on malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId46
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has blocked this software in accordance with the software restriction policy enforced by the system administrator. Contact your helpdesk or system administrator for additional details. Process Name:%b<fld18> Product Name:%b<fld10> Product Version:%b<fld11> File Category:%b<fld13> Path:%b<filename> User:%b<username>
	else if [logstash][msgparser][id] == "msgParserId46" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has blocked this software in accordance with the software restriction policy enforced by the system administrator. Contact your helpdesk or system administrator for additional details. Process Name:%b%{fld18} Product Name:%b%{fld10} Product Version:%b%{fld11} File Category:%b%{fld13} Path:%b%{filename} User:%b%{username}" }
			id => "msgParserId46"
			add_field => {
				"event_description" => "has blocked this software in accordance with the software restriction policy enforced by the system administrator"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId47
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> encountered an error trying to classify if this software is authorized by your software restriction policy. The software was allowed to run. Contact your helpdesk or system administrator for additional details. Process Name:%b<fld18>
	else if [logstash][msgparser][id] == "msgParserId47" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} encountered an error trying to classify if this software is authorized by your software restriction policy. The software was allowed to run. Contact your helpdesk or system administrator for additional details. Process Name:%b%{fld18}" }
			id => "msgParserId47"
			add_field => {
				"event_description" => "encountered an error trying to classify if this software is authorized by your software restriction policy. The software was allowed to run"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "System_1116_Microsoft" {
		# MESSAGE System_1116_Microsoft
		# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has detected malware or other potentially unwanted software. For more information please see the following: <url>  Name:%b<virusname>  ID:%b<fld58>  Severity:%b<severity>  Category:%b<fld12>  Path:%b<filename>  Detection Origin:%b<fld14>  Detection Type:%b<fld15>  Detection Source:%b<fld16>  User:%b<username>  Process Name:%b<fld18>  Signature Version:%b<content_version>  Engine Version:%b<component_version>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has detected malware or other potentially unwanted software. For more information please see the following: %{url}  Name:%b%{virusname}  ID:%b%{fld58}  Severity:%b%{severity}  Category:%b%{fld12}  Path:%b%{filename}  Detection Origin:%b%{fld14}  Detection Type:%b%{fld15}  Detection Source:%b%{fld16}  User:%b%{username}  Process Name:%b%{fld18}  Signature Version:%b%{content_version}  Engine Version:%b%{component_version}" }
				id => "message-System_1116_Microsoft"
				add_field => {
				"event_description" => "has detected malware or other potentially unwanted software"
					"[event][id]" => "System_1116_Microsoft"
					"[rsa][message][id1]" => "System_1116_Microsoft"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE System_1116_Microsoft:01
		# line in RSA: <event_log>,<fld11>,<fld12> <datetime>,<id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<fld2>,<event_description> For more information please see the following: <url> Name: Virus:<virusname> <fld3> Path:<filename> Detection Origin: <fld4> Type:<fld5> Source:<fld6> User:<fld20> Process Name:<process> Version:<fld7> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld11},%{fld12} %{datetime},%{id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{fld2},%{event_description} For more information please see the following: %{url} Name: Virus:%{virusname} %{fld3} Path:%{filename} Detection Origin: %{fld4} Type:%{fld5} Source:%{fld6} User:%{fld20} Process Name:%{process} Version:%{fld7}" }
				id => "message-System_1116_Microsoft:01"
				add_field => {
					"[event][id]" => "System_1116_Microsoft:01"
					"[rsa][message][id1]" => "System_1116_Microsoft:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId50
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has taken action to protect this machine from malware or other potentially unwanted software. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12>  Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> User:%b<username> Process Name:%b<fld18> Action:%b<action> Action Status: %b<info> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId50" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has taken action to protect this machine from malware or other potentially unwanted software. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12}  Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} User:%b%{username} Process Name:%b%{fld18} Action:%b%{action} Action Status: %b%{info} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId50"
			add_field => {
				"event_description" => "has taken action to protect this machine from malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId51
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered a non-critical error when taking action on malware or other potentially unwanted software.For more information please see the following:<url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> User:%b%39 Process Name:%b<fld18> Action:%b<action> Action Status: %b<info> Error Code:%b<resultcode> Error description:%b<result> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId51" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered a non-critical error when taking action on malware or other potentially unwanted software.For more information please see the following:%{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} User:%b%39 Process Name:%b%{fld18} Action:%b%{action} Action Status: %b%{info} Error Code:%b%{resultcode} Error description:%b%{result} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId51"
			add_field => {
				"event_description" => "has encountered a non-critical error when taking action on malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId52
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered a critical error when taking action on malware or other potentially unwanted software. For more information please see the following: <url> Name:%b<virusname> ID:%b<fld58> Severity:%b<severity> Category:%b<fld12> Path:%b<filename> Detection Origin:%b<fld14> Detection Type:%b<fld15> Detection Source:%b<fld16> User:%b%39 Process Name:%b<fld18> Action:%b<action> Action Status: %b<info> Error Code:%b<resultcode> Error description:%b<result> Signature Version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered a critical error when taking action on malware or other potentially unwanted software. For more information please see the following: %{url} Name:%b%{virusname} ID:%b%{fld58} Severity:%b%{severity} Category:%b%{fld12} Path:%b%{filename} Detection Origin:%b%{fld14} Detection Type:%b%{fld15} Detection Source:%b%{fld16} User:%b%39 Process Name:%b%{fld18} Action:%b%{action} Action Status: %b%{info} Error Code:%b%{resultcode} Error description:%b%{result} Signature Version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId52"
			add_field => {
				"event_description" => "has encountered a critical error when taking action on malware or other potentially unwanted software"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId53
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> signature version has been updated. Current Signature Version:%b<change_new> Previous Signature Version:%b<change_old> Signature Type:%b<agent> Update Type:%b<fld29> User:%b<username>Current Engine Version:%b<fld30> Previous Engine Version:%b<fld31>
	else if [logstash][msgparser][id] == "msgParserId53" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} signature version has been updated. Current Signature Version:%b%{change_new} Previous Signature Version:%b%{change_old} Signature Type:%b%{agent} Update Type:%b%{fld29} User:%b%{username}Current Engine Version:%b%{fld30} Previous Engine Version:%b%{fld31}" }
			id => "msgParserId53"
			add_field => {
				"change_attribute" => "Engine Version"
				"event_description" => "signature version has been updated"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId54
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error trying to update signatures. New Signature Version:%b<change_new> Previous Signature Version:%b<change_old> Update Source:%b<fld32> Update Stage:%b<fld30> Source Path:%b<filename> Signature Type:%b<agent> Update Type:%b<fld29> User:%b<username>Current Engine Version:%b<fld31> Previous Engine Version:%b<fld35> Error code:%b<resultcode> Error description:%b<result>
	else if [logstash][msgparser][id] == "msgParserId54" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error trying to update signatures. New Signature Version:%b%{change_new} Previous Signature Version:%b%{change_old} Update Source:%b%{fld32} Update Stage:%b%{fld30} Source Path:%b%{filename} Signature Type:%b%{agent} Update Type:%b%{fld29} User:%b%{username}Current Engine Version:%b%{fld31} Previous Engine Version:%b%{fld35} Error code:%b%{resultcode} Error description:%b%{result}" }
			id => "msgParserId54"
			add_field => {
				"change_attribute" => "signature"
				"event_description" => "has encountered an error trying to update signatures"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId55
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> engine version has been updated. Current Engine Version:%b<change_new> Previous Engine Version:%b<change_old> Engine Type:%b<agent> User:%b<username>
	else if [logstash][msgparser][id] == "msgParserId55" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} engine version has been updated. Current Engine Version:%b%{change_new} Previous Engine Version:%b%{change_old} Engine Type:%b%{agent} User:%b%{username}" }
			id => "msgParserId55"
			add_field => {
				"change_attribute" => "Engine"
				"event_description" => "engine version has been updated"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId56
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error trying to update the engine. New Engine Version:%b<change_new> Previous Engine Version:%b<change_old> Engine Type:%b<agent> User:%b<username>Error Code:%b<resultcode> Error description:%b<result>
	else if [logstash][msgparser][id] == "msgParserId56" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error trying to update the engine. New Engine Version:%b%{change_new} Previous Engine Version:%b%{change_old} Engine Type:%b%{agent} User:%b%{username}Error Code:%b%{resultcode} Error description:%b%{result}" }
			id => "msgParserId56"
			add_field => {
				"change_attribute" => "Engine"
				"event_description" => "has encountered an error trying to update the engine"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId57
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error trying to load signatures and will attempt reverting back to a known-good set of signatures. Signatures Attempted:%b<fld30> Error Code:%b<resultcode> Error description:%b<result> Signature version:%b<content_version> Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId57" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error trying to load signatures and will attempt reverting back to a known-good set of signatures. Signatures Attempted:%b%{fld30} Error Code:%b%{resultcode} Error description:%b%{result} Signature version:%b%{content_version} Engine Version:%b%{component_version}" }
			id => "msgParserId57"
			add_field => {
				"event_description" => "has encountered an error trying to load signatures and will attempt reverting back to a known-good set of signatures"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId58
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> used Dynamic Signature Service to retrieve additional signatures to help protect your machine. Current Signature Version:%b<fld26> Signature Type:%b<agent> Current Engine Version:%b<component_version> Dynamic Signature Type:%b<fld31> Persistence Path:%b<fld42> Dynamic Signature Version:%b<content_version> Dynamic Signature Compilation Timestamp:%b<fld44> Persistence Limit Type:%b<fld45> Persistence Limit:%b<fld46>
	else if [logstash][msgparser][id] == "msgParserId58" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} used Dynamic Signature Service to retrieve additional signatures to help protect your machine. Current Signature Version:%b%{fld26} Signature Type:%b%{agent} Current Engine Version:%b%{component_version} Dynamic Signature Type:%b%{fld31} Persistence Path:%b%{fld42} Dynamic Signature Version:%b%{content_version} Dynamic Signature Compilation Timestamp:%b%{fld44} Persistence Limit Type:%b%{fld45} Persistence Limit:%b%{fld46}" }
			id => "msgParserId58"
			add_field => {
				"event_description" => "used Dynamic Signature Service to retrieve additional signatures to help protect your machine"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId59
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> used Dynamic Signature Service to discard obsolete signatures. Current Signature Version:%b<fld26> Signature Type:%b<agent> Current Engine Version:%b<component_version> Dynamic Signature Type:%b<fld30> Persistence Path:%b<filename> Dynamic Signature Version:%b<content_version> Dynamic Signature Compilation Timestamp:%b<fld44> Removal Reason:%b<result> Persistence Limit Type:%b<fld45> Persistence Limit:%b<fld46>
	else if [logstash][msgparser][id] == "msgParserId59" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} used Dynamic Signature Service to discard obsolete signatures. Current Signature Version:%b%{fld26} Signature Type:%b%{agent} Current Engine Version:%b%{component_version} Dynamic Signature Type:%b%{fld30} Persistence Path:%b%{filename} Dynamic Signature Version:%b%{content_version} Dynamic Signature Compilation Timestamp:%b%{fld44} Removal Reason:%b%{result} Persistence Limit Type:%b%{fld45} Persistence Limit:%b%{fld46}" }
			id => "msgParserId59"
			add_field => {
				"event_description" => "used Dynamic Signature Service to discard obsolete signatures"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId60
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has encountered an error trying to use Dynamic Signature Service. Current Signature Version:%b<fld26> Signature Type:%b<fld30> Current Engine Version:%b<component_version> Error Code:%b<resultcode> Error description:%b<result> Dynamic Signature Type:%b<agent> Persistence Path:%b<filename> Dynamic Signature Version:%b<content_version> Dynamic Signature Compilation Timestamp:%b<fld44> Persistence Limit Type:%b<fld45> Persistence Limit:%b<fld46>
	else if [logstash][msgparser][id] == "msgParserId60" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has encountered an error trying to use Dynamic Signature Service. Current Signature Version:%b%{fld26} Signature Type:%b%{fld30} Current Engine Version:%b%{component_version} Error Code:%b%{resultcode} Error description:%b%{result} Dynamic Signature Type:%b%{agent} Persistence Path:%b%{filename} Dynamic Signature Version:%b%{content_version} Dynamic Signature Compilation Timestamp:%b%{fld44} Persistence Limit Type:%b%{fld45} Persistence Limit:%b%{fld46}" }
			id => "msgParserId60"
			add_field => {
				"event_description" => "has encountered an error trying to use Dynamic Signature Service"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId61
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> discarded all Dynamic Signature Service signatures. Current Engine Version:%b<component_version>
	else if [logstash][msgparser][id] == "msgParserId61" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} discarded all Dynamic Signature Service signatures. Current Engine Version:%b%{component_version}" }
			id => "msgParserId61"
			add_field => {
				"event_description" => "discarded all Dynamic Signature Service signatures"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId62
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Real-Time Protection feature has encountered an error and failed. Feature:%b<change_attribute> Error Code:%b<resultcode> Error description:%b<result> Reason:%b<fld10>
	else if [logstash][msgparser][id] == "msgParserId62" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Real-Time Protection feature has encountered an error and failed. Feature:%b%{change_attribute} Error Code:%b%{resultcode} Error description:%b%{result} Reason:%b%{fld10}" }
			id => "msgParserId62"
			add_field => {
				"event_description" => "Real-Time Protection feature has encountered an error and failed"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId63
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Real-time Protection has restarted a feature. It is recommended that you run a full system scan to detect any items that may have been missed while this agent was down. Feature:%b<change_attribute> Reason:%b<result>
	else if [logstash][msgparser][id] == "msgParserId63" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Real-time Protection has restarted a feature. It is recommended that you run a full system scan to detect any items that may have been missed while this agent was down. Feature:%b%{change_attribute} Reason:%b%{result}" }
			id => "msgParserId63"
			add_field => {
				"event_description" => "Real-time Protection has restarted a feature. It is recommended that you run a full system scan to detect any items that may have been missed while this agent was down"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId64
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Real-time Protection scanning for malware and other potentially unwanted software was enabled.
	else if [logstash][msgparser][id] == "msgParserId64" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Real-time Protection scanning for malware and other potentially unwanted software was enabled." }
			id => "msgParserId64"
			add_field => {
				"event_description" => "Real-time Protection scanning for malware and other potentially unwanted software was enabled"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId65
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Real-time Protection scanning for malware and other potentially unwanted software was disabled.
	else if [logstash][msgparser][id] == "msgParserId65" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Real-time Protection scanning for malware and other potentially unwanted software was disabled." }
			id => "msgParserId65"
			add_field => {
				"event_description" => "Real-time Protection scanning for malware and other potentially unwanted software was disabled"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId66
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Real-time Protection feature configuration has changed. Feature:%b<change_attribute> Configuration:%b<change_new>
	else if [logstash][msgparser][id] == "msgParserId66" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Real-time Protection feature configuration has changed. Feature:%b%{change_attribute} Configuration:%b%{change_new}" }
			id => "msgParserId66"
			add_field => {
				"event_description" => "Real-time Protection feature configuration has changed"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId67
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Configuration has changed. If this is an unexpected event you should review the settings as this may be the result of malware. Old value:%b<change_old> New value:%b<change_new>
	else if [logstash][msgparser][id] == "msgParserId67" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Configuration has changed. If this is an unexpected event you should review the settings as this may be the result of malware. Old value:%b%{change_old} New value:%b%{change_new}" }
			id => "msgParserId67"
			add_field => {
				"event_description" => "Configuration has changed"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId68
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> engine has been terminated due to an unexpected error. Failure Type:%b<result> Exception code:%b<resultcode> Resource:%b<fld55>
	else if [logstash][msgparser][id] == "msgParserId68" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} engine has been terminated due to an unexpected error. Failure Type:%b%{result} Exception code:%b%{resultcode} Resource:%b%{fld55}" }
			id => "msgParserId68"
			add_field => {
				"event_description" => "engine has been terminated due to an unexpected error"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId69
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scanning for malware and other potentially unwanted software has been enabled.
	else if [logstash][msgparser][id] == "msgParserId69" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scanning for malware and other potentially unwanted software has been enabled." }
			id => "msgParserId69"
			add_field => {
				"event_description" => "scanning for malware and other potentially unwanted software has been enabled"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId70
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scanning for malware and other potentially unwanted software is disabled.
	else if [logstash][msgparser][id] == "msgParserId70" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scanning for malware and other potentially unwanted software is disabled." }
			id => "msgParserId70"
			add_field => {
				"event_description" => "scanning for malware and other potentially unwanted software is disabled."
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId71
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scanning for viruses has been enabled.
	else if [logstash][msgparser][id] == "msgParserId71" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scanning for viruses has been enabled." }
			id => "msgParserId71"
			add_field => {
				"event_description" => "scanning for viruses has been enabled"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId72
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> scanning for viruses is disabled.
	else if [logstash][msgparser][id] == "msgParserId72" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} scanning for viruses is disabled." }
			id => "msgParserId72"
			add_field => {
				"event_description" => "scanning for viruses is disabled"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId73
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> has entered a grace period and will soon expire. After expiration, this program will disable protection against viruses, spyware, and other potentially unwanted software. Expiration Reason:%b<result> Expiration Date (UTC):%b<fld10>
	else if [logstash][msgparser][id] == "msgParserId73" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} has entered a grace period and will soon expire. After expiration, this program will disable protection against viruses, spyware, and other potentially unwanted software. Expiration Reason:%b%{result} Expiration Date (UTC):%b%{fld10}" }
			id => "msgParserId73"
			add_field => {
				"event_description" => "has entered a grace period and will soon expire"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId74
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> grace period has expired. Protection against viruses, spyware, and other potentially unwanted software is disabled. Expiration Reason:%b<fld10> Expiration Date (UTC):%b<fld59> Error Code:%b<resultcode> Error description:%b<result>
	else if [logstash][msgparser][id] == "msgParserId74" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} grace period has expired. Protection against viruses, spyware, and other potentially unwanted software is disabled. Expiration Reason:%b%{fld10} Expiration Date (UTC):%b%{fld59} Error Code:%b%{resultcode} Error description:%b%{result}" }
			id => "msgParserId74"
			add_field => {
				"event_description" => "grace period has expired. Protection against viruses, spyware, and other potentially unwanted software is disabled"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId75
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent started successfully.
	else if [logstash][msgparser][id] == "msgParserId75" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent started successfully." }
			id => "msgParserId75"
			add_field => {
				"event_description" => "agent started successfully"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId76
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent failed to start due to the following exception: <result>, when starting agent <agent>.
	else if [logstash][msgparser][id] == "msgParserId76" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent failed to start due to the following exception: %{result}, when starting agent %{agent}." }
			id => "msgParserId76"
			add_field => {
				"event_description" => "agent failed to start"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId77
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent failed to start due to the following exception: <result>
	else if [logstash][msgparser][id] == "msgParserId77" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent failed to start due to the following exception: %{result}" }
			id => "msgParserId77"
			add_field => {
				"event_description" => "agent failed to start"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId78
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent stopped due to the following unhandled exception: <result>
	else if [logstash][msgparser][id] == "msgParserId78" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent stopped due to the following unhandled exception: %{result}" }
			id => "msgParserId78"
			add_field => {
				"event_description" => "agent stopped due to the following unhandled exception"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId79
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,An Out Of Memory exception occurred in the service. Recovered exception: <result>
	else if [logstash][msgparser][id] == "msgParserId79" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},An Out Of Memory exception occurred in the service. Recovered exception: %{result}" }
			id => "msgParserId79"
			add_field => {
				"event_description" => "An Out Of Memory exception occurred in the service"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId80
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent stopped successfully.
	else if [logstash][msgparser][id] == "msgParserId80" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent stopped successfully." }
			id => "msgParserId80"
			add_field => {
				"event_description" => "agent stopped successfully"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId81
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent failed to stop due to the following exception: <result>
	else if [logstash][msgparser][id] == "msgParserId81" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent failed to stop due to the following exception: %{result}" }
			id => "msgParserId81"
			add_field => {
				"event_description" => "agent failed to stop due to the following exception"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId82
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent is operational.
	else if [logstash][msgparser][id] == "msgParserId82" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent is operational." }
			id => "msgParserId82"
			add_field => {
				"event_description" => "agent is operational"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId83
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Configuration file <filename> was not found.
	else if [logstash][msgparser][id] == "msgParserId83" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Configuration file %{filename} was not found." }
			id => "msgParserId83"
			add_field => {
				"event_description" => "Configuration file not found"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId84
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> agent has been requested to stop due to the following reason: <result>
	else if [logstash][msgparser][id] == "msgParserId84" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} agent has been requested to stop due to the following reason: %{result}" }
			id => "msgParserId84"
			add_field => {
				"event_description" => "agent has been requested to stop due to the following reason"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId85
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Metadata manager failed due to the following exception: <result> This failure will be reported only once (if the service is not restarted) until problem will be solved.
	else if [logstash][msgparser][id] == "msgParserId85" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Metadata manager failed due to the following exception: %{result} This failure will be reported only once (if the service is not restarted) until problem will be solved." }
			id => "msgParserId85"
			add_field => {
				"event_description" => "Metadata manager failed due to the following exception"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId86
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Metadata manager recovered and successfully updated the database with latest signatures
	else if [logstash][msgparser][id] == "msgParserId86" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Metadata manager recovered and successfully updated the database with latest signatures" }
			id => "msgParserId86"
			add_field => {
				"event_description" => "Metadata manager recovered and successfully updated the database with latest signatures"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId87
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Metadata manager encountered warnings during its run: <fld10>
	else if [logstash][msgparser][id] == "msgParserId87" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Metadata manager encountered warnings during its run: %{fld10}" }
			id => "msgParserId87"
			add_field => {
				"event_description" => "Metadata manager encountered warnings during its run"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId88
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Metadata manager recovered from the previous warnings
	else if [logstash][msgparser][id] == "msgParserId88" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Metadata manager recovered from the previous warnings" }
			id => "msgParserId88"
			add_field => {
				"event_description" => "Metadata manager recovered from the previous warnings"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId89
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,The Alerts Manager failed to send an e-mail that has the following subject line: <info>. Error received: %2. In the Microsoft System Center Configuration Manager 2007 console, select Forefront Endpoint Protection 2010, and select Alerts. In the Actions pane, click E-mail Settings, and verify that the settings are correct.
	else if [logstash][msgparser][id] == "msgParserId89" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},The Alerts Manager failed to send an e-mail that has the following subject line: %{info}. Error received: %2. In the Microsoft System Center Configuration Manager 2007 console, select Forefront Endpoint Protection 2010, and select Alerts. In the Actions pane, click E-mail Settings, and verify that the settings are correct." }
			id => "msgParserId89"
			add_field => {
				"event_description" => "The Alerts Manager failed to send an e-mail"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId90
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Alerts manager succeeded to send email after failure
	else if [logstash][msgparser][id] == "msgParserId90" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Alerts manager succeeded to send email after failure" }
			id => "msgParserId90"
			add_field => {
				"event_description" => "Alerts manager succeeded to send email after failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId91
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Alerts manager failed to process malware detection alert. Error received: <result>
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Alerts manager failed to process malware detection alert. Error received: %{result}" }
			id => "msgParserId91"
			add_field => {
				"event_description" => "Alerts manager failed to process malware detection alert"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId92
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Alerts manager succeeded to process malware detection alert after failure
	else if [logstash][msgparser][id] == "msgParserId92" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Alerts manager succeeded to process malware detection alert after failure" }
			id => "msgParserId92"
			add_field => {
				"event_description" => "Alerts manager succeeded to process malware detection alert after failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId93
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Alerts manager failed. Error received: <result>
	else if [logstash][msgparser][id] == "msgParserId93" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Alerts manager failed. Error received: %{result}" }
			id => "msgParserId93"
			add_field => {
				"event_description" => "Alerts manager failed"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId94
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Alerts manager succeeded after failure
	else if [logstash][msgparser][id] == "msgParserId94" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Alerts manager succeeded after failure" }
			id => "msgParserId94"
			add_field => {
				"event_description" => "Alerts manager succeeded after failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId95
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Malware Detection Forefront Endpoint Protection has detected malware on a computer in your organization. Detection time (UTC): <fld2> Computer name: <hostname> Malware Name: <virusname> To view more information about malware activity in your organization, run a Computer List Report. Note: No additional Malware Detection alerts will be generated for this computer for the next 24 hours.
	else if [logstash][msgparser][id] == "msgParserId95" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Malware Detection Forefront Endpoint Protection has detected malware on a computer in your organization. Detection time (UTC): %{fld2} Computer name: %{hostname} Malware Name: %{virusname} To view more information about malware activity in your organization, run a Computer List Report. Note: No additional Malware Detection alerts will be generated for this computer for the next 24 hours." }
			id => "msgParserId95"
			add_field => {
				"event_description" => "Malware Detection Forefront Endpoint Protection has detected malware on a computer in your organization"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId96
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Malware Outbreak Forefront Endpoint Protection has detected a fast spreading malware on computers in your organization. Malware name: <virusname> Number of computers affected: <fld10> Detection interval (minutes): <result><fld11> To view more information about malware activity in your organization, run an Antimalware Activity Report. Note: No additional Malware Outbreak alerts will be generated for this malware for the next 24 hours.
	else if [logstash][msgparser][id] == "msgParserId96" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Malware Outbreak Forefront Endpoint Protection has detected a fast spreading malware on computers in your organization. Malware name: %{virusname} Number of computers affected: %{fld10} Detection interval (minutes): %{result}%{fld11} To view more information about malware activity in your organization, run an Antimalware Activity Report. Note: No additional Malware Outbreak alerts will be generated for this malware for the next 24 hours." }
			id => "msgParserId96"
			add_field => {
				"event_description" => "Malware Outbreak Forefront Endpoint Protection has detected a fast spreading malware on computers in your organization"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId97
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Test Alert This message is generated by Forefront Endpoint Protection to test alert e-mail settings. Receipt of this message confirms that you have correctly configured the e-mail settings, and that the specified mail server is delivering Forefront Endpoint Protection alert notifications. Important: To complete the configuration of alert e-mail notifications, you must add e-mail recipients to the relevant Forefront Endpoint Protection alerts.
	else if [logstash][msgparser][id] == "msgParserId97" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Test Alert This message is generated by Forefront Endpoint Protection to test alert e-mail settings. Receipt of this message confirms that you have correctly configured the e-mail settings, and that the specified mail server is delivering Forefront Endpoint Protection alert notifications. Important: To complete the configuration of alert e-mail notifications, you must add e-mail recipients to the relevant Forefront Endpoint Protection alerts." }
			id => "msgParserId97"
			add_field => {
				"event_description" => "Test Alert This message is generated by Forefront Endpoint Protection to test alert e-mail settings"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId98
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Repeated Malware Detection Forefront Endpoint Protection has repeatedly detected the same malware on a computer in your organization. Malware name: <virusname> Computer name: <hostname> Number of detections: <event_counter> Detection interval (minutes): <fld12> To view more information about malware activity in your organization, run a Computer List Report. Note: No additional Repeated Malware Detection alerts will be generated for this computer in the next 24 hours.
	else if [logstash][msgparser][id] == "msgParserId98" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Repeated Malware Detection Forefront Endpoint Protection has repeatedly detected the same malware on a computer in your organization. Malware name: %{virusname} Computer name: %{hostname} Number of detections: %{event_counter} Detection interval (minutes): %{fld12} To view more information about malware activity in your organization, run a Computer List Report. Note: No additional Repeated Malware Detection alerts will be generated for this computer in the next 24 hours." }
			id => "msgParserId98"
			add_field => {
				"event_description" => "Repeated Malware Detection Forefront Endpoint Protection has repeatedly detected the same malware on a computer in your organization"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId99
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Multiple Malware Detection Forefront Endpoint Protection has detected multiple types of malware on a computer in your organization. Computer name: <hostname> Number of malware types: <fld12> Detection interval (minutes): <fld11> To view more information about malware activity in your organization, run a Computer List Report. Note: No additional Multiple Malware Detection alerts will be generated for this computer in the next 24 hours.
	else if [logstash][msgparser][id] == "msgParserId99" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Multiple Malware Detection Forefront Endpoint Protection has detected multiple types of malware on a computer in your organization. Computer name: %{hostname} Number of malware types: %{fld12} Detection interval (minutes): %{fld11} To view more information about malware activity in your organization, run a Computer List Report. Note: No additional Multiple Malware Detection alerts will be generated for this computer in the next 24 hours." }
			id => "msgParserId99"
			add_field => {
				"event_description" => "Multiple Malware Detection Forefront Endpoint Protection has detected multiple types of malware on a computer in your organization"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId100
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> completed successfully the update of source files of FEP Security Policy package
	else if [logstash][msgparser][id] == "msgParserId100" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} completed successfully the update of source files of FEP Security Policy package" }
			id => "msgParserId100"
			add_field => {
				"event_description" => "completed successfully the update of source files of FEP Security Policy package"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId101
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> failed due to the following: <result>
	else if [logstash][msgparser][id] == "msgParserId101" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} failed due to the following: %{result}" }
			id => "msgParserId101"
			add_field => {
				"event_description" => "failed due to the following"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId102
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> called to update the source files of FEP Security Policy package
	else if [logstash][msgparser][id] == "msgParserId102" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} called to update the source files of FEP Security Policy package" }
			id => "msgParserId102"
			add_field => {
				"event_description" => "called to update the source files of FEP Security Policy package"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId103
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> warning raised due to the following: <result>
	else if [logstash][msgparser][id] == "msgParserId103" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} warning raised due to the following: %{result}" }
			id => "msgParserId103"
			add_field => {
				"event_description" => "warning raised due to the following"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId104
	# line in RSA: <event_description> Subject:<fld2>  User Name: <fld12>  Domain: <domain>  Logon ID: <id>  Additional Information:  Client Address: <saddr>   <result>
	else if [logstash][msgparser][id] == "msgParserId104" {
		dissect {
			mapping => { "message" => "%{event_description} Subject:%{fld2}  User Name: %{fld12}  Domain: %{domain}  Logon ID: %{id}  Additional Information:  Client Address: %{saddr}   %{result}" }
			id => "msgParserId104"
			add_field => {
				"event_log" => "%{msgIdPart1}"
				"id" => "%{msgIdPart2}"
				"event_source" => "Microsoft-Windows-Security-Auditing"
				"event_type" => "%{Hevent_type}"
				"event_user" => "%{Hevent_user}"
				"event_computer" => "%{Hevent_computer}"
				"category" => "%{Hcategory}"
				"[logstash][fullDateTimeString]" => "%{}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d HH:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId105
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Policy Source Updater
	else if [logstash][msgparser][id] == "msgParserId105" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Policy Source Updater" }
			id => "msgParserId105"
			add_field => {
				"event_description" => "Policy Source Updater"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId106
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,
	else if [logstash][msgparser][id] == "msgParserId106" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data}," }
			id => "msgParserId106"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId107
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Policy Source Updater called to update the source files of FEP Security Policy package
	else if [logstash][msgparser][id] == "msgParserId107" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Policy Source Updater called to update the source files of FEP Security Policy package" }
			id => "msgParserId107"
			add_field => {
				"event_description" => "Policy Source Updater called to update the source files of FEP Security Policy package"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId108
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,
	else if [logstash][msgparser][id] == "msgParserId108" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data}," }
			id => "msgParserId108"
			add_field => {
				"event_description" => "Alerts manager succeeded to send email after failure"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	else if [logstash][msgparser][id] == "Forefront_3006" {
		# MESSAGE Forefront_3006
		# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Malware Detection  Forefront Endpoint Protection has detected malware on a computer in your organization. Detection time (UTC): <fld2> Computer name: <hostname> Malware Name: <virusname>  To view more information about malware activity in your organization, run a Computer List Report.  Note: No additional Malware Detection alerts will be generated for this computer for the next 24 hours.
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Malware Detection  Forefront Endpoint Protection has detected malware on a computer in your organization. Detection time (UTC): %{fld2} Computer name: %{hostname} Malware Name: %{virusname}  To view more information about malware activity in your organization, run a Computer List Report.  Note: No additional Malware Detection alerts will be generated for this computer for the next 24 hours." }
				id => "message-Forefront_3006"
				add_field => {
				"event_description" => "Malware Detection  Forefront Endpoint Protection has detected malware on a computer in your organization"
					"[event][id]" => "Forefront_3006"
					"[rsa][message][id1]" => "Forefront_3006"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
		# MESSAGE Forefront_3006:01
		# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>, 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data}," }
				id => "message-Forefront_3006:01"
				add_field => {
				"event_description" => "Malware Detection  Forefront Endpoint Protection has detected malware on a computer in your organization"
					"[event][id]" => "Forefront_3006:01"
					"[rsa][message][id1]" => "Forefront_3006:01"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{datetime}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
			}
		}
	}
	# PARSER msgParserId111
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Malware Outbreak  Forefront Endpoint Protection has detected a fast spreading malware on computers in your organization. Malware name: <virusname> Number of computers affected: <fld10> Detection interval (minutes): <result>  To view more information about malware activity in your organization, run an Antimalware Activity Report.  Note: No additional Malware Outbreak alerts will be generated for this malware for the next 24 hours.
	else if [logstash][msgparser][id] == "msgParserId111" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Malware Outbreak  Forefront Endpoint Protection has detected a fast spreading malware on computers in your organization. Malware name: %{virusname} Number of computers affected: %{fld10} Detection interval (minutes): %{result}  To view more information about malware activity in your organization, run an Antimalware Activity Report.  Note: No additional Malware Outbreak alerts will be generated for this malware for the next 24 hours." }
			id => "msgParserId111"
			add_field => {
				"event_description" => "Malware Outbreak  Forefront Endpoint Protection has detected a fast spreading malware on computers in your organization"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId112
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Test Alert  This message is generated by Forefront Endpoint Protection to test alert e-mail settings. Receipt of this message confirms that you have correctly configured the e-mail settings, and that the specified mail server is delivering Forefront Endpoint Protection alert notifications. <info>
	else if [logstash][msgparser][id] == "msgParserId112" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Test Alert  This message is generated by Forefront Endpoint Protection to test alert e-mail settings. Receipt of this message confirms that you have correctly configured the e-mail settings, and that the specified mail server is delivering Forefront Endpoint Protection alert notifications. %{info}" }
			id => "msgParserId112"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId113
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Repeated Malware Detection  Forefront Endpoint Protection has repeatedly detected the same malware on a computer in your organization. Malware name: <virusname> Computer name: <hostname> Number of detections: <fld2> Detection interval (minutes): <result>  To view more information about malware activity in your organization, run a Computer List Report.  Note: No additional Repeated Malware Detection alerts will be generated for this computer in the next 24 hours.
	else if [logstash][msgparser][id] == "msgParserId113" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Repeated Malware Detection  Forefront Endpoint Protection has repeatedly detected the same malware on a computer in your organization. Malware name: %{virusname} Computer name: %{hostname} Number of detections: %{fld2} Detection interval (minutes): %{result}  To view more information about malware activity in your organization, run a Computer List Report.  Note: No additional Repeated Malware Detection alerts will be generated for this computer in the next 24 hours." }
			id => "msgParserId113"
			add_field => {
				"event_description" => "Repeated Malware Detection  Forefront Endpoint Protection has repeatedly detected the same malware on a computer in your organization"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId114
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,<fld1> Multiple Malware Detection  Forefront Endpoint Protection has detected multiple types of malware on a computer in your organization. Computer name: <hostname> Number of malware types: <fld12> Detection interval (minutes): <result> To view more information about malware activity in your organization, run a Computer List Report.  Note: No additional Multiple Malware Detection alerts will be generated for this computer in the next 24 hours.
	else if [logstash][msgparser][id] == "msgParserId114" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},%{fld1} Multiple Malware Detection  Forefront Endpoint Protection has detected multiple types of malware on a computer in your organization. Computer name: %{hostname} Number of malware types: %{fld12} Detection interval (minutes): %{result} To view more information about malware activity in your organization, run a Computer List Report.  Note: No additional Multiple Malware Detection alerts will be generated for this computer in the next 24 hours." }
			id => "msgParserId114"
			add_field => {
				"event_description" => "Multiple Malware Detection  Forefront Endpoint Protection has detected multiple types of malware on a computer in your organization"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}
	# PARSER msgParserId115
	# line in RSA: <event_log>,<fld57>,<day> <datetime>,<event_id>,<event_source>,<event_user>,<event_type>,<event_computer>,<category>,<data>,Forefront Endpoint Protection agent started successfully.
	else if [logstash][msgparser][id] == "msgParserId115" {
		dissect {
			mapping => { "message" => "%{event_log},%{fld57},%{day} %{datetime},%{event_id},%{event_source},%{event_user},%{event_type},%{event_computer},%{category},%{data},Forefront Endpoint Protection agent started successfully." }
			id => "msgParserId115"
			add_field => {
				"event_description" => "Forefront Endpoint Protection agent started successfully"
				"[logstash][fullDateTimeString]" => "%{datetime}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s yyyy" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-msforefrontcsmsg.json"
#			template_name => "msforefrontcs_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

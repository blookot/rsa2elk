# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "novelledirectory"
			"[observer][name]" => "Novell eDirectory"
			"[observer][type]" => "Access Control"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %EDIRECTORY <messageid> <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%EDIRECTORY %{messageid} %{message}" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_novelledirectorymsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],entry2=<fld3>,server2=[<dst_dn>]
	if [logstash][msgparser][id] == "msgParserId0" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],entry2=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId0"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId1
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId1" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId1"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId2
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],datavalue=<fld3>,modifytype=<fld4>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId2" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],datavalue=(?<fld3>[^,]*),modifytype=(?<fld4>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId2"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId3
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],server=[<fld7>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId3" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],server=\[(?<fld7>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId3"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId4
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],entry=[<dn>],attribute=<fld10>,syntax=<fld2>,class=<fld3>,datasize=<fld4>,datavalue=<fld5>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},perpetrator=[%{src_dn}],entry=[%{dn}],attribute=%{fld10},syntax=%{fld2},class=%{fld3},datasize=%{fld4},datavalue=%{fld5},server2=[%{dst_dn}]" }
			id => "msgParserId4"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId5
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId5" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId5"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId6
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId6" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},server2=[%{dst_dn}]" }
			id => "msgParserId6"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId7
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,modulename=<fld11>,moduledesc=<info>,moduleflags=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},modulename=%{fld11},moduledesc=%{info},moduleflags=%{fld3},server2=[%{dst_dn}]" }
			id => "msgParserId7"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId8
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],server=[<fld7>],replicatype=<fld9>,replicatype2=<fld4>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId8" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],server=\[(?<fld7>[^\]]*)\],replicatype=(?<fld9>[^,]*),replicatype2=(?<fld4>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId8"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId9
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],entry2=<fld3>,state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId9" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],entry2=(?<fld3>[^,]*),state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId9"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId10
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,server=[<fld7>],entry=[<dn>],state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId10" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),server=\[(?<fld7>[^\]]*)\],entry=\[(?<dn>[^\]]*)\],state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId10"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId11
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,entry=[<dn>],entry2=<fld2>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},entry=[%{dn}],entry2=%{fld2},server2=[%{dst_dn}]" }
			id => "msgParserId11"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId12
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,attribute=<fld10>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId12" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),attribute=(?<fld10>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId12"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId13
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<action>,transportaddr=[{ <protocol>:<daddr>:<dport> | <fld1> }],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId13" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<action>[^,]*),transportaddr=\[([\s]*(?<protocol>[^:]*):(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId13"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId14
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,crcerrtype=<fld3>,crcerrcount=<fld4>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId14" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),crcerrtype=(?<fld3>[^,]*),crcerrcount=(?<fld4>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId14"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId15
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,server=[<fld7>],entryid=<fld3>,entry=[<dn>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId15" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),server=\[(?<fld7>[^\]]*)\],entryid=(?<fld3>[^,]*),entry=\[(?<dn>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId15"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId16
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],entry=[<dn>],class=<fld1>,flags=<fld2>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},perpetrator=[%{src_dn}],entry=[%{dn}],class=%{fld1},flags=%{fld2},server2=[%{dst_dn}]" }
			id => "msgParserId16"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId17
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],processid=<process_id>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},perpetrator=[%{src_dn}],processid=%{process_id},server2=[%{dst_dn}]" }
			id => "msgParserId17"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId18
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,class=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId18" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),class=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId18"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId19
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],entry=[<dn>],attribute=<fld10>,syntax=<fld2>,class=<fld3>,datasize=<fld4>,datavalue=<fld5>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},perpetrator=[%{src_dn}],entry=[%{dn}],attribute=%{fld10},syntax=%{fld2},class=%{fld3},datasize=%{fld4},datavalue=%{fld5},server2=[%{dst_dn}]" }
			id => "msgParserId19"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId20
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],entrycount=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId20" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],entrycount=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId20"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId21
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],processid=<process_id>,verbnumber=<fld2>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},perpetrator=[%{src_dn}],processid=%{process_id},verbnumber=%{fld2},server2=[%{dst_dn}]" }
			id => "msgParserId21"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId22
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,state=<fld8>,state2=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId22" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),state=(?<fld8>[^,]*),state2=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId22"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId23
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<action>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<daddr>:<dport> | <fld1> }],processid=<process_id>,verbnumber=<vlan>,entry=[<dn>],state=<rule>,state2=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId23" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<action>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<vlan>[^,]*),entry=\[(?<dn>[^\]]*)\],state=(?<rule>[^,]*),state2=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId23"
			add_field => {
				"ec_subject" => "User"
				"ec_activity" => "Logon"
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId24
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<action>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<daddr>:<dport> | <fld1> }],processid=<process_id>,verbnumber=<vlan>,entry=[<dn>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId24" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<action>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<daddr>[^:]*):(?<dport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<vlan>[^,]*),entry=\[(?<dn>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId24"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId25
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId25" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId25"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId26
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,class=<fld3>,entry=[<dn>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId26" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),class=(?<fld3>[^,]*),entry=\[(?<dn>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId26"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId27
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],entry2=<fld3>,server=[<fld7>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId27" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],entry2=(?<fld3>[^,]*),server=\[(?<fld7>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId27"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId28
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],class=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId28" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],class=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId28"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId29
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],attribute=<fld10>,rights=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId29" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],attribute=(?<fld10>[^,]*),rights=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId29"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId30
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],entry2=<fld3>,{ partitioncontrolfunc=<fld4>,partitioncontroltype=<fld5> | partcontrfunc=<fld4>,partcontrtype=<fld5> },state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId30" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],entry2=(?<fld3>[^,]*),([\s]*partitioncontrolfunc=(?<fld4>[^,]*),partitioncontroltype=(?<fld5>[^\s]*)[\s]+|[\s]*partcontrfunc=(?<fld4>[^,]*),partcontrtype=(?<fld5>[^\s]*)[\s]+),state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId30"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId31
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],{ entrycount=<fld3>,valuecount=<fld4> | replicatype=<fld3> },server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId31" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],([\s]*entrycount=(?<fld3>[^,]*),valuecount=(?<fld4>[^\s]*)[\s]+|[\s]*replicatype=(?<fld3>[^\s]*)[\s]+),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId31"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId32
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],replicatype=<fld9>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId32" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],replicatype=(?<fld9>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId32"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId33
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],attribute=<fld10>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId33" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],attribute=(?<fld10>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId33"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId34
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],referraltype=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId34" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],referraltype=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId34"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId35
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,attribute=<fld10>,entry=[<dn>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId35" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),attribute=(?<fld10>[^,]*),entry=\[(?<dn>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId35"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId36
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,class=<fld3>,entry=[<dn>],server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId36" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),class=(?<fld3>[^,]*),entry=\[(?<dn>[^\]]*)\],server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId36"
			add_field => {
				"ec_activity" => "Delete"
				"ec_theme" => "Configuration"
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId37
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],entry=[<dn>],entry2=<fld2>,class=<fld3>,flags=<fld4>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},eventtype=%{event_type},result=%{result},perpetrator=[%{src_dn}],entry=[%{dn}],entry2=%{fld2},class=%{fld3},flags=%{fld4},server2=[%{dst_dn}]" }
			id => "msgParserId37"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId38
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],searchscope=<fld3>,searchnodes=<fld4>,searchinfotype=<fld5>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId38" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],searchscope=(?<fld3>[^,]*),searchnodes=(?<fld4>[^,]*),searchinfotype=(?<fld5>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId38"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId39
	# line in RSA: traptime=<fld12>,server=[<fld7>]
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "traptime=%{fld12},server=[%{fld7}]" }
			id => "msgParserId39"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId40
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,server=[<fld7>],entry=[<dn>],entrycount=<fld3>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId40" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),server=\[(?<fld7>[^\]]*)\],entry=\[(?<dn>[^\]]*)\],entrycount=(?<fld3>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId40"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId41
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,{ entry=[<dn>],replicatype=<fld9> | entry=[<dn>] },state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId41" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),([\s]*entry=\[(?<dn>[^\]]*)\],replicatype=(?<fld9>[^\s]*)[\s]+|[\s]*entry=\[(?<dn>[^\]]*)\][\s]+),state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId41"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId42
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],replicatype=<fld9>,state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId42" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],replicatype=(?<fld9>[^,]*),state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId42"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId43
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,server=[<fld7>],entry=[<dn>],entrycount=<fld3>,valuecount=<fld4>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId43" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),server=\[(?<fld7>[^\]]*)\],entry=\[(?<dn>[^\]]*)\],entrycount=(?<fld3>[^,]*),valuecount=(?<fld4>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId43"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId44
	# line in RSA:  traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,server=[<fld7>],entry=[<dn>],replicanumber=<fld3>,state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId44" {
		grok {
			match => { "message" => "^[\s]*traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),server=\[(?<fld7>[^\]]*)\],entry=\[(?<dn>[^\]]*)\],replicanumber=(?<fld3>[^,]*),state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId44"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}
	# PARSER msgParserId45
	# line in RSA: traptime=<fld12>,eventtype=<event_type>,result=<result>,perpetrator=[<src_dn>],transportaddr=[{ <protocol>:<saddr>:<sport> | <fld1> }],processid=<process_id>,verbnumber=<fld2>,entry=[<dn>],partitionid=<fld3>,state=<fld8>,server2=[<dst_dn>]
	else if [logstash][msgparser][id] == "msgParserId45" {
		grok {
			match => { "message" => "^traptime=(?<fld12>[^,]*),eventtype=(?<event_type>[^,]*),result=(?<result>[^,]*),perpetrator=\[(?<src_dn>[^\]]*)\],transportaddr=\[([\s]*(?<protocol>[^:]*):(?<saddr>[^:]*):(?<sport>[^\s]*)[\s]+|[\s]*(?<fld1>[^\s]*)[\s]+)\],processid=(?<process_id>[^,]*),verbnumber=(?<fld2>[^,]*),entry=\[(?<dn>[^\]]*)\],partitionid=(?<fld3>[^,]*),state=(?<fld8>[^,]*),server2=\[(?<dst_dn>[^\]]*)\]$" }
			id => "msgParserId45"
			add_field => {
				"[logstash][fullDateTimeString]" => "%{fld12}"
				"[logstash][messagefound]" => true
			}
		}
		if [logstash][fullDateTimeString] {
			date { match => [ "[logstash][fullDateTimeString]", "UNIX" ] }
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_novelledirectorymsg.json"
#			template_name => "novelledirectory_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}

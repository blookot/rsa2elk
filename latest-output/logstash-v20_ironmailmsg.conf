# Config file generated by RSA2ELK, see https://github.com/blookot/rsa2elk 
# Author: Vincent Maury
# Check all Netwitness parsers: https://github.com/netwitness/nw-logparsers/tree/master/devices/ (license: Apache 2.0)
# Check this link to search for source configuration guides: https://rsa.jiveon.com/community/products/netwitness/integrations/event-sources

##########
# CAUTION: check the "path" in input and "dictionary_path" in filter, as well as the "template" path in the elasticsearch output or "path" in the file output
##########

input {
#	syslog {
#		port => 514
#	}
#	file {
#		path => "/var/log/example.log"
#		start_position => "beginning"
#		sincedb_path => "/dev/null"
#	}
	generator {
		count => 1
		message => "a log line to test out"
	}
#	kafka {
#		codec => "json"
#		bootstrap_servers => "192.168.30.13:9092"
#		topics => ["mytopic"]
#		security_protocol => "SSL"
#		ssl_key_password => "{ssl_password}"
#		ssl_keystore_location => "/{keystore-absolute-path}"
#		ssl_keystore_password => "{keystore_password}"
#		ssl_truststore_location => "/{truststore-absolute-path}"
#		ssl_truststore_password => "{truststore_password}"
#	}
}

# Renaming a couple of fields
filter {
	mutate {
		rename => {
			"message" => "[event][original]"
			"host" => "[logstash][host]"
		}
	}
}

# Setting the device name and group
filter {
	mutate {
		add_field => {
			"[observer][product]" => "ironmail"
			"[observer][name]" => "McAfee Email Gateway"
			"[observer][type]" => "Application Firewall"
		}
	}
}


# One single filter block for all headers and messages
filter {

################## HEADERS ##################

	# HEADER 0001
	# line in RSA: %IRONMAIL <fld1> (<fld2>),<fld3> <fld4> <fld5>,<fld6>,<fld7>,{[<messageid>]|<messageid>} <!payload:fld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IRONMAIL[\s]+(?<message>(?<fld1>[^\s]*)[\s]+\((?<fld2>[^\)]*)\),(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^,]*),(?<fld6>[^,]*),(?<fld7>[^,]*),(\[(?<messageid>[^\]]*)\]|(?<messageid>[^\s]*))[\s]+(?<payload>.*))$" }
			id => "header-0001"
			add_field => {
				"[rsa][header][id]" => "0001"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0002
	# line in RSA: %IRONMAIL <fld1> (<fld2>)<fld3> <fld4>{<fld5> [<messageid>]|UTC<fld6>_<messageid>} <!payload:fld1>
	# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1>{a|<fld2>}
	# HEADER 0003
	# line in RSA: %IRONMAIL <messageid> <!payload:messageid>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^%IRONMAIL[\s]+(?<message>(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0003"
			add_field => {
				"[rsa][header][id]" => "0003"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0004
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <messageid> <!payload:fld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0004"
			add_field => {
				"[rsa][header][id]" => "0004"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 0005
	# line in RSA: <fld1> <fld2> <fld3> <fld4> <fld5>]<messageid> <!payload:fld1>
	if ![logstash][headerfound] {
		grok {
			match => { "[event][original]" => "^(?<message>(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+(?<fld5>[^\]]*)\](?<messageid>[^\s]*)[\s]+(?<payload>.*))$" }
			id => "header-0005"
			add_field => {
				"[rsa][header][id]" => "0005"
				"[rsa][message][id2]" => "%{messageid}"
				"[logstash][headerfound]" => true
			}
		}
	}
	# HEADER 9999
	# line in RSA: %IRONMAIL <!payload>
	if ![logstash][headerfound] {
		dissect {
			mapping => { "[event][original]" => "%IRONMAIL %{message}" }
			id => "header-9999"
			add_field => {
				"[rsa][header][id]" => "9999"
				"[rsa][message][id2]" => "IRONMAIL_GENERIC"
				"[logstash][headerfound]" => true
			}
		}
	}



################## MsgId2 to Parser ##################

	translate {
		field => "[rsa][message][id2]"
		destination => "[logstash][msgparser][id]"
		dictionary_path => "msgid2parserid-v20_ironmailmsg.json"
		fallback => ""
		override => true
	}


################## MESSAGES ##################

	# PARSER msgParserId0
	# line in RSA: ADE-SYSTEM-RULE 'Host:<fld1> - <action> for the rule: <rule>'
	if [logstash][msgparser][id] == "msgParserId0" {
		dissect {
			mapping => { "message" => "ADE-SYSTEM-RULE 'Host:%{fld1} - %{action} for the rule: %{rule}'" }
			id => "msgParserId0"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId1
	# line in RSA: ADMIN-UP 'Host:<fld1> - Admin Server Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId1" {
		dissect {
			mapping => { "message" => "ADMIN-UP 'Host:%{fld1} - Admin Server Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId1"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId2
	# line in RSA: <action> 'Host:<fld1> - Virus Engine: <product>'
	else if [logstash][msgparser][id] == "msgParserId2" {
		dissect {
			mapping => { "message" => "%{action} 'Host:%{fld1} - Virus Engine: %{product}'" }
			id => "msgParserId2"
			add_field => {
				"ec_theme" => "Encryption"
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId3
	# line in RSA: AVQ-UP 'Host:<fld1> - Anti Virus Queue Test Passed.'
	else if [logstash][msgparser][id] == "msgParserId3" {
		dissect {
			mapping => { "message" => "AVQ-UP 'Host:%{fld1} - Anti Virus Queue Test Passed.'" }
			id => "msgParserId3"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId4
	# line in RSA: AVQ-VIRUS-FOUND 'Host:<fld1> - Virus Engine: <product>, Virus Name: <virusname>'
	else if [logstash][msgparser][id] == "msgParserId4" {
		dissect {
			mapping => { "message" => "AVQ-VIRUS-FOUND 'Host:%{fld1} - Virus Engine: %{product}, Virus Name: %{virusname}'" }
			id => "msgParserId4"
			add_field => {
				"ec_subject" => "Virus"
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"threat_name" => "%{virusname}"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId5
	# line in RSA: CFQ-ERROR 'Host:<fld1> - <dclass_counter1> messages idle'
	else if [logstash][msgparser][id] == "msgParserId5" {
		dissect {
			mapping => { "message" => "CFQ-ERROR 'Host:%{fld1} - %{dclass_counter1} messages idle'" }
			id => "msgParserId5"
			add_field => {
				"ec_outcome" => "Error"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId6
	# line in RSA: CFQ-UP 'Host:<fld1> - Content Filtering Queue Test { Passed. <info>' | Passed.' }
	else if [logstash][msgparser][id] == "msgParserId6" {
		grok {
			match => { "message" => "^CFQ\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+Content[\s]+Filtering[\s]+Queue[\s]+Test[\s]+([\s]*Passed\.[\s]+(?<info>[^']*)'[\s]+|[\s]*Passed\.'[\s]+)$" }
			id => "msgParserId6"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId7
	# line in RSA: EUSRQUARANTINE-UP 'Host:<fld1> - EUQ Server Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId7" {
		dissect {
			mapping => { "message" => "EUSRQUARANTINE-UP 'Host:%{fld1} - EUQ Server Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId7"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "HEARTBEAT" {
		# MESSAGE HEARTBEAT
		# line in RSA: HEARTBEAT '<event_description>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "HEARTBEAT '%{event_description}'" }
				id => "message-HEARTBEAT"
				add_field => {
					"[event][id]" => "HEARTBEAT"
					"[rsa][message][id1]" => "HEARTBEAT"
					"[event][categoryid]" => "1604000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE HEARTBEAT:01
		# line in RSA: <fld1> (<saddr>)<fld2> <fld3> UTC<fld4>SCM_HEARTBEAT i.now=<fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr})%{fld2} %{fld3} UTC%{fld4}SCM_HEARTBEAT i.now=%{fld5}" }
				id => "message-HEARTBEAT:01"
				add_field => {
					"[event][id]" => "HEARTBEAT:01"
					"[rsa][message][id1]" => "HEARTBEAT:01"
					"[event][categoryid]" => "1604000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId9
	# line in RSA: HTTPD-UP 'Host:<fld1> - Web Admin Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId9" {
		dissect {
			mapping => { "message" => "HTTPD-UP 'Host:%{fld1} - Web Admin Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId9"
			add_field => {
				"ec_subject" => "Process"
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId10
	# line in RSA: IMAP4PROXY-UP 'Host:<fld1> - <network_service> Proxy Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId10" {
		dissect {
			mapping => { "message" => "IMAP4PROXY-UP 'Host:%{fld1} - %{network_service} Proxy Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId10"
			add_field => {
				"ec_subject" => "Service"
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId11
	# line in RSA: IMAP4SPROXY-UP 'Host:<fld1> - <network_service> Proxy Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId11" {
		dissect {
			mapping => { "message" => "IMAP4SPROXY-UP 'Host:%{fld1} - %{network_service} Proxy Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId11"
			add_field => {
				"ec_subject" => "Service"
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId12
	# line in RSA: INTERNAL-SERVER-ERROR 'Host:<fld1> - <network_service> Internal Server Test Failed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId12" {
		dissect {
			mapping => { "message" => "INTERNAL-SERVER-ERROR 'Host:%{fld1} - %{network_service} Internal Server Test Failed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId12"
			add_field => {
				"ec_outcome" => "Error"
				"disposition" => "Failed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId13
	# line in RSA: INTERNAL-SERVER-UP 'Host:<fld1> - <network_service> Internal Server Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId13" {
		dissect {
			mapping => { "message" => "INTERNAL-SERVER-UP 'Host:%{fld1} - %{network_service} Internal Server Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId13"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId14
	# line in RSA: JOINQ-ERROR 'Host:<fld1> - <dclass_counter1> messages idle'
	else if [logstash][msgparser][id] == "msgParserId14" {
		dissect {
			mapping => { "message" => "JOINQ-ERROR 'Host:%{fld1} - %{dclass_counter1} messages idle'" }
			id => "msgParserId14"
			add_field => {
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId15
	# line in RSA: JOINQ-UP 'Host:<fld1> - Mime Joining Queue Test { Passed. <info>' | Passed.' }
	else if [logstash][msgparser][id] == "msgParserId15" {
		grok {
			match => { "message" => "^JOINQ\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+Mime[\s]+Joining[\s]+Queue[\s]+Test[\s]+([\s]*Passed\.[\s]+(?<info>[^']*)'[\s]+|[\s]*Passed\.'[\s]+)$" }
			id => "msgParserId15"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId16
	# line in RSA: MMQ-UP 'Host:<fld1> - Mail Monitoring Queue Test Passed.'
	else if [logstash][msgparser][id] == "msgParserId16" {
		dissect {
			mapping => { "message" => "MMQ-UP 'Host:%{fld1} - Mail Monitoring Queue Test Passed.'" }
			id => "msgParserId16"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId17
	# line in RSA: POP3PROXY-UP 'Host:<fld1> - <network_service> Proxy Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId17" {
		dissect {
			mapping => { "message" => "POP3PROXY-UP 'Host:%{fld1} - %{network_service} Proxy Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId17"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId18
	# line in RSA: POP3SPROXY-UP 'Host:<fld1> - <network_service> Proxy Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId18" {
		dissect {
			mapping => { "message" => "POP3SPROXY-UP 'Host:%{fld1} - %{network_service} Proxy Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId18"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId19
	# line in RSA: REPORTS-UP 'Host:<fld1> - Reports Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId19" {
		dissect {
			mapping => { "message" => "REPORTS-UP 'Host:%{fld1} - Reports Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId19"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId20
	# line in RSA: RIPQ-ERROR 'Host:<fld1> - <dclass_counter1> messages idle'
	else if [logstash][msgparser][id] == "msgParserId20" {
		dissect {
			mapping => { "message" => "RIPQ-ERROR 'Host:%{fld1} - %{dclass_counter1} messages idle'" }
			id => "msgParserId20"
			add_field => {
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId21
	# line in RSA: RIPQ-MIME-PARSE-FAILURE 'Host:<fld1> - <result>'
	else if [logstash][msgparser][id] == "msgParserId21" {
		dissect {
			mapping => { "message" => "RIPQ-MIME-PARSE-FAILURE 'Host:%{fld1} - %{result}'" }
			id => "msgParserId21"
			add_field => {
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId22
	# line in RSA: RIPQ-UP 'Host:<fld1> - Mime Ripping Queue Test { Passed. <info>' | Passed.' }
	else if [logstash][msgparser][id] == "msgParserId22" {
		grok {
			match => { "message" => "^RIPQ\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+Mime[\s]+Ripping[\s]+Queue[\s]+Test[\s]+([\s]*Passed\.[\s]+(?<info>[^']*)'[\s]+|[\s]*Passed\.'[\s]+)$" }
			id => "msgParserId22"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId23
	# line in RSA: SMTPO-DNS-FAILURE 'Host:<fld1> - No DNS Response for <domain>'
	else if [logstash][msgparser][id] == "msgParserId23" {
		dissect {
			mapping => { "message" => "SMTPO-DNS-FAILURE 'Host:%{fld1} - No DNS Response for %{domain}'" }
			id => "msgParserId23"
			add_field => {
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId24
	# line in RSA: SMTPO-DSN-FINAL 'Host:<fld1> - Final DSN for domain: <domain> Recipients: <to>
	else if [logstash][msgparser][id] == "msgParserId24" {
		dissect {
			mapping => { "message" => "SMTPO-DSN-FINAL 'Host:%{fld1} - Final DSN for domain: %{domain} Recipients: %{to}" }
			id => "msgParserId24"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId25
	# line in RSA: SMTPO-ERROR 'Host:<fld1> - <dclass_counter1> messages idle'
	else if [logstash][msgparser][id] == "msgParserId25" {
		dissect {
			mapping => { "message" => "SMTPO-ERROR 'Host:%{fld1} - %{dclass_counter1} messages idle'" }
			id => "msgParserId25"
			add_field => {
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SMTPO-UP" {
		# MESSAGE SMTPO-UP:01
		# line in RSA: SMTPO-UP 'Host:<fld1> - <network_service> Outbound Queue Test { Passed.' | Passed. ' }
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SMTPO\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+(?<network_service>[^\s]*)[\s]+Outbound[\s]+Queue[\s]+Test[\s]+([\s]*Passed\.'[\s]+|[\s]*Passed\.[\s]+'[\s]+)$" }
				id => "message-SMTPO-UP:01"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "SMTPO-UP:01"
					"[rsa][message][id1]" => "SMTPO-UP:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SMTPO-UP:02
		# line in RSA: SMTPO-UP 'Host:<fld1> - <network_service> Outbound Queue Count Test Passed. '
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SMTPO-UP 'Host:%{fld1} - %{network_service} Outbound Queue Count Test Passed. '" }
				id => "message-SMTPO-UP:02"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "SMTPO-UP:02"
					"[rsa][message][id1]" => "SMTPO-UP:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId28
	# line in RSA: SMTPPROXY-ESMTP-SIZE-FAILURE 'Host:<fld1> - Mail Size: <bytes>(bytes) Connection: <fld2>(IP-Port)'
	else if [logstash][msgparser][id] == "msgParserId28" {
		dissect {
			mapping => { "message" => "SMTPPROXY-ESMTP-SIZE-FAILURE 'Host:%{fld1} - Mail Size: %{bytes}(bytes) Connection: %{fld2}(IP-Port)'" }
			id => "msgParserId28"
			add_field => {
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId29
	# line in RSA: SMTPPROXY-DOS-ATTACK 'Host:<fld1> - Attack From IP: <saddr>'
	else if [logstash][msgparser][id] == "msgParserId29" {
		dissect {
			mapping => { "message" => "SMTPPROXY-DOS-ATTACK 'Host:%{fld1} - Attack From IP: %{saddr}'" }
			id => "msgParserId29"
			add_field => {
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId30
	# line in RSA: SMTPPROXY-RELAY-FAILURE 'Host:<fld1> - For Recipient: <to>'
	else if [logstash][msgparser][id] == "msgParserId30" {
		dissect {
			mapping => { "message" => "SMTPPROXY-RELAY-FAILURE 'Host:%{fld1} - For Recipient: %{to}'" }
			id => "msgParserId30"
			add_field => {
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId31
	# line in RSA: SMTPPROXY-TLS-FAILURE 'Host:<fld1> - For IP: <hostip>'
	else if [logstash][msgparser][id] == "msgParserId31" {
		dissect {
			mapping => { "message" => "SMTPPROXY-TLS-FAILURE 'Host:%{fld1} - For IP: %{hostip}'" }
			id => "msgParserId31"
			add_field => {
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SMTPPROXY-UP" {
		# MESSAGE SMTPPROXY-UP:01
		# line in RSA: SMTPPROXY-UP 'Host:<fld1> - <network_service> In Proxy Test Passed. Host - <hostname>, Port - <network_port>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SMTPPROXY-UP 'Host:%{fld1} - %{network_service} In Proxy Test Passed. Host - %{hostname}, Port - %{network_port}'" }
				id => "message-SMTPPROXY-UP:01"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "SMTPPROXY-UP:01"
					"[rsa][message][id1]" => "SMTPPROXY-UP:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SMTPPROXY-UP:02
		# line in RSA: SMTPPROXY-UP 'Host:<fld1> - <network_service> Proxy Test for VIP [ id=<<<id>>, name=<<<fld2>>, network_active=<<<fld3>>] Passed. Host - <hostname>, Port - <network_port>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SMTPPROXY-UP 'Host:%{fld1} - %{network_service} Proxy Test for VIP [ id=<%{id}>, name=<%{fld2}>, network_active=<%{fld3}>] Passed. Host - %{hostname}, Port - %{network_port}'" }
				id => "message-SMTPPROXY-UP:02"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "SMTPPROXY-UP:02"
					"[rsa][message][id1]" => "SMTPPROXY-UP:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId34
	# line in RSA: SMTPSPROXY-TLS-FAILURE 'Host:<fld1> - For IP: <hostip>'
	else if [logstash][msgparser][id] == "msgParserId34" {
		dissect {
			mapping => { "message" => "SMTPSPROXY-TLS-FAILURE 'Host:%{fld1} - For IP: %{hostip}'" }
			id => "msgParserId34"
			add_field => {
				"ec_outcome" => "Failure"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId35
	# line in RSA: SMTPSPROXY-UP 'Host:<fld1> - <network_service> In Proxy Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId35" {
		dissect {
			mapping => { "message" => "SMTPSPROXY-UP 'Host:%{fld1} - %{network_service} In Proxy Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId35"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId36
	# line in RSA: SPAMQ-ERROR 'Host:<fld1> - <dclass_counter1> messages idle'
	else if [logstash][msgparser][id] == "msgParserId36" {
		dissect {
			mapping => { "message" => "SPAMQ-ERROR 'Host:%{fld1} - %{dclass_counter1} messages idle'" }
			id => "msgParserId36"
			add_field => {
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId37
	# line in RSA: SPAMQ-ESP-DETECTED 'Host:<fld1> - <threat_name>... Detected under <product> for Message ID: <<<id>>'
	else if [logstash][msgparser][id] == "msgParserId37" {
		dissect {
			mapping => { "message" => "SPAMQ-ESP-DETECTED 'Host:%{fld1} - %{threat_name}... Detected under %{product} for Message ID: <%{id}>'" }
			id => "msgParserId37"
			add_field => {
				"ec_activity" => "Detect"
				"ec_theme" => "TEV"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId38
	# line in RSA: SPAMQ-UP 'Host:<fld1> - Spam Queue Test { Passed. <info>' | Passed.' }
	else if [logstash][msgparser][id] == "msgParserId38" {
		grok {
			match => { "message" => "^SPAMQ\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+Spam[\s]+Queue[\s]+Test[\s]+([\s]*Passed\.[\s]+(?<info>[^']*)'[\s]+|[\s]*Passed\.'[\s]+)$" }
			id => "msgParserId38"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId39
	# line in RSA: SSHD-CLI-UP 'Host:<fld1> - SSHD CLI Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId39" {
		dissect {
			mapping => { "message" => "SSHD-CLI-UP 'Host:%{fld1} - SSHD CLI Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId39"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId40
	# line in RSA: SSHD-MAINT-UP 'Host:<fld1> - SSHD Maint Test Passed. Host - <hostname>, Port - <network_port>'
	else if [logstash][msgparser][id] == "msgParserId40" {
		dissect {
			mapping => { "message" => "SSHD-MAINT-UP 'Host:%{fld1} - SSHD Maint Test Passed. Host - %{hostname}, Port - %{network_port}'" }
			id => "msgParserId40"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId41
	# line in RSA: SUPERQ-ERROR 'Host:<fld1> - <dclass_counter1> messages idle'
	else if [logstash][msgparser][id] == "msgParserId41" {
		dissect {
			mapping => { "message" => "SUPERQ-ERROR 'Host:%{fld1} - %{dclass_counter1} messages idle'" }
			id => "msgParserId41"
			add_field => {
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "SUPERQ-UP" {
		# MESSAGE SUPERQ-UP:01
		# line in RSA: SUPERQ-UP 'Host:<fld1> - Super Queue Test { Passed. <info>' | Passed.' | Passed. '}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^SUPERQ\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+Super[\s]+Queue[\s]+Test[\s]+([\s]*Passed\.[\s]+(?<info>[^']*)'[\s]+|[\s]*Passed\.'[\s]+|[\s]*Passed\.[\s]+')$" }
				id => "message-SUPERQ-UP:01"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "SUPERQ-UP:01"
					"[rsa][message][id1]" => "SUPERQ-UP:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE SUPERQ-UP:02
		# line in RSA: SUPERQ-UP 'Host:<fld1> - Super Queue Count Test Passed. '
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "SUPERQ-UP 'Host:%{fld1} - Super Queue Count Test Passed. '" }
				id => "message-SUPERQ-UP:02"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "SUPERQ-UP:02"
					"[rsa][message][id1]" => "SUPERQ-UP:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId44
	# line in RSA: SYS-DISK-ERROR 'Host:<fld1> - /: <fld2> full. /usr: <fld3> full.'
	else if [logstash][msgparser][id] == "msgParserId44" {
		dissect {
			mapping => { "message" => "SYS-DISK-ERROR 'Host:%{fld1} - /: %{fld2} full. /usr: %{fld3} full.'" }
			id => "msgParserId44"
			add_field => {
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId45
	# line in RSA: SYS-DISK-UP 'Host:<fld1> - System Status Test - Disk { Passed.' | Passed. '}
	else if [logstash][msgparser][id] == "msgParserId45" {
		grok {
			match => { "message" => "^SYS\-DISK\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+System[\s]+Status[\s]+Test[\s]+\-[\s]+Disk[\s]+([\s]*Passed\.'[\s]+|[\s]*Passed\.[\s]+')$" }
			id => "msgParserId45"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId46
	# line in RSA: SYS-DNSHIJACK-UP 'Host:<fld1> - System Status Test - DNS Hijack { Passed.' | Passed. '}
	else if [logstash][msgparser][id] == "msgParserId46" {
		grok {
			match => { "message" => "^SYS\-DNSHIJACK\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+System[\s]+Status[\s]+Test[\s]+\-[\s]+DNS[\s]+Hijack[\s]+([\s]*Passed\.'[\s]+|[\s]*Passed\.[\s]+')$" }
			id => "msgParserId46"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId47
	# line in RSA: SYS-INODE-UP 'Host:<fld1> - System Status Test - Inode { Passed.' | Passed. '}
	else if [logstash][msgparser][id] == "msgParserId47" {
		grok {
			match => { "message" => "^SYS\-INODE\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+System[\s]+Status[\s]+Test[\s]+\-[\s]+Inode[\s]+([\s]*Passed\.'[\s]+|[\s]*Passed\.[\s]+')$" }
			id => "msgParserId47"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == "TOMCAT-UP" {
		# MESSAGE TOMCAT-UP:01
		# line in RSA: TOMCAT-UP 'Host:<fld1> - Web Admin JSP Test Passed. Host - <hostname>, Port - <network_port>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TOMCAT-UP 'Host:%{fld1} - Web Admin JSP Test Passed. Host - %{hostname}, Port - %{network_port}'" }
				id => "message-TOMCAT-UP:01"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "TOMCAT-UP:01"
					"[rsa][message][id1]" => "TOMCAT-UP:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE TOMCAT-UP:02
		# line in RSA: TOMCAT-UP 'Host:<fld1> - URQ Web Admin JSP Test Passed. Host - <hostname>, Port - <network_port>' 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "TOMCAT-UP 'Host:%{fld1} - URQ Web Admin JSP Test Passed. Host - %{hostname}, Port - %{network_port}'" }
				id => "message-TOMCAT-UP:02"
				add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
					"[event][id]" => "TOMCAT-UP:02"
					"[rsa][message][id1]" => "TOMCAT-UP:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	else if [logstash][msgparser][id] == "UPDATE-SUCCESS" {
		# MESSAGE UPDATE-SUCCESS:01
		# line in RSA: UPDATE-SUCCESS 'Host:<fld1> - <agent>. Downloaded successfully'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UPDATE-SUCCESS 'Host:%{fld1} - %{agent}. Downloaded successfully'" }
				id => "message-UPDATE-SUCCESS:01"
				add_field => {
				"ec_outcome" => "Success"
					"[event][id]" => "UPDATE-SUCCESS:01"
					"[rsa][message][id1]" => "UPDATE-SUCCESS:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE UPDATE-SUCCESS:02
		# line in RSA: UPDATE-SUCCESS 'Host:<fld1> - <agent>. Installed successfully'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "UPDATE-SUCCESS 'Host:%{fld1} - %{agent}. Installed successfully'" }
				id => "message-UPDATE-SUCCESS:02"
				add_field => {
				"ec_outcome" => "Success"
					"[event][id]" => "UPDATE-SUCCESS:02"
					"[rsa][message][id1]" => "UPDATE-SUCCESS:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId52
	# line in RSA: VFQ-ERROR 'Host:<fld1> - <dclass_counter1> messages idle'
	else if [logstash][msgparser][id] == "msgParserId52" {
		dissect {
			mapping => { "message" => "VFQ-ERROR 'Host:%{fld1} - %{dclass_counter1} messages idle'" }
			id => "msgParserId52"
			add_field => {
				"ec_outcome" => "Error"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId53
	# line in RSA: VFQ-UP 'Host:<fld1> - Content Extraction Queue Test { Passed. <info>' | Passed.' }
	else if [logstash][msgparser][id] == "msgParserId53" {
		grok {
			match => { "message" => "^VFQ\-UP[\s]+'Host:(?<fld1>[^\s]*)[\s]+\-[\s]+Content[\s]+Extraction[\s]+Queue[\s]+Test[\s]+([\s]*Passed\.[\s]+(?<info>[^']*)'[\s]+|[\s]*Passed\.'[\s]+)$" }
			id => "msgParserId53"
			add_field => {
				"ec_outcome" => "Success"
				"disposition" => "Passed"
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId54
	# line in RSA: <fld1> (<saddr>),<fld2> <fld3> <fld4>,<fld5>,<fld6>,SCM_HEARTBEAT i.now=<fld7>
	else if [logstash][msgparser][id] == "msgParserId54" {
		dissect {
			mapping => { "message" => "%{fld1} (%{saddr}),%{fld2} %{fld3} %{fld4},%{fld5},%{fld6},SCM_HEARTBEAT i.now=%{fld7}" }
			id => "msgParserId54"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	else if [logstash][msgparser][id] == ":" {
		# MESSAGE :01
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event='<event_type>', SMTP Messages Received='<fld4>', SMTP Total Detections='<fld5>', Sender Connection Detections='<fld6>', Deny Sender Detections='<fld7>', RBL Detections='<fld8>', BATV Detections='<fld9>', SPF Detections='<fld10>', Recipient Detections='<fld11>', Anti Relay Detections='<fld12>', Grey Listing Detections='<fld13>', LDAP Recipient Detections='<fld14>', Directoty Harvesting Detections='<fld15>', Content Detections='<fld16>', GTI Message Reputation Detections='<fld17>', Sender ID Detections='<fld18>', DKIM Detections='<fld19>', Spam Detections ='<fld20>', Phish Detections ='<fld21>', Mail Filtering Detections ='<fld22>', Mail Size Filtering Detections ='<fld23>', File Filtering Detections ='<fld24>', Compliance Detections ='<fld25>', Image Filtering Detections ='<fld26>', DLP Detections ='<fld27>', Virus Detected ='<fld28>', Pups Detected ='<fld29>', Packers Detected ='<fld30>', POP3 Messages Received='<fld31>', POP3 Total Detections='<fld32>', Spam Detections ='<fld33>', Phish Detections ='<fld34>', Mail Size Filtering Detections ='<fld35>', Image Filtering Detections ='<fld36>', Virus Detected ='<fld37>', Pups Detected ='<fld38>', Packers Detected ='<fld39>'
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld40} : Application=%{application}, Event='%{event_type}', SMTP Messages Received='%{fld4}', SMTP Total Detections='%{fld5}', Sender Connection Detections='%{fld6}', Deny Sender Detections='%{fld7}', RBL Detections='%{fld8}', BATV Detections='%{fld9}', SPF Detections='%{fld10}', Recipient Detections='%{fld11}', Anti Relay Detections='%{fld12}', Grey Listing Detections='%{fld13}', LDAP Recipient Detections='%{fld14}', Directoty Harvesting Detections='%{fld15}', Content Detections='%{fld16}', GTI Message Reputation Detections='%{fld17}', Sender ID Detections='%{fld18}', DKIM Detections='%{fld19}', Spam Detections ='%{fld20}', Phish Detections ='%{fld21}', Mail Filtering Detections ='%{fld22}', Mail Size Filtering Detections ='%{fld23}', File Filtering Detections ='%{fld24}', Compliance Detections ='%{fld25}', Image Filtering Detections ='%{fld26}', DLP Detections ='%{fld27}', Virus Detected ='%{fld28}', Pups Detected ='%{fld29}', Packers Detected ='%{fld30}', POP3 Messages Received='%{fld31}', POP3 Total Detections='%{fld32}', Spam Detections ='%{fld33}', Phish Detections ='%{fld34}', Mail Size Filtering Detections ='%{fld35}', Image Filtering Detections ='%{fld36}', Virus Detected ='%{fld37}', Pups Detected ='%{fld38}', Packers Detected ='%{fld39}'" }
				id => "message-:01"
				add_field => {
					"[event][id]" => ":01"
					"[rsa][message][id1]" => ":01"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :02
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, {from | From}=<from>, size=<filename_size>, source=(<fld5>), rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<<<to>>, VHost=<fld41>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', {relay=(<shost>)|relay=<fld18>(<shost>)}, {status='<result>', subject='<subject>',|status='<result>'}, attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+(from[\s]+|[\s]*From)=(?<from>[^,]*),[\s]+size=(?<filename_size>[^,]*),[\s]+source=\((?<fld5>[^\)]*)\),[\s]+rhdr_ip=\((?<fld6>[^\)]*)\),[\s]+nrcpts=(?<dclass_counter2>[^,]*),[\s]+to=<(?<to>[^>]*)>,[\s]+VHost=(?<fld41>[^,]*),[\s]+virtual_host=(?<hostname>[^,]*),[\s]+msgid=(?<id>[^,]*),[\s]+orig_msgid='(?<id1>[^']*)',[\s]+(relay=\((?<shost>[^\)]*)\)|relay=(?<fld18>[^\(]*)\((?<shost>[^\)]*)\)),[\s]+(status='(?<result>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)'),[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'$" }
				id => "message-:02"
				add_field => {
					"[event][id]" => ":02"
					"[rsa][message][id1]" => ":02"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :03
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event='<event_type>', {from | From}=<<<from>>, size=<filename_size>, source=(<saddr>), rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<<<to>>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', relay={<fld9>(<shost>),|(<shost>),} {status='<result>', received-email-over-tls='<fld54>', sent-email-over-tls='<fld13>', encryption-type='<encryption_type>', subject='<subject>',|status='<result>', received-email-over-tls='<fld54>', sent-email-over-tls='<fld13>', subject='<subject>',|status='<result>', sent-email-over-tls='<fld13>', encryption-type='<encryption_type>', subject='<subject>',|status='<result>', received-email-over-tls='<fld54>', encryption-type='<encryption_type>', subject='<subject>',|status='<result>', sent-email-over-tls='<fld13>', encryption-type='<encryption_type>',|status='<result>', sent-email-over-tls='<fld13>', subject='<subject>',|status='<result>', encryption-type='<encryption_type>', subject='<subject>',|status='<result>', received-email-over-tls='<fld54>', subject='<subject>',|status='<result>', subject='<subject>',} {original-sender='<fld11>', original-subject='<fld12>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'| attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'|original-sender='<fld16>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event='(?<event_type>[^']*)',[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+size=(?<filename_size>[^,]*),[\s]+source=\((?<saddr>[^\)]*)\),[\s]+rhdr_ip=\((?<fld6>[^\)]*)\),[\s]+nrcpts=(?<dclass_counter2>[^,]*),[\s]+to=<(?<to>[^>]*)>,[\s]+virtual_host=(?<hostname>[^,]*),[\s]+msgid=(?<id>[^,]*),[\s]+orig_msgid='(?<id1>[^']*)',[\s]+relay=((?<fld9>[^\(]*)\((?<shost>[^\)]*)\),|\((?<shost>[^\)]*)\),)[\s]+(status='(?<result>[^']*)',[\s]+received\-email\-over\-tls='(?<fld54>[^']*)',[\s]+sent\-email\-over\-tls='(?<fld13>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)',[\s]+received\-email\-over\-tls='(?<fld54>[^']*)',[\s]+sent\-email\-over\-tls='(?<fld13>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)',[\s]+sent\-email\-over\-tls='(?<fld13>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)',[\s]+received\-email\-over\-tls='(?<fld54>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)',[\s]+sent\-email\-over\-tls='(?<fld13>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',|status='(?<result>[^']*)',[\s]+sent\-email\-over\-tls='(?<fld13>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)',[\s]+received\-email\-over\-tls='(?<fld54>[^']*)',[\s]+subject='(?<subject>[^']*)',|status='(?<result>[^']*)',[\s]+subject='(?<subject>[^']*)',)[\s]+(original\-sender='(?<fld11>[^']*)',[\s]+original\-subject='(?<fld12>[^']*)',[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'|[\s]*attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'|original\-sender='(?<fld16>[^']*)',[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)')$" }
				id => "message-:03"
				add_field => {
					"[event][id]" => ":03"
					"[rsa][message][id1]" => ":03"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :26
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event='<event_type>', {from | From}=<<<from>>, size=<filename_size>, source={(<saddr>)|<fld12>(<saddr>)}, rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<<<to>>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', relay=(<shost>), status='<result>', {received-email-over-tls='<fld51>', sent-email-over-tls='<fld53>' | received-email-over-tls='<fld51>'}, encryption-type='<encryption_type>', subject='<subject>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event='(?<event_type>[^']*)',[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+size=(?<filename_size>[^,]*),[\s]+source=(\((?<saddr>[^\)]*)\)|(?<fld12>[^\(]*)\((?<saddr>[^\)]*)\)),[\s]+rhdr_ip=\((?<fld6>[^\)]*)\),[\s]+nrcpts=(?<dclass_counter2>[^,]*),[\s]+to=<(?<to>[^>]*)>,[\s]+virtual_host=(?<hostname>[^,]*),[\s]+msgid=(?<id>[^,]*),[\s]+orig_msgid='(?<id1>[^']*)',[\s]+relay=\((?<shost>[^\)]*)\),[\s]+status='(?<result>[^']*)',[\s]+(received\-email\-over\-tls='(?<fld51>[^']*)',[\s]+sent\-email\-over\-tls='(?<fld53>[^']*)'[\s]+|[\s]*received\-email\-over\-tls='(?<fld51>[^']*)'),[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+subject='(?<subject>[^']*)',[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'$" }
				id => "message-:26"
				add_field => {
				"ec_subject" => "Mailbox"
				"ec_activity" => "Send"
				"ec_theme" => "Communication"
				"ec_outcome" => "Success"
					"[event][id]" => ":26"
					"[rsa][message][id1]" => ":26"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :04
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event='<event_type>', {from | From}=<<<from>>, size=<filename_size>, source={(<saddr>)|<fld12>(<saddr>)}, rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<<<to>>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', relay=(<shost>), {status='<result>', received-email-over-tls='<fld54>', |status='<result>',} subject='<subject>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event='(?<event_type>[^']*)',[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+size=(?<filename_size>[^,]*),[\s]+source=(\((?<saddr>[^\)]*)\)|(?<fld12>[^\(]*)\((?<saddr>[^\)]*)\)),[\s]+rhdr_ip=\((?<fld6>[^\)]*)\),[\s]+nrcpts=(?<dclass_counter2>[^,]*),[\s]+to=<(?<to>[^>]*)>,[\s]+virtual_host=(?<hostname>[^,]*),[\s]+msgid=(?<id>[^,]*),[\s]+orig_msgid='(?<id1>[^']*)',[\s]+relay=\((?<shost>[^\)]*)\),[\s]+(status='(?<result>[^']*)',[\s]+received\-email\-over\-tls='(?<fld54>[^']*)',[\s]+|status='(?<result>[^']*)',)[\s]+subject='(?<subject>[^']*)',[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'$" }
				id => "message-:04"
				add_field => {
					"[event][id]" => ":04"
					"[rsa][message][id1]" => ":04"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :05
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, {value=<fld5>, rule=<fld6>, source=(<saddr>), msgid=<id>, convid=<fld8>| to=<<<to>>, source=(<saddr>), msgid=<id>, convid=<fld8>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+(value=(?<fld5>[^,]*),[\s]+rule=(?<fld6>[^,]*),[\s]+source=\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+convid=(?<fld8>.*)|[\s]*to=<(?<to>[^>]*)>,[\s]+source=\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+convid=(?<fld8>.*))$" }
				id => "message-:05"
				add_field => {
					"[event][id]" => ":05"
					"[rsa][message][id1]" => ":05"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :06
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event=<event_type>, {status=<result>, From=<<<from>>, to=<<<to>>, source=<fld7>(<saddr>)| status=<result>, source=(<saddr>)}, msgid=<id>, convid=<fld6>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+(status=(?<result>[^,]*),[\s]+From=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld7>[^\(]*)\((?<saddr>[^\)]*)\)|[\s]*status=(?<result>[^,]*),[\s]+source=\((?<saddr>[^\)]*)\)),[\s]+msgid=(?<id>[^,]*),[\s]+convid=(?<fld6>.*)$" }
				id => "message-:06"
				add_field => {
					"[event][id]" => ":06"
					"[rsa][message][id1]" => ":06"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :07
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=<fld5>(<saddr>), msgid=<id>, contentrule=<fld6>, filename=[<filename>], scan-identity-name=<fld7>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld5>[^\(]*)\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+contentrule=(?<fld6>[^,]*),[\s]+filename=\[(?<filename>[^\]]*)\],[\s]+scan\-identity\-name=(?<fld7>.*)$" }
				id => "message-:07"
				add_field => {
					"[event][id]" => ":07"
					"[rsa][message][id1]" => ":07"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :08
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, From=<<<from>>, to=<<<to>>, source=(<saddr>), msgid=<id>, spamscore=<reputation_num>, spamthreshold=<dclass_counter1>, spamrules=<rulename>, GTI message reputation score=<fld9>, GTI message ip reputation status code=<fld10>, GTI message hash length=<fld11>, {GTI message hash=<fld12>, scan-identity-name=<event_source>| GTI message hash=<fld12>}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+From=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+spamscore=(?<reputation_num>[^,]*),[\s]+spamthreshold=(?<dclass_counter1>[^,]*),[\s]+spamrules=(?<rulename>[^,]*),[\s]+GTI[\s]+message[\s]+reputation[\s]+score=(?<fld9>[^,]*),[\s]+GTI[\s]+message[\s]+ip[\s]+reputation[\s]+status[\s]+code=(?<fld10>[^,]*),[\s]+GTI[\s]+message[\s]+hash[\s]+length=(?<fld11>[^,]*),[\s]+(GTI[\s]+message[\s]+hash=(?<fld12>[^,]*),[\s]+scan\-identity\-name=(?<event_source>.*)|[\s]*GTI[\s]+message[\s]+hash=(?<fld12>.*))$" }
				id => "message-:08"
				add_field => {
					"[event][id]" => ":08"
					"[rsa][message][id1]" => ":08"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :09
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=<fld5>(<saddr>), msgid=<id>, rule=<fld6>.  Cause of corruption: <fld7>, filename=<filename>, scan-identity-name=<event_source>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld5>[^\(]*)\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+rule=(?<fld6>[^\.]*)\.[\s]+Cause[\s]+of[\s]+corruption:[\s]+(?<fld7>[^,]*),[\s]+filename=(?<filename>[^,]*),[\s]+scan\-identity\-name=(?<event_source>.*)$" }
				id => "message-:09"
				add_field => {
					"[event][id]" => ":09"
					"[rsa][message][id1]" => ":09"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :10
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=(<saddr>), msgid=<id>, spamscore=<reputation_num>, spamthreshold=<dclass_counter1>, spamrules=<rulename>, scan-identity-name=<event_source>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+spamscore=(?<reputation_num>[^,]*),[\s]+spamthreshold=(?<dclass_counter1>[^,]*),[\s]+spamrules=(?<rulename>[^,]*),[\s]+scan\-identity\-name=(?<event_source>.*)$" }
				id => "message-:10"
				add_field => {
					"[event][id]" => ":10"
					"[rsa][message][id1]" => ":10"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :11
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=(<saddr>), msgid=<id>, spamscore=<reputation_num>, spamthreshold=<dclass_counter1>, spamrules=<rulename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+spamscore=(?<reputation_num>[^,]*),[\s]+spamthreshold=(?<dclass_counter1>[^,]*),[\s]+spamrules=(?<rulename>.*)$" }
				id => "message-:11"
				add_field => {
					"[event][id]" => ":11"
					"[rsa][message][id1]" => ":11"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :12
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=<fld6>(<saddr>), msgid=<id>, spamscore=<reputation_num>, spamthreshold=<dclass_counter1>, spamrules=<rulename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld6>[^\(]*)\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+spamscore=(?<reputation_num>[^,]*),[\s]+spamthreshold=(?<dclass_counter1>[^,]*),[\s]+spamrules=(?<rulename>.*)$" }
				id => "message-:12"
				add_field => {
					"[event][id]" => ":12"
					"[rsa][message][id1]" => ":12"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :13
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=(<saddr>), msgid=<id>, contentrule=<fld6>, filename=[<filename>]
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+contentrule=(?<fld6>[^,]*),[\s]+filename=\[(?<filename>[^\]]*)\]$" }
				id => "message-:13"
				add_field => {
					"[event][id]" => ":13"
					"[rsa][message][id1]" => ":13"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :14
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=<fld6>(<saddr>), msgid=<id>, {contentrule=<fld7>| rule=<fld7>}, filename=<filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld6>[^\(]*)\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+(contentrule=(?<fld7>[^,]*)|[\s]*rule=(?<fld7>[^,]*)),[\s]+filename=(?<filename>.*)$" }
				id => "message-:14"
				add_field => {
					"[event][id]" => ":14"
					"[rsa][message][id1]" => ":14"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :15
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event='<event_type>', {from | From}=<<<from>>, size=<filename_size>, source=(<saddr>), rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<to>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', relay=(<shost>), status='<result>', received-email-over-tls='<fld10>'
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event='(?<event_type>[^']*)',[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+size=(?<filename_size>[^,]*),[\s]+source=\((?<saddr>[^\)]*)\),[\s]+rhdr_ip=\((?<fld6>[^\)]*)\),[\s]+nrcpts=(?<dclass_counter2>[^,]*),[\s]+to=(?<to>[^,]*),[\s]+virtual_host=(?<hostname>[^,]*),[\s]+msgid=(?<id>[^,]*),[\s]+orig_msgid='(?<id1>[^']*)',[\s]+relay=\((?<shost>[^\)]*)\),[\s]+status='(?<result>[^']*)',[\s]+received\-email\-over\-tls='(?<fld10>[^']*)'$" }
				id => "message-:15"
				add_field => {
					"[event][id]" => ":15"
					"[rsa][message][id1]" => ":15"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :16
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=<fld6>(<saddr>), msgid=<id>, filename=<filename>, IA Score=<fld7>, IA Threshold=<fld8>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld6>[^\(]*)\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+filename=(?<filename>[^,]*),[\s]+IA[\s]+Score=(?<fld7>[^,]*),[\s]+IA[\s]+Threshold=(?<fld8>.*)$" }
				id => "message-:16"
				add_field => {
					"[event][id]" => ":16"
					"[rsa][message][id1]" => ":16"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :17
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event=<event_type>, status=<result>, {from | From}=<<<from>>, to=<<<to>>, source=<fld6>(<saddr>), msgid=<id>, virusname=<virusname>, filename=<filename>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+status=(?<result>[^,]*),[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld6>[^\(]*)\((?<saddr>[^\)]*)\),[\s]+msgid=(?<id>[^,]*),[\s]+virusname=(?<virusname>[^,]*),[\s]+filename=(?<filename>.*)$" }
				id => "message-:17"
				add_field => {
					"[event][id]" => ":17"
					"[rsa][message][id1]" => ":17"
					"[event][categoryid]" => "1003010000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :18
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event='<event_type>', {from | From}=<<<from>>, size=<filename_size>, source={(<saddr>)|<fld12>(<saddr>)}, rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<<<to>>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', relay=(<shost>), status='<result>', sent-email-over-tls='<fld10>', encryption-type='<encryption_type>', subject='<subject>', attachment(s)=<attachment>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event='(?<event_type>[^']*)',[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+size=(?<filename_size>[^,]*),[\s]+source=(\((?<saddr>[^\)]*)\)|(?<fld12>[^\(]*)\((?<saddr>[^\)]*)\)),[\s]+rhdr_ip=\((?<fld6>[^\)]*)\),[\s]+nrcpts=(?<dclass_counter2>[^,]*),[\s]+to=<(?<to>[^>]*)>,[\s]+virtual_host=(?<hostname>[^,]*),[\s]+msgid=(?<id>[^,]*),[\s]+orig_msgid='(?<id1>[^']*)',[\s]+relay=\((?<shost>[^\)]*)\),[\s]+status='(?<result>[^']*)',[\s]+sent\-email\-over\-tls='(?<fld10>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+subject='(?<subject>[^']*)',[\s]+attachment\(s\)=(?<attachment>.*)$" }
				id => "message-:18"
				add_field => {
					"[event][id]" => ":18"
					"[rsa][message][id1]" => ":18"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :19
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event='<event_type>', {from | From}=<<<from>>, size=<filename_size>, source={(<saddr>)|<fld12>(<saddr>)}, rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<to>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', relay=(<shost>), {status='<result>', encryption-type='<encryption_type>', subject='<subject>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'|status='<result>', encryption-type='<encryption_type>', original-sender=<fld11>, attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'|status='<result>', subject='<subject>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'|status='<result>', encryption-type='<encryption_type>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'|status='<result>'}
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld40>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event='(?<event_type>[^']*)',[\s]+(from[\s]+|[\s]*From)=<(?<from>[^>]*)>,[\s]+size=(?<filename_size>[^,]*),[\s]+source=(\((?<saddr>[^\)]*)\)|(?<fld12>[^\(]*)\((?<saddr>[^\)]*)\)),[\s]+rhdr_ip=\((?<fld6>[^\)]*)\),[\s]+nrcpts=(?<dclass_counter2>[^,]*),[\s]+to=(?<to>[^,]*),[\s]+virtual_host=(?<hostname>[^,]*),[\s]+msgid=(?<id>[^,]*),[\s]+orig_msgid='(?<id1>[^']*)',[\s]+relay=\((?<shost>[^\)]*)\),[\s]+(status='(?<result>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+subject='(?<subject>[^']*)',[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'|status='(?<result>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+original\-sender=(?<fld11>[^,]*),[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'|status='(?<result>[^']*)',[\s]+subject='(?<subject>[^']*)',[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'|status='(?<result>[^']*)',[\s]+encryption\-type='(?<encryption_type>[^']*)',[\s]+attachment\(s\)='(?<attachment>[^']*)',[\s]+number\-attachment\(s\)='(?<dclass_counter1>[^']*)'|status='(?<result>[^']*)')$" }
				id => "message-:19"
				add_field => {
					"[event][id]" => ":19"
					"[rsa][message][id1]" => ":19"
					"[event][categoryid]" => "1901000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :20
		# line in RSA: <fld1> <fld2> <fld3> <fld40> : Application=<application>, Event='<event_type>', SMTP Messages Received='<fld4>', SMTP Total Detections='<fld5>', Sender Connection Detections='<fld6>', Deny Sender Detections='<fld7>', RBL Detections='<fld8>', BATV Detections='<fld9>', SPF Detections='<fld10>', Recipient Detections='<fld11>', Anti Relay Detections='<fld12>', Grey Listing Detections='<fld13>', LDAP Recipient Detections='<fld14>', Directory Harvesting Detections='<fld15>', Content Detections='<fld16>', GTI Message Reputation Detections='<fld17>', Sender ID Detections='<fld18>', DKIM Detections='<fld19>', Spam Detections ='<fld20>', Phish Detections ='<fld21>', Mail Filtering Detections ='<fld22>', Mail Size Filtering Detections ='<fld23>', File Filtering Detections ='<fld24>', Compliance Detections ='<fld25>', Image Filtering Detections ='<fld26>', DLP Detections ='<fld27>', Virus Detected ='<fld28>', Pups Detected ='<fld29>', Packers Detected ='<fld30>', Mail URL Detected ='<fld31>', Max Mail URLs ='<fld32>', ClickProtect URLs ='<fld33>', ClickProtect Not Possible ='<fld34>', Unscannable Content Detected ='<fld35>', POP3 Messages Received='<fld36>', POP3 Total Detections='<fld37>', Spam Detections ='<fld38>', <fld39> 
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld40} : Application=%{application}, Event='%{event_type}', SMTP Messages Received='%{fld4}', SMTP Total Detections='%{fld5}', Sender Connection Detections='%{fld6}', Deny Sender Detections='%{fld7}', RBL Detections='%{fld8}', BATV Detections='%{fld9}', SPF Detections='%{fld10}', Recipient Detections='%{fld11}', Anti Relay Detections='%{fld12}', Grey Listing Detections='%{fld13}', LDAP Recipient Detections='%{fld14}', Directory Harvesting Detections='%{fld15}', Content Detections='%{fld16}', GTI Message Reputation Detections='%{fld17}', Sender ID Detections='%{fld18}', DKIM Detections='%{fld19}', Spam Detections ='%{fld20}', Phish Detections ='%{fld21}', Mail Filtering Detections ='%{fld22}', Mail Size Filtering Detections ='%{fld23}', File Filtering Detections ='%{fld24}', Compliance Detections ='%{fld25}', Image Filtering Detections ='%{fld26}', DLP Detections ='%{fld27}', Virus Detected ='%{fld28}', Pups Detected ='%{fld29}', Packers Detected ='%{fld30}', Mail URL Detected ='%{fld31}', Max Mail URLs ='%{fld32}', ClickProtect URLs ='%{fld33}', ClickProtect Not Possible ='%{fld34}', Unscannable Content Detected ='%{fld35}', POP3 Messages Received='%{fld36}', POP3 Total Detections='%{fld37}', Spam Detections ='%{fld38}', %{fld39}" }
				id => "message-:20"
				add_field => {
					"[event][id]" => ":20"
					"[rsa][message][id1]" => ":20"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :21
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <fld5>"Summary": <fld43>"Event_Type": "<event_type>","MISversion": "<fld6>","SUMversion": "<fld7>","OSversion": "<version>","fileId": "<fld8>","Parent MD5": "<fld14>","ATD IP": "<fld9>","Src IP": "<saddr>","Dst IP": "<daddr>","TaskId": "<fld10>","JobId": "<fld11>","JSONversion": "<fld12>","hasDynamicAnalysis": "<fld13>","Subject": <fld44>"Name": "<fld15>","Type": "<obj_type>","md5": "<checksum>","sha-1": "<fld16>","size": "<filename_size>","Timestamp": "<event_time_string>","parent_archive": "<fld17>"},"Selectors": [<fld45>"Engine": "<fld18>","MalwareName": "<threat_name>","Severity": "<severity>"}],"Verdict": <fld46>"Severity": "<fld19>","Description": "<event_description>"},"Stats": [<fld47>"ID": "<fld20>","Category": "<category>","Severity": "<fld21>"},<fld48>"ID": "<fld22>","Category": "<fld23>","Severity": "<fld24>"},<fld49>"ID": "<fld25>","Category": "<fld26>","Severity": "<fld27>"},<fld50>"ID": "<fld28>","Category": "<fld29>","Severity": "<fld30>"},<fld51>"ID": "<fld31>","Category": "<fld32>","Severity": "<fld33>"},<fld52>"ID": "<fld34>","Category": "<fld35>","Severity": "<fld36>"},<fld53>"ID": "<fld37>","Category": "<fld38>","Severity": "<fld39>"}],"Behavior": ["<fld40>","<fld41>"]}}
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{fld5}\"Summary\": %{fld43}\"Event_Type\": \"%{event_type}\",\"MISversion\": \"%{fld6}\",\"SUMversion\": \"%{fld7}\",\"OSversion\": \"%{version}\",\"fileId\": \"%{fld8}\",\"Parent MD5\": \"%{fld14}\",\"ATD IP\": \"%{fld9}\",\"Src IP\": \"%{saddr}\",\"Dst IP\": \"%{daddr}\",\"TaskId\": \"%{fld10}\",\"JobId\": \"%{fld11}\",\"JSONversion\": \"%{fld12}\",\"hasDynamicAnalysis\": \"%{fld13}\",\"Subject\": %{fld44}\"Name\": \"%{fld15}\",\"Type\": \"%{obj_type}\",\"md5\": \"%{checksum}\",\"sha-1\": \"%{fld16}\",\"size\": \"%{filename_size}\",\"Timestamp\": \"%{event_time_string}\",\"parent_archive\": \"%{fld17}\"},\"Selectors\": [%{fld45}\"Engine\": \"%{fld18}\",\"MalwareName\": \"%{threat_name}\",\"Severity\": \"%{severity}\"}],\"Verdict\": %{fld46}\"Severity\": \"%{fld19}\",\"Description\": \"%{event_description}\"},\"Stats\": [%{fld47}\"ID\": \"%{fld20}\",\"Category\": \"%{category}\",\"Severity\": \"%{fld21}\"},%{fld48}\"ID\": \"%{fld22}\",\"Category\": \"%{fld23}\",\"Severity\": \"%{fld24}\"},%{fld49}\"ID\": \"%{fld25}\",\"Category\": \"%{fld26}\",\"Severity\": \"%{fld27}\"},%{fld50}\"ID\": \"%{fld28}\",\"Category\": \"%{fld29}\",\"Severity\": \"%{fld30}\"},%{fld51}\"ID\": \"%{fld31}\",\"Category\": \"%{fld32}\",\"Severity\": \"%{fld33}\"},%{fld52}\"ID\": \"%{fld34}\",\"Category\": \"%{fld35}\",\"Severity\": \"%{fld36}\"},%{fld53}\"ID\": \"%{fld37}\",\"Category\": \"%{fld38}\",\"Severity\": \"%{fld39}\"}],\"Behavior\": [\"%{fld40}\",\"%{fld41}\"]}}" }
				id => "message-:21"
				add_field => {
					"[event][id]" => ":21"
					"[rsa][message][id1]" => ":21"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :22
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <fld5>"Summary": <fld43>"Event_Type": "<event_type>","MISversion": "<fld6>","SUMversion": "<fld7>","OSversion": "<version>","fileId": "<fld8>","Parent MD5": "<fld14>","ATD IP": "<fld9>","Src IP": "<saddr>","Dst IP": "<daddr>","TaskId": "<fld10>","JobId": "<fld11>","JSONversion": "<fld12>","hasDynamicAnalysis": "<fld13>","Subject": <fld44>"Name": "<fld15>","Type": "<obj_type>","md5": "<checksum>","sha-1": "<fld16>","size": "<filename_size>","Timestamp": "<event_time_string>","parent_archive": "<fld17>"},"Selectors": [<fld45>"Engine": "<fld18>","MalwareName": "<threat_name>","Severity": "<severity>"}],"Verdict": <fld46>"Severity": "<fld19>","Description": "<event_description>"}}}
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{fld5}\"Summary\": %{fld43}\"Event_Type\": \"%{event_type}\",\"MISversion\": \"%{fld6}\",\"SUMversion\": \"%{fld7}\",\"OSversion\": \"%{version}\",\"fileId\": \"%{fld8}\",\"Parent MD5\": \"%{fld14}\",\"ATD IP\": \"%{fld9}\",\"Src IP\": \"%{saddr}\",\"Dst IP\": \"%{daddr}\",\"TaskId\": \"%{fld10}\",\"JobId\": \"%{fld11}\",\"JSONversion\": \"%{fld12}\",\"hasDynamicAnalysis\": \"%{fld13}\",\"Subject\": %{fld44}\"Name\": \"%{fld15}\",\"Type\": \"%{obj_type}\",\"md5\": \"%{checksum}\",\"sha-1\": \"%{fld16}\",\"size\": \"%{filename_size}\",\"Timestamp\": \"%{event_time_string}\",\"parent_archive\": \"%{fld17}\"},\"Selectors\": [%{fld45}\"Engine\": \"%{fld18}\",\"MalwareName\": \"%{threat_name}\",\"Severity\": \"%{severity}\"}],\"Verdict\": %{fld46}\"Severity\": \"%{fld19}\",\"Description\": \"%{event_description}\"}}}" }
				id => "message-:22"
				add_field => {
					"[event][id]" => ":22"
					"[rsa][message][id1]" => ":22"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :23
		# line in RSA: <fld1> <fld2> <fld3> <fld4> <fld5>"Summary": <fld43>"Event_Type": "<event_type>","fileId": "<fld8>","ATD IP": "<fld9>","JobId": <fld11>,"TaskId": <fld10>,"Subject": <fld44>"Name": "<filename>","MD5": "<checksum>","Timestamp": "<event_time_string>","Type": "<obj_type>","Size": <filename_size>},"Verdict": <fld46>"Severity": <severity>,"Description": "<event_description>"}}}
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} %{fld3} %{fld4} %{fld5}\"Summary\": %{fld43}\"Event_Type\": \"%{event_type}\",\"fileId\": \"%{fld8}\",\"ATD IP\": \"%{fld9}\",\"JobId\": %{fld11},\"TaskId\": %{fld10},\"Subject\": %{fld44}\"Name\": \"%{filename}\",\"MD5\": \"%{checksum}\",\"Timestamp\": \"%{event_time_string}\",\"Type\": \"%{obj_type}\",\"Size\": %{filename_size}},\"Verdict\": %{fld46}\"Severity\": %{severity},\"Description\": \"%{event_description}\"}}}" }
				id => "message-:23"
				add_field => {
					"[event][id]" => ":23"
					"[rsa][message][id1]" => ":23"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :24
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event=<event_type>, {status=<result>, From=<<<from>>, source=<fld7>(<saddr>)| status=<result>, source=(<saddr>)}, spf_query=<fld5>, spf_result_code=<fld6>, spf_result_text=<fld9>, spf_header=<fld8>, scan-identity-name=<policyname>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+(status=(?<result>[^,]*),[\s]+From=<(?<from>[^>]*)>,[\s]+source=(?<fld7>[^\(]*)\((?<saddr>[^\)]*)\)|[\s]*status=(?<result>[^,]*),[\s]+source=\((?<saddr>[^\)]*)\)),[\s]+spf_query=(?<fld5>[^,]*),[\s]+spf_result_code=(?<fld6>[^,]*),[\s]+spf_result_text=(?<fld9>[^,]*),[\s]+spf_header=(?<fld8>[^,]*),[\s]+scan\-identity\-name=(?<policyname>.*)$" }
				id => "message-:24"
				add_field => {
					"[event][id]" => ":24"
					"[rsa][message][id1]" => ":24"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :25
		# line in RSA: <fld1> <fld2> <fld3> <fld4> : Application=<application>, Event=<event_type>, {status=<result>, From=<<<from>>, to=<<<to>>, source=<fld7>(<saddr>)| status=<result>, From=<<<from>>, source=<fld7>(<saddr>)| status=<result>, source=(<saddr>)}, msgid=<id>, URLS='<url>', scan-identity-name=<policyname>
		if ![logstash][messagefound] {
			grok {
				match => { "message" => "^(?<fld1>[^\s]*)[\s]+(?<fld2>[^\s]*)[\s]+(?<fld3>[^\s]*)[\s]+(?<fld4>[^\s]*)[\s]+:[\s]+Application=(?<application>[^,]*),[\s]+Event=(?<event_type>[^,]*),[\s]+(status=(?<result>[^,]*),[\s]+From=<(?<from>[^>]*)>,[\s]+to=<(?<to>[^>]*)>,[\s]+source=(?<fld7>[^\(]*)\((?<saddr>[^\)]*)\)|[\s]*status=(?<result>[^,]*),[\s]+From=<(?<from>[^>]*)>,[\s]+source=(?<fld7>[^\(]*)\((?<saddr>[^\)]*)\)|[\s]*status=(?<result>[^,]*),[\s]+source=\((?<saddr>[^\)]*)\)),[\s]+msgid=(?<id>[^,]*),[\s]+URLS='(?<url>[^']*)',[\s]+scan\-identity\-name=(?<policyname>.*)$" }
				id => "message-:25"
				add_field => {
					"[event][id]" => ":25"
					"[rsa][message][id1]" => ":25"
					"[event][categoryid]" => "1603000000"
					"[logstash][fullDateTimeString]" => "%{fld1} %{fld2} %{fld3}"
					"[logstash][messagefound]" => true
				}
			}
			if [logstash][fullDateTimeString] {
				date { match => [ "[logstash][fullDateTimeString]", "MMM d H:m:s" ] }
			}
		}
		# MESSAGE :27
		# line in RSA: <fld1><fld2><fld3><fld4>: Application=<application>, Event='<event_type>', {from|From}=<<<from>>, size=<filename_size>, source=(<saddr>), rhdr_ip=(<fld6>), nrcpts=<dclass_counter2>, to=<<<to>>, virtual_host=<hostname>, msgid=<id>, orig_msgid='<id1>', relay={<fld9>(<shost>),|(<shost>),} status='<result>', sent-email-over-tls='<fld10>', {encryption-type='<encryption_type>', subject='<subject>', original-sender='<fld11>', original-subject='<fld12>', attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'|attachment(s)='<attachment>', number-attachment(s)='<dclass_counter1>'}
		# Parsing error: Couldn't parse because of 2 adjacent fields like <fld1><fld2>
	}
	else if [logstash][msgparser][id] == "scmgateway" {
		# MESSAGE scmgateway:07
		# line in RSA: <fld1> (<saddr>),<fld2> <fld3> UTC,<fld5>,<fld6>, [AV-DAT]
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr}),%{fld2} %{fld3} UTC,%{fld5},%{fld6}, [AV-DAT]" }
				id => "message-scmgateway:07"
				add_field => {
					"[event][id]" => "scmgateway:07"
					"[rsa][message][id1]" => "scmgateway:07"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE scmgateway:08
		# line in RSA: <fld1> (<saddr>),<fld2> <fld3> UTC,<fld4>,<fld5>, [SPAM-ENG] <fld6> [FILES] <filename>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr}),%{fld2} %{fld3} UTC,%{fld4},%{fld5}, [SPAM-ENG] %{fld6} [FILES] %{filename}" }
				id => "message-scmgateway:08"
				add_field => {
					"[event][id]" => "scmgateway:08"
					"[rsa][message][id1]" => "scmgateway:08"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE scmgateway:01
		# line in RSA: <fld1> (<saddr>)<fld2> <fld3> UTC<fld4> [AV-DAT] <fld5> [SOURCE-IP] <fld6> [USER-NAME] <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr})%{fld2} %{fld3} UTC%{fld4} [AV-DAT] %{fld5} [SOURCE-IP] %{fld6} [USER-NAME] %{username}" }
				id => "message-scmgateway:01"
				add_field => {
					"[event][id]" => "scmgateway:01"
					"[rsa][message][id1]" => "scmgateway:01"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE scmgateway:02
		# line in RSA: <fld1> (<saddr>)<fld2> <fld3> UTC<fld4> [PROTOCOL] <fld6>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr})%{fld2} %{fld3} UTC%{fld4} [PROTOCOL] %{fld6}" }
				id => "message-scmgateway:02"
				add_field => {
					"[event][id]" => "scmgateway:02"
					"[rsa][message][id1]" => "scmgateway:02"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE scmgateway:03
		# line in RSA: <fld1> (<saddr>)<fld2> <fld3> UTC<fld4> [SPAM-RULES] <fld5>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr})%{fld2} %{fld3} UTC%{fld4} [SPAM-RULES] %{fld5}" }
				id => "message-scmgateway:03"
				add_field => {
					"[event][id]" => "scmgateway:03"
					"[rsa][message][id1]" => "scmgateway:03"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE scmgateway:04
		# line in RSA: <fld1> (<saddr>)<fld2> <fld3> UTC<fld4> [SOURCE-IP] <fld5> [USER-NAME] <username>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr})%{fld2} %{fld3} UTC%{fld4} [SOURCE-IP] %{fld5} [USER-NAME] %{username}" }
				id => "message-scmgateway:04"
				add_field => {
					"[event][id]" => "scmgateway:04"
					"[rsa][message][id1]" => "scmgateway:04"
					"[event][categoryid]" => "1605020000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE scmgateway:05
		# line in RSA: <fld1> <fld2> (<fld3>)<fld4> <fld5> UTC<fld6>:<fld7> <event_description>,src-ip:<saddr>,id:<id>
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} %{fld2} (%{fld3})%{fld4} %{fld5} UTC%{fld6}:%{fld7} %{event_description},src-ip:%{saddr},id:%{id}" }
				id => "message-scmgateway:05"
				add_field => {
					"[event][id]" => "scmgateway:05"
					"[rsa][message][id1]" => "scmgateway:05"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
		# MESSAGE scmgateway:06
		# line in RSA: <fld1> (<saddr>)
		if ![logstash][messagefound] {
			dissect {
				mapping => { "message" => "%{fld1} (%{saddr})" }
				id => "message-scmgateway:06"
				add_field => {
					"[event][id]" => "scmgateway:06"
					"[rsa][message][id1]" => "scmgateway:06"
					"[event][categoryid]" => "1603000000"
					"[logstash][messagefound]" => true
				}
			}
		}
	}
	# PARSER msgParserId83
	# line in RSA: <fld1> (<saddr>)
	else if [logstash][msgparser][id] == "msgParserId83" {
		dissect {
			mapping => { "message" => "%{fld1} (%{saddr})" }
			id => "msgParserId83"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}
	# PARSER msgParserId91
	# line in RSA: <fld1> <fld2>
	else if [logstash][msgparser][id] == "msgParserId91" {
		dissect {
			mapping => { "message" => "%{fld1} %{fld2}" }
			id => "msgParserId91"
			add_field => {
				"[logstash][messagefound]" => true
			}
		}
	}


################## END OF MESSAGES ##################

# End of the filter block
}

# Enrich events using VALUEMAP
filter {
	translate {
		field => "[event_cat]"
		destination => "[event_cat_name]"
		dictionary => {
			"1207010100" => "Content.Email.Delivery.Success"
			"1207010200" => "Content.Email.Delivery.Error"
			"1207000000" => "Content.Email"
		}
		fallback => "Other.Default"
		override => true
	}
}
filter {
	translate {
		field => "[result]"
		destination => "[event_cat]"
		dictionary => {
			"Email Delivered" => "1207010100"
			"Email Rejected" => "1207010200"
			"Email Deferred" => "1207000000"
		}
		fallback => "1901000000"
		override => true
	}
}


output {
#	if [logstash][headerfound] and [logstash][messagefound] {
#		elasticsearch {
#			hosts => ["https://elasticxxxxxx"]
#			index => "%{[observer][product]}-%{+YYYY.MM.dd}"
#			user => "logstash"
#			password => "abc"	# Better use keystore, cf https://www.elastic.co/guide/en/logstash/master/keystore.html
#			manage_template => true
#			template => "es-mapping-v20_ironmailmsg.json"
#			template_name => "ironmail_template"
#			template_overwrite => true
#		}
#	} else {
#		# using a file output for logs that were not parsed correctly
#		# should you chose to send it to elasticsearch, please read https://discuss.elastic.co/t/latency-with-2-elasticsearch-systems/170074/2
#		file { path => "failed_logs-%{[observer][product]}-%{+YYYY-MM-dd}" }
#	}
	stdout {
		codec => rubydebug
	}
}
